//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.3
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: full_adder ()
//
module full_adder // "tb.dut_inst"
(
    input logic clk,
    input logic rstn,
    input logic a,
    input logic b,
    input logic carry_in,
    output logic sum,
    output logic carry_out
);

// Variables generated for SystemC signals
logic c1;
logic s1;
logic c2;
logic sum_next;

//------------------------------------------------------------------------------
// Clocked THREAD: prc_or (full_adder.h:37:3) 

// Thread-local variables
logic carry_out_next;
logic sum_next0;

// Next-state combinational logic
always_comb begin : prc_or_comb     // full_adder.h:37:3
    prc_or_func;
end
function void prc_or_func;
    carry_out_next = carry_out;
    sum_next0 = sum;
    carry_out_next = c1 | c2;
    sum_next0 = sum_next;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : prc_or_ff
    if ( ~rstn ) begin
    end
    else begin
        carry_out <= carry_out_next;
        sum <= sum_next0;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: prc_half_adder_1 (full_adder.h:47:3) 

// Thread-local variables
logic s1_next;
logic c1_next;

// Next-state combinational logic
always_comb begin : prc_half_adder_1_comb     // full_adder.h:47:3
    prc_half_adder_1_func;
end
function void prc_half_adder_1_func;
    logic TMP_0;
    logic a_1;
    logic b_1;
    logic s_nand;
    logic s_or;
    TMP_0 = 0;
    s_nand = 0;
    s_or = 0;
    c1_next = c1;
    s1_next = s1;
    a_1 = a; b_1 = b;
    // Call sum_() begin
    s_nand = !(a_1 & b_1);
    s_or = a_1 | b_1;
    TMP_0 = s_nand & s_or;
    // Call sum_() end
    s1_next = TMP_0;
    c1_next = a & b;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : prc_half_adder_1_ff
    if ( ~rstn ) begin
    end
    else begin
        s1 <= s1_next;
        c1 <= c1_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: prc_half_adder_2 (full_adder.h:56:3) 

// Thread-local variables
logic sum_next_next;
logic c2_next;

// Next-state combinational logic
always_comb begin : prc_half_adder_2_comb     // full_adder.h:56:3
    prc_half_adder_2_func;
end
function void prc_half_adder_2_func;
    logic TMP_0;
    logic a_1;
    logic b_1;
    logic s_nand;
    logic s_or;
    TMP_0 = 0;
    s_nand = 0;
    s_or = 0;
    c2_next = c2;
    sum_next_next = sum_next;
    a_1 = s1; b_1 = carry_in;
    // Call sum_() begin
    s_nand = !(a_1 & b_1);
    s_or = a_1 | b_1;
    TMP_0 = s_nand & s_or;
    // Call sum_() end
    sum_next_next = TMP_0;
    c2_next = s1 & carry_in;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : prc_half_adder_2_ff
    if ( ~rstn ) begin
    end
    else begin
        sum_next <= sum_next_next;
        c2 <= c2_next;
    end
end

endmodule


