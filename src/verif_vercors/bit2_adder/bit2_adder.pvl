class Bit2_adder { 
    Main m;
    boolean Cin, A1, A2, B1, B2;
    boolean S1, S2, Cout; 

    //Auxiliar variables to ha1 and fa1
    boolean s11, c11, cin_1d;
    boolean s1, c1;
    
    //Auxiliar variables to ha2 and fa2
    boolean s21, c21, c1_1d;
    boolean s2, c2;
  
    //Delay 2nd Inputs
    boolean a2_1d, a2_2d, b2_1d, b2_2d;
    //Delay 1st Output
    boolean s1_1d, s1_2d;
    
    //Auto-generated constructor:
    //Auto-generated specifications of the constructor Bit2_adder:
    ensures Perm(m, write) ** (m == m_param)
            ** Perm(Cin, write)    ** !Cin  
            ** Perm(A1, write)     ** !A1 
            ** Perm(A2, write)     ** !A2 
            ** Perm(B1, write)     ** !B1 
            ** Perm(B2, write)     ** !B2 
            ** Perm(S1, write)     ** !S1     
            ** Perm(S2, write)     ** !S2     
            ** Perm(Cout, write)   ** !Cout     
            ** Perm(s11, write)    ** !s11     
            ** Perm(c11, write)    ** !c11     
            ** Perm(cin_1d, write) ** !cin_1d     
            ** Perm(s1, write)     ** !s1     
            ** Perm(c1, write)     ** !c1     
            ** Perm(a2_1d, write)  ** !a2_1d     
            ** Perm(a2_2d, write)  ** !a2_2d     
            ** Perm(b2_1d, write)  ** !b2_1d     
            ** Perm(b2_2d, write)  ** !b2_2d     
            ** Perm(s1_1d, write)  ** !s1_1d     
            ** Perm(s1_2d, write)  ** !s1_2d     
            ** Perm(s21, write)    ** !s21     
            ** Perm(c21, write)    ** !c21     
            ** Perm(c1_1d, write)  ** !c1_1d     
            ** Perm(s2, write)     ** !s2     
            ** Perm(c2, write)     ** !c2    
            ;
    Bit2_adder(Main m_param){
        m = m_param;
        Cin    = false; 
        A1     = false; 
        A2     = false; 
        B1     = false; 
        B2     = false;  
        S1     = false;     
        S2     = false;     
        Cout   = false;     
        s11    = false;     
        c11    = false;     
        cin_1d = false;     
        s1     = false;     
        c1     = false;     
        a2_1d  = false;     
        a2_2d  = false;     
        b2_1d  = false;     
        b2_2d  = false;     
        s1_1d  = false;     
        s1_2d  = false;     
        s21    = false;     
        c21    = false;     
        c1_1d  = false;     
        s2     = false;     
        c2     = false;
    }

    context Perm(m, read) 
            ** (m != null) 
            ** held(m) 
            ** m.global_permission() 
            ** (m.adder == this) 
            ;
    ensures m.ha1_permission()
            ** s11 == (!(A1 && B1) && (A1 || B1))
            ** c11 == (A1 && B1)
            ** cin_1d == Cin
            ** a2_1d == A2
            ** b2_1d == B2;
    void ha_1(){
        s11 = !(A1 && B1) && (A1 || B1);
        c11 = (A1 && B1);
        cin_1d = Cin;
        a2_1d = A2;
        b2_1d = B2;
    }
    
    context Perm(m, read) 
            ** (m != null) 
            ** held(m) 
            ** m.global_permission()
            ** (m.adder == this) 
            ;
    ensures m.ha1_permission()
            ** m.fa1_permission()
            ** s1 == (!(s11 && cin_1d) && (s11 || cin_1d))
            ** c1 == (c11 || (s11 && cin_1d))
            ** a2_2d == a2_1d
            ** b2_2d == b2_1d;
    void fa_1(){
        s1 = !(s11 && cin_1d) && (s11 || cin_1d);
        c1 = (c11 || (s11 && cin_1d));
        a2_2d = a2_1d;
        b2_2d = b2_1d;
    }
    
    context Perm(m, read)
            ** (m != null) 
            ** held(m) 
            ** m.global_permission() 
            ** (m.adder == this) 
            ;    
    ensures m.ha1_permission()
            ** m.fa1_permission()
            ** m.ha2_permission()
            ** s21 == (!(a2_2d && b2_2d) && (a2_2d || b2_2d))
            ** c21 == (a2_2d && b2_2d)
            ** c1_1d == c1
            ** s1_1d == s1;
    void ha_2(){
        s21 = !(a2_2d && b2_2d) && (a2_2d || b2_2d);
        c21 = (a2_2d && b2_2d);
        c1_1d = c1;
        s1_1d = s1;
    }
    
    context Perm(m, read) 
            ** (m != null) 
            ** held(m) 
            ** m.global_permission() 
            ** (m.adder == this) 
            ;                
    ensures m.ha1_permission()
            ** m.fa1_permission()
            ** m.ha2_permission()
            ** m.fa2_permission()
            ** s2 == (!(s21 && c1_1d) && (s21 || c1_1d))
            ** c2 == (c21 || (s21 && c1_1d))
            ** s1_2d == s1_1d
            ** S1 == s1_2d
            ** S2 == s2
            ** Cout == c2;
    void fa_2(){
        s2 = !(s21 && c1_1d) && (s21 || c1_1d);
        c2 = (c21 || (s21 && c1_1d));
        s1_2d = s1_1d;

        S1 = s1_2d;
        S2 = s2;
        Cout = c2;
    }

    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder, read) 
            ** (m.adder == this) 
            ;
    void run(){
        int sum1;
        int sum2;

        lock m;

        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder == this) 
                ;
        while (true) {
            m.process_state = m.process_state[0 -> 0];
            m.event_state = m.event_state[0 -> 5];
            loop_invariant true 
                    ** Perm(m, read)  
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.adder == this) 
                    ;
            while (m.process_state[0] != -1 || m.event_state[0] != -2) {
                unlock m;
                lock m;
            }

            ha_1();            
            fa_1();
            ha_2(); 
            fa_2();

        }
        unlock m;
    }
}


class Main { 
    seq<int> process_state;
    seq<int> event_state;
    Bit2_adder adder;

    inline resource scheduler_permission_invariant() = true 
            ** Perm(process_state, write) ** |process_state| == 1 
            ** Perm(event_state, write) **   |event_state| == 1 
            ** (\forall int i = 0 .. |process_state|; ((({: process_state[i] :} == -1)) 
               || (((process_state[i] >= 0) && (process_state[i] < |event_state|))) ))
            ;

    inline resource ha1_permission() = true
            ** (adder.A1  == \old(adder.A1))
            ** (adder.B1  == \old(adder.B1))
            ** (adder.Cin == \old(adder.Cin))
            ** (adder.A2  == \old(adder.A2))
            ** (adder.B2  == \old(adder.B2))
            ;

    inline resource fa1_permission() = true
            ** (adder.c11    == \old(adder.c11))
            ** (adder.s11    == \old(adder.s11))
            ** (adder.cin_1d == \old(adder.cin_1d)) 
            ** (adder.a2_1d  == \old(adder.a2_1d))
            ** (adder.b2_1d  == \old(adder.b2_1d))
            ;

    inline resource ha2_permission() = true
            ** (adder.a2_2d == \old(adder.a2_2d))
            ** (adder.b2_2d == \old(adder.b2_2d))
            ** (adder.c1    == \old(adder.c1))
            ** (adder.s1    == \old(adder.s1))
            ;

    inline resource fa2_permission() = true
            ** (adder.c21   == \old(adder.c21))
            ** (adder.s21   == \old(adder.s21))
            ** (adder.c1_1d == \old(adder.c1_1d)) 
            ** (adder.s1_1d == \old(adder.s1_1d))
            ;

    inline resource global_permission() = true 
            ** scheduler_permission_invariant() 

            //bit2_adder
            ** Perm(adder, read) 
            ** (adder != null) 
            ** Perm(adder.Cin, write) 
            ** Perm(adder.A1, write) 
            ** Perm(adder.A2, write) 
            ** Perm(adder.B1, write) 
            ** Perm(adder.B2, write) 
            ** Perm(adder.S1, write) 
            ** Perm(adder.S2, write) 
            ** Perm(adder.Cout, write) 
            ** Perm(adder.s11, write) 
            ** Perm(adder.c11, write) 
            ** Perm(adder.cin_1d, write) 
            ** Perm(adder.s1, write) 
            ** Perm(adder.c1, write) 
            ** Perm(adder.a2_1d, write) 
            ** Perm(adder.a2_2d, write) 
            ** Perm(adder.b2_1d, write) 
            ** Perm(adder.b2_2d, write) 
            ** Perm(adder.s1_1d, write) 
            ** Perm(adder.s1_2d, write) 
            ** Perm(adder.s21, write) 
            ** Perm(adder.c21, write) 
            ** Perm(adder.c1_1d, write) 
            ** Perm(adder.s2, write) 
            ** Perm(adder.c2, write) 
            ** Perm(adder.m, read) 
            ;

    resource lock_invariant() = global_permission();
    
    
    ensures Perm(adder, read)
            ** adder != null
            ** Perm(adder.m, read)
            ** adder.m == this
            ;
    ensures idle(adder);
    Main(){
        process_state = [-1];
        event_state = [-3];

        adder = new Bit2_adder(this);
    }
    
    
    context Perm(adder, read)
            ** adder != null
            ** Perm(adder.m, read)
            ** adder.m == this
            ;
    context idle(adder);
    void main(){
        lock this;
        fork adder;
        unlock this;

        loop_invariant true ;
        while (true) {
            lock this;
            immediate_wakeup();
            reset_events_no_delta();
            if (process_state[0] != -1 ) {
                int min_advance = find_minimum_advance(event_state);
                if (min_advance == -1) {
                    min_advance = 0;
                }
                event_state = [event_state[0] < -1 ? -3 : event_state[0] - min_advance];
                wakeup_after_wait();
                reset_all_events();
            }
            unlock this;
        }
        fork adder;
    }
    
    //Auto-generated specifications of the function immediate_wakeup:
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == \old(process_state[0]))) ))) );
    void immediate_wakeup();
    
    //Auto-generated specifications of the function reset_events_no_delta:
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures ((((((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == -2)) ))) );
    ensures (((!(((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == \old(event_state[0]))) ))) );
    void reset_events_no_delta();
    
    //Auto-generated specifications of the function find_minimum_advance:
    requires (|vals| == 1);
    ensures ((((vals[0] < -1) || (\result <= vals[0]))) );
    ensures (((((vals[0] < -1)) ) ==> (\result == 0)) && ((((vals[0] >= -1)) ) ==> ((((vals[0] >= -1) && (\result == vals[0]))) )));
    pure int find_minimum_advance(seq<int> vals);
    
    //Auto-generated specifications of the function wakeup_after_wait:
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == \old(process_state[0]))) ))) );
    void wakeup_after_wait();
    
    //Auto-generated specifications of the function reset_all_events:
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures (((((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == -2)) ))) );
    ensures (((!((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == \old(event_state[0]))) ))) );
    void reset_all_events();
    
}

