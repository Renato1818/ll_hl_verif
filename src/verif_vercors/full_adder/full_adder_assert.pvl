class Full_adder { 
    Main m;
    boolean Cin, A1, B1;
    boolean S1, Cout;

    //Auxiliar variables to ha1 and fa1
    boolean s11, c11, cin_1d;
    

    ensures Perm(m, write) ** (m == m_param) 
            ** Perm(Cin, write)     ** !Cin  
            ** Perm(A1, write)      ** !A1 
            ** Perm(B1, write)      ** !B1  
            ** Perm(S1, write)      ** !S1  
            ** Perm(Cout, write)    ** !Cout 
            ** Perm(s11, write)     ** !s11
            ** Perm(c11, write)     ** !c11
            ** Perm(cin_1d, write)  ** !cin_1d 
            ;
    Full_adder(Main m_param){
        m = m_param;
        Cin    = false; 
        A1     = false; 
        B1     = false; 
        S1     = false; 
        Cout   = false; 
        s11    = false; 
        c11    = false; 
        cin_1d = false;
    }
    
    
    context Perm(m, read) 
            ** (m != null)
            ** held(m) 
            ** m.global_permission() 
            ** (m.adder == this) 
            ;
    ensures (A1 == \old(A1))
            && (B1 == \old(B1))
            && (Cin == \old(Cin));
    ensures s11 == (!(A1 && B1) && (A1 || B1))
            && c11 == (A1 && B1)
            && cin_1d == Cin;
    void ha_1(){
        s11 = !(A1 && B1) && (A1 || B1);
        c11 = (A1 && B1);
        cin_1d = Cin;
    }
    

    context Perm(m, read) 
            ** (m != null)
            ** held(m) 
            ** m.global_permission() 
            ** (m.adder == this) 
            ;
    ensures    (c11 == \old(c11))
            && (s11 == \old(s11))
            && (cin_1d == \old(cin_1d)) ;
    ensures    (A1 == \old(A1))
            && (B1 == \old(B1))
            && (Cin == \old(Cin)) ;
    ensures S1 == (!(s11 && cin_1d) && (s11 || cin_1d))
            ** Cout == (c11 || (s11 && cin_1d));
    void fa_1(){
        S1 = !(s11 && cin_1d) && (s11 || cin_1d);
        Cout = (c11 || (s11 && cin_1d));
    }
    

    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder, read) 
            ** (m.adder == this) 
            ;
    void run(){
        lock m;

        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder == this) 
                ;
        while (true) {
            m.process_state = m.process_state[0 -> 0];
            m.event_state = m.event_state[0 -> 5];
            loop_invariant true 
                    ** Perm(m, read)  
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.adder == this) 
                    ;
            while (m.process_state[0] != -1 || m.event_state[0] != -2) {
                unlock m;
                lock m;
            }

            ha_1();
            fa_1();

            //FPV
            if (m.assertions) {
                //sum              
                assert (!(!A1 && !B1 && !Cin) || (!S1));
                assert (!(!A1 && !B1 &&  Cin) || ( S1));
                assert (!(!A1 &&  B1 && !Cin) || ( S1));
                assert (!(!A1 &&  B1 &&  Cin) || (!S1));
                assert (!( A1 && !B1 && !Cin) || ( S1));
                assert (!( A1 && !B1 &&  Cin) || (!S1));
                assert (!( A1 &&  B1 && !Cin) || (!S1));
                assert (!( A1 &&  B1 &&  Cin) || ( S1));

                //carry
                assert (!(!A1 && !B1 && !Cin) || (!Cout));
                assert (!(!A1 && !B1 &&  Cin) || (!Cout));
                assert (!(!A1 &&  B1 && !Cin) || (!Cout));
                assert (!(!A1 &&  B1 &&  Cin) || ( Cout));
                assert (!( A1 && !B1 && !Cin) || (!Cout));
                assert (!( A1 && !B1 &&  Cin) || ( Cout));
                assert (!( A1 &&  B1 && !Cin) || ( Cout));
                assert (!( A1 &&  B1 &&  Cin) || ( Cout));
            }
        }
        unlock m;
    }
    
}

class Main { 
    seq<int> process_state;
    seq<int> event_state;
    Full_adder adder;
    
    boolean assertions;

    inline resource scheduler_permission_invariant() = true 
            ** Perm(process_state, write) ** |process_state| == 1 
            ** Perm(event_state, write) **   |event_state| == 1 
            ** (\forall int i = 0 .. |process_state|; ((({: process_state[i] :} == -1)) 
               || (((process_state[i] >= 0) && (process_state[i] < |event_state|))) ))
            ;
    
    inline resource global_permission() = true 
            ** scheduler_permission_invariant() 

            ** Perm(assertions, read)
            ** assertions  //disable all the assert

            //full adder 
            ** Perm(adder, read) 
            ** (adder != null) 
            ** Perm(adder.Cin, write) 
            ** Perm(adder.A1, write) 
            ** Perm(adder.B1, write) 
            ** Perm(adder.S1, write) 
            ** Perm(adder.Cout, write) 
            ** Perm(adder.s11, write) 
            ** Perm(adder.c11, write) 
            ** Perm(adder.cin_1d, write)
            ;
    
    resource lock_invariant() = global_permission();
    
    ensures Perm(adder, read)
            ** adder != null
            ** Perm(adder.m, read)
            ** adder.m == this
            ;
    ensures idle(adder);
    Main(){
        process_state = [-1];
        event_state = [-3];

        assertions = true; //disable all the assert
        adder = new Full_adder(this);
    }
    
    
    context Perm(adder, read)
            ** adder != null
            ** Perm(adder.m, read)
            ** adder.m == this
            ;
    context idle(adder);
    void main(){
        lock this;
        fork adder;
        unlock this;
        loop_invariant true ;
        while (true) {
            lock this;
            immediate_wakeup();
            reset_events_no_delta();
            if (process_state[0] != -1 ) {
                int min_advance = find_minimum_advance(event_state);
                if (min_advance == -1) {
                    min_advance = 0;
                }
                event_state = [event_state[0] < -1 ? -3 : event_state[0] - min_advance];
                wakeup_after_wait();
                reset_all_events();
            }
            unlock this;
        }
        join adder;
    }
    
    //Auto-generated specifications of the function immediate_wakeup:
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == \old(process_state[0]))) ))) );
    void immediate_wakeup();
    
    //Auto-generated specifications of the function reset_events_no_delta:
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures ((((((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == -2)) ))) );
    ensures (((!(((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == \old(event_state[0]))) ))) );
    void reset_events_no_delta();
    
    //Auto-generated specifications of the function find_minimum_advance:
    requires (|vals| == 1);
    ensures ((((vals[0] < -1) || (\result <= vals[0]))) );
    ensures (((((vals[0] < -1)) ) ==> (\result == 0)) && ((((vals[0] >= -1)) ) ==> ((((vals[0] >= -1) && (\result == vals[0]))) )));
    pure int find_minimum_advance(seq<int> vals);
    
    //Auto-generated specifications of the function wakeup_after_wait:
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == \old(process_state[0]))) ))) );
    void wakeup_after_wait();
    
    //Auto-generated specifications of the function reset_all_events:
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures (((((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == -2)) ))) );
    ensures (((!((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == \old(event_state[0]))) ))) );
    void reset_all_events();
    
}