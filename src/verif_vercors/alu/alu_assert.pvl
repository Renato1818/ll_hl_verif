class ALU { 
    Main m;
    int OPCODE;
    int OP1;
    int OP2;
    boolean CARRY;
    boolean ZERO;
    int RESULT;    

    
    ensures Perm(m, write) ** (m == m_param) 
            ** Perm(OPCODE, write) **  OPCODE == 0 
            ** Perm(OP1, write) **  OP1 == 0 
            ** Perm(OP2, write) **  OP2 == 0 
            ** Perm(CARRY, write) ** !CARRY 
            ** Perm(ZERO, write) ** !ZERO 
            ** Perm(RESULT, write) ** RESULT == 0 
            ;
    ALU(Main m_param){
        m = m_param;
        OPCODE = 0;
	    OP1 = 0;
	    OP2 = 0;
	    CARRY = false;
	    ZERO = false;
	    RESULT = 0;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** held(m) 
            ** m.global_permission() 
            ** (m.alu == this) 
            ;
    int get_bit(int value, int pos){
        int i;
        int divisor;

        divisor = 1;

        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission()  
                ** (m.alu == this) 
                ;
        for (i = 0; i < pos; i++) {
            divisor = divisor * 2;
        }
        if (divisor != 0) {
            return (value / divisor) % 2;
        } else {
            return 0;
        }
    }
    
    context Perm(m, read) 
            ** (m != null) 
            ** held(m) 
            ** m.global_permission() 
            ** (m.alu == this) 
            ;
    int set_bit(int value, int pos, int bit){
        int i;
        int divisor;
        int current_bit;

        current_bit = m.alu.get_bit(value, pos);
        divisor = 1;
        if (bit != 0) {
			bit =  bit % 2;
		}

        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission()  
                ** (m.alu == this) 
                ;
        for (i = 0; i < pos; i++) {
            divisor = divisor * 2;
        }
        if (current_bit == bit) {
            return value;
        } else {
            if (bit == 1) {
                return value + divisor;
            } else {
                return value - divisor;
            }
        }
    }
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.alu, read) 
            ** (m.alu == this) 
            ;
    void run(){        
        int i;
        int data1;
        int data2;
        int result;
        int bit;

        lock m;

        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission()  
                ** (m.alu == this) 
                ;
        while (true) {
            m.process_state = m.process_state[0 -> 0];
            m.event_state = m.event_state[0 -> 50];
            loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission()  
                ** (m.alu == this) 
                ;
            while (m.process_state[0] != -1 || m.event_state[0] != -2) {
                unlock m;
                lock m;
            }

            ZERO = false;
            data1 = OP1 % m.MAX_RESULT;
            data2 = OP2 % m.MAX_RESULT;
            if ( (OPCODE % m.MAX_OPCODE) == 0) {
                result = data1 + data2;
            } else if ( (OPCODE % m.MAX_OPCODE) == 1) {
                result = data1 - data2;
            } else if ( (OPCODE % m.MAX_OPCODE) == 2) {
                result = data1 + 1;
            } else if ( (OPCODE % m.MAX_OPCODE) == 3) {
                result = data1 - 1;
            } else if ( (OPCODE % m.MAX_OPCODE) == 4) {
                loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.alu == this) 
                    ;
                for (i = 0; i < m.N_BITS; i++) {
                    bit = get_bit(data1, i) * get_bit(data2, i);
                    result = set_bit(result, i, bit);
                }
            } else if ( (OPCODE % m.MAX_OPCODE) == 5) {
                loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.alu == this) 
                    ;
                for (i = 0; i < m.N_BITS; i++) {
                    bit = get_bit(data1, i) + get_bit(data2, i);
                    result = set_bit(result, i, (bit > 0) ? 1 : 0 );
                }
            } else if ( (OPCODE % m.MAX_OPCODE) == 6) {
                loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.alu == this) 
                    ;
                for (i = 0; i < m.N_BITS; i++) {
                    bit = get_bit(data1, i) * get_bit(data2, i);
                    result = set_bit(result, i, (bit == 1) ? 0 : 1);
                }
            } else if ( (OPCODE % m.MAX_OPCODE) == 7) {
                loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.alu == this) 
                    ;
                for (i = 0; i < m.N_BITS; i++) {
                    bit = get_bit(data1, i) + get_bit(data2, i);
                    result = set_bit(result, i, (bit == 1) ? 1 : 0 );
                }
            
            }

            RESULT = (result % m.MAX_RESULT);
            CARRY = ((result / m.MAX_RESULT) % 2) == 1 ? true : false;
            ZERO = (result % m.MAX_RESULT) == 0 ? true : false;

            //FPV
            if (m.assertions) {
                assert RESULT == (result % m.MAX_RESULT);
                assert CARRY == (((result / m.MAX_RESULT) % 2) == 1) ? true : false;
                assert ZERO == ((result % m.MAX_RESULT) == 0) ? true : false;
            }
        }
        unlock m;
    }    
}



class Main { 
    seq<int> process_state;
    seq<int> event_state;
    ALU alu;
    
    boolean assertions;
    int N_BITS;
    int MAX_RESULT;
    int MAX_OPCODE;

    inline resource scheduler_permission_invariant() = true 
            ** Perm(process_state, write) ** |process_state| == 1 
            ** Perm(event_state, write)   ** |event_state| == 1 
            ** (\forall int i = 0 .. |process_state|; ((({: process_state[i] :} == -1)) 
               || (((process_state[i] >= 0) && (process_state[i] < |event_state|))) ))
            ;

    inline resource global_permission() = true 
            ** scheduler_permission_invariant()

            ** Perm(assertions, read)
            ** assertions  //disable all the assert

            ** Perm(N_BITS, read)
            ** N_BITS == 4
            ** Perm(MAX_RESULT, read)
            ** MAX_RESULT == 16
            ** Perm(MAX_OPCODE, read)
            ** MAX_OPCODE == 8 

            //ALU
            ** Perm(alu, read) 
            ** (alu != null) 
            ** Perm(alu.OPCODE, write) 
            ** Perm(alu.OP1, write)
            ** Perm(alu.OP2, write)  
            ** Perm(alu.CARRY, write) 
            ** Perm(alu.ZERO, write) 
            ** Perm(alu.RESULT, write)    
            ** 0 <= alu.RESULT
            ** alu.RESULT <= MAX_RESULT   
            ;

    resource lock_invariant() = global_permission();
    
    ensures Perm(alu, read)
            ** alu != null
            ** Perm(alu.m, read)
            ** alu.m == this
            ;
    ensures idle(alu);
    Main(){
        process_state = [-1];
        event_state = [-3];

        assertions = true; //disable all the assert
        N_BITS = 4;
        MAX_RESULT = 16; //from 2^N_bits
        MAX_OPCODE = 8;
        alu = new ALU(this);
    }
    
    
    context Perm(alu, read)
            ** alu != null
            ** Perm(alu.m, read)
            ** alu.m == this
            ;
    context idle(alu);
    void main(){
        lock this;
        fork alu;
        unlock this;

        loop_invariant true ;
        while (true) {
            lock this;
            immediate_wakeup();
            reset_events_no_delta();
            if (process_state[0] != -1 ) {
                int min_advance = find_minimum_advance(event_state);
                if (min_advance == -1) {
                    min_advance = 0;
                }
                event_state = [event_state[0] < -1 ? -3 : event_state[0] - min_advance];
                wakeup_after_wait();
                reset_all_events();
            }
            unlock this;
        }
        join alu;
    }
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == \old(process_state[0]))) ))) );
    void immediate_wakeup();
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures ((((((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == -2)) ))) );
    ensures (((!(((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == \old(event_state[0]))) ))) );
    void reset_events_no_delta();
    
    requires (|vals| == 1);
    ensures ((((vals[0] < -1) || (\result <= vals[0]))) );
    ensures (((((vals[0] < -1)) ) ==> (\result == 0)) && ((((vals[0] >= -1)) ) ==> ((((vals[0] >= -1) && (\result == vals[0]))) )));
    pure int find_minimum_advance(seq<int> vals);
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == \old(process_state[0]))) ))) );
    void wakeup_after_wait();
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures (((((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == -2)) ))) );
    ensures (((!((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == \old(event_state[0]))) ))) );
    void reset_all_events();
}
