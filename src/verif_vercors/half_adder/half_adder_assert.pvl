class Half_adder { 
    Main m;
    boolean a;
    boolean b;
    boolean sum;
    boolean carry;

    ensures Perm(m, write) ** (m == m_param)
            ** Perm(a, write) ** !a 
            ** Perm(b, write) ** !b 
            ** Perm(sum, write) ** !sum 
            ** Perm(carry, write) ** !carry 
            ;
    Half_adder(Main m_param){
        m = m_param;
        a = false;
        b = false;
        sum = false;
        carry = false;
    }
    
    
    context Perm(m, read)
            ** (m != null)
            ** Perm(m.half, read)
            ** (m.half == this) 
            ;
    void run(){
        boolean s_nand;
        boolean s_or;
        
        lock m;

        loop_invariant true 
                ** Perm(m, read)  
                ** (m != null)  
                ** held(m)  
                ** m.global_permission() 
                ** (m.half == this) 
                ;
        while (true) {
            m.process_state = m.process_state[0 -> 0];
            m.event_state = m.event_state[0 -> 50];
            loop_invariant true 
                        ** Perm(m, read)  
                        ** (m != null)  
                        ** held(m)  
                        ** m.global_permission() 
                        ** (m.half == this) 
                        ;
            while (m.process_state[0] != -1 || m.event_state[0] != -2) {
                unlock m;
                lock m;
            }

            sum = !(a && b) && (a || b);
            carry = a && b;

            //FPV
            if (m.assertions) {
                //sum   
                assert (!(!a && !b) || !sum);
                assert (!(!a &&  b) ||  sum);
                assert (!( a && !b) ||  sum);
                assert (!( a &&  b) || !sum);
                
                //carry
                assert (!(!a && !b) || !carry);
                assert (!(!a &&  b) || !carry);
                assert (!( a && !b) || !carry);
                assert (!( a &&  b) ||  carry);
            }
        }
        unlock m;
    }    
}


class Main { 
    seq<int> process_state;
    seq<int> event_state;
    Half_adder half;
    
    boolean assertions;

    inline resource scheduler_permission_invariant() = true 
            ** Perm(process_state, write) ** |process_state| == 1
            ** Perm(event_state, write)   ** |event_state| == 1 
            ** (\forall int i = 0 .. |process_state|; ((({: process_state[i] :} == -1)) 
                || (((process_state[i] >= 0) && (process_state[i] < |event_state|))) ))
            ;
    
    inline resource global_permission() = true 
            ** scheduler_permission_invariant() 

            ** Perm(assertions, read)
            ** assertions  //disable all the assert

            //half_adder
            ** Perm(half, read) 
            ** (half != null)
            ** Perm(half.a, write) 
            ** Perm(half.b, write) 
            ** Perm(half.sum, write) 
            ** Perm(half.carry, write)  
            ;

    resource lock_invariant() = global_permission();
    
    ensures Perm(half, read)
            ** half != null
            ** Perm(half.m, read)
            ** half.m == this
            ;
    ensures idle(half);
    Main(){
        process_state = [-1];
        event_state = [-3];
        
        assertions = true; //disable all the assert
        half = new Half_adder(this);
    }
    
    
    context Perm(half, read)
            ** half != null
            ** Perm(half.m, read)
            ** half.m == this
            ;
    context idle(half);
    void main(){
        lock this;
        fork half;
        unlock this;

        loop_invariant true ;
        while (true) {
            lock this;
            immediate_wakeup();
            reset_events_no_delta();
            if (process_state[0] != -1 ) {
                int min_advance = find_minimum_advance(event_state);
                if (min_advance == -1) {
                    min_advance = 0;
                }
                event_state = [event_state[0] < -1 ? -3 : event_state[0] - min_advance];
                wakeup_after_wait();
                reset_all_events();
            }
            unlock this;
        }
        join half;
    }
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == \old(process_state[0]))) ))) );
    void immediate_wakeup();
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures ((((((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == -2)) ))) );
    ensures (((!(((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == \old(event_state[0]))) ))) );
    void reset_events_no_delta();
    
    requires (|vals| == 1);
    ensures ((((vals[0] < -1) || (\result <= vals[0]))) );
    ensures (((((vals[0] < -1)) ) ==> (\result == 0)) && ((((vals[0] >= -1)) ) ==> ((((vals[0] >= -1) && (\result == vals[0]))) )));
    pure int find_minimum_advance(seq<int> vals);
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == \old(process_state[0]))) ))) );
    void wakeup_after_wait();
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures (((((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == -2)) ))) );
    ensures (((!((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == \old(event_state[0]))) ))) );
    void reset_all_events();
    
}

