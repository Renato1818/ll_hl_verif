class Sensor { 
    Main m;
    int dist;
	boolean obs_detected;
    
    ensures Perm(m, write) ** (m == m_param)
            ** Perm(dist, write) ** dist == 0
            ** Perm(obs_detected, write) ** !obs_detected
            ;
    Sensor(Main m_param){
        m = m_param;
        dist = 0;
        obs_detected = false;
    }
    
    ensures \result >= 0 && \result < 256;
    int getDistance ();
    
    context Perm(m, read)
            ** (m != null)
            ** Perm(m.sensor, read) 
            ** (m.sensor == this) 
            ;
    void run(){
        lock m;

        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission() 
                ** (m.sensor == this) 
                ;
        while (true) {
            m.process_state = m.process_state[0 -> 0];
            m.event_state = m.event_state[0 -> 2];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission() 
                    ** (m.sensor == this) 
                    ;
            while (m.process_state[0] != -1 || m.event_state[0] != -2) {
                unlock m;
                lock m;
            }
            dist = getDistance();
            if (dist < 50) {
                m.event_state = m.event_state[1 -> -1];
                obs_detected = true;
            } else {
                obs_detected = false;
            }
            
            assert (dist < 50) == obs_detected;
        }
        unlock m;
    }
    
}

class Controller { 
    Main m;
    boolean alarm_flag;    

    ensures Perm(m, write) ** (m == m_param) 
            ** Perm(alarm_flag, write) ** !alarm_flag
            ;
    Controller(Main m_param){
        m = m_param;
        alarm_flag = false;
    }
    
    context Perm(m, read)
            ** (m != null) 
            ** Perm(m.controller, read) 
            ** (m.controller == this) 
            ;
    void run(){
        lock m;

        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.controller == this) 
                ;
        while (true) {
            m.process_state = m.process_state[1 -> 2];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission() 
                    ** (m.controller == this) 
                    ;
            while (m.process_state[1] != -1 || m.event_state[2] != -2) {
                unlock m;
                lock m;
            }
            if (m.sensor.obs_detected) {
                alarm_flag = true;
            } else {
                alarm_flag = false;
            }

            assert m.sensor.obs_detected == alarm_flag;
        }
        unlock m;
    }
    
}



class Main { 
    seq<int> process_state;
    seq<int> event_state;
    Sensor sensor;
    Controller controller;
    
    inline resource scheduler_permission_invariant() = true 
            ** Perm(process_state, write) ** |process_state| == 2 
            ** Perm(event_state, write)   ** |event_state| == 3
            ** (\forall int i = 0 .. |process_state|; ((({: process_state[i] :} == -1)) 
                || (((process_state[i] >= 0) && (process_state[i] < |event_state|))) ))
            ;
    
    inline resource global_permission() = true  
            ** scheduler_permission_invariant() 

            //sensor
            ** Perm(sensor, read) 
            ** (sensor != null) 
            ** Perm(sensor.dist, write)   
            ** Perm(sensor.obs_detected, write)    

            //controller
            ** Perm(controller, read) 
            ** (controller != null) 
            ** Perm(controller.alarm_flag, write)  
            ;

    resource lock_invariant() = global_permission();
    
    ensures Perm(sensor, read)
            ** sensor != null
            ** Perm(sensor.m, read)
            ** sensor.m == this
            ;
    ensures Perm(controller, read)
            ** controller != null
            ** Perm(controller.m, read)
            ** controller.m == this
            ;
    ensures idle(sensor);
    ensures idle(controller);
    Main(){
        process_state = [-1,-1];
        event_state = [-3,-3,-3];

        sensor = new Sensor(this);
        controller = new Controller(this);
    }
    
    
    context Perm(sensor, read)
        ** sensor != null
        ** Perm(sensor.m, read)
        ** sensor.m == this
        ;
    context Perm(controller, read)
        ** controller != null
        ** Perm(controller.m, read)
        ** controller.m == this
        ;
    context idle(sensor);
    context idle(controller);
    void main(){
        lock this;
        fork sensor;
        fork controller;
        unlock this;
        loop_invariant true ;
        while (true) {
            lock this;
            immediate_wakeup();
            reset_events_no_delta();
            if (process_state[0] != -1 && process_state[1] != -1 ) {
                int min_advance = find_minimum_advance(event_state);
                if (min_advance == -1) {
                    min_advance = 0;
                }
                event_state = [event_state[0] < -1 ? -3 : event_state[0] - min_advance,event_state[1] < -1 ? -3 : event_state[1] - min_advance,event_state[2] < -1 ? -3 : event_state[2] - min_advance];
                wakeup_after_wait();
                reset_all_events();
            }
            unlock this;
        }
        join sensor;
        join controller;
    }
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == -1)) ))) && (((((\old(process_state[1]) >= 0)) && ((\old(event_state[\old(process_state[1])]) == 0)) ) ==> (((process_state[1] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == \old(process_state[0]))) ))) && ((!(((\old(process_state[1]) >= 0)) && ((\old(event_state[\old(process_state[1])]) == 0)) ) ==> (((process_state[1] == \old(process_state[1]))) ))) );
    void immediate_wakeup();
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures ((((((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == -2)) ))) && (((((\old(event_state[1]) == 0)) ) ==> (((event_state[1] == -2)) ))) && (((((\old(event_state[2]) == 0)) ) ==> (((event_state[2] == -2)) ))) );
    ensures (((!(((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == \old(event_state[0]))) ))) && ((!(((\old(event_state[1]) == 0)) ) ==> (((event_state[1] == \old(event_state[1]))) ))) && ((!(((\old(event_state[2]) == 0)) ) ==> (((event_state[2] == \old(event_state[2]))) ))) );
    void reset_events_no_delta();
    
    requires (|vals| == 3);
    ensures ((((vals[0] < -1) || (\result <= vals[0]))) && (((vals[1] < -1) || (\result <= vals[1]))) && (((vals[2] < -1) || (\result <= vals[2]))) );
    ensures (((((vals[0] < -1)) && ((vals[1] < -1)) && ((vals[2] < -1)) ) ==> (\result == 0)) && ((((vals[0] >= -1)) || ((vals[1] >= -1)) || ((vals[2] >= -1)) ) ==> ((((vals[0] >= -1) && (\result == vals[0]))) || (((vals[1] >= -1) && (\result == vals[1]))) || (((vals[2] >= -1) && (\result == vals[2]))) )));
    pure int find_minimum_advance(seq<int> vals);
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == -1)) ))) && (((((\old(process_state[1]) >= 0)) && (((\old(event_state[\old(process_state[1])]) == 0) || (\old(event_state[\old(process_state[1])]) == -1))) ) ==> (((process_state[1] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == \old(process_state[0]))) ))) && ((!(((\old(process_state[1]) >= 0)) && (((\old(event_state[\old(process_state[1])]) == 0) || (\old(event_state[\old(process_state[1])]) == -1))) ) ==> (((process_state[1] == \old(process_state[1]))) ))) );
    void wakeup_after_wait();
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures (((((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == -2)) ))) && ((((\old(event_state[1]) == 0) || (\old(event_state[1]) == -1)) ==> (((event_state[1] == -2)) ))) && ((((\old(event_state[2]) == 0) || (\old(event_state[2]) == -1)) ==> (((event_state[2] == -2)) ))) );
    ensures (((!((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == \old(event_state[0]))) ))) && ((!((\old(event_state[1]) == 0) || (\old(event_state[1]) == -1)) ==> (((event_state[1] == \old(event_state[1]))) ))) && ((!((\old(event_state[2]) == 0) || (\old(event_state[2]) == -1)) ==> (((event_state[2] == \old(event_state[2]))) ))) );
    void reset_all_events();
    
}

