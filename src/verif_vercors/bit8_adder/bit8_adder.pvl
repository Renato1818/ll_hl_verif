class Bit8_adder { 
    Main m;
    boolean Cin;
    boolean A1, A2, A3, A4, A5, A6, A7, A8;
    boolean B1, B2, B3, B4, B5, B6, B7, B8;

    boolean S1, S2, S3, S4, S5, S6, S7, S8;
    boolean Cout; 

    //Auxiliar variables to ha1 and fa1
    boolean s11, c11, cin_1d;
    boolean s1, c1;
    
    //Auxiliar variables to ha2 and fa2
    boolean s21, c21, c1_1d;
    boolean s2, c2;

    //Auxiliar variables to ha3 and fa3
    boolean s31, c31, c2_1d;
    boolean s3, c3;
    
    //Auxiliar variables to ha4 and fa4
    boolean s41, c41, c3_1d;
    boolean s4, c4;

    //Auxiliar variables to ha5 and fa5
    boolean s51, c51, c4_1d;
    boolean s5, c5;

    //Auxiliar variables to ha6 and fa6
    boolean s61, c61, c5_1d;
    boolean s6, c6;

    //Auxiliar variables to ha7 and fa7
    boolean s71, c71, c6_1d;
    boolean s7, c7;

    //Auxiliar variables to ha8 and fa8
    boolean s81, c81, c7_1d;
    boolean s8, c8;

    //Delay Inputs to prevent miss match
    boolean a2_1d, a2_2d;
    boolean b2_1d, b2_2d;
    boolean a3_1d, a3_2d, a3_3d, a3_4d;
    boolean b3_1d, b3_2d, b3_3d, b3_4d;
    boolean a4_1d, a4_2d, a4_3d, a4_4d, a4_5d, a4_6d;
    boolean b4_1d, b4_2d, b4_3d, b4_4d, b4_5d, b4_6d;
    boolean a5_1d, a5_2d, a5_3d, a5_4d, a5_5d, a5_6d, a5_7d, a5_8d;
    boolean b5_1d, b5_2d, b5_3d, b5_4d, b5_5d, b5_6d, b5_7d, b5_8d;
    boolean a6_1d, a6_2d, a6_3d, a6_4d, a6_5d, a6_6d, a6_7d, a6_8d, a6_9d, a6_10d;
    boolean b6_1d, b6_2d, b6_3d, b6_4d, b6_5d, b6_6d, b6_7d, b6_8d, b6_9d, b6_10d;
    boolean a7_1d, a7_2d, a7_3d, a7_4d, a7_5d, a7_6d, a7_7d, a7_8d, a7_9d, a7_10d, a7_11d, a7_12d;
    boolean b7_1d, b7_2d, b7_3d, b7_4d, b7_5d, b7_6d, b7_7d, b7_8d, b7_9d, b7_10d, b7_11d, b7_12d;
    boolean a8_1d, a8_2d, a8_3d, a8_4d, a8_5d, a8_6d, a8_7d, a8_8d, a8_9d, a8_10d, a8_11d, a8_12d, a8_13d, a8_14d;
    boolean b8_1d, b8_2d, b8_3d, b8_4d, b8_5d, b8_6d, b8_7d, b8_8d, b8_9d, b8_10d, b8_11d, b8_12d, b8_13d, b8_14d;

    //Delay Outputs
    boolean s1_1d, s1_2d, s1_3d, s1_4d, s1_5d, s1_6d, s1_7d, s1_8d, s1_9d, s1_10d, s1_11d, s1_12d, s1_13d, s1_14d;
    boolean s2_1d, s2_2d, s2_3d, s2_4d, s2_5d, s2_6d, s2_7d, s2_8d, s2_9d, s2_10d, s2_11d, s2_12d;
    boolean s3_1d, s3_2d, s3_3d, s3_4d, s3_5d, s3_6d, s3_7d, s3_8d, s3_9d, s3_10d;
    boolean s4_1d, s4_2d, s4_3d, s4_4d, s4_5d, s4_6d, s4_7d, s4_8d;
    boolean s5_1d, s5_2d, s5_3d, s5_4d, s5_5d, s5_6d;
    boolean s6_1d, s6_2d, s6_3d, s6_4d;
    boolean s7_1d, s7_2d;
    
    ensures Perm(m, write) ** (m == m_param)
            ** Perm(Cin, write)    ** !Cin  
            ** Perm(A1, write)     ** !A1 
            ** Perm(A2, write)     ** !A2  
            ** Perm(A3, write)     ** !A3 
            ** Perm(A4, write)     ** !A4 
            ** Perm(A5, write)     ** !A5 
            ** Perm(A6, write)     ** !A6  
            ** Perm(A7, write)     ** !A7 
            ** Perm(A8, write)     ** !A8 
            ** Perm(B1, write)     ** !B1 
            ** Perm(B2, write)     ** !B2 
            ** Perm(B3, write)     ** !B3 
            ** Perm(B4, write)     ** !B4 
            ** Perm(B5, write)     ** !B5 
            ** Perm(B6, write)     ** !B6  
            ** Perm(B7, write)     ** !B7 
            ** Perm(B8, write)     ** !B8 
            ** Perm(S1, write)     ** !S1 
            ** Perm(S2, write)     ** !S2 
            ** Perm(S3, write)     ** !S3 
            ** Perm(S4, write)     ** !S4 
            ** Perm(S5, write)     ** !S5 
            ** Perm(S6, write)     ** !S6  
            ** Perm(S7, write)     ** !S7 
            ** Perm(S8, write)     ** !S8 
            ** Perm(Cout, write)   ** !Cout                
            ** Perm(s11, write)       
            ** Perm(c11, write)       
            ** Perm(cin_1d, write)          
            ** Perm(s1, write)         ** Perm(s2, write)      
            ** Perm(c1, write)         ** Perm(c2, write)      
            ** Perm(s21, write)        ** Perm(s31, write)      
            ** Perm(c21, write)        ** Perm(c31, write)      
            ** Perm(c1_1d, write)      ** Perm(c2_1d, write)   
            ** Perm(s3, write)         ** Perm(s4, write)    
            ** Perm(c3, write)         ** Perm(c4, write)    
            ** Perm(s41, write)        ** Perm(s51, write)    
            ** Perm(c41, write)        ** Perm(c51, write)    
            ** Perm(c3_1d, write)      ** Perm(c4_1d, write)  
            ** Perm(s5, write)         ** Perm(s6, write)    
            ** Perm(c5, write)         ** Perm(c6, write)    
            ** Perm(s61, write)        ** Perm(s71, write)    
            ** Perm(c61, write)        ** Perm(c71, write)    
            ** Perm(c5_1d, write)      ** Perm(c6_1d, write)    
            ** Perm(s7, write)         ** Perm(s8, write)
            ** Perm(c7, write)         ** Perm(c8, write)
            ** Perm(s81, write)         
            ** Perm(c81, write)         
            ** Perm(c7_1d, write)   
            ** Perm(a2_1d, write)      ** Perm(b2_1d, write)   
            ** Perm(a2_2d, write)      ** Perm(b2_2d, write)   
            ** Perm(a3_1d, write)      ** Perm(b3_1d, write)  
            ** Perm(a3_2d, write)      ** Perm(b3_2d, write)  
            ** Perm(a3_3d, write)      ** Perm(b3_3d, write)  
            ** Perm(a3_4d, write)      ** Perm(b3_4d, write) 
            ** Perm(a4_1d, write)      ** Perm(b4_1d, write)  
            ** Perm(a4_2d, write)      ** Perm(b4_2d, write)  
            ** Perm(a4_3d, write)      ** Perm(b4_3d, write)  
            ** Perm(a4_4d, write)      ** Perm(b4_4d, write)  
            ** Perm(a4_5d, write)      ** Perm(b4_5d, write)  
            ** Perm(a4_6d, write)      ** Perm(b4_6d, write)  
            ** Perm(a5_1d, write)      ** Perm(b5_1d, write)
            ** Perm(a5_2d, write)      ** Perm(b5_2d, write)
            ** Perm(a5_3d, write)      ** Perm(b5_3d, write)
            ** Perm(a5_4d, write)      ** Perm(b5_4d, write)
            ** Perm(a5_5d, write)      ** Perm(b5_5d, write)
            ** Perm(a5_6d, write)      ** Perm(b5_6d, write)
            ** Perm(a5_7d, write)      ** Perm(b5_7d, write)
            ** Perm(a5_8d, write)      ** Perm(b5_8d, write)  
            ** Perm(a6_1d, write)      ** Perm(b6_1d, write) 
            ** Perm(a6_2d, write)      ** Perm(b6_2d, write) 
            ** Perm(a6_3d, write)      ** Perm(b6_3d, write) 
            ** Perm(a6_4d, write)      ** Perm(b6_4d, write) 
            ** Perm(a6_5d, write)      ** Perm(b6_5d, write) 
            ** Perm(a6_6d, write)      ** Perm(b6_6d, write) 
            ** Perm(a6_7d, write)      ** Perm(b6_7d, write) 
            ** Perm(a6_8d, write)      ** Perm(b6_8d, write) 
            ** Perm(a6_9d, write)      ** Perm(b6_9d, write) 
            ** Perm(a6_10d, write)     ** Perm(b6_10d, write)                
            ** Perm(a7_1d, write)      ** Perm(b7_1d, write) 
            ** Perm(a7_2d, write)      ** Perm(b7_2d, write) 
            ** Perm(a7_3d, write)      ** Perm(b7_3d, write) 
            ** Perm(a7_4d, write)      ** Perm(b7_4d, write) 
            ** Perm(a7_5d, write)      ** Perm(b7_5d, write) 
            ** Perm(a7_6d, write)      ** Perm(b7_6d, write) 
            ** Perm(a7_7d, write)      ** Perm(b7_7d, write) 
            ** Perm(a7_8d, write)      ** Perm(b7_8d, write) 
            ** Perm(a7_9d, write)      ** Perm(b7_9d, write) 
            ** Perm(a7_10d, write)     ** Perm(b7_10d, write)
            ** Perm(a7_11d, write)     ** Perm(b7_11d, write)
            ** Perm(a7_12d, write)     ** Perm(b7_12d, write)
            ** Perm(a8_1d, write)      ** Perm(b8_1d, write) 
            ** Perm(a8_2d, write)      ** Perm(b8_2d, write) 
            ** Perm(a8_3d, write)      ** Perm(b8_3d, write) 
            ** Perm(a8_4d, write)      ** Perm(b8_4d, write) 
            ** Perm(a8_5d, write)      ** Perm(b8_5d, write) 
            ** Perm(a8_6d, write)      ** Perm(b8_6d, write) 
            ** Perm(a8_7d, write)      ** Perm(b8_7d, write) 
            ** Perm(a8_8d, write)      ** Perm(b8_8d, write) 
            ** Perm(a8_9d, write)      ** Perm(b8_9d, write) 
            ** Perm(a8_10d, write)     ** Perm(b8_10d, write)
            ** Perm(a8_11d, write)     ** Perm(b8_11d, write)
            ** Perm(a8_12d, write)     ** Perm(b8_12d, write)
            ** Perm(a8_13d, write)     ** Perm(b8_13d, write)
            ** Perm(a8_14d, write)     ** Perm(b8_14d, write)
            ** Perm(s1_1d, write)      ** Perm(s1_8d, write) 
            ** Perm(s1_2d, write)      ** Perm(s1_9d, write) 
            ** Perm(s1_3d, write)      ** Perm(s1_10d, write)
            ** Perm(s1_4d, write)      ** Perm(s1_11d, write)
            ** Perm(s1_5d, write)      ** Perm(s1_12d, write)
            ** Perm(s1_6d, write)      ** Perm(s1_13d, write)
            ** Perm(s1_7d, write)      ** Perm(s1_14d, write)
            ** Perm(s2_1d, write)      ** Perm(s2_7d, write) 
            ** Perm(s2_2d, write)      ** Perm(s2_8d, write) 
            ** Perm(s2_3d, write)      ** Perm(s2_9d, write) 
            ** Perm(s2_4d, write)      ** Perm(s2_10d, write)
            ** Perm(s2_5d, write)      ** Perm(s2_11d, write)
            ** Perm(s2_6d, write)      ** Perm(s2_12d, write)
            ** Perm(s3_1d, write)      ** Perm(s3_6d, write)    
            ** Perm(s3_2d, write)      ** Perm(s3_7d, write)    
            ** Perm(s3_3d, write)      ** Perm(s3_8d, write)    
            ** Perm(s3_4d, write)      ** Perm(s3_9d, write)    
            ** Perm(s3_5d, write)      ** Perm(s3_10d, write)   
            ** Perm(s4_1d, write)      ** Perm(s4_5d, write) 
            ** Perm(s4_2d, write)      ** Perm(s4_6d, write) 
            ** Perm(s4_3d, write)      ** Perm(s4_7d, write) 
            ** Perm(s4_4d, write)      ** Perm(s4_8d, write) 
            ** Perm(s5_1d, write)      ** Perm(s5_4d, write) 
            ** Perm(s5_2d, write)      ** Perm(s5_5d, write) 
            ** Perm(s5_3d, write)      ** Perm(s5_6d, write) 
            ** Perm(s6_1d, write)      ** Perm(s6_4d, write)  
            ** Perm(s6_2d, write)      ** Perm(s7_1d, write)  
            ** Perm(s6_3d, write)      ** Perm(s7_2d, write)       
            ;
    Bit8_adder(Main m_param){
        m = m_param;
        Cin    = false; 
        A1     = false; 
        A2     = false; 
        A3     = false; 
        A4     = false; 
        A5     = false; 
        A6     = false; 
        A7     = false; 
        A8     = false; 
        B1     = false; 
        B2     = false;  
        B3     = false; 
        B4     = false; 
        B5     = false; 
        B6     = false; 
        B7     = false; 
        B8     = false; 
        S1     = false;     
        S2     = false;     
        S3     = false; 
        S4     = false;  
        S5     = false; 
        S6     = false; 
        S7     = false; 
        S8     = false;  
        Cout   = false;
    }    
    
}

class Ha_1 { 
    Main m;
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Ha_1(Main m_param){
        m = m_param;
    }
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_ha_1, read) 
            ** (m.adder_ha_1 == this) ;
    void run(){
        lock m;
        loop_invariant true  
                ** Perm(m, read)  
                ** (m != null) 
                ** held(m)  
                ** m.global_permission()
                ** (m.adder_ha_1 == this) ;
        while (true) {
            m.process_state = m.process_state[0 -> 0];
            m.event_state = m.event_state[0 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null)  
                    ** held(m)  
                    ** m.global_permission() 
                    ** (m.adder_ha_1 == this) ;
            while (m.process_state[0] != -1 || m.event_state[0] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s11 = !(m.adder.A1 && m.adder.B1) && (m.adder.A1 || m.adder.B1);
            m.adder.c11 = (m.adder.A1 && m.adder.B1);
            m.adder.cin_1d = m.adder.Cin;

            m.adder.a2_1d = m.adder.A2;
            m.adder.b2_1d = m.adder.B2;
            m.adder.a3_1d = m.adder.A3;
            m.adder.b3_1d = m.adder.B3;
            m.adder.a4_1d = m.adder.A4;
            m.adder.b4_1d = m.adder.B4;
            m.adder.b5_1d = m.adder.B5;
            m.adder.a5_1d = m.adder.A5;
            m.adder.b6_1d = m.adder.B6;
            m.adder.a6_1d = m.adder.A6;
            m.adder.b7_1d = m.adder.B7;
            m.adder.a7_1d = m.adder.A7;
            m.adder.b8_1d = m.adder.B8;
            m.adder.a8_1d = m.adder.A8;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.A1 && !m.adder.B1) || !m.adder.s11);
                assert (!(!m.adder.A1 &&  m.adder.B1) ||  m.adder.s11);
                assert (!( m.adder.A1 && !m.adder.B1) ||  m.adder.s11);
                assert (!( m.adder.A1 &&  m.adder.B1) || !m.adder.s11);        
                //partial carry
                assert (!(!m.adder.A1 && !m.adder.B1) || !m.adder.c11);
                assert (!(!m.adder.A1 &&  m.adder.B1) || !m.adder.c11);
                assert (!( m.adder.A1 && !m.adder.B1) || !m.adder.c11);
                assert (!( m.adder.A1 &&  m.adder.B1) ||  m.adder.c11);
            }
        }
        unlock m;
    }
    
}

class Fa_1 { 
    Main m;
    
    ensures Perm(m, write) 
            ** (m == m_param) ;
    Fa_1(Main m_param){
        m = m_param;
    }
    

    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_fa_1, read) 
            ** (m.adder_fa_1 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null)  
                ** held(m)  
                ** m.global_permission() 
                ** (m.adder_fa_1 == this) ;
        while (true) {
            m.process_state = m.process_state[1 -> 1];
            m.event_state = m.event_state[1 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission() 
                    ** (m.adder_fa_1 == this) ;
            while (m.process_state[1] != -1 || m.event_state[1] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s1 = !(m.adder.s11 && m.adder.cin_1d) && (m.adder.s11 || m.adder.cin_1d);
            m.adder.c1 = (m.adder.c11 || (m.adder.s11 && m.adder.cin_1d));

            m.adder.a2_2d = m.adder.a2_1d;
            m.adder.b2_2d = m.adder.b2_1d;
            m.adder.a3_2d = m.adder.a3_1d;
            m.adder.b3_2d = m.adder.b3_1d;
            m.adder.a4_2d = m.adder.a4_1d;
            m.adder.b4_2d = m.adder.b4_1d;
            m.adder.a5_2d = m.adder.a5_1d;
            m.adder.b5_2d = m.adder.b5_1d;
            m.adder.a6_2d = m.adder.a6_1d;
            m.adder.b6_2d = m.adder.b6_1d;
            m.adder.a7_2d = m.adder.a7_1d;
            m.adder.b7_2d = m.adder.b7_1d;
            m.adder.a8_2d = m.adder.a8_1d;
            m.adder.b8_2d = m.adder.b8_1d;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.s11 && !m.adder.cin_1d) || !m.adder.s1);
                assert (!(!m.adder.s11 &&  m.adder.cin_1d) ||  m.adder.s1);
                assert (!( m.adder.s11 && !m.adder.cin_1d) ||  m.adder.s1);
                assert (!( m.adder.s11 &&  m.adder.cin_1d) || !m.adder.s1);                
                //partial carry                
                assert (!(!m.adder.c11 && !m.adder.s11 && !m.adder.cin_1d) || !m.adder.c1);
                assert (!(!m.adder.c11 &&  m.adder.s11 && !m.adder.cin_1d) || !m.adder.c1);
                assert (!(!m.adder.c11 &&  m.adder.s11 &&  m.adder.cin_1d) ||  m.adder.c1);
                assert (!( m.adder.c11 && !m.adder.s11 && !m.adder.cin_1d) ||  m.adder.c1);
                assert (!( m.adder.c11 && !m.adder.s11 &&  m.adder.cin_1d) ||  m.adder.c1);
            }
        }
        unlock m;
    }
    
}

class Ha_2 { 
    Main m;
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Ha_2(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_ha_2, read) 
            ** (m.adder_ha_2 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m) 
                ** m.global_permission()  
                ** (m.adder_ha_2 == this) ;
        while (true) {
            m.process_state = m.process_state[2 -> 2];
            m.event_state = m.event_state[2 -> 5];
            loop_invariant true 
                    ** Perm(m, read)  
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission() 
                    ** (m.adder_ha_2 == this) ;
            while (m.process_state[2] != -1 || m.event_state[2] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s21 = !(m.adder.a2_2d && m.adder.b2_2d) && (m.adder.a2_2d || m.adder.b2_2d);
            m.adder.c21 = (m.adder.a2_2d && m.adder.b2_2d);
            m.adder.c1_1d = m.adder.c1;

            m.adder.a3_3d = m.adder.a3_2d;
            m.adder.b3_3d = m.adder.b3_2d;
            m.adder.a4_3d = m.adder.a4_2d;
            m.adder.b4_3d = m.adder.b4_2d;
            m.adder.a5_3d = m.adder.a5_2d;
            m.adder.b5_3d = m.adder.b5_2d;
            m.adder.a6_3d = m.adder.a6_2d;
            m.adder.b6_3d = m.adder.b6_2d;
            m.adder.a7_3d = m.adder.a7_2d;
            m.adder.b7_3d = m.adder.b7_2d;
            m.adder.a8_3d = m.adder.a8_2d;
            m.adder.b8_3d = m.adder.b8_2d;

            m.adder.s1_1d = m.adder.s1;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.a2_2d && !m.adder.b2_2d) || !m.adder.s21);
                assert (!(!m.adder.a2_2d &&  m.adder.b2_2d) ||  m.adder.s21);
                assert (!( m.adder.a2_2d && !m.adder.b2_2d) ||  m.adder.s21);
                assert (!( m.adder.a2_2d &&  m.adder.b2_2d) || !m.adder.s21);    
                //partial carry
                assert (!(!m.adder.a2_2d && !m.adder.b2_2d) || !m.adder.c21);
                assert (!(!m.adder.a2_2d &&  m.adder.b2_2d) || !m.adder.c21);
                assert (!( m.adder.a2_2d && !m.adder.b2_2d) || !m.adder.c21);
                assert (!( m.adder.a2_2d &&  m.adder.b2_2d) ||  m.adder.c21);
            }
        }
        unlock m;
    }    
}

class Fa_2 { 
    Main m;
    
    ensures Perm(m, write) 
            ** (m == m_param) ;
    Fa_2(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_fa_2, read) 
            ** (m.adder_fa_2 == this) ;
    void run(){
        lock m;
        loop_invariant true  
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m)
                ** m.global_permission() 
                ** (m.adder_fa_2 == this) ;
        while (true) {
            m.process_state = m.process_state[3 -> 3];
            m.event_state = m.event_state[3 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission() 
                    ** (m.adder_fa_2 == this) ;
            while (m.process_state[3] != -1 || m.event_state[3] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s2 = !(m.adder.s21 && m.adder.c1_1d) && (m.adder.s21 || m.adder.c1_1d);
            m.adder.c2 = (m.adder.c21 || (m.adder.s21 && m.adder.c1_1d));

            m.adder.a3_4d = m.adder.a3_3d;
            m.adder.b3_4d = m.adder.b3_3d;
            m.adder.a4_4d = m.adder.a4_3d;
            m.adder.b4_4d = m.adder.b4_3d;
            m.adder.a5_4d = m.adder.a5_3d;
            m.adder.b5_4d = m.adder.b5_3d;
            m.adder.a6_4d = m.adder.a6_3d;
            m.adder.b6_4d = m.adder.b6_3d;
            m.adder.a7_4d = m.adder.a7_3d;
            m.adder.b7_4d = m.adder.b7_3d;
            m.adder.a8_4d = m.adder.a8_3d;
            m.adder.b8_4d = m.adder.b8_3d;
            
            m.adder.s1_2d = m.adder.s1_1d;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.s21 && !m.adder.c1_1d) || !m.adder.s2);
                assert (!(!m.adder.s21 &&  m.adder.c1_1d) ||  m.adder.s2);
                assert (!( m.adder.s21 && !m.adder.c1_1d) ||  m.adder.s2);
                assert (!( m.adder.s21 &&  m.adder.c1_1d) || !m.adder.s2);                
                //partial carry                
                assert (!(!m.adder.c21 && !m.adder.s21 && !m.adder.c1_1d) || !m.adder.c2);
                assert (!(!m.adder.c21 &&  m.adder.s21 && !m.adder.c1_1d) || !m.adder.c2);
                assert (!(!m.adder.c21 &&  m.adder.s21 &&  m.adder.c1_1d) ||  m.adder.c2);
                assert (!( m.adder.c21 && !m.adder.s21 && !m.adder.c1_1d) ||  m.adder.c2);
                assert (!( m.adder.c21 && !m.adder.s21 &&  m.adder.c1_1d) ||  m.adder.c2);
            }
        }
        unlock m;
    }    
}

class Ha_3 { 
    Main m;
    
    ensures Perm(m, write) 
            ** (m == m_param) ;
    Ha_3(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_ha_3, read) 
            ** (m.adder_ha_3 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null)  
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_ha_3 == this) ;
        while (true) {
            m.process_state = m.process_state[4 -> 4];
            m.event_state = m.event_state[4 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission()
                    ** (m.adder_ha_3 == this) ;
            while (m.process_state[4] != -1 || m.event_state[4] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s31 = !(m.adder.a3_4d && m.adder.b3_4d) && (m.adder.a3_4d || m.adder.b3_4d);
            m.adder.c31 = (m.adder.a3_4d && m.adder.b3_4d);
            m.adder.c2_1d = m.adder.c2;

            m.adder.a4_5d = m.adder.a4_4d;
            m.adder.b4_5d = m.adder.b4_4d;
            m.adder.a5_5d = m.adder.a5_4d;
            m.adder.b5_5d = m.adder.b5_4d;
            m.adder.a6_5d = m.adder.a6_4d;
            m.adder.b6_5d = m.adder.b6_4d;
            m.adder.a7_5d = m.adder.a7_4d;
            m.adder.b7_5d = m.adder.b7_4d;
            m.adder.a8_5d = m.adder.a8_4d;
            m.adder.b8_5d = m.adder.b8_4d;

            m.adder.s1_3d = m.adder.s1_2d;
            m.adder.s2_1d = m.adder.s2;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.a3_4d && !m.adder.b3_4d) || !m.adder.s31);
                assert (!(!m.adder.a3_4d &&  m.adder.b3_4d) ||  m.adder.s31);
                assert (!( m.adder.a3_4d && !m.adder.b3_4d) ||  m.adder.s31);
                assert (!( m.adder.a3_4d &&  m.adder.b3_4d) || !m.adder.s31);    
                //partial carry
                assert (!(!m.adder.a3_4d && !m.adder.b3_4d) || !m.adder.c31);
                assert (!(!m.adder.a3_4d &&  m.adder.b3_4d) || !m.adder.c31);
                assert (!( m.adder.a3_4d && !m.adder.b3_4d) || !m.adder.c31);
                assert (!( m.adder.a3_4d &&  m.adder.b3_4d) ||  m.adder.c31);
            }
        }
        unlock m;
    }
}

class Fa_3 { 
    Main m;
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Fa_3(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null)
            ** Perm(m.adder_fa_3, read)
            ** (m.adder_fa_3 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read)  
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_fa_3 == this) ;
        while (true) {
            m.process_state = m.process_state[5 -> 5];
            m.event_state = m.event_state[5 -> 5];
            loop_invariant true  
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.adder_fa_3 == this) ;
            while (m.process_state[5] != -1 || m.event_state[5] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s3 = !(m.adder.s31 && m.adder.c2_1d) && (m.adder.s31 || m.adder.c2_1d);
            m.adder.c3 = (m.adder.c31 || (m.adder.s31 && m.adder.c2_1d));

            m.adder.a4_6d = m.adder.a4_5d;
            m.adder.b4_6d = m.adder.b4_5d;
            m.adder.a5_6d = m.adder.a5_5d;
            m.adder.b5_6d = m.adder.b5_5d;
            m.adder.a6_6d = m.adder.a6_5d;
            m.adder.b6_6d = m.adder.b6_5d;
            m.adder.a7_6d = m.adder.a7_5d;
            m.adder.b7_6d = m.adder.b7_5d;
            m.adder.a8_6d = m.adder.a8_5d;
            m.adder.b8_6d = m.adder.b8_5d;

            m.adder.s1_4d = m.adder.s1_3d;
            m.adder.s2_2d = m.adder.s2_1d;
            
            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.s31 && !m.adder.c2_1d) || !m.adder.s3);
                assert (!(!m.adder.s31 &&  m.adder.c2_1d) ||  m.adder.s3);
                assert (!( m.adder.s31 && !m.adder.c2_1d) ||  m.adder.s3);
                assert (!( m.adder.s31 &&  m.adder.c2_1d) || !m.adder.s3);                
                //partial carry                
                assert (!(!m.adder.c31 && !m.adder.s31 && !m.adder.c2_1d) || !m.adder.c3);
                assert (!(!m.adder.c31 &&  m.adder.s31 && !m.adder.c2_1d) || !m.adder.c3);
                assert (!(!m.adder.c31 &&  m.adder.s31 &&  m.adder.c2_1d) ||  m.adder.c3);
                assert (!( m.adder.c31 && !m.adder.s31 && !m.adder.c2_1d) ||  m.adder.c3);
                assert (!( m.adder.c31 && !m.adder.s31 &&  m.adder.c2_1d) ||  m.adder.c3);
            }
        }
        unlock m;
    }
}

class Ha_4 { 
    Main m;
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Ha_4(Main m_param){
        m = m_param;
    }
    

    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_ha_4, read) 
            ** (m.adder_ha_4 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null)  
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_ha_4 == this) ;
        while (true) {
            m.process_state = m.process_state[6 -> 6];
            m.event_state = m.event_state[6 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null)  
                    ** held(m) 
                    ** m.global_permission() 
                    ** (m.adder_ha_4 == this) ;
            while (m.process_state[6] != -1 || m.event_state[6] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s41 = !(m.adder.a4_6d && m.adder.b4_6d) && (m.adder.a4_6d || m.adder.b4_6d);
            m.adder.c41 = (m.adder.a4_6d && m.adder.b4_6d);
            m.adder.c3_1d = m.adder.c3;

            m.adder.a5_7d = m.adder.a5_6d;
            m.adder.b5_7d = m.adder.b5_6d;
            m.adder.a6_7d = m.adder.a6_6d;
            m.adder.b6_7d = m.adder.b6_6d;
            m.adder.a7_7d = m.adder.a7_6d;
            m.adder.b7_7d = m.adder.b7_6d;
            m.adder.a8_7d = m.adder.a8_6d;
            m.adder.b8_7d = m.adder.b8_6d;

            m.adder.s1_5d = m.adder.s1_4d;
            m.adder.s2_3d = m.adder.s2_2d;
            m.adder.s3_1d = m.adder.s3;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.a4_6d && !m.adder.b4_6d) || !m.adder.s41);
                assert (!(!m.adder.a4_6d &&  m.adder.b4_6d) ||  m.adder.s41);
                assert (!( m.adder.a4_6d && !m.adder.b4_6d) ||  m.adder.s41);
                assert (!( m.adder.a4_6d &&  m.adder.b4_6d) || !m.adder.s41);    
                //partial carry
                assert (!(!m.adder.a4_6d && !m.adder.b4_6d) || !m.adder.c41);
                assert (!(!m.adder.a4_6d &&  m.adder.b4_6d) || !m.adder.c41);
                assert (!( m.adder.a4_6d && !m.adder.b4_6d) || !m.adder.c41);
                assert (!( m.adder.a4_6d &&  m.adder.b4_6d) ||  m.adder.c41);
            }
        }
        unlock m;
    }    
}

class Fa_4 { 
    Main m;
    
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Fa_4(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_fa_4, read) 
            ** (m.adder_fa_4 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_fa_4 == this) ;
        while (true) {
            m.process_state = m.process_state[7 -> 7];
            m.event_state = m.event_state[7 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission() 
                    ** (m.adder_fa_4 == this) ;
            while (m.process_state[7] != -1 || m.event_state[7] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s4 = !(m.adder.s41 && m.adder.c3_1d) && (m.adder.s41 || m.adder.c3_1d);
            m.adder.c4 = (m.adder.c41 || (m.adder.s41 && m.adder.c3_1d));

            m.adder.a5_8d = m.adder.a5_7d;
            m.adder.b5_8d = m.adder.b5_7d;
            m.adder.a6_8d = m.adder.a6_7d;
            m.adder.b6_8d = m.adder.b6_7d;
            m.adder.a7_8d = m.adder.a7_7d;
            m.adder.b7_8d = m.adder.b7_7d;
            m.adder.a8_8d = m.adder.a8_7d;
            m.adder.b8_8d = m.adder.b8_7d;

            m.adder.s1_6d = m.adder.s1_5d;
            m.adder.s2_4d = m.adder.s2_3d;
            m.adder.s3_2d = m.adder.s3_1d;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.s41 && !m.adder.c3_1d) || !m.adder.s4);
                assert (!(!m.adder.s41 &&  m.adder.c3_1d) ||  m.adder.s4);
                assert (!( m.adder.s41 && !m.adder.c3_1d) ||  m.adder.s4);
                assert (!( m.adder.s41 &&  m.adder.c3_1d) || !m.adder.s4);                
                //partial carry                
                assert (!(!m.adder.c41 && !m.adder.s41 && !m.adder.c3_1d) || !m.adder.c4);
                assert (!(!m.adder.c41 &&  m.adder.s41 && !m.adder.c3_1d) || !m.adder.c4);
                assert (!(!m.adder.c41 &&  m.adder.s41 &&  m.adder.c3_1d) ||  m.adder.c4);
                assert (!( m.adder.c41 && !m.adder.s41 && !m.adder.c3_1d) ||  m.adder.c4);
                assert (!( m.adder.c41 && !m.adder.s41 &&  m.adder.c3_1d) ||  m.adder.c4);
            }
        }
        unlock m;
    }    
}


class Ha_5 { 
    Main m;
    
    ensures Perm(m, write) 
            ** (m == m_param) ;
    Ha_5(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_ha_5, read) 
            ** (m.adder_ha_5 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null)  
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_ha_5 == this) ;
        while (true) {
            m.process_state = m.process_state[8 -> 8];
            m.event_state = m.event_state[8 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission()
                    ** (m.adder_ha_5 == this) ;
            while (m.process_state[8] != -1 || m.event_state[8] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s51 = !(m.adder.a5_8d && m.adder.b5_8d) && (m.adder.a5_8d || m.adder.b5_8d);
            m.adder.c51 = (m.adder.a5_8d && m.adder.b5_8d);
            m.adder.c4_1d = m.adder.c4;

            m.adder.a6_9d = m.adder.a6_8d;
            m.adder.b6_9d = m.adder.b6_8d;
            m.adder.a7_9d = m.adder.a7_8d;
            m.adder.b7_9d = m.adder.b7_8d;
            m.adder.a8_9d = m.adder.a8_8d;
            m.adder.b8_9d = m.adder.b8_8d;

            m.adder.s1_7d = m.adder.s1_6d;
            m.adder.s2_5d = m.adder.s2_4d;
            m.adder.s3_3d = m.adder.s3_2d;
            m.adder.s4_1d = m.adder.s4;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.a5_8d && !m.adder.b5_8d) || !m.adder.s51);
                assert (!(!m.adder.a5_8d &&  m.adder.b5_8d) ||  m.adder.s51);
                assert (!( m.adder.a5_8d && !m.adder.b5_8d) ||  m.adder.s51);
                assert (!( m.adder.a5_8d &&  m.adder.b5_8d) || !m.adder.s51);    
                //partial carry
                assert (!(!m.adder.a5_8d && !m.adder.b5_8d) || !m.adder.c51);
                assert (!(!m.adder.a5_8d &&  m.adder.b5_8d) || !m.adder.c51);
                assert (!( m.adder.a5_8d && !m.adder.b5_8d) || !m.adder.c51);
                assert (!( m.adder.a5_8d &&  m.adder.b5_8d) ||  m.adder.c51);
            }
        }
        unlock m;
    }
}

class Fa_5 { 
    Main m;
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Fa_5(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null)
            ** Perm(m.adder_fa_5, read)
            ** (m.adder_fa_5 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read)  
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_fa_5 == this) ;
        while (true) {
            m.process_state = m.process_state[9 -> 9];
            m.event_state = m.event_state[9 -> 5];
            loop_invariant true  
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.adder_fa_5 == this) ;
            while (m.process_state[9] != -1 || m.event_state[9] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s5 = !(m.adder.s51 && m.adder.c4_1d) && (m.adder.s51 || m.adder.c4_1d);
            m.adder.c5 = (m.adder.c51 || (m.adder.s51 && m.adder.c4_1d));

            m.adder.a6_10d = m.adder.a6_9d;
            m.adder.b6_10d = m.adder.b6_9d;
            m.adder.a7_10d = m.adder.a7_9d;
            m.adder.b7_10d = m.adder.b7_9d;
            m.adder.a8_10d = m.adder.a8_9d;
            m.adder.b8_10d = m.adder.b8_9d;

            m.adder.s1_8d = m.adder.s1_7d;
            m.adder.s2_6d = m.adder.s2_5d;
            m.adder.s3_4d = m.adder.s3_3d;
            m.adder.s4_2d = m.adder.s4_1d;
            
            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.s51 && !m.adder.c4_1d) || !m.adder.s5);
                assert (!(!m.adder.s51 &&  m.adder.c4_1d) ||  m.adder.s5);
                assert (!( m.adder.s51 && !m.adder.c4_1d) ||  m.adder.s5);
                assert (!( m.adder.s51 &&  m.adder.c4_1d) || !m.adder.s5);                
                //partial carry                
                assert (!(!m.adder.c51 && !m.adder.s51 && !m.adder.c4_1d) || !m.adder.c5);
                assert (!(!m.adder.c51 &&  m.adder.s51 && !m.adder.c4_1d) || !m.adder.c5);
                assert (!(!m.adder.c51 &&  m.adder.s51 &&  m.adder.c4_1d) ||  m.adder.c5);
                assert (!( m.adder.c51 && !m.adder.s51 && !m.adder.c4_1d) ||  m.adder.c5);
                assert (!( m.adder.c51 && !m.adder.s51 &&  m.adder.c4_1d) ||  m.adder.c5);
            }
        }
        unlock m;
    }
}

class Ha_6 { 
    Main m;
    
    ensures Perm(m, write) 
            ** (m == m_param) ;
    Ha_6(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_ha_6, read) 
            ** (m.adder_ha_6 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null)  
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_ha_6 == this) ;
        while (true) {
            m.process_state = m.process_state[10 -> 10];
            m.event_state = m.event_state[10 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission()
                    ** (m.adder_ha_6 == this) ;
            while (m.process_state[10] != -1 || m.event_state[10] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s61 = !(m.adder.a6_10d && m.adder.b6_10d) && (m.adder.a6_10d || m.adder.b6_10d);
            m.adder.c61 = (m.adder.a6_10d && m.adder.b6_10d);
            m.adder.c5_1d = m.adder.c5;

            m.adder.a7_11d = m.adder.a7_10d;
            m.adder.b7_11d = m.adder.b7_10d;
            m.adder.a8_11d = m.adder.a8_10d;
            m.adder.b8_11d = m.adder.b8_10d;

            m.adder.s1_9d = m.adder.s1_8d;
            m.adder.s2_7d = m.adder.s2_6d;
            m.adder.s3_5d = m.adder.s3_4d;
            m.adder.s4_3d = m.adder.s4_2d;
            m.adder.s5_1d = m.adder.s5;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.a6_10d && !m.adder.b6_10d) || !m.adder.s61);
                assert (!(!m.adder.a6_10d &&  m.adder.b6_10d) ||  m.adder.s61);
                assert (!( m.adder.a6_10d && !m.adder.b6_10d) ||  m.adder.s61);
                assert (!( m.adder.a6_10d &&  m.adder.b6_10d) || !m.adder.s61);    
                //partial carry
                assert (!(!m.adder.a6_10d && !m.adder.b6_10d) || !m.adder.c61);
                assert (!(!m.adder.a6_10d &&  m.adder.b6_10d) || !m.adder.c61);
                assert (!( m.adder.a6_10d && !m.adder.b6_10d) || !m.adder.c61);
                assert (!( m.adder.a6_10d &&  m.adder.b6_10d) ||  m.adder.c61);
            }
        }
        unlock m;
    }
}

class Fa_6 { 
    Main m;
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Fa_6(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null)
            ** Perm(m.adder_fa_6, read)
            ** (m.adder_fa_6 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read)  
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_fa_6 == this) ;
        while (true) {
            m.process_state = m.process_state[11 -> 11];
            m.event_state = m.event_state[11 -> 5];
            loop_invariant true  
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.adder_fa_6 == this) ;
            while (m.process_state[11] != -1 || m.event_state[11] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s6 = !(m.adder.s61 && m.adder.c5_1d) && (m.adder.s61 || m.adder.c5_1d);
            m.adder.c6 = (m.adder.c61 || (m.adder.s61 && m.adder.c5_1d));

            m.adder.a7_12d = m.adder.a7_11d;
            m.adder.b7_12d = m.adder.b7_11d;
            m.adder.a8_12d = m.adder.a8_11d;
            m.adder.b8_12d = m.adder.b8_11d;

            m.adder.s1_10d = m.adder.s1_9d;
            m.adder.s2_8d = m.adder.s2_7d;
            m.adder.s3_6d = m.adder.s3_5d;
            m.adder.s4_4d = m.adder.s4_3d;
            m.adder.s5_2d = m.adder.s5_1d;
            
            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.s61 && !m.adder.c5_1d) || !m.adder.s6);
                assert (!(!m.adder.s61 &&  m.adder.c5_1d) ||  m.adder.s6);
                assert (!( m.adder.s61 && !m.adder.c5_1d) ||  m.adder.s6);
                assert (!( m.adder.s61 &&  m.adder.c5_1d) || !m.adder.s6);                
                //partial carry                
                assert (!(!m.adder.c61 && !m.adder.s61 && !m.adder.c5_1d) || !m.adder.c6);
                assert (!(!m.adder.c61 &&  m.adder.s61 && !m.adder.c5_1d) || !m.adder.c6);
                assert (!(!m.adder.c61 &&  m.adder.s61 &&  m.adder.c5_1d) ||  m.adder.c6);
                assert (!( m.adder.c61 && !m.adder.s61 && !m.adder.c5_1d) ||  m.adder.c6);
                assert (!( m.adder.c61 && !m.adder.s61 &&  m.adder.c5_1d) ||  m.adder.c6);
            }
        }
        unlock m;
    }
}

class Ha_7 { 
    Main m;
    
    ensures Perm(m, write) 
            ** (m == m_param) ;
    Ha_7(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_ha_7, read) 
            ** (m.adder_ha_7 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null)  
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_ha_7 == this) ;
        while (true) {
            m.process_state = m.process_state[12 -> 12];
            m.event_state = m.event_state[12 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission()
                    ** (m.adder_ha_7 == this) ;
            while (m.process_state[12] != -1 || m.event_state[12] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s71 = !(m.adder.a7_12d && m.adder.b7_12d) && (m.adder.a7_12d || m.adder.b7_12d);
            m.adder.c71 = (m.adder.a7_12d && m.adder.b7_12d);
            m.adder.c6_1d = m.adder.c6;

            m.adder.a8_13d = m.adder.a8_12d;
            m.adder.b8_13d = m.adder.b8_12d;

            m.adder.s1_11d = m.adder.s1_10d;
            m.adder.s2_9d = m.adder.s2_8d;
            m.adder.s3_7d = m.adder.s3_6d;
            m.adder.s4_5d = m.adder.s4_4d;
            m.adder.s5_3d = m.adder.s5_2d;
            m.adder.s6_1d = m.adder.s6;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.a7_12d && !m.adder.b7_12d) || !m.adder.s71);
                assert (!(!m.adder.a7_12d &&  m.adder.b7_12d) ||  m.adder.s71);
                assert (!( m.adder.a7_12d && !m.adder.b7_12d) ||  m.adder.s71);
                assert (!( m.adder.a7_12d &&  m.adder.b7_12d) || !m.adder.s71);    
                //partial carry
                assert (!(!m.adder.a7_12d && !m.adder.b7_12d) || !m.adder.c71);
                assert (!(!m.adder.a7_12d &&  m.adder.b7_12d) || !m.adder.c71);
                assert (!( m.adder.a7_12d && !m.adder.b7_12d) || !m.adder.c71);
                assert (!( m.adder.a7_12d &&  m.adder.b7_12d) ||  m.adder.c71);
            }
        }
        unlock m;
    }
}

class Fa_7 { 
    Main m;
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Fa_7(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null)
            ** Perm(m.adder_fa_7, read)
            ** (m.adder_fa_7 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read)  
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_fa_7 == this) ;
        while (true) {
            m.process_state = m.process_state[13 -> 13];
            m.event_state = m.event_state[13 -> 5];
            loop_invariant true  
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.adder_fa_7 == this) ;
            while (m.process_state[13] != -1 || m.event_state[13] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s7 = !(m.adder.s71 && m.adder.c6_1d) && (m.adder.s71 || m.adder.c6_1d);
            m.adder.c7 = (m.adder.c71 || (m.adder.s71 && m.adder.c6_1d));

            m.adder.a8_14d = m.adder.a8_13d;
            m.adder.b8_14d = m.adder.b8_13d;

            m.adder.s1_12d = m.adder.s1_11d;
            m.adder.s2_10d = m.adder.s2_9d;
            m.adder.s3_8d = m.adder.s3_7d;
            m.adder.s4_6d = m.adder.s4_5d;
            m.adder.s5_4d = m.adder.s5_3d;
            m.adder.s6_2d = m.adder.s6_1d;
            
            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.s71 && !m.adder.c6_1d) || !m.adder.s7);
                assert (!(!m.adder.s71 &&  m.adder.c6_1d) ||  m.adder.s7);
                assert (!( m.adder.s71 && !m.adder.c6_1d) ||  m.adder.s7);
                assert (!( m.adder.s71 &&  m.adder.c6_1d) || !m.adder.s7);                
                //partial carry                
                assert (!(!m.adder.c71 && !m.adder.s71 && !m.adder.c6_1d) || !m.adder.c7);
                assert (!(!m.adder.c71 &&  m.adder.s71 && !m.adder.c6_1d) || !m.adder.c7);
                assert (!(!m.adder.c71 &&  m.adder.s71 &&  m.adder.c6_1d) ||  m.adder.c7);
                assert (!( m.adder.c71 && !m.adder.s71 && !m.adder.c6_1d) ||  m.adder.c7);
                assert (!( m.adder.c71 && !m.adder.s71 &&  m.adder.c6_1d) ||  m.adder.c7);
            }
        }
        unlock m;
    }
}

class Ha_8 { 
    Main m;
    
    ensures Perm(m, write) 
            ** (m == m_param) ;
    Ha_8(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null) 
            ** Perm(m.adder_ha_8, read) 
            ** (m.adder_ha_8 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read) 
                ** (m != null)  
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_ha_8 == this) ;
        while (true) {
            m.process_state = m.process_state[14 -> 14];
            m.event_state = m.event_state[14 -> 5];
            loop_invariant true 
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m) 
                    ** m.global_permission()
                    ** (m.adder_ha_8 == this) ;
            while (m.process_state[14] != -1 || m.event_state[14] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s81 = !(m.adder.a8_14d && m.adder.b8_14d) && (m.adder.a8_14d || m.adder.b8_14d);
            m.adder.c81 = (m.adder.a8_14d && m.adder.b8_14d);
            m.adder.c7_1d = m.adder.c7;

            m.adder.s1_13d = m.adder.s1_12d;
            m.adder.s2_11d = m.adder.s2_10d;
            m.adder.s3_9d = m.adder.s3_8d;
            m.adder.s4_7d = m.adder.s4_6d;
            m.adder.s5_5d = m.adder.s5_4d;
            m.adder.s6_3d = m.adder.s6_2d;
            m.adder.s7_1d = m.adder.s7;

            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.a8_14d && !m.adder.b8_14d) || !m.adder.s81);
                assert (!(!m.adder.a8_14d &&  m.adder.b8_14d) ||  m.adder.s81);
                assert (!( m.adder.a8_14d && !m.adder.b8_14d) ||  m.adder.s81);
                assert (!( m.adder.a8_14d &&  m.adder.b8_14d) || !m.adder.s81);    
                //partial carry
                assert (!(!m.adder.a8_14d && !m.adder.b8_14d) || !m.adder.c81);
                assert (!(!m.adder.a8_14d &&  m.adder.b8_14d) || !m.adder.c81);
                assert (!( m.adder.a8_14d && !m.adder.b8_14d) || !m.adder.c81);
                assert (!( m.adder.a8_14d &&  m.adder.b8_14d) ||  m.adder.c81);
            }
        }
        unlock m;
    }
}

class Fa_8 { 
    Main m;
    
    ensures Perm(m, write)
            ** (m == m_param) ;
    Fa_8(Main m_param){
        m = m_param;
    }
    
    
    context Perm(m, read) 
            ** (m != null)
            ** Perm(m.adder_fa_8, read)
            ** (m.adder_fa_8 == this) ;
    void run(){
        lock m;
        loop_invariant true 
                ** Perm(m, read)  
                ** (m != null) 
                ** held(m) 
                ** m.global_permission() 
                ** (m.adder_fa_8 == this) ;
        while (true) {
            m.process_state = m.process_state[15 -> 15];
            m.event_state = m.event_state[15 -> 5];
            loop_invariant true  
                    ** Perm(m, read) 
                    ** (m != null) 
                    ** held(m)  
                    ** m.global_permission()  
                    ** (m.adder_fa_8 == this) ;
            while (m.process_state[15] != -1 || m.event_state[15] != -2) {
                unlock m;
                lock m;
            }
            m.adder.s8 = !(m.adder.s81 && m.adder.c7_1d) && (m.adder.s81 || m.adder.c7_1d);
            m.adder.c8 = (m.adder.c81 || (m.adder.s81 && m.adder.c7_1d));

            m.adder.s1_14d = m.adder.s1_13d;
            m.adder.s2_12d = m.adder.s2_11d;
            m.adder.s3_10d = m.adder.s3_9d;
            m.adder.s4_8d = m.adder.s4_7d;
            m.adder.s5_6d = m.adder.s5_5d;
            m.adder.s6_4d = m.adder.s6_3d;
            m.adder.s7_2d = m.adder.s7_1d;

            //Final Outputs
            m.adder.S1 = m.adder.s1_14d;
            m.adder.S2 = m.adder.s2_12d;
            m.adder.S3 = m.adder.s3_10d;
            m.adder.S4 = m.adder.s4_8d;
            m.adder.S5 = m.adder.s5_6d;
            m.adder.S6 = m.adder.s6_4d;
            m.adder.S7 = m.adder.s7_2d;
            m.adder.S8 = m.adder.s8;
            m.adder.Cout = m.adder.c8;
            
            //FPV
            if (m.assertions) {
                //partial sum
                assert (!(!m.adder.s81 && !m.adder.c7_1d) || !m.adder.s8);
                assert (!(!m.adder.s81 &&  m.adder.c7_1d) ||  m.adder.s8);
                assert (!( m.adder.s81 && !m.adder.c7_1d) ||  m.adder.s8);
                assert (!( m.adder.s81 &&  m.adder.c7_1d) || !m.adder.s8);                
                //partial carry                
                assert (!(!m.adder.c81 && !m.adder.s81 && !m.adder.c7_1d) || !m.adder.c8);
                assert (!(!m.adder.c81 &&  m.adder.s81 && !m.adder.c7_1d) || !m.adder.c8);
                assert (!(!m.adder.c81 &&  m.adder.s81 &&  m.adder.c7_1d) ||  m.adder.c8);
                assert (!( m.adder.c81 && !m.adder.s81 && !m.adder.c7_1d) ||  m.adder.c8);
                assert (!( m.adder.c81 && !m.adder.s81 &&  m.adder.c7_1d) ||  m.adder.c8);
            }
        }
        unlock m;
    }
}

class Main { 
    seq<int> process_state;
    seq<int> event_state;
    Bit8_adder adder;
    Ha_1 adder_ha_1;
    Fa_1 adder_fa_1;
    Ha_2 adder_ha_2;
    Fa_2 adder_fa_2;
    Ha_3 adder_ha_3;
    Fa_3 adder_fa_3;
    Ha_4 adder_ha_4;
    Fa_4 adder_fa_4;
    Ha_5 adder_ha_5;
    Fa_5 adder_fa_5;
    Ha_6 adder_ha_6;
    Fa_6 adder_fa_6;
    Ha_7 adder_ha_7;
    Fa_7 adder_fa_7;
    Ha_8 adder_ha_8;
    Fa_8 adder_fa_8;
    
    boolean assertions;
    
    inline resource scheduler_permission_invariant() = true 
            ** Perm(process_state, write) ** |process_state| == 16 
            ** Perm(event_state, write) **   |event_state| == 16
            ** (\forall int i = 0 .. |process_state|; ((({: process_state[i] :} == -1)) 
               || (((process_state[i] >= 0) && (process_state[i] < |event_state|))) ))
            ;
            
    inline resource global_permission() = true  
            ** scheduler_permission_invariant() 

            ** Perm(assertions, read)
            ** !assertions  //disable all the assert

            ** Perm(adder, read) 
            ** (adder != null)
            ** Perm(adder.Cin, write)   
            ** Perm(adder.A1, write)  
            ** Perm(adder.A2, write)   
            ** Perm(adder.A3, write)  
            ** Perm(adder.A4, write)  
            ** Perm(adder.A5, write)
            ** Perm(adder.A6, write)
            ** Perm(adder.A7, write)
            ** Perm(adder.A8, write)
            ** Perm(adder.B1, write)  
            ** Perm(adder.B2, write)  
            ** Perm(adder.B3, write)  
            ** Perm(adder.B4, write) 
            ** Perm(adder.B5, write) 
            ** Perm(adder.B6, write) 
            ** Perm(adder.B7, write) 
            ** Perm(adder.B8, write)  
            ** Perm(adder.S1, write)  
            ** Perm(adder.S2, write)  
            ** Perm(adder.S3, write)  
            ** Perm(adder.S4, write) 
            ** Perm(adder.S5, write)
            ** Perm(adder.S6, write)
            ** Perm(adder.S7, write)
            ** Perm(adder.S8, write) 
            ** Perm(adder.Cout, write)   
            ** Perm(adder.s11, write) 
            ** Perm(adder.c11, write) 
            ** Perm(adder.cin_1d, write) 
            ** Perm(adder.s1, write) 
            ** Perm(adder.c1, write) 
            ** Perm(adder.s21, write) 
            ** Perm(adder.c21, write) 
            ** Perm(adder.c1_1d, write) 
            ** Perm(adder.s2, write) 
            ** Perm(adder.c2, write) 
            ** Perm(adder.s31, write) 
            ** Perm(adder.c31, write) 
            ** Perm(adder.c2_1d, write) 
            ** Perm(adder.s3, write) 
            ** Perm(adder.c3, write) 
            ** Perm(adder.s41, write) 
            ** Perm(adder.c41, write) 
            ** Perm(adder.c3_1d, write) 
            ** Perm(adder.s4, write) 
            ** Perm(adder.c4, write) 
            ** Perm(adder.s51, write) 
            ** Perm(adder.c51, write) 
            ** Perm(adder.c4_1d, write)
            ** Perm(adder.s5, write) 
            ** Perm(adder.c5, write) 
            ** Perm(adder.s61, write) 
            ** Perm(adder.c61, write) 
            ** Perm(adder.c5_1d, write) 
            ** Perm(adder.s6, write) 
            ** Perm(adder.c6, write) 
            ** Perm(adder.s71, write) 
            ** Perm(adder.c71, write) 
            ** Perm(adder.c6_1d, write) 
            ** Perm(adder.s7, write) 
            ** Perm(adder.c7, write) 
            ** Perm(adder.s81, write) 
            ** Perm(adder.c81, write) 
            ** Perm(adder.c7_1d, write) 
            ** Perm(adder.s8, write) 
            ** Perm(adder.c8, write) 
            ** Perm(adder.a2_1d, write) 
            ** Perm(adder.a2_2d, write) 
            ** Perm(adder.b2_1d, write) 
            ** Perm(adder.b2_2d, write) 
            ** Perm(adder.a3_1d, write) 
            ** Perm(adder.a3_2d, write) 
            ** Perm(adder.a3_3d, write) 
            ** Perm(adder.a3_4d, write) 
            ** Perm(adder.b3_1d, write) 
            ** Perm(adder.b3_2d, write) 
            ** Perm(adder.b3_3d, write) 
            ** Perm(adder.b3_4d, write) 
            ** Perm(adder.a4_1d, write) 
            ** Perm(adder.a4_2d, write) 
            ** Perm(adder.a4_3d, write) 
            ** Perm(adder.a4_4d, write) 
            ** Perm(adder.a4_5d, write) 
            ** Perm(adder.a4_6d, write) 
            ** Perm(adder.b4_1d, write) 
            ** Perm(adder.b4_2d, write) 
            ** Perm(adder.b4_3d, write) 
            ** Perm(adder.b4_4d, write) 
            ** Perm(adder.b4_5d, write) 
            ** Perm(adder.b4_6d, write) 
            ** Perm(adder.a5_1d, write) 
            ** Perm(adder.a5_2d, write) 
            ** Perm(adder.a5_3d, write) 
            ** Perm(adder.a5_4d, write) 
            ** Perm(adder.a5_5d, write) 
            ** Perm(adder.a5_6d, write) 
            ** Perm(adder.a5_7d, write) 
            ** Perm(adder.a5_8d, write) 
            ** Perm(adder.b5_1d, write) 
            ** Perm(adder.b5_2d, write) 
            ** Perm(adder.b5_3d, write) 
            ** Perm(adder.b5_4d, write) 
            ** Perm(adder.b5_5d, write) 
            ** Perm(adder.b5_6d, write) 
            ** Perm(adder.b5_7d, write) 
            ** Perm(adder.b5_8d, write) 
            ** Perm(adder.a6_1d, write) 
            ** Perm(adder.a6_2d, write) 
            ** Perm(adder.a6_3d, write) 
            ** Perm(adder.a6_4d, write) 
            ** Perm(adder.a6_5d, write) 
            ** Perm(adder.a6_6d, write) 
            ** Perm(adder.a6_7d, write) 
            ** Perm(adder.a6_8d, write) 
            ** Perm(adder.a6_9d, write) 
            ** Perm(adder.a6_10d, write)
            ** Perm(adder.b6_1d, write) 
            ** Perm(adder.b6_2d, write) 
            ** Perm(adder.b6_3d, write) 
            ** Perm(adder.b6_4d, write) 
            ** Perm(adder.b6_5d, write) 
            ** Perm(adder.b6_6d, write) 
            ** Perm(adder.b6_7d, write) 
            ** Perm(adder.b6_8d, write) 
            ** Perm(adder.b6_9d, write) 
            ** Perm(adder.b6_10d, write) 
            ** Perm(adder.a7_1d, write) 
            ** Perm(adder.a7_2d, write) 
            ** Perm(adder.a7_3d, write) 
            ** Perm(adder.a7_4d, write) 
            ** Perm(adder.a7_5d, write) 
            ** Perm(adder.a7_6d, write) 
            ** Perm(adder.a7_7d, write) 
            ** Perm(adder.a7_8d, write) 
            ** Perm(adder.a7_9d, write) 
            ** Perm(adder.a7_10d, write) 
            ** Perm(adder.a7_11d, write) 
            ** Perm(adder.a7_12d, write) 
            ** Perm(adder.b7_1d, write) 
            ** Perm(adder.b7_2d, write) 
            ** Perm(adder.b7_3d, write) 
            ** Perm(adder.b7_4d, write) 
            ** Perm(adder.b7_5d, write) 
            ** Perm(adder.b7_6d, write) 
            ** Perm(adder.b7_7d, write) 
            ** Perm(adder.b7_8d, write) 
            ** Perm(adder.b7_9d, write) 
            ** Perm(adder.b7_10d, write) 
            ** Perm(adder.b7_11d, write) 
            ** Perm(adder.b7_12d, write) 
            ** Perm(adder.a8_1d, write) 
            ** Perm(adder.a8_2d, write) 
            ** Perm(adder.a8_3d, write) 
            ** Perm(adder.a8_4d, write) 
            ** Perm(adder.a8_5d, write) 
            ** Perm(adder.a8_6d, write) 
            ** Perm(adder.a8_7d, write) 
            ** Perm(adder.a8_8d, write) 
            ** Perm(adder.a8_9d, write) 
            ** Perm(adder.a8_10d, write) 
            ** Perm(adder.a8_11d, write) 
            ** Perm(adder.a8_12d, write) 
            ** Perm(adder.a8_13d, write) 
            ** Perm(adder.a8_14d, write) 
            ** Perm(adder.b8_1d, write) 
            ** Perm(adder.b8_2d, write) 
            ** Perm(adder.b8_3d, write) 
            ** Perm(adder.b8_4d, write) 
            ** Perm(adder.b8_5d, write) 
            ** Perm(adder.b8_6d, write) 
            ** Perm(adder.b8_7d, write) 
            ** Perm(adder.b8_8d, write) 
            ** Perm(adder.b8_9d, write) 
            ** Perm(adder.b8_10d, write) 
            ** Perm(adder.b8_11d, write) 
            ** Perm(adder.b8_12d, write) 
            ** Perm(adder.b8_13d, write) 
            ** Perm(adder.b8_14d, write) 
            ** Perm(adder.s1_1d, write) 
            ** Perm(adder.s1_2d, write) 
            ** Perm(adder.s1_3d, write) 
            ** Perm(adder.s1_4d, write) 
            ** Perm(adder.s1_5d, write) 
            ** Perm(adder.s1_6d, write) 
            ** Perm(adder.s1_7d, write) 
            ** Perm(adder.s1_8d, write) 
            ** Perm(adder.s1_9d, write) 
            ** Perm(adder.s1_10d, write) 
            ** Perm(adder.s1_11d, write) 
            ** Perm(adder.s1_12d, write) 
            ** Perm(adder.s1_13d, write) 
            ** Perm(adder.s1_14d, write) 
            ** Perm(adder.s2_1d, write) 
            ** Perm(adder.s2_2d, write) 
            ** Perm(adder.s2_3d, write) 
            ** Perm(adder.s2_4d, write) 
            ** Perm(adder.s2_5d, write) 
            ** Perm(adder.s2_6d, write) 
            ** Perm(adder.s2_7d, write) 
            ** Perm(adder.s2_8d, write) 
            ** Perm(adder.s2_9d, write) 
            ** Perm(adder.s2_10d, write) 
            ** Perm(adder.s2_11d, write) 
            ** Perm(adder.s2_12d, write) 
            ** Perm(adder.s3_1d, write) 
            ** Perm(adder.s3_2d, write) 
            ** Perm(adder.s3_3d, write) 
            ** Perm(adder.s3_4d, write) 
            ** Perm(adder.s3_5d, write) 
            ** Perm(adder.s3_6d, write) 
            ** Perm(adder.s3_7d, write) 
            ** Perm(adder.s3_8d, write) 
            ** Perm(adder.s3_9d, write) 
            ** Perm(adder.s3_10d, write) 
            ** Perm(adder.s4_1d, write) 
            ** Perm(adder.s4_2d, write) 
            ** Perm(adder.s4_3d, write) 
            ** Perm(adder.s4_4d, write) 
            ** Perm(adder.s4_5d, write) 
            ** Perm(adder.s4_6d, write) 
            ** Perm(adder.s4_7d, write) 
            ** Perm(adder.s4_8d, write) 
            ** Perm(adder.s5_1d, write) 
            ** Perm(adder.s5_2d, write) 
            ** Perm(adder.s5_3d, write) 
            ** Perm(adder.s5_4d, write) 
            ** Perm(adder.s5_5d, write) 
            ** Perm(adder.s5_6d, write) 
            ** Perm(adder.s6_1d, write) 
            ** Perm(adder.s6_2d, write) 
            ** Perm(adder.s6_3d, write) 
            ** Perm(adder.s6_4d, write) 
            ** Perm(adder.s7_1d, write) 
            ** Perm(adder.s7_2d, write) 
            ** Perm(adder.m, read)    
            ** (adder.m == this)

            //ha1
            ** Perm(adder_ha_1, read) 
            ** (adder_ha_1 != null)   

            //fa1
            ** Perm(adder_fa_1, read) 
            ** (adder_fa_1 != null)   

            //ha2
            ** Perm(adder_ha_2, read) 
            ** (adder_ha_2 != null)   

            //fa2
            ** Perm(adder_fa_2, read) 
            ** (adder_fa_2 != null)   
            
            //ha3
            ** Perm(adder_ha_3, read) 
            ** (adder_ha_3 != null)   
            
            //fa3
            ** Perm(adder_fa_3, read) 
            ** (adder_fa_3 != null)   
            
            //ha4
            ** Perm(adder_ha_4, read) 
            ** (adder_ha_4 != null)  
            
            //fa4 
            ** Perm(adder_fa_4, read) 
            ** (adder_fa_4 != null)   
            
            //ha5
            ** Perm(adder_ha_5, read) 
            ** (adder_ha_5 != null)   
            
            //fa5
            ** Perm(adder_fa_5, read) 
            ** (adder_fa_5 != null)   
            
            //ha6
            ** Perm(adder_ha_6, read) 
            ** (adder_ha_6 != null)  
            
            //fa6 
            ** Perm(adder_fa_6, read) 
            ** (adder_fa_6 != null)  
            
            //ha7
            ** Perm(adder_ha_7, read) 
            ** (adder_ha_7 != null)   
            
            //fa7
            ** Perm(adder_fa_7, read) 
            ** (adder_fa_7 != null)   
            
            //ha8
            ** Perm(adder_ha_8, read) 
            ** (adder_ha_8 != null)  
            
            //fa8 
            ** Perm(adder_fa_8, read) 
            ** (adder_fa_8 != null)  
            ;
    resource lock_invariant() = global_permission();
    
    ensures Perm(adder_ha_1, read)
            ** adder_ha_1 != null
            ** Perm(adder_ha_1.m, read)
            ** adder_ha_1.m == this
            //** Perm(adder_ha_1.init, 1\2)
            //** !adder_ha_1.init
            ;
    ensures Perm(adder_fa_1, read)
            ** adder_fa_1 != null
            ** Perm(adder_fa_1.m, read)
            ** adder_fa_1.m == this
            //** Perm(adder_fa_1.init, 1\2)
            //** !adder_fa_1.init
            ;
    ensures Perm(adder_ha_2, read)
            ** adder_ha_2 != null
            ** Perm(adder_ha_2.m, read)
            ** adder_ha_2.m == this
            //** Perm(adder_ha_2.init, 1\2)
            //** !adder_ha_2.init
            ;
    ensures Perm(adder_fa_2, read)
            ** adder_fa_2 != null
            ** Perm(adder_fa_2.m, read)
            ** adder_fa_2.m == this
            //** Perm(adder_fa_2.init, 1\2)
            //** !adder_fa_2.init
            ;
    ensures Perm(adder_ha_3, read)
            ** adder_ha_3 != null
            ** Perm(adder_ha_3.m, read)
            ** adder_ha_3.m == this
            //** Perm(adder_ha_3.init, 1\2)
            //** !adder_ha_3.init
            ;
    ensures Perm(adder_fa_3, read)
            ** adder_fa_3 != null
            ** Perm(adder_fa_3.m, read)
            ** adder_fa_3.m == this
            //** Perm(adder_fa_3.init, 1\2)
            //** !adder_fa_3.init
            ;
    ensures Perm(adder_ha_4, read)
            ** adder_ha_4 != null
            ** Perm(adder_ha_4.m, read)
            ** adder_ha_4.m == this
            //** Perm(adder_ha_4.init, 1\2)
            //** !adder_ha_4.init
            ;
    ensures Perm(adder_fa_4, read)
            ** adder_fa_4 != null
            ** Perm(adder_fa_4.m, read)
            ** adder_fa_4.m == this
            //** Perm(adder_fa_4.init, 1\2)
            //** !adder_fa_4.init
            ;    
    ensures Perm(adder_ha_5, read)
            ** adder_ha_5 != null
            ** Perm(adder_ha_5.m, read)
            ** adder_ha_5.m == this
            //** Perm(adder_ha_5.init, 1\2)
            //** !adder_ha_5.init
            ;
    ensures Perm(adder_fa_5, read)
            ** adder_fa_5 != null
            ** Perm(adder_fa_5.m, read)
            ** adder_fa_5.m == this
            //** Perm(adder_fa_5.init, 1\2)
            //** !adder_fa_5.init
            ;
    ensures Perm(adder_ha_6, read)
            ** adder_ha_6 != null
            ** Perm(adder_ha_6.m, read)
            ** adder_ha_6.m == this
            //** Perm(adder_ha_6.init, 1\2)
            //** !adder_ha_6.init
            ;
    ensures Perm(adder_fa_6, read)
            ** adder_fa_6 != null
            ** Perm(adder_fa_6.m, read)
            ** adder_fa_6.m == this
            //** Perm(adder_fa_6.init, 1\2)
            //** !adder_fa_6.init
            ;
    ensures Perm(adder_ha_7, read)
            ** adder_ha_7 != null
            ** Perm(adder_ha_7.m, read)
            ** adder_ha_7.m == this
            //** Perm(adder_ha_7.init, 1\2)
            //** !adder_ha_7.init
            ;
    ensures Perm(adder_fa_7, read)
            ** adder_fa_7 != null
            ** Perm(adder_fa_7.m, read)
            ** adder_fa_7.m == this
            //** Perm(adder_fa_7.init, 1\2)
            //** !adder_fa_7.init
            ;
    ensures Perm(adder_ha_8, read)
            ** adder_ha_8 != null
            ** Perm(adder_ha_8.m, read)
            ** adder_ha_8.m == this
            //** Perm(adder_ha_8.init, 1\2)
            //** !adder_ha_8.init
            ;
    ensures Perm(adder_fa_8, read)
            ** adder_fa_8 != null
            ** Perm(adder_fa_8.m, read)
            ** adder_fa_8.m == this
            //** Perm(adder_fa_8.init, 1\2)
            //** !adder_fa_8.init
            ;
    ensures idle(adder_ha_1);
    ensures idle(adder_fa_1);
    ensures idle(adder_ha_2);
    ensures idle(adder_fa_2);
    ensures idle(adder_ha_3);
    ensures idle(adder_fa_3);
    ensures idle(adder_ha_4);
    ensures idle(adder_fa_4);
    ensures idle(adder_ha_5);
    ensures idle(adder_fa_5);
    ensures idle(adder_ha_6);
    ensures idle(adder_fa_6);
    ensures idle(adder_ha_7);
    ensures idle(adder_fa_7);
    ensures idle(adder_ha_8);
    ensures idle(adder_fa_8);
    Main(){
        process_state = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
        event_state = [-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3];
        
        assertions = false; //disable all the assertadder = new Bit8_adder(this);
        adder = new Bit8_adder(this);
        adder_ha_1 = new Ha_1(this);
        adder_fa_1 = new Fa_1(this);
        adder_ha_2 = new Ha_2(this);
        adder_fa_2 = new Fa_2(this);
        adder_ha_3 = new Ha_3(this);
        adder_fa_3 = new Fa_3(this);
        adder_ha_4 = new Ha_4(this);
        adder_fa_4 = new Fa_4(this);
        adder_ha_5 = new Ha_5(this);
        adder_fa_5 = new Fa_5(this);
        adder_ha_6 = new Ha_6(this);
        adder_fa_6 = new Fa_6(this);
        adder_ha_7 = new Ha_7(this);
        adder_fa_7 = new Fa_7(this);
        adder_ha_8 = new Ha_8(this);
        adder_fa_8 = new Fa_8(this);
    }
    
    
    context Perm(adder_ha_1, read)
            ** adder_ha_1 != null
            ** Perm(adder_ha_1.m, read)
            ** adder_ha_1.m == this
            //** Perm(adder_ha_1.init, 1\2)
            //** !adder_ha_1.init
            ;
    context Perm(adder_fa_1, read)
            ** adder_fa_1 != null
            ** Perm(adder_fa_1.m, read)
            ** adder_fa_1.m == this
            //** Perm(adder_fa_1.init, 1\2)
            //** !adder_fa_1.init
            ;
    context Perm(adder_ha_2, read)
            ** adder_ha_2 != null
            ** Perm(adder_ha_2.m, read)
            ** adder_ha_2.m == this
            //** Perm(adder_ha_2.init, 1\2)
            //** !adder_ha_2.init
            ;
    context Perm(adder_fa_2, read)
            ** adder_fa_2 != null
            ** Perm(adder_fa_2.m, read)
            ** adder_fa_2.m == this
            //** Perm(adder_fa_2.init, 1\2)
            //** !adder_fa_2.init
            ;
    context Perm(adder_ha_3, read)
            ** adder_ha_3 != null
            ** Perm(adder_ha_3.m, read)
            ** adder_ha_3.m == this
            //** Perm(adder_ha_3.init, 1\2)
            //** !adder_ha_3.init
            ;
    context Perm(adder_fa_3, read)
            ** adder_fa_3 != null
            ** Perm(adder_fa_3.m, read)
            ** adder_fa_3.m == this
            //** Perm(adder_fa_3.init, 1\2)
            //** !adder_fa_3.init
            ;
    context Perm(adder_ha_4, read)
            ** adder_ha_4 != null
            ** Perm(adder_ha_4.m, read)
            ** adder_ha_4.m == this
            //** Perm(adder_ha_4.init, 1\2)
            //** !adder_ha_4.init
            ;
    context Perm(adder_fa_4, read)
            ** adder_fa_4 != null
            ** Perm(adder_fa_4.m, read)
            ** adder_fa_4.m == this
            //** Perm(adder_fa_4.init, 1\2)
            //** !adder_fa_4.init
            ;            
    context Perm(adder_ha_5, read)
            ** adder_ha_5 != null
            ** Perm(adder_ha_5.m, read)
            ** adder_ha_5.m == this
            //** Perm(adder_ha_5.init, 1\2)
            //** !adder_ha_5.init
            ;
    context Perm(adder_fa_5, read)
            ** adder_fa_5 != null
            ** Perm(adder_fa_5.m, read)
            ** adder_fa_5.m == this
            //** Perm(adder_fa_5.init, 1\2)
            //** !adder_fa_5.init
            ;
    context Perm(adder_ha_6, read)
            ** adder_ha_6 != null
            ** Perm(adder_ha_6.m, read)
            ** adder_ha_6.m == this
            //** Perm(adder_ha_6.init, 1\2)
            //** !adder_ha_6.init
            ;
    context Perm(adder_fa_6, read)
            ** adder_fa_6 != null
            ** Perm(adder_fa_6.m, read)
            ** adder_fa_6.m == this
            //** Perm(adder_fa_6.init, 1\2)
            //** !adder_fa_6.init
            ;
    context Perm(adder_ha_7, read)
            ** adder_ha_7 != null
            ** Perm(adder_ha_7.m, read)
            ** adder_ha_7.m == this
            //** Perm(adder_ha_7.init, 1\2)
            //** !adder_ha_7.init
            ;
    context Perm(adder_fa_7, read)
            ** adder_fa_7 != null
            ** Perm(adder_fa_7.m, read)
            ** adder_fa_7.m == this
            //** Perm(adder_fa_7.init, 1\2)
            //** !adder_fa_7.init
            ;
    context Perm(adder_ha_8, read)
            ** adder_ha_8 != null
            ** Perm(adder_ha_8.m, read)
            ** adder_ha_8.m == this
            //** Perm(adder_ha_8.init, 1\2)
            //** !adder_ha_8.init
            ;
    context Perm(adder_fa_8, read)
            ** adder_fa_8 != null
            ** Perm(adder_fa_8.m, read)
            ** adder_fa_8.m == this
            //** Perm(adder_fa_8.init, 1\2)
            //** !adder_fa_8.init
            ;
    context idle(adder_ha_1);
    context idle(adder_fa_1);
    context idle(adder_ha_2);
    context idle(adder_fa_2);
    context idle(adder_ha_3);
    context idle(adder_fa_3);
    context idle(adder_ha_4);
    context idle(adder_fa_4);
    context idle(adder_ha_5);
    context idle(adder_fa_5);
    context idle(adder_ha_6);
    context idle(adder_fa_6);
    context idle(adder_ha_7);
    context idle(adder_fa_7);
    context idle(adder_ha_8);
    context idle(adder_fa_8);
    void main(){
        lock this;
        fork adder_ha_1;
        fork adder_fa_1;
        fork adder_ha_2;
        fork adder_fa_2;
        fork adder_ha_3;
        fork adder_fa_3;
        fork adder_ha_4;
        fork adder_fa_4;
        fork adder_ha_5;
        fork adder_fa_5;
        fork adder_ha_6;
        fork adder_fa_6;
        fork adder_ha_7;
        fork adder_fa_7;
        fork adder_ha_8;
        fork adder_fa_8;
        unlock this;
        loop_invariant true ;
        while (true) {
            lock this;
            immediate_wakeup();
            reset_events_no_delta();
            if (process_state[0] != -1 && process_state[1] != -1 && process_state[2] != -1 && process_state[3] != -1 && process_state[4] != -1 && process_state[5] != -1 && process_state[6] != -1 && process_state[7] != -1 ) {
                int min_advance = find_minimum_advance(event_state);
                if (min_advance == -1) {
                    min_advance = 0;
                }
                event_state = [event_state[0] < -1 ? -3 : event_state[0] - min_advance,event_state[1] < -1 ? -3 : event_state[1] - min_advance,event_state[2] < -1 ? -3 : event_state[2] - min_advance,event_state[3] < -1 ? -3 : event_state[3] - min_advance,event_state[4] < -1 ? -3 : event_state[4] - min_advance,event_state[5] < -1 ? -3 : event_state[5] - min_advance,event_state[6] < -1 ? -3 : event_state[6] - min_advance,event_state[7] < -1 ? -3 : event_state[7] - min_advance,event_state[8] < -1 ? -3 : event_state[8] - min_advance,event_state[9] < -1 ? -3 : event_state[9] - min_advance,event_state[10] < -1 ? -3 : event_state[10] - min_advance,event_state[11] < -1 ? -3 : event_state[11] - min_advance,event_state[12] < -1 ? -3 : event_state[12] - min_advance,event_state[13] < -1 ? -3 : event_state[13] - min_advance,event_state[14] < -1 ? -3 : event_state[14] - min_advance,event_state[15] < -1 ? -3 : event_state[15] - min_advance];
                wakeup_after_wait();
                reset_all_events();
            }
            unlock this;
        }
        join adder_ha_1;
        join adder_fa_1;
        join adder_ha_2;
        join adder_fa_2;
        join adder_ha_3;
        join adder_fa_3;
        join adder_ha_4;
        join adder_fa_4;
        join adder_ha_5;
        join adder_fa_5;
        join adder_ha_2;
        join adder_fa_2;
        join adder_ha_3;
        join adder_fa_3;
        join adder_ha_4;
        join adder_fa_4;
    }
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == -1)) ))) && (((((\old(process_state[1]) >= 0)) && ((\old(event_state[\old(process_state[1])]) == 0)) ) ==> (((process_state[1] == -1)) ))) && (((((\old(process_state[2]) >= 0)) && ((\old(event_state[\old(process_state[2])]) == 0)) ) ==> (((process_state[2] == -1)) ))) && (((((\old(process_state[3]) >= 0)) && ((\old(event_state[\old(process_state[3])]) == 0)) ) ==> (((process_state[3] == -1)) ))) && (((((\old(process_state[4]) >= 0)) && ((\old(event_state[\old(process_state[4])]) == 0)) ) ==> (((process_state[4] == -1)) ))) && (((((\old(process_state[5]) >= 0)) && ((\old(event_state[\old(process_state[5])]) == 0)) ) ==> (((process_state[5] == -1)) ))) && (((((\old(process_state[6]) >= 0)) && ((\old(event_state[\old(process_state[6])]) == 0)) ) ==> (((process_state[6] == -1)) ))) && (((((\old(process_state[7]) >= 0)) && ((\old(event_state[\old(process_state[7])]) == 0)) ) ==> (((process_state[7] == -1)) ))) && (((((\old(process_state[8]) >= 0)) && ((\old(event_state[\old(process_state[8])]) == 0)) ) ==> (((process_state[8] == -1)) ))) && (((((\old(process_state[9]) >= 0)) && ((\old(event_state[\old(process_state[9])]) == 0)) ) ==> (((process_state[9] == -1)) ))) && (((((\old(process_state[10]) >= 0)) && ((\old(event_state[\old(process_state[10])]) == 0)) ) ==> (((process_state[10] == -1)) ))) && (((((\old(process_state[11]) >= 0)) && ((\old(event_state[\old(process_state[11])]) == 0)) ) ==> (((process_state[11] == -1)) ))) && (((((\old(process_state[12]) >= 0)) && ((\old(event_state[\old(process_state[12])]) == 0)) ) ==> (((process_state[12] == -1)) ))) && (((((\old(process_state[13]) >= 0)) && ((\old(event_state[\old(process_state[13])]) == 0)) ) ==> (((process_state[13] == -1)) ))) && (((((\old(process_state[14]) >= 0)) && ((\old(event_state[\old(process_state[14])]) == 0)) ) ==> (((process_state[14] == -1)) ))) && (((((\old(process_state[15]) >= 0)) && ((\old(event_state[\old(process_state[15])]) == 0)) ) ==> (((process_state[15] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && ((\old(event_state[\old(process_state[0])]) == 0)) ) ==> (((process_state[0] == \old(process_state[0]))) ))) && ((!(((\old(process_state[1]) >= 0)) && ((\old(event_state[\old(process_state[1])]) == 0)) ) ==> (((process_state[1] == \old(process_state[1]))) ))) && ((!(((\old(process_state[2]) >= 0)) && ((\old(event_state[\old(process_state[2])]) == 0)) ) ==> (((process_state[2] == \old(process_state[2]))) ))) && ((!(((\old(process_state[3]) >= 0)) && ((\old(event_state[\old(process_state[3])]) == 0)) ) ==> (((process_state[3] == \old(process_state[3]))) ))) && ((!(((\old(process_state[4]) >= 0)) && ((\old(event_state[\old(process_state[4])]) == 0)) ) ==> (((process_state[4] == \old(process_state[4]))) ))) && ((!(((\old(process_state[5]) >= 0)) && ((\old(event_state[\old(process_state[5])]) == 0)) ) ==> (((process_state[5] == \old(process_state[5]))) ))) && ((!(((\old(process_state[6]) >= 0)) && ((\old(event_state[\old(process_state[6])]) == 0)) ) ==> (((process_state[6] == \old(process_state[6]))) ))) && ((!(((\old(process_state[7]) >= 0)) && ((\old(event_state[\old(process_state[7])]) == 0)) ) ==> (((process_state[7] == \old(process_state[7]))) ))) && ((!(((\old(process_state[8]) >= 0)) && ((\old(event_state[\old(process_state[8])]) == 0)) ) ==> (((process_state[8] == \old(process_state[8]))) ))) && ((!(((\old(process_state[9]) >= 0)) && ((\old(event_state[\old(process_state[9])]) == 0)) ) ==> (((process_state[9] == \old(process_state[9]))) ))) && ((!(((\old(process_state[10]) >= 0)) && ((\old(event_state[\old(process_state[10])]) == 0)) ) ==> (((process_state[10] == \old(process_state[10]))) ))) && ((!(((\old(process_state[11]) >= 0)) && ((\old(event_state[\old(process_state[11])]) == 0)) ) ==> (((process_state[11] == \old(process_state[11]))) ))) && ((!(((\old(process_state[12]) >= 0)) && ((\old(event_state[\old(process_state[12])]) == 0)) ) ==> (((process_state[12] == \old(process_state[12]))) ))) && ((!(((\old(process_state[13]) >= 0)) && ((\old(event_state[\old(process_state[13])]) == 0)) ) ==> (((process_state[13] == \old(process_state[13]))) ))) && ((!(((\old(process_state[14]) >= 0)) && ((\old(event_state[\old(process_state[14])]) == 0)) ) ==> (((process_state[14] == \old(process_state[14]))) ))) && ((!(((\old(process_state[15]) >= 0)) && ((\old(event_state[\old(process_state[15])]) == 0)) ) ==> (((process_state[15] == \old(process_state[15]))) ))) );
    void immediate_wakeup();
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures ((((((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == -2)) ))) && (((((\old(event_state[1]) == 0)) ) ==> (((event_state[1] == -2)) ))) && (((((\old(event_state[2]) == 0)) ) ==> (((event_state[2] == -2)) ))) && (((((\old(event_state[3]) == 0)) ) ==> (((event_state[3] == -2)) ))) && (((((\old(event_state[4]) == 0)) ) ==> (((event_state[4] == -2)) ))) && (((((\old(event_state[5]) == 0)) ) ==> (((event_state[5] == -2)) ))) && (((((\old(event_state[6]) == 0)) ) ==> (((event_state[6] == -2)) ))) && (((((\old(event_state[7]) == 0)) ) ==> (((event_state[7] == -2)) ))) && (((((\old(event_state[8]) == 0)) ) ==> (((event_state[8] == -2)) ))) && (((((\old(event_state[9]) == 0)) ) ==> (((event_state[9] == -2)) ))) && (((((\old(event_state[10]) == 0)) ) ==> (((event_state[10] == -2)) ))) && (((((\old(event_state[11]) == 0)) ) ==> (((event_state[11] == -2)) ))) && (((((\old(event_state[12]) == 0)) ) ==> (((event_state[12] == -2)) ))) && (((((\old(event_state[13]) == 0)) ) ==> (((event_state[13] == -2)) ))) && (((((\old(event_state[14]) == 0)) ) ==> (((event_state[14] == -2)) ))) && (((((\old(event_state[15]) == 0)) ) ==> (((event_state[15] == -2)) ))) );
    ensures (((!(((\old(event_state[0]) == 0)) ) ==> (((event_state[0] == \old(event_state[0]))) ))) && ((!(((\old(event_state[1]) == 0)) ) ==> (((event_state[1] == \old(event_state[1]))) ))) && ((!(((\old(event_state[2]) == 0)) ) ==> (((event_state[2] == \old(event_state[2]))) ))) && ((!(((\old(event_state[3]) == 0)) ) ==> (((event_state[3] == \old(event_state[3]))) ))) && ((!(((\old(event_state[4]) == 0)) ) ==> (((event_state[4] == \old(event_state[4]))) ))) && ((!(((\old(event_state[5]) == 0)) ) ==> (((event_state[5] == \old(event_state[5]))) ))) && ((!(((\old(event_state[6]) == 0)) ) ==> (((event_state[6] == \old(event_state[6]))) ))) && ((!(((\old(event_state[7]) == 0)) ) ==> (((event_state[7] == \old(event_state[7]))) ))) && ((!(((\old(event_state[8]) == 0)) ) ==> (((event_state[8] == \old(event_state[8]))) ))) && ((!(((\old(event_state[9]) == 0)) ) ==> (((event_state[9] == \old(event_state[9]))) ))) && ((!(((\old(event_state[10]) == 0)) ) ==> (((event_state[10] == \old(event_state[10]))) ))) && ((!(((\old(event_state[11]) == 0)) ) ==> (((event_state[11] == \old(event_state[11]))) ))) && ((!(((\old(event_state[12]) == 0)) ) ==> (((event_state[12] == \old(event_state[12]))) ))) && ((!(((\old(event_state[13]) == 0)) ) ==> (((event_state[13] == \old(event_state[13]))) ))) && ((!(((\old(event_state[14]) == 0)) ) ==> (((event_state[14] == \old(event_state[14]))) ))) && ((!(((\old(event_state[15]) == 0)) ) ==> (((event_state[15] == \old(event_state[15]))) ))) );
    void reset_events_no_delta();
    
    requires (|vals| == 16);
    ensures ((((vals[0] < -1) || (\result <= vals[0]))) && (((vals[1] < -1) || (\result <= vals[1]))) && (((vals[2] < -1) || (\result <= vals[2]))) && (((vals[3] < -1) || (\result <= vals[3]))) && (((vals[4] < -1) || (\result <= vals[4]))) && (((vals[5] < -1) || (\result <= vals[5]))) && (((vals[6] < -1) || (\result <= vals[6]))) && (((vals[7] < -1) || (\result <= vals[7]))) && (((vals[8] < -1) || (\result <= vals[8]))) && (((vals[9] < -1) || (\result <= vals[9]))) && (((vals[10] < -1) || (\result <= vals[10]))) && (((vals[11] < -1) || (\result <= vals[11]))) && (((vals[12] < -1) || (\result <= vals[12]))) && (((vals[13] < -1) || (\result <= vals[13]))) && (((vals[14] < -1) || (\result <= vals[14]))) && (((vals[15] < -1) || (\result <= vals[15]))) );
    ensures (((((vals[0] < -1)) && ((vals[1] < -1)) && ((vals[2] < -1)) && ((vals[3] < -1)) && ((vals[4] < -1)) && ((vals[5] < -1)) && ((vals[6] < -1)) && ((vals[7] < -1)) && ((vals[8] < -1)) && ((vals[9] < -1)) && ((vals[10] < -1)) && ((vals[11] < -1)) && ((vals[12] < -1)) && ((vals[13] < -1)) && ((vals[14] < -1)) && ((vals[15] < -1)) ) ==> (\result == 0)) && ((((vals[0] >= -1)) || ((vals[1] >= -1)) || ((vals[2] >= -1)) || ((vals[3] >= -1)) || ((vals[4] >= -1)) || ((vals[5] >= -1)) || ((vals[6] >= -1)) || ((vals[7] >= -1)) || ((vals[8] >= -1)) || ((vals[9] >= -1)) || ((vals[10] >= -1)) || ((vals[11] >= -1)) || ((vals[12] >= -1)) || ((vals[13] >= -1)) || ((vals[14] >= -1)) || ((vals[15] >= -1)) ) ==> ((((vals[0] >= -1) && (\result == vals[0]))) || (((vals[1] >= -1) && (\result == vals[1]))) || (((vals[2] >= -1) && (\result == vals[2]))) || (((vals[3] >= -1) && (\result == vals[3]))) || (((vals[4] >= -1) && (\result == vals[4]))) || (((vals[5] >= -1) && (\result == vals[5]))) || (((vals[6] >= -1) && (\result == vals[6]))) || (((vals[7] >= -1) && (\result == vals[7]))) || (((vals[8] >= -1) && (\result == vals[8]))) || (((vals[9] >= -1) && (\result == vals[9]))) || (((vals[10] >= -1) && (\result == vals[10]))) || (((vals[11] >= -1) && (\result == vals[11]))) || (((vals[12] >= -1) && (\result == vals[12]))) || (((vals[13] >= -1) && (\result == vals[13]))) || (((vals[14] >= -1) && (\result == vals[14]))) || (((vals[15] >= -1) && (\result == vals[15]))) )));
    pure int find_minimum_advance(seq<int> vals);
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((event_state == \old(event_state))) );
    ensures ((((((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == -1)) ))) && (((((\old(process_state[1]) >= 0)) && (((\old(event_state[\old(process_state[1])]) == 0) || (\old(event_state[\old(process_state[1])]) == -1))) ) ==> (((process_state[1] == -1)) ))) && (((((\old(process_state[2]) >= 0)) && (((\old(event_state[\old(process_state[2])]) == 0) || (\old(event_state[\old(process_state[2])]) == -1))) ) ==> (((process_state[2] == -1)) ))) && (((((\old(process_state[3]) >= 0)) && (((\old(event_state[\old(process_state[3])]) == 0) || (\old(event_state[\old(process_state[3])]) == -1))) ) ==> (((process_state[3] == -1)) ))) && (((((\old(process_state[4]) >= 0)) && (((\old(event_state[\old(process_state[4])]) == 0) || (\old(event_state[\old(process_state[4])]) == -1))) ) ==> (((process_state[4] == -1)) ))) && (((((\old(process_state[5]) >= 0)) && (((\old(event_state[\old(process_state[5])]) == 0) || (\old(event_state[\old(process_state[5])]) == -1))) ) ==> (((process_state[5] == -1)) ))) && (((((\old(process_state[6]) >= 0)) && (((\old(event_state[\old(process_state[6])]) == 0) || (\old(event_state[\old(process_state[6])]) == -1))) ) ==> (((process_state[6] == -1)) ))) && (((((\old(process_state[7]) >= 0)) && (((\old(event_state[\old(process_state[7])]) == 0) || (\old(event_state[\old(process_state[7])]) == -1))) ) ==> (((process_state[7] == -1)) ))) && (((((\old(process_state[8]) >= 0)) && (((\old(event_state[\old(process_state[8])]) == 0) || (\old(event_state[\old(process_state[8])]) == -1))) ) ==> (((process_state[8] == -1)) ))) && (((((\old(process_state[9]) >= 0)) && (((\old(event_state[\old(process_state[9])]) == 0) || (\old(event_state[\old(process_state[9])]) == -1))) ) ==> (((process_state[9] == -1)) ))) && (((((\old(process_state[10]) >= 0)) && (((\old(event_state[\old(process_state[10])]) == 0) || (\old(event_state[\old(process_state[10])]) == -1))) ) ==> (((process_state[10] == -1)) ))) && (((((\old(process_state[11]) >= 0)) && (((\old(event_state[\old(process_state[11])]) == 0) || (\old(event_state[\old(process_state[11])]) == -1))) ) ==> (((process_state[11] == -1)) ))) && (((((\old(process_state[12]) >= 0)) && (((\old(event_state[\old(process_state[12])]) == 0) || (\old(event_state[\old(process_state[12])]) == -1))) ) ==> (((process_state[12] == -1)) ))) && (((((\old(process_state[13]) >= 0)) && (((\old(event_state[\old(process_state[13])]) == 0) || (\old(event_state[\old(process_state[13])]) == -1))) ) ==> (((process_state[13] == -1)) ))) && (((((\old(process_state[14]) >= 0)) && (((\old(event_state[\old(process_state[14])]) == 0) || (\old(event_state[\old(process_state[14])]) == -1))) ) ==> (((process_state[14] == -1)) ))) && (((((\old(process_state[15]) >= 0)) && (((\old(event_state[\old(process_state[15])]) == 0) || (\old(event_state[\old(process_state[15])]) == -1))) ) ==> (((process_state[15] == -1)) ))) );
    ensures (((!(((\old(process_state[0]) >= 0)) && (((\old(event_state[\old(process_state[0])]) == 0) || (\old(event_state[\old(process_state[0])]) == -1))) ) ==> (((process_state[0] == \old(process_state[0]))) ))) && ((!(((\old(process_state[1]) >= 0)) && (((\old(event_state[\old(process_state[1])]) == 0) || (\old(event_state[\old(process_state[1])]) == -1))) ) ==> (((process_state[1] == \old(process_state[1]))) ))) && ((!(((\old(process_state[2]) >= 0)) && (((\old(event_state[\old(process_state[2])]) == 0) || (\old(event_state[\old(process_state[2])]) == -1))) ) ==> (((process_state[2] == \old(process_state[2]))) ))) && ((!(((\old(process_state[3]) >= 0)) && (((\old(event_state[\old(process_state[3])]) == 0) || (\old(event_state[\old(process_state[3])]) == -1))) ) ==> (((process_state[3] == \old(process_state[3]))) ))) && ((!(((\old(process_state[4]) >= 0)) && (((\old(event_state[\old(process_state[4])]) == 0) || (\old(event_state[\old(process_state[4])]) == -1))) ) ==> (((process_state[4] == \old(process_state[4]))) ))) && ((!(((\old(process_state[5]) >= 0)) && (((\old(event_state[\old(process_state[5])]) == 0) || (\old(event_state[\old(process_state[5])]) == -1))) ) ==> (((process_state[5] == \old(process_state[5]))) ))) && ((!(((\old(process_state[6]) >= 0)) && (((\old(event_state[\old(process_state[6])]) == 0) || (\old(event_state[\old(process_state[6])]) == -1))) ) ==> (((process_state[6] == \old(process_state[6]))) ))) && ((!(((\old(process_state[7]) >= 0)) && (((\old(event_state[\old(process_state[7])]) == 0) || (\old(event_state[\old(process_state[7])]) == -1))) ) ==> (((process_state[7] == \old(process_state[7]))) ))) && ((!(((\old(process_state[8]) >= 0)) && (((\old(event_state[\old(process_state[8])]) == 0) || (\old(event_state[\old(process_state[8])]) == -1))) ) ==> (((process_state[8] == \old(process_state[8]))) ))) && ((!(((\old(process_state[9]) >= 0)) && (((\old(event_state[\old(process_state[9])]) == 0) || (\old(event_state[\old(process_state[9])]) == -1))) ) ==> (((process_state[9] == \old(process_state[9]))) ))) && ((!(((\old(process_state[10]) >= 0)) && (((\old(event_state[\old(process_state[10])]) == 0) || (\old(event_state[\old(process_state[10])]) == -1))) ) ==> (((process_state[10] == \old(process_state[10]))) ))) && ((!(((\old(process_state[11]) >= 0)) && (((\old(event_state[\old(process_state[11])]) == 0) || (\old(event_state[\old(process_state[11])]) == -1))) ) ==> (((process_state[11] == \old(process_state[11]))) ))) && ((!(((\old(process_state[12]) >= 0)) && (((\old(event_state[\old(process_state[12])]) == 0) || (\old(event_state[\old(process_state[12])]) == -1))) ) ==> (((process_state[12] == \old(process_state[12]))) ))) && ((!(((\old(process_state[13]) >= 0)) && (((\old(event_state[\old(process_state[13])]) == 0) || (\old(event_state[\old(process_state[13])]) == -1))) ) ==> (((process_state[13] == \old(process_state[13]))) ))) && ((!(((\old(process_state[14]) >= 0)) && (((\old(event_state[\old(process_state[14])]) == 0) || (\old(event_state[\old(process_state[14])]) == -1))) ) ==> (((process_state[14] == \old(process_state[14]))) ))) && ((!(((\old(process_state[15]) >= 0)) && (((\old(event_state[\old(process_state[15])]) == 0) || (\old(event_state[\old(process_state[15])]) == -1))) ) ==> (((process_state[15] == \old(process_state[15]))) ))) );
    void wakeup_after_wait();
    
    context held(this) **
            scheduler_permission_invariant() ;
    ensures (((process_state == \old(process_state))) );
    ensures (((((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == -2)) ))) && ((((\old(event_state[1]) == 0) || (\old(event_state[1]) == -1)) ==> (((event_state[1] == -2)) ))) && ((((\old(event_state[2]) == 0) || (\old(event_state[2]) == -1)) ==> (((event_state[2] == -2)) ))) && ((((\old(event_state[3]) == 0) || (\old(event_state[3]) == -1)) ==> (((event_state[3] == -2)) ))) && ((((\old(event_state[4]) == 0) || (\old(event_state[4]) == -1)) ==> (((event_state[4] == -2)) ))) && ((((\old(event_state[5]) == 0) || (\old(event_state[5]) == -1)) ==> (((event_state[5] == -2)) ))) && ((((\old(event_state[6]) == 0) || (\old(event_state[6]) == -1)) ==> (((event_state[6] == -2)) ))) && ((((\old(event_state[7]) == 0) || (\old(event_state[7]) == -1)) ==> (((event_state[7] == -2)) ))) && ((((\old(event_state[8]) == 0) || (\old(event_state[8]) == -1)) ==> (((event_state[8] == -2)) ))) && ((((\old(event_state[9]) == 0) || (\old(event_state[9]) == -1)) ==> (((event_state[9] == -2)) ))) && ((((\old(event_state[10]) == 0) || (\old(event_state[10]) == -1)) ==> (((event_state[10] == -2)) ))) && ((((\old(event_state[11]) == 0) || (\old(event_state[11]) == -1)) ==> (((event_state[11] == -2)) ))) && ((((\old(event_state[12]) == 0) || (\old(event_state[12]) == -1)) ==> (((event_state[12] == -2)) ))) && ((((\old(event_state[13]) == 0) || (\old(event_state[13]) == -1)) ==> (((event_state[13] == -2)) ))) && ((((\old(event_state[14]) == 0) || (\old(event_state[14]) == -1)) ==> (((event_state[14] == -2)) ))) && ((((\old(event_state[15]) == 0) || (\old(event_state[15]) == -1)) ==> (((event_state[15] == -2)) ))) );
    ensures (((!((\old(event_state[0]) == 0) || (\old(event_state[0]) == -1)) ==> (((event_state[0] == \old(event_state[0]))) ))) && ((!((\old(event_state[1]) == 0) || (\old(event_state[1]) == -1)) ==> (((event_state[1] == \old(event_state[1]))) ))) && ((!((\old(event_state[2]) == 0) || (\old(event_state[2]) == -1)) ==> (((event_state[2] == \old(event_state[2]))) ))) && ((!((\old(event_state[3]) == 0) || (\old(event_state[3]) == -1)) ==> (((event_state[3] == \old(event_state[3]))) ))) && ((!((\old(event_state[4]) == 0) || (\old(event_state[4]) == -1)) ==> (((event_state[4] == \old(event_state[4]))) ))) && ((!((\old(event_state[5]) == 0) || (\old(event_state[5]) == -1)) ==> (((event_state[5] == \old(event_state[5]))) ))) && ((!((\old(event_state[6]) == 0) || (\old(event_state[6]) == -1)) ==> (((event_state[6] == \old(event_state[6]))) ))) && ((!((\old(event_state[7]) == 0) || (\old(event_state[7]) == -1)) ==> (((event_state[7] == \old(event_state[7]))) ))) && ((!((\old(event_state[8]) == 0) || (\old(event_state[8]) == -1)) ==> (((event_state[8] == \old(event_state[8]))) ))) && ((!((\old(event_state[9]) == 0) || (\old(event_state[9]) == -1)) ==> (((event_state[9] == \old(event_state[9]))) ))) && ((!((\old(event_state[10]) == 0) || (\old(event_state[10]) == -1)) ==> (((event_state[10] == \old(event_state[10]))) ))) && ((!((\old(event_state[11]) == 0) || (\old(event_state[11]) == -1)) ==> (((event_state[11] == \old(event_state[11]))) ))) && ((!((\old(event_state[12]) == 0) || (\old(event_state[12]) == -1)) ==> (((event_state[12] == \old(event_state[12]))) ))) && ((!((\old(event_state[13]) == 0) || (\old(event_state[13]) == -1)) ==> (((event_state[13] == \old(event_state[13]))) ))) && ((!((\old(event_state[14]) == 0) || (\old(event_state[14]) == -1)) ==> (((event_state[14] == \old(event_state[14]))) ))) && ((!((\old(event_state[15]) == 0) || (\old(event_state[15]) == -1)) ==> (((event_state[15] == \old(event_state[15]))) ))) );
    void reset_all_events();
}

