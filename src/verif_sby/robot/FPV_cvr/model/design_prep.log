
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.37 (git sha1 a5c7f69ed8f, clang 14.0.6 -fPIC -Os)


-- Executing script file `design_prep.ys' --

1. Executing RTLIL frontend.
Input filename: design.il

2. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module robot.
Found 0 SCCs.

3. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4. Executing MEMORY_NORDFF pass (extracting $dff cells from memories).

5. Executing ASYNC2SYNC pass.
Replacing robot.$procdff$137 ($adff): ARST=\rstn, D=\f_obs, Q=\obs_detected
Replacing robot.$procdff$136 ($adff): ARST=\rstn, D=\alarm_flag_next, Q=\out_alarm_flag
Replacing robot.$procdff$132 ($adff): ARST=\rstn, D=1'1, Q=\f_past_valid
Replacing robot.$procdff$131 ($adff): ARST=\rstn, D=\f_obs_past, Q=\f_obs_past_past
Replacing robot.$procdff$130 ($adff): ARST=\rstn, D=\f_obs, Q=\f_obs_past

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \robot..

7. Executing FORMALFF pass.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \robot..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module robot...
Found and reported 0 problems.

10. Executing SETUNDEF pass (replace undef values with defined constants).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module robot.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\robot'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

11.3. Executing OPT_DFF pass (perform DFF optimizations).

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \robot..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

11.5. Finished fast OPT passes.

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \robot..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

13. Executing RTLIL backend.
Output filename: ../model/design_prep.il

End of script. Logfile hash: be00b1bc2d, CPU: user 0.00s system 0.02s, MEM: 15.02 MB peak
Yosys 0.37 (git sha1 a5c7f69ed8f, clang 14.0.6 -fPIC -Os)
Time spent: 39% 4x opt_clean (0 sec), 10% 1x opt_expr (0 sec), ...
