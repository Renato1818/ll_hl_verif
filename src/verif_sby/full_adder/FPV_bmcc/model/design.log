
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.37 (git sha1 a5c7f69ed8f, clang 14.0.6 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: full_adder.sv
Parsing formal SystemVerilog input from `full_adder.sv' to AST representation.
Storing AST representation for module `$abstract\full_adder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing AST frontend in derive mode using pre-parsed AST for module `\full_adder'.
Generating RTLIL representation for module `\full_adder'.
Warning: wire '\prc_half_adder_1_comb.s_nand' is assigned in a block at full_adder.sv:37.3-37.21.
Warning: wire '\prc_half_adder_1_comb.s_or' is assigned in a block at full_adder.sv:38.3-38.16.
Warning: wire '\prc_half_adder_2_comb.s_nand' is assigned in a block at full_adder.sv:64.3-64.25.
Warning: wire '\prc_half_adder_2_comb.s_or' is assigned in a block at full_adder.sv:65.3-65.20.
Warning: reg '\f_s1' is assigned in a continuous assignment at full_adder.sv:125.10-125.41.
Warning: reg '\f_sum' is assigned in a continuous assignment at full_adder.sv:126.10-126.30.
Warning: reg '\f_c1' is assigned in a continuous assignment at full_adder.sv:128.10-128.60.
Warning: wire '\f_c3' is assigned in a block at full_adder.sv:140.5-140.17.
Warning: wire '\f_c3' is assigned in a block at full_adder.sv:153.5-153.17.
full_adder.sv:129: Warning: Identifier `\f_carry' is implicitly declared.
full_adder.sv:129: Warning: Identifier `\f_c3' is implicitly declared.

3.1. Analyzing design hierarchy..
Top module:  \full_adder

3.2. Analyzing design hierarchy..
Top module:  \full_adder
Removing unused module `$abstract\full_adder'.
Removed 1 unused modules.
Module full_adder directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing PREP pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \full_adder

4.1.2. Analyzing design hierarchy..
Top module:  \full_adder
Removed 0 unused modules.
Module full_adder directly or indirectly contains formal properties -> setting "keep" attribute.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$full_adder.sv:165$47 in module full_adder.
Marked 1 switch rules as full_case in process $proc$full_adder.sv:131$45 in module full_adder.
Marked 1 switch rules as full_case in process $proc$full_adder.sv:93$35 in module full_adder.
Marked 1 switch rules as full_case in process $proc$full_adder.sv:73$31 in module full_adder.
Marked 1 switch rules as full_case in process $proc$full_adder.sv:46$23 in module full_adder.
Removed a total of 0 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 16 redundant assignments.
Promoted 58 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\full_adder.$proc$full_adder.sv:0$151'.
  Set init value: $formal$full_adder.sv:190$16_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$149'.
  Set init value: $formal$full_adder.sv:189$15_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$147'.
  Set init value: $formal$full_adder.sv:188$14_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$145'.
  Set init value: $formal$full_adder.sv:187$13_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$143'.
  Set init value: $formal$full_adder.sv:186$12_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$141'.
  Set init value: $formal$full_adder.sv:185$11_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$139'.
  Set init value: $formal$full_adder.sv:184$10_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$137'.
  Set init value: $formal$full_adder.sv:183$9_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$135'.
  Set init value: $formal$full_adder.sv:181$8_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$133'.
  Set init value: $formal$full_adder.sv:180$7_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$131'.
  Set init value: $formal$full_adder.sv:178$6_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$129'.
  Set init value: $formal$full_adder.sv:177$5_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$127'.
  Set init value: $formal$full_adder.sv:172$4_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$125'.
  Set init value: $formal$full_adder.sv:171$3_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$123'.
  Set init value: $formal$full_adder.sv:168$2_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:0$121'.
  Set init value: $formal$full_adder.sv:167$1_EN = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:123$120'.
  Set init value: \f_past_3_valid = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:122$119'.
  Set init value: \f_past_2_valid = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:121$118'.
  Set init value: \f_past_valid = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:108$117'.
  Set init value: \f_carry_in = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:107$116'.
  Set init value: \f_b = 1'0
Found init rule in `\full_adder.$proc$full_adder.sv:106$115'.
  Set init value: \f_a = 1'0

4.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rstn in `\full_adder.$proc$full_adder.sv:131$45'.
Found async reset \rstn in `\full_adder.$proc$full_adder.sv:93$35'.
Found async reset \rstn in `\full_adder.$proc$full_adder.sv:73$31'.
Found async reset \rstn in `\full_adder.$proc$full_adder.sv:46$23'.

4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~4 debug messages>

4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$151'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$149'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$147'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$145'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$143'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$141'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$139'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$137'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$135'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$133'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$131'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$129'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$127'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$125'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$123'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:0$121'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:123$120'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:122$119'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:121$118'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:108$117'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:107$116'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:106$115'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:165$47'.
     1/8: $0$formal$full_adder.sv:167$1_EN[0:0]$49
     2/8: $0$formal$full_adder.sv:167$1_CHECK[0:0]$48
     3/8: $0$formal$full_adder.sv:168$2_EN[0:0]$51
     4/8: $0$formal$full_adder.sv:168$2_CHECK[0:0]$50
     5/8: $0$formal$full_adder.sv:171$3_EN[0:0]$53
     6/8: $0$formal$full_adder.sv:171$3_CHECK[0:0]$52
     7/8: $0$formal$full_adder.sv:172$4_EN[0:0]$55
     8/8: $0$formal$full_adder.sv:172$4_CHECK[0:0]$54
Creating decoders for process `\full_adder.$proc$full_adder.sv:131$45'.
     1/10: $0\f_past_valid[0:0]
     2/10: $0\f_c3[0:0]
     3/10: $0\f_c2[0:0]
     4/10: $0\f_s3[0:0]
     5/10: $0\f_s2[0:0]
     6/10: $0\f_carry_in[0:0]
     7/10: $0\f_b[0:0]
     8/10: $0\f_a[0:0]
     9/10: $0\f_past_3_valid[0:0]
    10/10: $0\f_past_2_valid[0:0]
Creating decoders for process `\full_adder.$proc$full_adder.sv:93$35'.
     1/2: $0\sum[0:0]
     2/2: $0\carry_out[0:0]
Creating decoders for process `\full_adder.$proc$full_adder.sv:87$33'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:73$31'.
     1/3: $0\c1_past[0:0]
     2/3: $0\c2[0:0]
     3/3: $0\s2[0:0]
Creating decoders for process `\full_adder.$proc$full_adder.sv:60$25'.
Creating decoders for process `\full_adder.$proc$full_adder.sv:46$23'.
     1/3: $0\c_in[0:0]
     2/3: $0\c1[0:0]
     3/3: $0\s1[0:0]
Creating decoders for process `\full_adder.$proc$full_adder.sv:33$17'.

4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\full_adder.\carry_out_next' from process `\full_adder.$proc$full_adder.sv:87$33'.
No latch inferred for signal `\full_adder.\sum_next' from process `\full_adder.$proc$full_adder.sv:87$33'.
No latch inferred for signal `\full_adder.\c1_past_next' from process `\full_adder.$proc$full_adder.sv:60$25'.
No latch inferred for signal `\full_adder.\s2_next' from process `\full_adder.$proc$full_adder.sv:60$25'.
No latch inferred for signal `\full_adder.\c2_next' from process `\full_adder.$proc$full_adder.sv:60$25'.
No latch inferred for signal `\full_adder.\prc_half_adder_2_comb.s_nand' from process `\full_adder.$proc$full_adder.sv:60$25'.
No latch inferred for signal `\full_adder.\prc_half_adder_2_comb.s_or' from process `\full_adder.$proc$full_adder.sv:60$25'.
No latch inferred for signal `\full_adder.\s1_next' from process `\full_adder.$proc$full_adder.sv:33$17'.
No latch inferred for signal `\full_adder.\c_in_next' from process `\full_adder.$proc$full_adder.sv:33$17'.
No latch inferred for signal `\full_adder.\c1_next' from process `\full_adder.$proc$full_adder.sv:33$17'.
No latch inferred for signal `\full_adder.\prc_half_adder_1_comb.s_nand' from process `\full_adder.$proc$full_adder.sv:33$17'.
No latch inferred for signal `\full_adder.\prc_half_adder_1_comb.s_or' from process `\full_adder.$proc$full_adder.sv:33$17'.

4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\full_adder.$formal$full_adder.sv:167$1_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:167$1_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:168$2_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$193' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:168$2_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$194' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:171$3_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$195' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:171$3_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$196' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:172$4_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$197' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:172$4_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$198' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:177$5_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$199' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:177$5_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$200' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:178$6_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$201' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:178$6_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$202' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:180$7_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$203' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:180$7_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$204' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:181$8_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$205' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:181$8_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$206' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:183$9_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$207' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:183$9_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$208' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:184$10_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$209' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:184$10_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$210' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:185$11_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$211' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:185$11_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$212' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:186$12_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$213' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:186$12_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$214' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:187$13_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$215' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:187$13_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$216' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:188$14_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$217' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:188$14_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$218' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:189$15_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$219' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:189$15_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$220' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:190$16_CHECK' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$221' with positive edge clock.
Creating register for signal `\full_adder.$formal$full_adder.sv:190$16_EN' using process `\full_adder.$proc$full_adder.sv:165$47'.
  created $dff cell `$procdff$222' with positive edge clock.
Creating register for signal `\full_adder.\f_a' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$223' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_b' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$224' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_carry_in' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$225' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_s2' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$226' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_s3' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$227' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_c2' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$228' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_past_valid' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$229' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_past_2_valid' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$230' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_past_3_valid' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$231' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\f_c3' using process `\full_adder.$proc$full_adder.sv:131$45'.
  created $adff cell `$procdff$232' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\sum' using process `\full_adder.$proc$full_adder.sv:93$35'.
  created $adff cell `$procdff$233' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\carry_out' using process `\full_adder.$proc$full_adder.sv:93$35'.
  created $adff cell `$procdff$234' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\c1_past' using process `\full_adder.$proc$full_adder.sv:73$31'.
  created $adff cell `$procdff$235' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\s2' using process `\full_adder.$proc$full_adder.sv:73$31'.
  created $adff cell `$procdff$236' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\c2' using process `\full_adder.$proc$full_adder.sv:73$31'.
  created $adff cell `$procdff$237' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\s1' using process `\full_adder.$proc$full_adder.sv:46$23'.
  created $adff cell `$procdff$238' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\c1' using process `\full_adder.$proc$full_adder.sv:46$23'.
  created $adff cell `$procdff$239' with positive edge clock and negative level reset.
Creating register for signal `\full_adder.\c_in' using process `\full_adder.$proc$full_adder.sv:46$23'.
  created $adff cell `$procdff$240' with positive edge clock and negative level reset.

4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `full_adder.$proc$full_adder.sv:0$151'.
Removing empty process `full_adder.$proc$full_adder.sv:0$149'.
Removing empty process `full_adder.$proc$full_adder.sv:0$147'.
Removing empty process `full_adder.$proc$full_adder.sv:0$145'.
Removing empty process `full_adder.$proc$full_adder.sv:0$143'.
Removing empty process `full_adder.$proc$full_adder.sv:0$141'.
Removing empty process `full_adder.$proc$full_adder.sv:0$139'.
Removing empty process `full_adder.$proc$full_adder.sv:0$137'.
Removing empty process `full_adder.$proc$full_adder.sv:0$135'.
Removing empty process `full_adder.$proc$full_adder.sv:0$133'.
Removing empty process `full_adder.$proc$full_adder.sv:0$131'.
Removing empty process `full_adder.$proc$full_adder.sv:0$129'.
Removing empty process `full_adder.$proc$full_adder.sv:0$127'.
Removing empty process `full_adder.$proc$full_adder.sv:0$125'.
Removing empty process `full_adder.$proc$full_adder.sv:0$123'.
Removing empty process `full_adder.$proc$full_adder.sv:0$121'.
Removing empty process `full_adder.$proc$full_adder.sv:123$120'.
Removing empty process `full_adder.$proc$full_adder.sv:122$119'.
Removing empty process `full_adder.$proc$full_adder.sv:121$118'.
Removing empty process `full_adder.$proc$full_adder.sv:108$117'.
Removing empty process `full_adder.$proc$full_adder.sv:107$116'.
Removing empty process `full_adder.$proc$full_adder.sv:106$115'.
Found and cleaned up 2 empty switches in `\full_adder.$proc$full_adder.sv:165$47'.
Removing empty process `full_adder.$proc$full_adder.sv:165$47'.
Found and cleaned up 2 empty switches in `\full_adder.$proc$full_adder.sv:131$45'.
Removing empty process `full_adder.$proc$full_adder.sv:131$45'.
Removing empty process `full_adder.$proc$full_adder.sv:93$35'.
Removing empty process `full_adder.$proc$full_adder.sv:87$33'.
Removing empty process `full_adder.$proc$full_adder.sv:73$31'.
Removing empty process `full_adder.$proc$full_adder.sv:60$25'.
Removing empty process `full_adder.$proc$full_adder.sv:46$23'.
Removing empty process `full_adder.$proc$full_adder.sv:33$17'.
Cleaned up 4 empty switches.

4.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder.
<suppressed ~8 debug messages>

4.3. Executing FUTURE pass.

4.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder.

4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder..
Removed 5 unused cells and 118 unused wires.
<suppressed ~7 debug messages>

4.6. Executing CHECK pass (checking for obvious problems).
Checking module full_adder...
Found and reported 0 problems.

4.7. Executing OPT pass (performing simple optimizations).

4.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder.

4.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder.
Performed a total of 0 changes.

4.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

4.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder..
Removed 0 unused cells and 35 unused wires.
<suppressed ~1 debug messages>

4.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder.

4.7.8. Rerunning OPT passes. (Maybe there is more to do..)

4.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \full_adder.
Performed a total of 0 changes.

4.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder'.
Removed a total of 0 cells.

4.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder..

4.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder.

4.7.14. Finished OPT passes. (There is nothing left to do.)

4.8. Executing WREDUCE pass (reducing word size of cells).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder..

4.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.11. Executing OPT pass (performing simple optimizations).

4.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module full_adder.

4.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\full_adder'.
Removed a total of 0 cells.

4.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \full_adder..

4.11.4. Finished fast OPT passes.

4.12. Printing statistics.

=== full_adder ===

   Number of wires:                 91
   Number of wire bits:             91
   Number of public wires:          39
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 99
     $adff                          18
     $assert                         4
     $cover                         12
     $dff                           19
     $logic_and                     17
     $logic_not                      9
     $logic_or                       4
     $mux                           12
     $xor                            4

4.13. Executing CHECK pass (checking for obvious problems).
Checking module full_adder...
Found and reported 0 problems.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \full_adder

5.2. Analyzing design hierarchy..
Top module:  \full_adder
Removed 0 unused modules.
Module full_adder directly or indirectly contains formal properties -> setting "keep" attribute.

6. Executing jny backend.

7. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 11 unique messages, 11 total
End of script. Logfile hash: ce536e524c, CPU: user 0.09s system 0.05s, MEM: 14.83 MB peak
Yosys 0.37 (git sha1 a5c7f69ed8f, clang 14.0.6 -fPIC -Os)
Time spent: 17% 6x opt_expr (0 sec), 17% 3x hierarchy (0 sec), ...
