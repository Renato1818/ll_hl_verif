<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE nta PUBLIC "-//Uppaal Team//DTD Flat System 1.1//EN" "http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd"><nta><declaration>typedef int short;
typedef int unsigned_short;
typedef int uint64;
typedef int tlm_sync_enum;
const tlm_sync_enum END_RESP = 2;
const tlm_sync_enum TLM_UPDATED = 2;
const tlm_sync_enum BEGIN_RESP = 1;
const tlm_sync_enum TLM_ACCEPTED = 1;
const tlm_sync_enum TLM_GENERIC_ERROR_RESPONSE = 64;
const tlm_sync_enum TLM_INCOMPLETE_RESPONSE = 16;
const tlm_sync_enum END_REQ = 8;
const tlm_sync_enum TLM_OK_RESPONSE = 32;
const tlm_sync_enum TLM_COMPLETED = 4;
const tlm_sync_enum BEGIN_REQ = 4;
const tlm_sync_enum TLM_WRITE_COMMAND = 16;
const tlm_sync_enum TLM_IGNORE_COMMAND = 32;
const tlm_sync_enum TLM_READ_COMMAND = 8;
const tlm_sync_enum TLM_BURST_ERROR_RESPONSE = 32;
typedef int tlm_dmi;
typedef int sc_uint;
typedef int unsigned_int;
clock global;

///////////////////////////
// MEMORY ALLOCATION STATES
///////////////////////////

const int MEM_FREE = 0;
const int MEM_STATIC_OBJ = 1;
const int MEM_STATIC_ARR_HEAD = 2;
const int MEM_STATIC_ARR_TAIL = 3;
const int MEM_DYN_OBJ = 4;
const int MEM_DYN_ARR_HEAD = 5;
const int MEM_DYN_ARR_TAIL = 6;
const int NULL = -1;

////////////////////////
// MEMORY RELATED ERRORS
////////////////////////

bool MEM_ERR_DOUBLE_FREE = false;
bool MEM_ERR_INVALID_ARR_DELETE = false;
bool MEM_ERR_INVALID_OBJ_DELETE = false;
bool MEM_ERR_DELETE_ON_STATIC_VAR = false;
bool MEM_ERR_NOT_ENOUGH_MEM = false;
bool MEM_ERR_CORRUPTED_MEM = false;
bool MEM_ERR_FRAGMENTED_MEM = false;


///////////////////
// INT - globals
///////////////////

const int DEFAULT_INT_VALUE = 0;
const int INT_MEMSIZE = 3;
int INT_FREE_MEM = INT_MEMSIZE;
typedef int[NULL, INT_MEMSIZE-1] int_addr_ptr;
int[0, 6] intMemState[INT_MEMSIZE];
int intMem[INT_MEMSIZE];
bool MEM_ERR_FRAGMENTED_MEM_INT = false;
bool MEM_ERR_NOT_ENOUGH_MEM_INT = false;


///////////////////
// Global Variable Definition
///////////////////

bool PEQ_ERR_OUT_OF_ELEMENTS = false;
int clk$period;
int_addr_ptr fifo_inst$buffer = NULL;
int fifo_inst$n;
int fifo_inst$r_pos;
int fifo_inst$w_pos;
int prod_inst$pid;
chan activate;
chan deactivate;
chan updatestart;
chan updateend;
broadcast chan initdone;
broadcast chan deltadelay;
broadcast chan advancetime;
int deltacount = 0;
int readyprocs = 3;
int updaterequests = 0;
chan scmodules_initialized;
broadcast chan dummybchannel;
chan dummychannel;
int dummyinteger;
broadcast chan clk$edge$wait;
chan clk$edge$notify;
chan clk$edge$notify_imm;
int clk$edge$notify_t;
broadcast chan clk$thread0$sensitivechan;
broadcast chan clk$thread0$timeoutevent$wait;
chan clk$thread0$timeoutevent$notify;
chan clk$thread0$timeoutevent$notify_imm;
int clk$thread0$timeoutevent$notify_t;
chan clk$thread0$sc_clock$run$ctrl;
broadcast chan fifo_inst$w_event$wait;
chan fifo_inst$w_event$notify;
chan fifo_inst$w_event$notify_imm;
int fifo_inst$w_event$notify_t;
broadcast chan fifo_inst$r_event$wait;
chan fifo_inst$r_event$notify;
chan fifo_inst$r_event$notify_imm;
int fifo_inst$r_event$notify_t;
broadcast chan prod_inst$thread0$sensitivechan;
broadcast chan prod_inst$thread0$timeoutevent$wait;
chan prod_inst$thread0$timeoutevent$notify;
chan prod_inst$thread0$timeoutevent$notify_imm;
int prod_inst$thread0$timeoutevent$notify_t;
chan prod_inst$thread0$producer$main_method$ctrl;
chan prod_inst$thread0$producer$produce$ctrl;
int prod_inst$thread0$producer$produce$param$c_param;
int prod_inst$thread0$producer$produce$return;
chan prod_inst$thread0$fifo$myfifo$write$ctrl;
int prod_inst$thread0$fifo$myfifo$write$param$c;
broadcast chan cons_inst$thread0$sensitivechan;
broadcast chan cons_inst$thread0$timeoutevent$wait;
chan cons_inst$thread0$timeoutevent$notify;
chan cons_inst$thread0$timeoutevent$notify_imm;
int cons_inst$thread0$timeoutevent$notify_t;
chan cons_inst$thread0$consumer$main_method$ctrl;
chan cons_inst$thread0$fifo$myfifo$read$ctrl;
int cons_inst$thread0$fifo$myfifo$read$return;
chan cons_inst$thread0$consumer$consume$ctrl;
int cons_inst$thread0$consumer$consume$param$c_param;

///////////////////
// INT - helper functions
///////////////////

bool is_free_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_FREE;
}

bool is_obj_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_STATIC_OBJ || intMemState[pos] == MEM_DYN_OBJ;
}

bool is_static_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_STATIC_OBJ || intMemState[pos] == MEM_STATIC_ARR_HEAD || intMemState[pos] == MEM_STATIC_ARR_TAIL;
}

bool is_dynamic_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_DYN_OBJ || intMemState[pos] == MEM_DYN_ARR_HEAD || intMemState[pos] == MEM_DYN_ARR_TAIL;
}

bool is_arr_head_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_STATIC_ARR_HEAD || intMemState[pos] == MEM_DYN_ARR_HEAD;
}

bool is_arr_tail_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_STATIC_ARR_TAIL || intMemState[pos] == MEM_DYN_ARR_TAIL;
}

void check_mem_errors_for_delete_int(int_addr_ptr pos, bool isStatic, bool shouldBeAnArray) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else if (is_free_elem_int(pos)) {
		MEM_ERR_DOUBLE_FREE = true;
	} else if (not is_obj_elem_int(pos) &amp;&amp; not is_arr_head_elem_int(pos)) {
		// something went completely wrong :(
		// ex: delete somewhere in the middle of an array
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		if (!isStatic &amp;&amp; is_static_elem_int(pos)) {
			MEM_ERR_DELETE_ON_STATIC_VAR = true;
		}
		if (shouldBeAnArray) {
			if (not is_arr_head_elem_int(pos)) {
				MEM_ERR_INVALID_ARR_DELETE = true; // shouldn't have called 'delete []' ?
			}
		} else { // delete normal obj
			if (not is_obj_elem_int(pos)) {
				MEM_ERR_INVALID_OBJ_DELETE = true;
			}
		}
	}
}

bool addr_is_in_range_int(int pos) {
	return pos &gt;= 0 &amp;&amp; pos &lt; INT_MEMSIZE;
}

bool addr_is_valid_int(int_addr_ptr pos) {
	return pos != NULL &amp;&amp; intMemState[pos] != MEM_FREE;
}

bool is_arr_elem_int(int head, int index) {
	int i;
	if (!addr_is_in_range_int(head + index)) {
		return false;
	}
	if (!is_arr_head_elem_int(head)) {
		return false;
	}
	if (index &lt; 0) { // assuming heap/stack arrays grow leftward
		return false;
	}
	for (i = head + 1; i &lt;= head + index; i++) {
		if (!is_arr_tail_elem_int(i)) {
			return false;
		}
	}
	return true;
}


///////////////////
// INT - private
///////////////////

void allocate_and_init_int(int memState, int_addr_ptr pos, int value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		intMemState[pos] = memState;
		intMem[pos] = value;
        if (memState == MEM_FREE) {
            INT_FREE_MEM++;
        } else {
            INT_FREE_MEM--;
        }
	}
}

void allocate_int(int memState, int_addr_ptr pos) {
	allocate_and_init_int(memState, pos, DEFAULT_INT_VALUE);
}

int_addr_ptr find_free_pos_int(int memState) {
	int_addr_ptr pos = NULL;
	if (memState == MEM_STATIC_OBJ) { // stack
		for(pos = 0; pos &lt;= INT_MEMSIZE - 1; pos++) {
			if (intMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	} else if (memState == MEM_DYN_OBJ) { // heap
		for(pos = INT_MEMSIZE - 1; pos &gt;= 0; pos--) {
			if (intMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	}
	return NULL;
}

int_addr_ptr find_free_pos_and_allocate_and_init_int(int memState, int value) {
	int_addr_ptr pos;
	if (INT_FREE_MEM == 0) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_INT = true;
		return NULL;
	}
	pos = find_free_pos_int(memState);
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		allocate_and_init_int(memState, pos, value);
	}
	return pos;
}

int_addr_ptr find_free_pos_and_allocate_int(int memState) {
	return find_free_pos_and_allocate_and_init_int(memState, DEFAULT_INT_VALUE);
}

void delete_int(int_addr_ptr pos, bool isStatic) {
	check_mem_errors_for_delete_int(pos, isStatic, false);
	allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
}
//////////////////
// INT - public
//////////////////

int_addr_ptr allocate_static_int() {
	return find_free_pos_and_allocate_and_init_int(MEM_STATIC_OBJ, DEFAULT_INT_VALUE);
}

int_addr_ptr allocate_dynamic_int() {
	return find_free_pos_and_allocate_and_init_int(MEM_DYN_OBJ, DEFAULT_INT_VALUE);
}

int_addr_ptr allocate_static_and_init_int(int value) {
	return find_free_pos_and_allocate_and_init_int(MEM_STATIC_OBJ, value);
}

int_addr_ptr allocate_dynamic_and_init_int(int value) {
	return find_free_pos_and_allocate_and_init_int(MEM_DYN_OBJ, value);
}

void delete_static_int(int_addr_ptr pos) {
	delete_int(pos, true);
}

void delete_dynamic_int(int_addr_ptr pos) {
	delete_int(pos, false);
}

void empty_stack_int(int_addr_ptr pos) {
	if (pos != NULL) {
	    allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
	}
}


/////////////////////////
// INT ARRAY - private
/////////////////////////

int_addr_ptr find_free_pos_arr_int(int memState, int length) {
	int count = 0;
	int_addr_ptr pos = -1;
	int i = 0;
	if (memState == MEM_STATIC_ARR_HEAD) {
		for (i = 0; i &lt;= INT_MEMSIZE - 1; i++) {
			if (intMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos;
				}
			} else if (is_static_elem_int(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	} else if (memState == MEM_DYN_ARR_HEAD) {
		for(i = INT_MEMSIZE - 1; i &gt;= 0; i--) {
			if (intMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos - length + 1; // return the 'lower' index w.r.t. the memArray; + 1 because count starts at 0
				}
			} else if (is_static_elem_int(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	}
	return NULL;
}

int_addr_ptr allocate_arr_int(int memState, int length) {
	int i;
    int_addr_ptr pos;
    int tailElemStateType;
    if (INT_FREE_MEM &lt; length) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_INT = true;
		return NULL;
	}
	pos = find_free_pos_arr_int(memState, length);
	if (pos == NULL) {
		MEM_ERR_FRAGMENTED_MEM = true;
		MEM_ERR_FRAGMENTED_MEM_INT = true;
		return NULL;
	}
	if (memState == MEM_STATIC_ARR_HEAD) {
		tailElemStateType = MEM_STATIC_ARR_TAIL;
	} else {
		tailElemStateType = MEM_DYN_ARR_TAIL;
	}
	allocate_int(memState, pos); // allocate head
	for(i = pos + 1; i &lt; (pos + length); i++) {
		allocate_int(tailElemStateType, i);
	}
	return pos;
}

void delete_arr_int(int_addr_ptr pos, bool isStatic) {
	int i = pos + 1;
	check_mem_errors_for_delete_int(pos, isStatic, true);
	allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
	while(i &lt; INT_MEMSIZE &amp;&amp; is_arr_tail_elem_int(i)) {
		allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
		i++;
	}
}

////////////////////////
// INT ARRAY - public
////////////////////////

int_addr_ptr allocate_static_arr_int(int length) {
	return allocate_arr_int(MEM_STATIC_ARR_HEAD, length);
}

int_addr_ptr allocate_dynamic_arr_int(int length) {
	return allocate_arr_int(MEM_DYN_ARR_HEAD, length);
}

void delete_arr_static_int(int_addr_ptr pos) {
	delete_arr_int(pos, true);
}

void delete_arr_dynamic_int(int_addr_ptr pos) {
	delete_arr_int(pos, false);
}

void empty_stack_arr_int(int_addr_ptr pos) {
	int i = pos + 1;
	if (pos != NULL) {
		allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
		while(i &lt; INT_MEMSIZE &amp;&amp; is_arr_tail_elem_int(i)) {
			allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
			i++;
		}
	}
}

void init_arr_elem_int(int_addr_ptr pos, int value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		intMem[pos] = value;
	}
}

void clk$ctor(const int periodparam, int &amp;period){
period = periodparam;
}
void fifo_inst$ctor(int_addr_ptr &amp;buffer, int &amp;n, int &amp;r_pos, int &amp;w_pos){
n = 0;
r_pos = 0;
w_pos = 0;
}
void prod_inst$ctor(const int i, int &amp;pid){
pid = i;
}
void cons_inst$ctor(){
}
void sc_main(){
clk$ctor(50, clk$period);
fifo_inst$ctor(fifo_inst$buffer, fifo_inst$n, fifo_inst$r_pos, fifo_inst$w_pos);
prod_inst$ctor(127, prod_inst$pid);
cons_inst$ctor();
}</declaration><template><name>InitializerTemplate</name><parameter /><declaration /><location id="id0" x="0" y="16"><urgent /></location><location id="id1" x="0" y="80"><committed /></location><location id="id2" x="0" y="144" /><init ref="id0" /><transition><source ref="id0" /><target ref="id1" /><label kind="synchronisation" x="8" y="32">deltadelay?</label><label kind="comments" /><nail x="0" y="32" /><nail x="0" y="64" /></transition><transition><source ref="id1" /><target ref="id2" /><label kind="synchronisation" x="8" y="96">initdone!</label><label kind="comments" /><nail x="0" y="96" /><nail x="0" y="128" /></transition></template><template><name>SCEventTemplate</name><parameter>chan &amp;notify_imm, int &amp;notify_t, chan &amp;notify, broadcast chan &amp;wait</parameter><declaration>clock wait_clock;
int ndelay;</declaration><location id="id24" x="1089" y="16"><name x="1113" y="8">initL</name></location><location id="id25" x="1150" y="95"><name x="1174" y="87">notify_requested</name><committed /></location><location id="id26" x="1150" y="383"><name x="1174" y="368">wait_for_delta</name><label kind="invariant" x="1174" y="383">wait_clock &lt;= ndelay</label></location><location id="id27" x="386" y="191"><name x="410" y="183">notify_now</name><committed /></location><location id="id28" x="537" y="319"><name x="561" y="311">advancing_time</name><committed /></location><location id="id151" x="768" y="223"><committed /></location><location id="id152" x="664" y="287"><committed /></location><location id="id153" x="100" y="127"><committed /></location><init ref="id24" /><transition><source ref="id26" /><target ref="id25" /><label kind="synchronisation" x="1097" y="223">notify?</label><label kind="comments" /><nail x="1089" y="367" /><nail x="1089" y="111" /></transition><transition><source ref="id25" /><target ref="id26" /><label kind="guard" x="1158" y="223">wait_clock + notify_t &gt;= ndelay</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="1150" y="111" /><nail x="1150" y="367" /></transition><transition><source ref="id26" /><target ref="id27" /><label kind="guard" x="8" y="263">wait_clock == ndelay  &amp;&amp;
ndelay != 0</label><label kind="synchronisation" x="8" y="291">advancetime!</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="0" y="367" /><nail x="0" y="207" /></transition><transition><source ref="id28" /><target ref="id26" /><label kind="guard" x="394" y="335">wait_clock &lt; ndelay</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="386" y="335" /><nail x="386" y="367" /></transition><transition><source ref="id28" /><target ref="id27" /><label kind="guard" x="394" y="239">wait_clock == ndelay</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="386" y="303" /><nail x="386" y="207" /></transition><transition><source ref="id26" /><target ref="id27" /><label kind="synchronisation" x="198" y="271">notify_imm?</label><label kind="comments" /><nail x="190" y="367" /><nail x="190" y="207" /></transition><transition><source ref="id24" /><target ref="id27" /><label kind="synchronisation" x="8" y="87">notify_imm?</label><label kind="comments" /><nail x="0" y="32" /><nail x="0" y="175" /></transition><transition><source ref="id24" /><target ref="id25" /><label kind="synchronisation" x="1097" y="32">notify?</label><label kind="assignment" x="1097" y="45">ndelay = notify_t,
wait_clock = 0</label><label kind="comments">Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label><nail x="1089" y="32" /><nail x="1089" y="79" /></transition><transition><source ref="id25" /><target ref="id151" /><label kind="guard" x="880" y="143">wait_clock + notify_t &lt; ndelay</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="872" y="111" /><nail x="872" y="207" /></transition><transition><source ref="id151" /><target ref="id152" /><label kind="assignment" x="672" y="239">ndelay = notify_t</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="664" y="239" /><nail x="664" y="271" /></transition><transition><source ref="id152" /><target ref="id26" /><label kind="assignment" x="672" y="319">wait_clock = 0</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="664" y="303" /><nail x="664" y="367" /></transition><transition><source ref="id26" /><target ref="id27" /><label kind="guard" x="298" y="271">ndelay == 0</label><label kind="synchronisation" x="298" y="284">deltadelay?</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="290" y="367" /><nail x="290" y="207" /></transition><transition><source ref="id26" /><target ref="id28" /><label kind="guard" x="545" y="335">ndelay != 0</label><label kind="synchronisation" x="545" y="348">advancetime?</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="537" y="367" /><nail x="537" y="335" /></transition><transition><source ref="id27" /><target ref="id153" /><label kind="assignment" x="108" y="143">wait_clock = 0</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="100" y="175" /><nail x="100" y="143" /></transition><transition><source ref="id153" /><target ref="id24" /><label kind="synchronisation" x="108" y="55">wait!</label><label kind="comments" /><nail x="100" y="111" /><nail x="100" y="32" /></transition></template><template><name>SCMainTemplate</name><parameter /><declaration /><location id="id129" x="0" y="16"><name x="24" y="8">init_location</name><urgent /></location><location id="id130" x="127" y="80"><urgent /></location><location id="id131" x="85" y="112"><urgent /></location><location id="id132" x="0" y="208"><name x="24" y="200">scmain_end</name></location><location id="id157" x="212" y="176"><urgent /></location><init ref="id129" /><transition><source ref="id129" /><target ref="id130" /><label kind="assignment" x="8" y="32">fifo_inst$buffer = allocate_static_arr_int(3)</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="0" y="32" /><nail x="0" y="64" /></transition><transition><source ref="id131" /><target ref="id132" /><label kind="synchronisation" x="8" y="144">scmodules_initialized!</label><label kind="comments" /><nail x="0" y="128" /><nail x="0" y="192" /></transition><transition><source ref="id130" /><target ref="id157" /><label kind="guard" x="263" y="112">MEM_ERR_NOT_ENOUGH_MEM == 0</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="255" y="96" /><nail x="255" y="160" /></transition><transition><source ref="id157" /><target ref="id131" /><label kind="assignment" x="178" y="128">sc_main()</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="170" y="160" /><nail x="170" y="128" /></transition></template><template><name>SchedulerTemplate</name><parameter /><declaration /><location id="id121" x="720" y="16"><name x="744" y="8">init_location</name><urgent /></location><location id="id122" x="840" y="400"><name x="864" y="392">execute</name><urgent /></location><location id="id123" x="840" y="80"><name x="864" y="72">evaluate</name><urgent /></location><location id="id124" x="242" y="240"><name x="266" y="232">update</name><urgent /></location><location id="id125" x="150" y="304"><name x="174" y="296">updating</name><urgent /></location><location id="id126" x="485" y="176"><name x="509" y="168">nextdelta</name><urgent /></location><location id="id127" x="606" y="368"><name x="630" y="360">time_progress</name></location><location id="id128" x="75" y="368"><urgent /></location><location id="id134" x="0" y="144"><urgent /></location><init ref="id121" /><transition><source ref="id121" /><target ref="id123" /><label kind="synchronisation" x="728" y="32">scmodules_initialized?</label><label kind="comments" /><nail x="720" y="32" /><nail x="720" y="64" /></transition><transition><source ref="id123" /><target ref="id122" /><label kind="guard" x="728" y="224">readyprocs &gt; 0</label><label kind="synchronisation" x="728" y="237">activate!</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="720" y="96" /><nail x="720" y="384" /></transition><transition><source ref="id122" /><target ref="id123" /><label kind="synchronisation" x="848" y="224">deactivate?</label><label kind="comments" /><nail x="840" y="384" /><nail x="840" y="96" /></transition><transition><source ref="id124" /><target ref="id128" /><label kind="guard" x="8" y="288">updaterequests &gt; 0</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="0" y="256" /><nail x="0" y="352" /></transition><transition><source ref="id128" /><target ref="id125" /><label kind="synchronisation" x="158" y="320">updatestart!</label><label kind="comments" /><nail x="150" y="352" /><nail x="150" y="320" /></transition><transition><source ref="id125" /><target ref="id124" /><label kind="synchronisation" x="158" y="256">updateend?</label><label kind="comments" /><nail x="150" y="288" /><nail x="150" y="256" /></transition><transition><source ref="id124" /><target ref="id126" /><label kind="guard" x="250" y="192">updaterequests == 0</label><label kind="synchronisation" x="250" y="205">deltadelay!</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="242" y="224" /><nail x="242" y="192" /></transition><transition><source ref="id126" /><target ref="id127" /><label kind="guard" x="485" y="256">readyprocs == 0</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="477" y="192" /><nail x="477" y="352" /></transition><transition><source ref="id126" /><target ref="id123" /><label kind="guard" x="493" y="112">readyprocs &gt; 0</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="485" y="160" /><nail x="485" y="96" /></transition><transition><source ref="id127" /><target ref="id123" /><label kind="synchronisation" x="614" y="208">advancetime?</label><label kind="comments" /><nail x="606" y="352" /><nail x="606" y="96" /></transition><transition><source ref="id123" /><target ref="id134" /><label kind="guard" x="8" y="96">readyprocs == 0</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1</label><nail x="0" y="96" /><nail x="0" y="128" /></transition><transition><source ref="id134" /><target ref="id124" /><label kind="assignment" x="8" y="176">deltacount = (deltacount + 1) % 2</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="0" y="160" /><nail x="0" y="224" /></transition></template><template><name>ThreadStarterTemplate</name><parameter>chan &amp;ctrl</parameter><declaration /><location id="id3" x="0" y="16"><urgent /></location><location id="id4" x="98" y="80"><urgent /></location><location id="id5" x="145" y="176" /><location id="id7" x="0" y="208" /><location id="id133" x="46" y="112"><urgent /></location><init ref="id3" /><transition><source ref="id3" /><target ref="id4" /><label kind="synchronisation" x="8" y="32">activate?</label><label kind="comments" /><nail x="0" y="32" /><nail x="0" y="64" /></transition><transition><source ref="id4" /><target ref="id5" /><label kind="synchronisation" x="205" y="112">ctrl!</label><label kind="comments" /><nail x="197" y="96" /><nail x="197" y="160" /></transition><transition><source ref="id5" /><target ref="id133" /><label kind="synchronisation" x="101" y="128">ctrl?</label><label kind="assignment" x="101" y="141">readyprocs--</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="93" y="160" /><nail x="93" y="128" /></transition><transition><source ref="id133" /><target ref="id7" /><label kind="synchronisation" x="8" y="144">deactivate!</label><label kind="comments" /><nail x="0" y="128" /><nail x="0" y="192" /></transition></template><template><name>consumer$consume</name><parameter>chan &amp;consume$ctrl, broadcast chan &amp;timeoutevent$wait, chan &amp;timeoutevent$notify, int &amp;consume$param$c_param, int &amp;timeoutevent$notify_t</parameter><declaration>int c_param;
int wait_time;</declaration><location id="id97" x="359" y="16"><name x="383" y="8">init_location</name></location><location id="id102" x="183" y="398"><committed /></location><location id="id103" x="0" y="206"><urgent /></location><location id="id104" x="0" y="270" /><location id="id99" x="123" y="142"><urgent /></location><location id="id140" x="363" y="110"><urgent /></location><location id="id141" x="0" y="334"><committed /></location><init ref="id97" /><transition><source ref="id103" /><target ref="id99" /><label kind="synchronisation" x="8" y="158">activate?</label><label kind="comments" /><nail x="0" y="190" /><nail x="0" y="158" /></transition><transition><source ref="id99" /><target ref="id97" /><label kind="synchronisation" x="254" y="63">consume$ctrl!</label><label kind="comments" /><nail x="246" y="126" /><nail x="246" y="32" /></transition><transition><source ref="id97" /><target ref="id140" /><label kind="synchronisation" x="367" y="32">consume$ctrl?</label><label kind="assignment" x="367" y="45">c_param = consume$param$c_param,
wait_time = 200,
readyprocs--</label><label kind="comments">Update:
nodeID: -1, file: , line: -1,
nodeID: 1108, file: consumer.h, line: 14,
nodeID: 1108, file: consumer.h, line: 14</label><nail x="359" y="32" /><nail x="359" y="94" /></transition><transition><source ref="id140" /><target ref="id102" /><label kind="synchronisation" x="375" y="238">deactivate!</label><label kind="comments" /><nail x="367" y="126" /><nail x="367" y="382" /></transition><transition><source ref="id102" /><target ref="id141" /><label kind="assignment" x="8" y="350">timeoutevent$notify_t = wait_time</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="0" y="382" /><nail x="0" y="350" /></transition><transition><source ref="id141" /><target ref="id104" /><label kind="synchronisation" x="8" y="286">timeoutevent$notify!</label><label kind="comments" /><nail x="0" y="318" /><nail x="0" y="286" /></transition><transition><source ref="id104" /><target ref="id103" /><label kind="synchronisation" x="8" y="222">timeoutevent$wait?</label><label kind="assignment" x="8" y="235">readyprocs++</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="0" y="254" /><nail x="0" y="222" /></transition></template><template><name>consumer$main_method</name><parameter>chan &amp;consume$ctrl, chan &amp;fifo$read$ctrl, chan &amp;main_method$ctrl, int &amp;fifo$read$return, int &amp;consume$param$c_param, broadcast chan &amp;sensitive</parameter><declaration>int c;</declaration><location id="id105" x="145" y="16"><name x="169" y="8">init_location</name></location><location id="id108" x="457" y="80"><urgent /></location><location id="id110" x="145" y="144"><urgent /></location><location id="id111" x="145" y="400"><urgent /></location><location id="id112" x="145" y="272" /><location id="id113" x="145" y="336"><urgent /></location><location id="id115" x="145" y="464" /><location id="id118" x="263" y="607" /><location id="id107" x="385" y="639"><urgent /></location><location id="id135" x="145" y="208"><urgent /></location><location id="id137" x="145" y="543"><urgent /></location><init ref="id105" /><transition><source ref="id105" /><target ref="id108" /><label kind="synchronisation" x="153" y="32">main_method$ctrl?</label><label kind="assignment" x="153" y="45">c = 0</label><label kind="comments">Update:
nodeID: 1214, file: consumer.h, line: 21</label><nail x="145" y="32" /><nail x="145" y="64" /></transition><transition><source ref="id108" /><target ref="id110" /><label kind="guard" x="153" y="96">true</label><label kind="comments">Guard:
nodeID: 1236, file: consumer.h, line: 22</label><nail x="145" y="96" /><nail x="145" y="128" /></transition><transition><source ref="id113" /><target ref="id111" /><label kind="synchronisation" x="153" y="352">activate?</label><label kind="comments" /><nail x="145" y="352" /><nail x="145" y="384" /></transition><transition><source ref="id111" /><target ref="id115" /><label kind="synchronisation" x="153" y="416">fifo$read$ctrl!</label><label kind="comments" /><nail x="145" y="416" /><nail x="145" y="448" /></transition><transition><source ref="id115" /><target ref="id137" /><label kind="synchronisation" x="153" y="480">fifo$read$ctrl?</label><label kind="assignment" x="153" y="493">c = fifo$read$return,
consume$param$c_param = c</label><label kind="comments">Update:
nodeID: 1258, file: consumer.h, line: 25,
nodeID: -1, file: , line: -1</label><nail x="145" y="480" /><nail x="145" y="527" /></transition><transition><source ref="id108" /><target ref="id107" /><label kind="guard" x="778" y="343">!(true)</label><label kind="comments">Guard:
nodeID: 1236, file: consumer.h, line: 22</label><nail x="770" y="96" /><nail x="770" y="623" /></transition><transition><source ref="id107" /><target ref="id105" /><label kind="synchronisation" x="8" y="311">main_method$ctrl!</label><label kind="comments" /><nail x="0" y="623" /><nail x="0" y="32" /></transition><transition><source ref="id110" /><target ref="id135" /><label kind="assignment" x="153" y="160">readyprocs--</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="145" y="160" /><nail x="145" y="192" /></transition><transition><source ref="id135" /><target ref="id112" /><label kind="synchronisation" x="153" y="224">deactivate!</label><label kind="comments" /><nail x="145" y="224" /><nail x="145" y="256" /></transition><transition><source ref="id112" /><target ref="id113" /><label kind="synchronisation" x="153" y="288">sensitive?</label><label kind="assignment" x="153" y="301">readyprocs++</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="145" y="288" /><nail x="145" y="320" /></transition><transition><source ref="id137" /><target ref="id118" /><label kind="synchronisation" x="153" y="559">consume$ctrl!</label><label kind="comments" /><nail x="145" y="559" /><nail x="145" y="591" /></transition><transition><source ref="id118" /><target ref="id108" /><label kind="synchronisation" x="390" y="327">consume$ctrl?</label><label kind="assignment" x="390" y="340">consume$param$c_param = DEFAULT_INT_VALUE</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="382" y="591" /><nail x="382" y="96" /></transition></template><template><name>consumer$thread0$sensitiveTemp</name><parameter>broadcast chan &amp;c_clock, broadcast chan &amp;sensitive</parameter><declaration /><location id="id119" x="41" y="16" /><location id="id120" x="41" y="80"><committed /></location><init ref="id119" /><transition><source ref="id120" /><target ref="id119" /><label kind="synchronisation" x="8" y="32">sensitive!</label><label kind="comments" /><nail x="0" y="64" /><nail x="0" y="32" /></transition><transition><source ref="id119" /><target ref="id120" /><label kind="synchronisation" x="90" y="32">c_clock?</label><label kind="comments" /><nail x="82" y="32" /><nail x="82" y="64" /></transition></template><template><name>myfifo$read</name><parameter>int_addr_ptr &amp;buffer, chan &amp;r_event$notify_imm, broadcast chan &amp;w_event$wait, int &amp;r_pos, int &amp;read$return, chan &amp;read$ctrl, int &amp;n</parameter><declaration>int c;</declaration><location id="id60" x="82" y="16"><name x="106" y="8">init_location</name></location><location id="id61" x="213" y="80"><urgent /></location><location id="id64" x="212" y="432"><urgent /></location><location id="id66" x="79" y="560" /><location id="id67" x="39" y="624"><urgent /></location><location id="id63" x="271" y="400"><name x="295" y="392">chkptr_1</name><urgent /></location><location id="id68" x="0" y="306"><urgent /></location><location id="id70" x="0" y="240"><urgent /></location><location id="id71" x="0" y="176"><urgent /></location><location id="id158" x="79" y="496"><urgent /></location><location id="id160" x="0" y="112"><urgent /></location><init ref="id60" /><transition><source ref="id60" /><target ref="id61" /><label kind="synchronisation" x="90" y="32">read$ctrl?</label><label kind="comments" /><nail x="82" y="32" /><nail x="82" y="64" /></transition><transition><source ref="id61" /><target ref="id64" /><label kind="guard" x="353" y="240">n == 0</label><label kind="comments">Guard:
nodeID: 470, file: myfifo.h, line: 41</label><nail x="345" y="96" /><nail x="345" y="416" /></transition><transition><source ref="id67" /><target ref="id63" /><label kind="synchronisation" x="8" y="496">activate?</label><label kind="comments" /><nail x="0" y="608" /><nail x="0" y="416" /></transition><transition><source ref="id61" /><target ref="id63" /><label kind="guard" x="279" y="224">!(n == 0)</label><label kind="comments">Guard:
nodeID: 470, file: myfifo.h, line: 41</label><nail x="271" y="96" /><nail x="271" y="384" /></transition><transition><source ref="id63" /><target ref="id68" /><label kind="guard" x="8" y="322">addr_is_valid_int(buffer + r_pos)  &amp;&amp;
is_arr_elem_int(buffer,
r_pos)</label><label kind="assignment" x="8" y="365">c = intMem[buffer + r_pos]</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 506, file: myfifo.h, line: 43</label><nail x="0" y="384" /><nail x="0" y="322" /></transition><transition><source ref="id68" /><target ref="id70" /><label kind="assignment" x="8" y="256">n = n - 1,
r_pos = (r_pos + 1) % 3</label><label kind="comments">Update:
nodeID: 534, file: myfifo.h, line: 44,
nodeID: 560, file: myfifo.h, line: 45</label><nail x="0" y="290" /><nail x="0" y="256" /></transition><transition><source ref="id70" /><target ref="id71" /><label kind="synchronisation" x="8" y="192">r_event$notify_imm!</label><label kind="comments" /><nail x="0" y="224" /><nail x="0" y="192" /></transition><transition><source ref="id64" /><target ref="id158" /><label kind="assignment" x="87" y="448">readyprocs--</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="79" y="448" /><nail x="79" y="480" /></transition><transition><source ref="id158" /><target ref="id66" /><label kind="synchronisation" x="87" y="512">deactivate!</label><label kind="comments" /><nail x="79" y="512" /><nail x="79" y="544" /></transition><transition><source ref="id66" /><target ref="id67" /><label kind="synchronisation" x="87" y="576">w_event$wait?</label><label kind="assignment" x="87" y="589">readyprocs++</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="79" y="576" /><nail x="79" y="608" /></transition><transition><source ref="id71" /><target ref="id160" /><label kind="assignment" x="8" y="128">read$return = c</label><label kind="comments">Update:
nodeID: 594, file: myfifo.h, line: 47</label><nail x="0" y="160" /><nail x="0" y="128" /></transition><transition><source ref="id160" /><target ref="id60" /><label kind="synchronisation" x="8" y="48">read$ctrl!</label><label kind="comments" /><nail x="0" y="96" /><nail x="0" y="32" /></transition></template><template><name>myfifo$write</name><parameter>int_addr_ptr &amp;buffer, chan &amp;write$ctrl, broadcast chan &amp;r_event$wait, int &amp;w_pos, chan &amp;w_event$notify_imm, int &amp;write$param$c, int &amp;n</parameter><declaration>int c;</declaration><location id="id48" x="83" y="16"><name x="107" y="8">init_location</name></location><location id="id49" x="274" y="80"><urgent /></location><location id="id52" x="341" y="144"><urgent /></location><location id="id54" x="277" y="272" /><location id="id55" x="277" y="336"><urgent /></location><location id="id51" x="465" y="528"><name x="489" y="520">chkptr_0</name><urgent /></location><location id="id56" x="0" y="434"><urgent /></location><location id="id58" x="0" y="368"><urgent /></location><location id="id50" x="0" y="112"><urgent /></location><location id="id155" x="277" y="208"><urgent /></location><init ref="id48" /><transition><source ref="id49" /><target ref="id52" /><label kind="guard" x="414" y="96">n == 3</label><label kind="comments">Guard:
nodeID: 298, file: myfifo.h, line: 30</label><nail x="406" y="96" /><nail x="406" y="128" /></transition><transition><source ref="id55" /><target ref="id51" /><label kind="synchronisation" x="285" y="416">activate?</label><label kind="comments" /><nail x="277" y="352" /><nail x="277" y="512" /></transition><transition><source ref="id49" /><target ref="id51" /><label kind="guard" x="473" y="288">!(n == 3)</label><label kind="comments">Guard:
nodeID: 298, file: myfifo.h, line: 30</label><nail x="465" y="96" /><nail x="465" y="512" /></transition><transition><source ref="id51" /><target ref="id56" /><label kind="guard" x="8" y="450">addr_is_valid_int(buffer + w_pos)  &amp;&amp;
is_arr_elem_int(buffer,
w_pos)</label><label kind="assignment" x="8" y="493">intMem[buffer + w_pos] = c</label><label kind="comments">Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 344, file: myfifo.h, line: 32</label><nail x="0" y="512" /><nail x="0" y="450" /></transition><transition><source ref="id56" /><target ref="id58" /><label kind="assignment" x="8" y="384">n = n + 1,
w_pos = (w_pos + 1) % 3</label><label kind="comments">Update:
nodeID: 362, file: myfifo.h, line: 33,
nodeID: 388, file: myfifo.h, line: 34</label><nail x="0" y="418" /><nail x="0" y="384" /></transition><transition><source ref="id58" /><target ref="id50" /><label kind="synchronisation" x="8" y="224">w_event$notify_imm!</label><label kind="comments" /><nail x="0" y="352" /><nail x="0" y="128" /></transition><transition><source ref="id50" /><target ref="id48" /><label kind="synchronisation" x="8" y="48">write$ctrl!</label><label kind="comments" /><nail x="0" y="96" /><nail x="0" y="32" /></transition><transition><source ref="id48" /><target ref="id49" /><label kind="synchronisation" x="91" y="32">write$ctrl?</label><label kind="assignment" x="91" y="45">c = write$param$c</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="83" y="32" /><nail x="83" y="64" /></transition><transition><source ref="id52" /><target ref="id155" /><label kind="assignment" x="285" y="160">readyprocs--</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="277" y="160" /><nail x="277" y="192" /></transition><transition><source ref="id155" /><target ref="id54" /><label kind="synchronisation" x="285" y="224">deactivate!</label><label kind="comments" /><nail x="277" y="224" /><nail x="277" y="256" /></transition><transition><source ref="id54" /><target ref="id55" /><label kind="synchronisation" x="285" y="288">r_event$wait?</label><label kind="assignment" x="285" y="301">readyprocs++</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="277" y="288" /><nail x="277" y="320" /></transition></template><template><name>producer$main_method</name><parameter>chan &amp;main_method$ctrl, int &amp;fifo$write$param$c, int &amp;produce$return, chan &amp;produce$ctrl, int &amp;produce$param$c_param, chan &amp;fifo$write$ctrl, broadcast chan &amp;sensitive</parameter><declaration>int c;</declaration><location id="id81" x="145" y="16"><name x="169" y="8">init_location</name></location><location id="id84" x="509" y="80"><urgent /></location><location id="id86" x="145" y="144"><urgent /></location><location id="id88" x="145" y="272" /><location id="id89" x="145" y="336"><urgent /></location><location id="id91" x="145" y="464" /><location id="id94" x="342" y="622" /><location id="id83" x="436" y="654"><urgent /></location><location id="id143" x="145" y="208"><urgent /></location><location id="id145" x="145" y="400"><urgent /></location><location id="id147" x="145" y="558"><urgent /></location><init ref="id81" /><transition><source ref="id81" /><target ref="id84" /><label kind="synchronisation" x="153" y="32">main_method$ctrl?</label><label kind="assignment" x="153" y="45">c = 0</label><label kind="comments">Update:
nodeID: 824, file: producer.h, line: 26</label><nail x="145" y="32" /><nail x="145" y="64" /></transition><transition><source ref="id84" /><target ref="id86" /><label kind="guard" x="153" y="96">true</label><label kind="comments">Guard:
nodeID: 846, file: producer.h, line: 28</label><nail x="145" y="96" /><nail x="145" y="128" /></transition><transition><source ref="id89" /><target ref="id145" /><label kind="synchronisation" x="153" y="352">activate?</label><label kind="assignment" x="153" y="365">produce$param$c_param = c</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="145" y="352" /><nail x="145" y="384" /></transition><transition><source ref="id84" /><target ref="id83" /><label kind="guard" x="881" y="351">!(true)</label><label kind="comments">Guard:
nodeID: 846, file: producer.h, line: 28</label><nail x="873" y="96" /><nail x="873" y="638" /></transition><transition><source ref="id83" /><target ref="id81" /><label kind="synchronisation" x="8" y="319">main_method$ctrl!</label><label kind="comments" /><nail x="0" y="638" /><nail x="0" y="32" /></transition><transition><source ref="id86" /><target ref="id143" /><label kind="assignment" x="153" y="160">readyprocs--</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="145" y="160" /><nail x="145" y="192" /></transition><transition><source ref="id143" /><target ref="id88" /><label kind="synchronisation" x="153" y="224">deactivate!</label><label kind="comments" /><nail x="145" y="224" /><nail x="145" y="256" /></transition><transition><source ref="id88" /><target ref="id89" /><label kind="synchronisation" x="153" y="288">sensitive?</label><label kind="assignment" x="153" y="301">readyprocs++</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="145" y="288" /><nail x="145" y="320" /></transition><transition><source ref="id145" /><target ref="id91" /><label kind="synchronisation" x="153" y="416">produce$ctrl!</label><label kind="comments" /><nail x="145" y="416" /><nail x="145" y="448" /></transition><transition><source ref="id91" /><target ref="id147" /><label kind="synchronisation" x="153" y="480">produce$ctrl?</label><label kind="assignment" x="153" y="493">produce$param$c_param = DEFAULT_INT_VALUE,
c = produce$return,
fifo$write$param$c = c</label><label kind="comments">Update:
nodeID: -1, file: , line: -1,
nodeID: 868, file: producer.h, line: 31,
nodeID: 868, file: producer.h, line: 31</label><nail x="145" y="480" /><nail x="145" y="542" /></transition><transition><source ref="id147" /><target ref="id94" /><label kind="synchronisation" x="153" y="574">fifo$write$ctrl!</label><label kind="comments" /><nail x="145" y="574" /><nail x="145" y="606" /></transition><transition><source ref="id94" /><target ref="id84" /><label kind="synchronisation" x="547" y="335">fifo$write$ctrl?</label><label kind="assignment" x="547" y="348">fifo$write$param$c = DEFAULT_INT_VALUE</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="539" y="606" /><nail x="539" y="96" /></transition></template><template><name>producer$produce</name><parameter>int &amp;produce$return, chan &amp;produce$ctrl, int &amp;produce$param$c_param, broadcast chan &amp;timeoutevent$wait, chan &amp;timeoutevent$notify, int &amp;timeoutevent$notify_t</parameter><declaration>int c_param;
int wait_time;</declaration><location id="id72" x="107" y="16"><name x="131" y="8">init_location</name></location><location id="id77" x="130" y="413"><committed /></location><location id="id78" x="0" y="221"><urgent /></location><location id="id79" x="0" y="285" /><location id="id162" x="184" y="110"><urgent /></location><location id="id163" x="0" y="349"><committed /></location><location id="id165" x="0" y="142"><urgent /></location><init ref="id72" /><transition><source ref="id78" /><target ref="id165" /><label kind="synchronisation" x="8" y="158">activate?</label><label kind="assignment" x="8" y="171">c_param = (c_param + 1) % 10,
produce$return = c_param</label><label kind="comments">Update:
nodeID: 752, file: producer.h, line: 20,
nodeID: 782, file: producer.h, line: 21</label><nail x="0" y="205" /><nail x="0" y="158" /></transition><transition><source ref="id72" /><target ref="id162" /><label kind="synchronisation" x="115" y="32">produce$ctrl?</label><label kind="assignment" x="115" y="45">c_param = produce$param$c_param,
wait_time = 100,
readyprocs--</label><label kind="comments">Update:
nodeID: -1, file: , line: -1,
nodeID: 706, file: producer.h, line: 18,
nodeID: 706, file: producer.h, line: 18</label><nail x="107" y="32" /><nail x="107" y="94" /></transition><transition><source ref="id162" /><target ref="id77" /><label kind="synchronisation" x="269" y="245">deactivate!</label><label kind="comments" /><nail x="261" y="126" /><nail x="261" y="397" /></transition><transition><source ref="id77" /><target ref="id163" /><label kind="assignment" x="8" y="365">timeoutevent$notify_t = wait_time</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="0" y="397" /><nail x="0" y="365" /></transition><transition><source ref="id163" /><target ref="id79" /><label kind="synchronisation" x="8" y="301">timeoutevent$notify!</label><label kind="comments" /><nail x="0" y="333" /><nail x="0" y="301" /></transition><transition><source ref="id79" /><target ref="id78" /><label kind="synchronisation" x="8" y="237">timeoutevent$wait?</label><label kind="assignment" x="8" y="250">readyprocs++</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="0" y="269" /><nail x="0" y="237" /></transition><transition><source ref="id165" /><target ref="id72" /><label kind="synchronisation" x="8" y="63">produce$ctrl!</label><label kind="comments" /><nail x="0" y="126" /><nail x="0" y="32" /></transition></template><template><name>producer$thread0$sensitiveTemp</name><parameter>broadcast chan &amp;p_clock, broadcast chan &amp;sensitive</parameter><declaration /><location id="id95" x="41" y="16" /><location id="id96" x="41" y="80"><committed /></location><init ref="id95" /><transition><source ref="id96" /><target ref="id95" /><label kind="synchronisation" x="8" y="32">sensitive!</label><label kind="comments" /><nail x="0" y="64" /><nail x="0" y="32" /></transition><transition><source ref="id95" /><target ref="id96" /><label kind="synchronisation" x="90" y="32">p_clock?</label><label kind="comments" /><nail x="82" y="32" /><nail x="82" y="64" /></transition></template><template><name>sc_clock$run</name><parameter>int &amp;period, broadcast chan &amp;timeoutevent$wait, chan &amp;timeoutevent$notify, chan &amp;edge$notify, int &amp;edge$notify_t, chan &amp;run$ctrl, int &amp;timeoutevent$notify_t</parameter><declaration>int tmp;</declaration><location id="id34" x="71" y="16"><name x="95" y="8">init_location</name></location><location id="id37" x="229" y="80"><committed /></location><location id="id38" x="100" y="688"><urgent /></location><location id="id40" x="159" y="592"><urgent /></location><location id="id41" x="159" y="208"><committed /></location><location id="id42" x="159" y="464"><committed /></location><location id="id43" x="159" y="272"><urgent /></location><location id="id44" x="159" y="336" /><location id="id36" x="0" y="112"><urgent /></location><location id="id166" x="294" y="624"><committed /></location><location id="id167" x="159" y="528"><urgent /></location><location id="id168" x="159" y="400"><committed /></location><location id="id170" x="108" y="144"><committed /></location><init ref="id34" /><transition><source ref="id34" /><target ref="id37" /><label kind="synchronisation" x="79" y="32">run$ctrl?</label><label kind="assignment" x="79" y="45">tmp = period / 2</label><label kind="comments">Update:
nodeID: 94, file: sc_clock.cpp, line: 14</label><nail x="71" y="32" /><nail x="71" y="64" /></transition><transition><source ref="id38" /><target ref="id40" /><label kind="guard" x="167" y="624">true</label><label kind="comments">Guard:
nodeID: 136, file: sc_clock.cpp, line: 16</label><nail x="159" y="672" /><nail x="159" y="608" /></transition><transition><source ref="id43" /><target ref="id41" /><label kind="synchronisation" x="167" y="224">activate?</label><label kind="comments" /><nail x="159" y="256" /><nail x="159" y="224" /></transition><transition><source ref="id38" /><target ref="id36" /><label kind="guard" x="8" y="384">!(true)</label><label kind="comments">Guard:
nodeID: 136, file: sc_clock.cpp, line: 16</label><nail x="0" y="672" /><nail x="0" y="128" /></transition><transition><source ref="id36" /><target ref="id34" /><label kind="synchronisation" x="8" y="48">run$ctrl!</label><label kind="comments" /><nail x="0" y="96" /><nail x="0" y="32" /></transition><transition><source ref="id37" /><target ref="id166" /><label kind="assignment" x="396" y="336">edge$notify_t = 0</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="388" y="96" /><nail x="388" y="608" /></transition><transition><source ref="id166" /><target ref="id38" /><label kind="synchronisation" x="209" y="640">edge$notify!</label><label kind="comments" /><nail x="201" y="640" /><nail x="201" y="672" /></transition><transition><source ref="id40" /><target ref="id167" /><label kind="assignment" x="167" y="544">readyprocs--</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="159" y="576" /><nail x="159" y="544" /></transition><transition><source ref="id167" /><target ref="id42" /><label kind="synchronisation" x="167" y="480">deactivate!</label><label kind="comments" /><nail x="159" y="512" /><nail x="159" y="480" /></transition><transition><source ref="id42" /><target ref="id168" /><label kind="assignment" x="167" y="416">timeoutevent$notify_t = tmp</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="159" y="448" /><nail x="159" y="416" /></transition><transition><source ref="id168" /><target ref="id44" /><label kind="synchronisation" x="167" y="352">timeoutevent$notify!</label><label kind="comments" /><nail x="159" y="384" /><nail x="159" y="352" /></transition><transition><source ref="id44" /><target ref="id43" /><label kind="synchronisation" x="167" y="288">timeoutevent$wait?</label><label kind="assignment" x="167" y="301">readyprocs++</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="159" y="320" /><nail x="159" y="288" /></transition><transition><source ref="id41" /><target ref="id170" /><label kind="assignment" x="167" y="160">edge$notify_t = 0</label><label kind="comments">Update:
nodeID: -1, file: , line: -1</label><nail x="159" y="192" /><nail x="159" y="160" /></transition><transition><source ref="id170" /><target ref="id38" /><label kind="synchronisation" x="65" y="400">edge$notify!</label><label kind="comments" /><nail x="57" y="160" /><nail x="57" y="672" /></transition></template><template><name>sc_clock$thread0$sensitiveTemp</name><parameter>broadcast chan &amp;sensitive</parameter><declaration /><location id="id46" x="0" y="16" /><location id="id47" x="0" y="80"><committed /></location><init ref="id46" /><transition><source ref="id47" /><target ref="id46" /><label kind="synchronisation" x="8" y="32">sensitive!</label><label kind="comments" /><nail x="0" y="64" /><nail x="0" y="32" /></transition></template><system>clk$edge = SCEventTemplate(clk$edge$notify_imm, clk$edge$notify_t, clk$edge$notify, clk$edge$wait);
clk$thread0$sc_clock$sc_clock$run = sc_clock$run(clk$period, clk$thread0$timeoutevent$wait, clk$thread0$timeoutevent$notify, clk$edge$notify, clk$edge$notify_t, clk$thread0$sc_clock$run$ctrl, clk$thread0$timeoutevent$notify_t);
clk$thread0$sensitive = sc_clock$thread0$sensitiveTemp(clk$thread0$sensitivechan);
clk$thread0$starter = ThreadStarterTemplate(clk$thread0$sc_clock$run$ctrl);
clk$thread0$timeoutevent = SCEventTemplate(clk$thread0$timeoutevent$notify_imm, clk$thread0$timeoutevent$notify_t, clk$thread0$timeoutevent$notify, clk$thread0$timeoutevent$wait);
cons_inst$thread0$consumer$consumer$consume = consumer$consume(cons_inst$thread0$consumer$consume$ctrl, cons_inst$thread0$timeoutevent$wait, cons_inst$thread0$timeoutevent$notify, cons_inst$thread0$consumer$consume$param$c_param, cons_inst$thread0$timeoutevent$notify_t);
cons_inst$thread0$consumer$consumer$main_method = consumer$main_method(cons_inst$thread0$consumer$consume$ctrl, cons_inst$thread0$fifo$myfifo$read$ctrl, cons_inst$thread0$consumer$main_method$ctrl, cons_inst$thread0$fifo$myfifo$read$return, cons_inst$thread0$consumer$consume$param$c_param, cons_inst$thread0$sensitivechan);
cons_inst$thread0$fifo$myfifo$myfifo$read = myfifo$read(fifo_inst$buffer, fifo_inst$r_event$notify_imm, fifo_inst$w_event$wait, fifo_inst$r_pos, cons_inst$thread0$fifo$myfifo$read$return, cons_inst$thread0$fifo$myfifo$read$ctrl, fifo_inst$n);
cons_inst$thread0$sensitive = consumer$thread0$sensitiveTemp(clk$edge$wait, cons_inst$thread0$sensitivechan);
cons_inst$thread0$starter = ThreadStarterTemplate(cons_inst$thread0$consumer$main_method$ctrl);
cons_inst$thread0$timeoutevent = SCEventTemplate(cons_inst$thread0$timeoutevent$notify_imm, cons_inst$thread0$timeoutevent$notify_t, cons_inst$thread0$timeoutevent$notify, cons_inst$thread0$timeoutevent$wait);
fifo_inst$r_event = SCEventTemplate(fifo_inst$r_event$notify_imm, fifo_inst$r_event$notify_t, fifo_inst$r_event$notify, fifo_inst$r_event$wait);
fifo_inst$w_event = SCEventTemplate(fifo_inst$w_event$notify_imm, fifo_inst$w_event$notify_t, fifo_inst$w_event$notify, fifo_inst$w_event$wait);
initialization = InitializerTemplate();
prod_inst$thread0$fifo$myfifo$myfifo$write = myfifo$write(fifo_inst$buffer, prod_inst$thread0$fifo$myfifo$write$ctrl, fifo_inst$r_event$wait, fifo_inst$w_pos, fifo_inst$w_event$notify_imm, prod_inst$thread0$fifo$myfifo$write$param$c, fifo_inst$n);
prod_inst$thread0$producer$producer$main_method = producer$main_method(prod_inst$thread0$producer$main_method$ctrl, prod_inst$thread0$fifo$myfifo$write$param$c, prod_inst$thread0$producer$produce$return, prod_inst$thread0$producer$produce$ctrl, prod_inst$thread0$producer$produce$param$c_param, prod_inst$thread0$fifo$myfifo$write$ctrl, prod_inst$thread0$sensitivechan);
prod_inst$thread0$producer$producer$produce = producer$produce(prod_inst$thread0$producer$produce$return, prod_inst$thread0$producer$produce$ctrl, prod_inst$thread0$producer$produce$param$c_param, prod_inst$thread0$timeoutevent$wait, prod_inst$thread0$timeoutevent$notify, prod_inst$thread0$timeoutevent$notify_t);
prod_inst$thread0$sensitive = producer$thread0$sensitiveTemp(clk$edge$wait, prod_inst$thread0$sensitivechan);
prod_inst$thread0$starter = ThreadStarterTemplate(prod_inst$thread0$producer$main_method$ctrl);
prod_inst$thread0$timeoutevent = SCEventTemplate(prod_inst$thread0$timeoutevent$notify_imm, prod_inst$thread0$timeoutevent$notify_t, prod_inst$thread0$timeoutevent$notify, prod_inst$thread0$timeoutevent$wait);
scheduler = SchedulerTemplate();
scmain = SCMainTemplate();


system clk$edge,
clk$thread0$sc_clock$sc_clock$run,
clk$thread0$sensitive,
clk$thread0$starter,
clk$thread0$timeoutevent,
cons_inst$thread0$consumer$consumer$consume,
cons_inst$thread0$consumer$consumer$main_method,
cons_inst$thread0$fifo$myfifo$myfifo$read,
cons_inst$thread0$sensitive,
cons_inst$thread0$starter,
cons_inst$thread0$timeoutevent,
fifo_inst$r_event,
fifo_inst$w_event,
initialization,
prod_inst$thread0$fifo$myfifo$myfifo$write,
prod_inst$thread0$producer$producer$main_method,
prod_inst$thread0$producer$producer$produce,
prod_inst$thread0$sensitive,
prod_inst$thread0$starter,
prod_inst$thread0$timeoutevent,
scheduler,
scmain;</system></nta>
