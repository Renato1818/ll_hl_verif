


// File: half_adder.h           



SC_MODULE (half_adder) {
  sc_in <bool> a;
  sc_in <bool> b;

  sc_out <bool> sum;
  sc_out <bool> carry;

  //bool a, b, sum, carry; 

  bool s_nand, s_or;
  //sc_event obs_detected;

  //void prc_half_adder ();       

  /*void prc_half_adder () {	
    //sum = a ^ b;						
    //carry = a & b;						  	
    sum.write(a ^ b);						
    carry.write(a & b);					
  }*/

  void prc_half_adder(){
    wait(2, SC_MS);
  while (true) {
      s_nand = !(a & b);
      s_or = a | b ;
      sum.write(s_nand & s_or);
      carry.write(a & b);
      wait(5, SC_MS);
  }
 }

  SC_CTOR (half_adder) {
    //SC_THREAD (main_method); 
    SC_THREAD (prc_half_adder);
    //sensitive << a << b;        
  }
};
//#include "driver.h"
//#include "monitor.h"


int sc_main(int argc, char* argv[]){
 //sc_signal<bool> ASig, BSig,CarrySig,SumSig;   
 //sc_clock TestClk("TestClock", 10, SC_NS,2,SC_NS);  

 half_adder half("HA");
 /*HA1.a(ASig);

	HA1.b(BSig);

	HA1.carry(CarrySig);

	HA1.sum(SumSig);



	/*stim Stim1("Stimulus");   

	Stim1.sA(HA1.a);   

	Stim1.sB(HA1.b);

	Stim1.Clk(TestClk);





  	mon Monitor1("Monitor");   

	Monitor1.A(HA1.a);   

	Monitor1.B(HA1.b);   

	Monitor1.C(CarrySig);   

	Monitor1.S(SumSig);

	Monitor1.Clk(TestClk);  */
 //sc_start();  // run forever  
 sc_start(5000, SC_NS);
 return 0;
}
