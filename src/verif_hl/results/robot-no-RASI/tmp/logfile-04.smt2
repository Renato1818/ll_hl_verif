(get-info :version)
; (:version "4.8.6")
; Started: 2024-06-21 14:46:57
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Sensor<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Controller<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Sensor_m: Ref]
(declare-fun $FVF.domain_Sensor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Sensor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Sensor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Sensor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Sensor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Sensor_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Controller_m: Ref]
(declare-fun $FVF.domain_Controller_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Controller_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Controller_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Controller_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Controller_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Controller_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Sensor_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Sensor_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Controller_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Controller_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Sensor<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Controller<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Sensor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Controller<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Sensor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Sensor_m vs) ($FVF.domain_Sensor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Sensor_m vs))
            (= ($FVF.lookup_Sensor_m vs x) ($FVF.lookup_Sensor_m ws x)))
          :pattern (($FVF.lookup_Sensor_m vs x) ($FVF.lookup_Sensor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Sensor_m pm r))
    :pattern ($FVF.perm_Sensor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Sensor_m f r) true)
    :pattern ($FVF.loc_Sensor_m f r))))
; /field_value_functions_axioms.smt2 [Controller_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Controller_m vs) ($FVF.domain_Controller_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Controller_m vs))
            (= ($FVF.lookup_Controller_m vs x) ($FVF.lookup_Controller_m ws x)))
          :pattern (($FVF.lookup_Controller_m vs x) ($FVF.lookup_Controller_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Controller_m pm r))
    :pattern ($FVF.perm_Controller_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Controller_m f r) true)
    :pattern ($FVF.loc_Controller_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@0@00 vals@1@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (let ((result@2@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))) (implies
    (and (not (= diz@0@00 $Ref.null)) (= (Seq_length vals@1@00) 3))
    (and
      (and
        (and
          (or
            (< (Seq_index vals@1@00 0) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 0)))
          (or
            (< (Seq_index vals@1@00 1) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 1))))
        (or
          (< (Seq_index vals@1@00 2) (- 0 1))
          (<= result@2@00 (Seq_index vals@1@00 2))))
      (and
        (implies
          (and
            (and
              (< (Seq_index vals@1@00 0) (- 0 1))
              (< (Seq_index vals@1@00 1) (- 0 1)))
            (< (Seq_index vals@1@00 2) (- 0 1)))
          (= result@2@00 0))
        (implies
          (or
            (or
              (<= (- 0 1) (Seq_index vals@1@00 0))
              (<= (- 0 1) (Seq_index vals@1@00 1)))
            (<= (- 0 1) (Seq_index vals@1@00 2)))
          (or
            (or
              (and
                (<= (- 0 1) (Seq_index vals@1@00 0))
                (= result@2@00 (Seq_index vals@1@00 0)))
              (and
                (<= (- 0 1) (Seq_index vals@1@00 1))
                (= result@2@00 (Seq_index vals@1@00 1))))
            (and
              (<= (- 0 1) (Seq_index vals@1@00 2))
              (= result@2@00 (Seq_index vals@1@00 2)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00)
    (instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@3@00 u@4@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (let ((result@5@00 (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))) (=
    result@5@00
    (or (= t@3@00 u@4@00) (= (directSuperclass<TYPE> t@3@00) u@4@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (= (new_frac%limited s@$ x@6@00) (new_frac s@$ x@6@00))
  :pattern ((new_frac s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (new_frac%stateless x@6@00)
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (let ((result@7@00 (new_frac%limited s@$ x@6@00))) (implies
    (and (< $Perm.No x@6@00) (<= x@6@00 $Perm.Write))
    (= (frac_val<Perm> result@7@00) x@6@00)))
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@8@00) (new_zfrac s@$ x@8@00))
  :pattern ((new_zfrac s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (new_zfrac%stateless x@8@00)
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (let ((result@9@00 (new_zfrac%limited s@$ x@8@00))) (implies
    (and (<= $Perm.No x@8@00) (<= x@8@00 $Perm.Write))
    (= (zfrac_val<Perm> result@9@00) x@8@00)))
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Sensor_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@0@04 $Ref)
(declare-const globals@1@04 $Ref)
(declare-const diz@2@04 $Ref)
(declare-const globals@3@04 $Ref)
(push) ; 1
(declare-const $t@4@04 $Snap)
(assert (= $t@4@04 ($Snap.combine ($Snap.first $t@4@04) ($Snap.second $t@4@04))))
(assert (= ($Snap.first $t@4@04) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@2@04 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@5@04 $Snap)
(assert (= $t@5@04 ($Snap.combine ($Snap.first $t@5@04) ($Snap.second $t@5@04))))
(assert (=
  ($Snap.second $t@5@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@5@04))
    ($Snap.second ($Snap.second $t@5@04)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23
;  :arith-assert-lower      1
;  :arith-assert-upper      1
;  :arith-eq-adapter        1
;  :binary-propagations     11
;  :datatype-accessor-ax    4
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   2
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            2
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             253
;  :mk-clause               1
;  :num-allocs              3404309
;  :num-checks              2
;  :propagations            11
;  :quant-instantiations    1
;  :rlimit-count            110487)
(assert (=
  ($Snap.second ($Snap.second $t@5@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@5@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@5@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@5@04))) $Snap.unit))
; [eval] diz.Sensor_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@5@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@5@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@5@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04)))))))
(declare-const $k@6@04 $Perm)
(assert ($Perm.isReadVar $k@6@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@6@04 $Perm.No) (< $Perm.No $k@6@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      2
;  :arith-eq-adapter        2
;  :binary-propagations     11
;  :conflicts               1
;  :datatype-accessor-ax    6
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   2
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            2
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             262
;  :mk-clause               3
;  :num-allocs              3404309
;  :num-checks              3
;  :propagations            12
;  :quant-instantiations    2
;  :rlimit-count            111059)
(assert (<= $Perm.No $k@6@04))
(assert (<= $k@6@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@6@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@5@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04)))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_sensor == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@6@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     11
;  :conflicts               2
;  :datatype-accessor-ax    7
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   2
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            2
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             265
;  :mk-clause               3
;  :num-allocs              3404309
;  :num-checks              4
;  :propagations            12
;  :quant-instantiations    2
;  :rlimit-count            111332)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@5@04)))))
  diz@2@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04)))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               48
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     11
;  :conflicts               2
;  :datatype-accessor-ax    8
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   2
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            2
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             268
;  :mk-clause               3
;  :num-allocs              3404309
;  :num-checks              5
;  :propagations            12
;  :quant-instantiations    3
;  :rlimit-count            111583)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04))))))
  $Snap.unit))
; [eval] !diz.Sensor_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@5@04)))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Controller_run_EncodedGlobalVariables ----------
(declare-const diz@7@04 $Ref)
(declare-const globals@8@04 $Ref)
(declare-const diz@9@04 $Ref)
(declare-const globals@10@04 $Ref)
(push) ; 1
(declare-const $t@11@04 $Snap)
(assert (= $t@11@04 ($Snap.combine ($Snap.first $t@11@04) ($Snap.second $t@11@04))))
(assert (= ($Snap.first $t@11@04) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@9@04 $Ref.null)))
(assert (=
  ($Snap.second $t@11@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@11@04))
    ($Snap.second ($Snap.second $t@11@04)))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               59
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     11
;  :conflicts               2
;  :datatype-accessor-ax    11
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   2
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              2
;  :final-checks            2
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             272
;  :mk-clause               3
;  :num-allocs              3404309
;  :num-checks              6
;  :propagations            12
;  :quant-instantiations    3
;  :rlimit-count            111907)
(assert (=
  ($Snap.second ($Snap.second $t@11@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@11@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@11@04))) $Snap.unit))
; [eval] diz.Controller_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@11@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@11@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))
(declare-const $k@12@04 $Perm)
(assert ($Perm.isReadVar $k@12@04 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@12@04 $Perm.No) (< $Perm.No $k@12@04))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               71
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               3
;  :datatype-accessor-ax    13
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   2
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              2
;  :final-checks            2
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             281
;  :mk-clause               5
;  :num-allocs              3404309
;  :num-checks              7
;  :propagations            13
;  :quant-instantiations    4
;  :rlimit-count            112480)
(assert (<= $Perm.No $k@12@04))
(assert (<= $k@12@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@12@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               77
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    14
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   2
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              2
;  :final-checks            2
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             284
;  :mk-clause               5
;  :num-allocs              3404309
;  :num-checks              8
;  :propagations            13
;  :quant-instantiations    4
;  :rlimit-count            112753)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))
  diz@9@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   2
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              2
;  :final-checks            2
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             287
;  :mk-clause               5
;  :num-allocs              3404309
;  :num-checks              9
;  :propagations            13
;  :quant-instantiations    5
;  :rlimit-count            113004)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))
  $Snap.unit))
; [eval] !diz.Controller_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@13@04 $Snap)
(assert (= $t@13@04 ($Snap.combine ($Snap.first $t@13@04) ($Snap.second $t@13@04))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               102
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   4
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              4
;  :final-checks            4
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             295
;  :mk-clause               5
;  :num-allocs              3404309
;  :num-checks              11
;  :propagations            13
;  :quant-instantiations    7
;  :rlimit-count            113653)
(assert (=
  ($Snap.second $t@13@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@13@04))
    ($Snap.second ($Snap.second $t@13@04)))))
(assert (= ($Snap.first ($Snap.second $t@13@04)) $Snap.unit))
; [eval] diz.Controller_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@13@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@13@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@13@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))
(declare-const $k@14@04 $Perm)
(assert ($Perm.isReadVar $k@14@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@14@04 $Perm.No) (< $Perm.No $k@14@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               114
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      6
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               5
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   4
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              4
;  :final-checks            4
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             304
;  :mk-clause               7
;  :num-allocs              3404309
;  :num-checks              12
;  :propagations            14
;  :quant-instantiations    8
;  :rlimit-count            114214)
(assert (<= $Perm.No $k@14@04))
(assert (<= $k@14@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@14@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@13@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@13@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@13@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@13@04))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               120
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               6
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   4
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              4
;  :final-checks            4
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             307
;  :mk-clause               7
;  :num-allocs              3404309
;  :num-checks              13
;  :propagations            14
;  :quant-instantiations    8
;  :rlimit-count            114477)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@13@04))))
  diz@9@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               128
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               6
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   4
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              4
;  :final-checks            4
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             310
;  :mk-clause               7
;  :num-allocs              3404309
;  :num-checks              14
;  :propagations            14
;  :quant-instantiations    9
;  :rlimit-count            114717)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
  $Snap.unit))
; [eval] !diz.Controller_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_19__22: Ref
(declare-const __flatten_19__22@15@04 $Ref)
; [exec]
; var __flatten_20__23: Seq[Int]
(declare-const __flatten_20__23@16@04 Seq<Int>)
; [exec]
; var __flatten_21__24: Ref
(declare-const __flatten_21__24@17@04 $Ref)
; [exec]
; var __flatten_22__25: Ref
(declare-const __flatten_22__25@18@04 $Ref)
; [exec]
; var __flatten_23__26: Seq[Int]
(declare-const __flatten_23__26@19@04 Seq<Int>)
; [exec]
; var __flatten_24__27: Ref
(declare-const __flatten_24__27@20@04 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Controller_m, globals), write)
(declare-const $t@21@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Controller_m, globals), write)
(assert (= $t@21@04 ($Snap.combine ($Snap.first $t@21@04) ($Snap.second $t@21@04))))
(assert (= ($Snap.first $t@21@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@21@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@21@04))
    ($Snap.second ($Snap.second $t@21@04)))))
(assert (= ($Snap.first ($Snap.second $t@21@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@21@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@21@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@21@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@21@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@22@04 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@22@04 | live]
; [else-branch: 0 | !(0 <= i@22@04) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@22@04]
(assert (<= 0 i@22@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@22@04)]
(assert (not (<= 0 i@22@04)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@22@04 < |First:(Second:(Second:(Second:($t@21@04))))| && 0 <= i@22@04 | live]
; [else-branch: 1 | !(i@22@04 < |First:(Second:(Second:(Second:($t@21@04))))| && 0 <= i@22@04) | live]
(push) ; 5
; [then-branch: 1 | i@22@04 < |First:(Second:(Second:(Second:($t@21@04))))| && 0 <= i@22@04]
(assert (and
  (<
    i@22@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
  (<= 0 i@22@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@22@04 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               186
;  :arith-assert-diseq      5
;  :arith-assert-lower      14
;  :arith-assert-upper      10
;  :arith-eq-adapter        8
;  :binary-propagations     11
;  :conflicts               6
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              6
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             342
;  :mk-clause               13
;  :num-allocs              3524046
;  :num-checks              16
;  :propagations            16
;  :quant-instantiations    15
;  :rlimit-count            116395)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@21@04))))[i@22@04] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@21@04))))[i@22@04] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@21@04))))[i@22@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
    i@22@04)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@21@04))))[i@22@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      i@22@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@22@04 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               186
;  :arith-assert-diseq      5
;  :arith-assert-lower      14
;  :arith-assert-upper      10
;  :arith-eq-adapter        8
;  :binary-propagations     11
;  :conflicts               6
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              6
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             343
;  :mk-clause               13
;  :num-allocs              3524046
;  :num-checks              17
;  :propagations            16
;  :quant-instantiations    15
;  :rlimit-count            116570)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@21@04))))[i@22@04] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@21@04))))[i@22@04]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@21@04))))[i@22@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
    i@22@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@22@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               186
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     11
;  :conflicts               6
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              6
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             346
;  :mk-clause               14
;  :num-allocs              3524046
;  :num-checks              18
;  :propagations            16
;  :quant-instantiations    15
;  :rlimit-count            116694)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@21@04))))[i@22@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      i@22@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@22@04 < |First:(Second:(Second:(Second:($t@21@04))))| && 0 <= i@22@04)]
(assert (not
  (and
    (<
      i@22@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    (<= 0 i@22@04))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@22@04 Int)) (!
  (implies
    (and
      (<
        i@22@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      (<= 0 i@22@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
          i@22@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
            i@22@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
            i@22@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
    i@22@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))
(declare-const $k@23@04 $Perm)
(assert ($Perm.isReadVar $k@23@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@23@04 $Perm.No) (< $Perm.No $k@23@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               197
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      11
;  :arith-eq-adapter        10
;  :binary-propagations     11
;  :conflicts               7
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             354
;  :mk-clause               16
;  :num-allocs              3524046
;  :num-checks              19
;  :propagations            17
;  :quant-instantiations    15
;  :rlimit-count            117646)
(assert (<= $Perm.No $k@23@04))
(assert (<= $k@23@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@23@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
  $Snap.unit))
; [eval] 0 < diz.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               203
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     11
;  :conflicts               8
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             357
;  :mk-clause               16
;  :num-allocs              3524046
;  :num-checks              20
;  :propagations            17
;  :quant-instantiations    15
;  :rlimit-count            117979
;  :time                    0.01)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))
(declare-const $k@24@04 $Perm)
(assert ($Perm.isReadVar $k@24@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@24@04 $Perm.No) (< $Perm.No $k@24@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               209
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      13
;  :arith-eq-adapter        11
;  :binary-propagations     11
;  :conflicts               9
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             364
;  :mk-clause               18
;  :num-allocs              3524046
;  :num-checks              21
;  :propagations            18
;  :quant-instantiations    16
;  :rlimit-count            118489)
(assert (<= $Perm.No $k@24@04))
(assert (<= $k@24@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@24@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))
  $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@24@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               215
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     11
;  :conflicts               10
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             367
;  :mk-clause               18
;  :num-allocs              3524046
;  :num-checks              22
;  :propagations            18
;  :quant-instantiations    16
;  :rlimit-count            118842)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@24@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               221
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     11
;  :conflicts               11
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             370
;  :mk-clause               18
;  :num-allocs              3524046
;  :num-checks              23
;  :propagations            18
;  :quant-instantiations    17
;  :rlimit-count            119226)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@24@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               226
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     11
;  :conflicts               12
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             371
;  :mk-clause               18
;  :num-allocs              3524046
;  :num-checks              24
;  :propagations            18
;  :quant-instantiations    17
;  :rlimit-count            119513)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               226
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     11
;  :conflicts               12
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             371
;  :mk-clause               18
;  :num-allocs              3524046
;  :num-checks              25
;  :propagations            18
;  :quant-instantiations    17
;  :rlimit-count            119526)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))
(declare-const $k@25@04 $Perm)
(assert ($Perm.isReadVar $k@25@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@25@04 $Perm.No) (< $Perm.No $k@25@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               231
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :binary-propagations     11
;  :conflicts               13
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             376
;  :mk-clause               20
;  :num-allocs              3524046
;  :num-checks              26
;  :propagations            19
;  :quant-instantiations    17
;  :rlimit-count            119967)
(declare-const $t@26@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@12@04)
    (=
      $t@26@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))
  (implies
    (< $Perm.No $k@25@04)
    (=
      $t@26@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))
(assert (<= $Perm.No (+ $k@12@04 $k@25@04)))
(assert (<= (+ $k@12@04 $k@25@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@12@04 $k@25@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               241
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      17
;  :arith-conflicts         1
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     11
;  :conflicts               14
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             384
;  :mk-clause               20
;  :num-allocs              3524046
;  :num-checks              27
;  :propagations            19
;  :quant-instantiations    18
;  :rlimit-count            120610)
(assert (not (= $t@26@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               247
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             387
;  :mk-clause               20
;  :num-allocs              3524046
;  :num-checks              28
;  :propagations            19
;  :quant-instantiations    18
;  :rlimit-count            120984)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               252
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               16
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             389
;  :mk-clause               20
;  :num-allocs              3524046
;  :num-checks              29
;  :propagations            19
;  :quant-instantiations    18
;  :rlimit-count            121323)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               252
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               16
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             389
;  :mk-clause               20
;  :num-allocs              3524046
;  :num-checks              30
;  :propagations            19
;  :quant-instantiations    18
;  :rlimit-count            121336)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@9@04 $t@26@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               252
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             390
;  :mk-clause               20
;  :num-allocs              3524046
;  :num-checks              31
;  :propagations            19
;  :quant-instantiations    18
;  :rlimit-count            121396)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               261
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             394
;  :mk-clause               20
;  :num-allocs              3524046
;  :num-checks              32
;  :propagations            19
;  :quant-instantiations    19
;  :rlimit-count            121826)
; [eval] -1
(push) ; 3
; [then-branch: 4 | First:(Second:(Second:(Second:($t@21@04))))[0] == -1 | live]
; [else-branch: 4 | First:(Second:(Second:(Second:($t@21@04))))[0] != -1 | live]
(push) ; 4
; [then-branch: 4 | First:(Second:(Second:(Second:($t@21@04))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
    0)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 4 | First:(Second:(Second:(Second:($t@21@04))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               261
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             400
;  :mk-clause               24
;  :num-allocs              3647500
;  :num-checks              33
;  :propagations            21
;  :quant-instantiations    20
;  :rlimit-count            122064)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               267
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              11
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             404
;  :mk-clause               25
;  :num-allocs              3647500
;  :num-checks              34
;  :propagations            21
;  :quant-instantiations    20
;  :rlimit-count            122501)
; [eval] -1
(push) ; 3
; [then-branch: 5 | First:(Second:(Second:(Second:($t@21@04))))[1] == -1 | live]
; [else-branch: 5 | First:(Second:(Second:(Second:($t@21@04))))[1] != -1 | live]
(push) ; 4
; [then-branch: 5 | First:(Second:(Second:(Second:($t@21@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
    1)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | First:(Second:(Second:(Second:($t@21@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               267
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      21
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              11
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             410
;  :mk-clause               29
;  :num-allocs              3647500
;  :num-checks              35
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            122739)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               273
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      21
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              15
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             414
;  :mk-clause               30
;  :num-allocs              3647500
;  :num-checks              36
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            123186)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               279
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      21
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              15
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             417
;  :mk-clause               30
;  :num-allocs              3647500
;  :num-checks              37
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            123646)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               285
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      21
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              15
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             420
;  :mk-clause               30
;  :num-allocs              3647500
;  :num-checks              38
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            124101)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               291
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :binary-propagations     11
;  :conflicts               18
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              15
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             424
;  :mk-clause               30
;  :num-allocs              3647500
;  :num-checks              39
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            124603)
(push) ; 3
(assert (not (= diz@9@04 $t@26@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               291
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :binary-propagations     11
;  :conflicts               19
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              15
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             425
;  :mk-clause               30
;  :num-allocs              3647500
;  :num-checks              40
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            124663)
(push) ; 3
; [then-branch: 6 | !(First:(Second:(Second:(Second:(Second:(Second:($t@11@04))))))) | live]
; [else-branch: 6 | First:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))) | live]
(push) ; 4
; [then-branch: 6 | !(First:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))]
(pop) ; 4
(push) ; 4
; [else-branch: 6 | First:(Second:(Second:(Second:(Second:(Second:($t@11@04))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               291
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :binary-propagations     11
;  :conflicts               20
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              15
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             425
;  :mk-clause               30
;  :num-allocs              3647500
;  :num-checks              41
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            124683)
; [eval] -1
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               291
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :binary-propagations     11
;  :conflicts               20
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              15
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             425
;  :mk-clause               30
;  :num-allocs              3647500
;  :num-checks              42
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            124687)
; [then-branch: 7 | First:(Second:(Second:(Second:($t@21@04))))[1] == -1 | dead]
; [else-branch: 7 | First:(Second:(Second:(Second:($t@21@04))))[1] != -1 | live]
(push) ; 6
; [else-branch: 7 | First:(Second:(Second:(Second:($t@21@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
      1)
    (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               297
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :binary-propagations     11
;  :conflicts               20
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   5
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              15
;  :final-checks            5
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             427
;  :mk-clause               30
;  :num-allocs              3647500
;  :num-checks              43
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            125081)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               344
;  :arith-assert-diseq      11
;  :arith-assert-lower      32
;  :arith-assert-upper      23
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         5
;  :binary-propagations     11
;  :conflicts               21
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 21
;  :datatype-occurs-check   11
;  :datatype-splits         14
;  :decisions               22
;  :del-clause              16
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             441
;  :mk-clause               31
;  :num-allocs              3647500
;  :num-checks              44
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            125802)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               390
;  :arith-assert-diseq      11
;  :arith-assert-lower      32
;  :arith-assert-upper      24
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         5
;  :binary-propagations     11
;  :conflicts               22
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 35
;  :datatype-occurs-check   17
;  :datatype-splits         24
;  :decisions               37
;  :del-clause              17
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             455
;  :mk-clause               32
;  :num-allocs              3647500
;  :num-checks              45
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            126528)
; [then-branch: 8 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2] | live]
; [else-branch: 8 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2]) | live]
(push) ; 4
; [then-branch: 8 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               391
;  :arith-assert-diseq      11
;  :arith-assert-lower      33
;  :arith-assert-upper      24
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               22
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 35
;  :datatype-occurs-check   17
;  :datatype-splits         24
;  :decisions               37
;  :del-clause              17
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             456
;  :mk-clause               32
;  :num-allocs              3647500
;  :num-checks              46
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            126676)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               397
;  :arith-assert-diseq      11
;  :arith-assert-lower      33
;  :arith-assert-upper      24
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               22
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 35
;  :datatype-occurs-check   17
;  :datatype-splits         24
;  :decisions               37
;  :del-clause              17
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             459
;  :mk-clause               33
;  :num-allocs              3647500
;  :num-checks              47
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            127275)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               444
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      26
;  :arith-conflicts         4
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         7
;  :binary-propagations     11
;  :conflicts               23
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   23
;  :datatype-splits         34
;  :decisions               51
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             476
;  :mk-clause               38
;  :num-allocs              3647500
;  :num-checks              48
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            128028)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         4
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         7
;  :binary-propagations     11
;  :conflicts               24
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 63
;  :datatype-occurs-check   29
;  :datatype-splits         44
;  :decisions               66
;  :del-clause              23
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             489
;  :mk-clause               39
;  :num-allocs              3647500
;  :num-checks              49
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            128753)
; [then-branch: 9 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2] | live]
; [else-branch: 9 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2]) | live]
(push) ; 4
; [then-branch: 9 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 5
(assert (not (< $Perm.No $k@24@04)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               492
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         4
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     11
;  :conflicts               25
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 63
;  :datatype-occurs-check   29
;  :datatype-splits         44
;  :decisions               66
;  :del-clause              23
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             493
;  :mk-clause               42
;  :num-allocs              3647500
;  :num-checks              50
;  :propagations            31
;  :quant-instantiations    23
;  :rlimit-count            128975)
(push) ; 5
(assert (not (< $Perm.No $k@23@04)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               492
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         4
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     11
;  :conflicts               26
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 63
;  :datatype-occurs-check   29
;  :datatype-splits         44
;  :decisions               66
;  :del-clause              23
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             493
;  :mk-clause               42
;  :num-allocs              3647500
;  :num-checks              51
;  :propagations            31
;  :quant-instantiations    23
;  :rlimit-count            129023)
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 3
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               493
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         5
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         9
;  :binary-propagations     11
;  :conflicts               27
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 63
;  :datatype-occurs-check   29
;  :datatype-splits         44
;  :decisions               66
;  :del-clause              26
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             496
;  :mk-clause               43
;  :num-allocs              3647500
;  :num-checks              52
;  :propagations            31
;  :quant-instantiations    23
;  :rlimit-count            129626
;  :time                    0.01)
(push) ; 3
(assert (not (= diz@9@04 $t@26@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               493
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         5
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         9
;  :binary-propagations     11
;  :conflicts               28
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 63
;  :datatype-occurs-check   29
;  :datatype-splits         44
;  :decisions               66
;  :del-clause              26
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             497
;  :mk-clause               43
;  :num-allocs              3647500
;  :num-checks              53
;  :propagations            31
;  :quant-instantiations    23
;  :rlimit-count            129686)
(push) ; 3
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))) | live]
; [else-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:($t@11@04))))))) | live]
(push) ; 4
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:($t@11@04))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               493
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         5
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         9
;  :binary-propagations     11
;  :conflicts               29
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 63
;  :datatype-occurs-check   29
;  :datatype-splits         44
;  :decisions               66
;  :del-clause              26
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             497
;  :mk-clause               43
;  :num-allocs              3647500
;  :num-checks              54
;  :propagations            31
;  :quant-instantiations    23
;  :rlimit-count            129701)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               493
;  :arith-assert-diseq      11
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         5
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         9
;  :binary-propagations     11
;  :conflicts               29
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 63
;  :datatype-occurs-check   29
;  :datatype-splits         44
;  :decisions               66
;  :del-clause              26
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             497
;  :mk-clause               43
;  :num-allocs              3647500
;  :num-checks              55
;  :propagations            31
;  :quant-instantiations    23
;  :rlimit-count            129744)
; [then-branch: 11 | First:(Second:(Second:(Second:($t@21@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))) | dead]
; [else-branch: 11 | !(First:(Second:(Second:(Second:($t@21@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:($t@11@04))))))) | live]
(push) ; 4
; [else-branch: 11 | !(First:(Second:(Second:(Second:($t@21@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@21@04 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04))) globals@10@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Controller_m, globals), write)
(declare-const $t@27@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_19__22 := diz.Controller_m
(declare-const __flatten_19__22@28@04 $Ref)
(assert (=
  __flatten_19__22@28@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))))
; [exec]
; __flatten_21__24 := diz.Controller_m
(declare-const __flatten_21__24@29@04 $Ref)
(assert (=
  __flatten_21__24@29@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))))
; [exec]
; __flatten_20__23 := __flatten_21__24.Main_process_state[1 := 2]
; [eval] __flatten_21__24.Main_process_state[1 := 2]
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
  __flatten_21__24@29@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-assert-diseq      11
;  :arith-assert-lower      39
;  :arith-assert-upper      34
;  :arith-conflicts         5
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              40
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             524
;  :mk-clause               46
;  :num-allocs              3647500
;  :num-checks              58
;  :propagations            34
;  :quant-instantiations    23
;  :rlimit-count            131124)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-assert-diseq      11
;  :arith-assert-lower      39
;  :arith-assert-upper      34
;  :arith-conflicts         5
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              40
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             524
;  :mk-clause               46
;  :num-allocs              3647500
;  :num-checks              59
;  :propagations            34
;  :quant-instantiations    23
;  :rlimit-count            131139)
(declare-const __flatten_20__23@30@04 Seq<Int>)
(assert (Seq_equal
  __flatten_20__23@30@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
    1
    2)))
; [exec]
; __flatten_19__22.Main_process_state := __flatten_20__23
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
  __flatten_19__22@28@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               595
;  :arith-add-rows          3
;  :arith-assert-diseq      12
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-conflicts         5
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              40
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             547
;  :mk-clause               65
;  :num-allocs              3647500
;  :num-checks              60
;  :propagations            43
;  :quant-instantiations    28
;  :rlimit-count            131620)
(assert (not (= __flatten_19__22@28@04 $Ref.null)))
; [exec]
; diz.Controller_init := true
(declare-const __flatten_22__25@31@04 $Ref)
(declare-const __flatten_24__27@32@04 $Ref)
(declare-const __flatten_23__26@33@04 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@34@04 $Snap)
(assert (= $t@34@04 ($Snap.combine ($Snap.first $t@34@04) ($Snap.second $t@34@04))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               601
;  :arith-add-rows          3
;  :arith-assert-diseq      12
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-conflicts         5
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              40
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             549
;  :mk-clause               65
;  :num-allocs              3647500
;  :num-checks              61
;  :propagations            43
;  :quant-instantiations    28
;  :rlimit-count            131789)
(assert (=
  ($Snap.second $t@34@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@34@04))
    ($Snap.second ($Snap.second $t@34@04)))))
(assert (= ($Snap.first ($Snap.second $t@34@04)) $Snap.unit))
; [eval] diz.Controller_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@34@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@34@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@34@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
  $Snap.unit))
; [eval] |diz.Controller_m.Main_process_state| == 2
; [eval] |diz.Controller_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
  $Snap.unit))
; [eval] |diz.Controller_m.Main_event_state| == 3
; [eval] |diz.Controller_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
  $Snap.unit))
; [eval] (forall i__28: Int :: { diz.Controller_m.Main_process_state[i__28] } 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|)
(declare-const i__28@35@04 Int)
(push) ; 4
; [eval] 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state|
; [eval] 0 <= i__28
(push) ; 5
; [then-branch: 12 | 0 <= i__28@35@04 | live]
; [else-branch: 12 | !(0 <= i__28@35@04) | live]
(push) ; 6
; [then-branch: 12 | 0 <= i__28@35@04]
(assert (<= 0 i__28@35@04))
; [eval] i__28 < |diz.Controller_m.Main_process_state|
; [eval] |diz.Controller_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 12 | !(0 <= i__28@35@04)]
(assert (not (<= 0 i__28@35@04)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 13 | i__28@35@04 < |First:(Second:(Second:(Second:($t@34@04))))| && 0 <= i__28@35@04 | live]
; [else-branch: 13 | !(i__28@35@04 < |First:(Second:(Second:(Second:($t@34@04))))| && 0 <= i__28@35@04) | live]
(push) ; 6
; [then-branch: 13 | i__28@35@04 < |First:(Second:(Second:(Second:($t@34@04))))| && 0 <= i__28@35@04]
(assert (and
  (<
    i__28@35@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
  (<= 0 i__28@35@04)))
; [eval] diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__28] == -1
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 7
(assert (not (>= i__28@35@04 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               645
;  :arith-add-rows          3
;  :arith-assert-diseq      12
;  :arith-assert-lower      48
;  :arith-assert-upper      39
;  :arith-conflicts         5
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              40
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             574
;  :mk-clause               65
;  :num-allocs              3778858
;  :num-checks              62
;  :propagations            43
;  :quant-instantiations    33
;  :rlimit-count            133067)
; [eval] -1
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:($t@34@04))))[i__28@35@04] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@34@04))))[i__28@35@04] != -1 | live]
(push) ; 8
; [then-branch: 14 | First:(Second:(Second:(Second:($t@34@04))))[i__28@35@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    i__28@35@04)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 14 | First:(Second:(Second:(Second:($t@34@04))))[i__28@35@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      i__28@35@04)
    (- 0 1))))
; [eval] 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= diz.Controller_m.Main_process_state[i__28]
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 9
(assert (not (>= i__28@35@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               645
;  :arith-add-rows          3
;  :arith-assert-diseq      12
;  :arith-assert-lower      48
;  :arith-assert-upper      39
;  :arith-conflicts         5
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              40
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             575
;  :mk-clause               65
;  :num-allocs              3778858
;  :num-checks              63
;  :propagations            43
;  :quant-instantiations    33
;  :rlimit-count            133242)
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@34@04))))[i__28@35@04] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@34@04))))[i__28@35@04]) | live]
(push) ; 10
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@34@04))))[i__28@35@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    i__28@35@04)))
; [eval] diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 11
(assert (not (>= i__28@35@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               645
;  :arith-add-rows          3
;  :arith-assert-diseq      13
;  :arith-assert-lower      51
;  :arith-assert-upper      39
;  :arith-conflicts         5
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              40
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             578
;  :mk-clause               66
;  :num-allocs              3778858
;  :num-checks              64
;  :propagations            43
;  :quant-instantiations    33
;  :rlimit-count            133366)
; [eval] |diz.Controller_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@34@04))))[i__28@35@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      i__28@35@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 13 | !(i__28@35@04 < |First:(Second:(Second:(Second:($t@34@04))))| && 0 <= i__28@35@04)]
(assert (not
  (and
    (<
      i__28@35@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    (<= 0 i__28@35@04))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__28@35@04 Int)) (!
  (implies
    (and
      (<
        i__28@35@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      (<= 0 i__28@35@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
          i__28@35@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
            i__28@35@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
            i__28@35@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    i__28@35@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
(declare-const $k@36@04 $Perm)
(assert ($Perm.isReadVar $k@36@04 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@36@04 $Perm.No) (< $Perm.No $k@36@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               650
;  :arith-add-rows          3
;  :arith-assert-diseq      14
;  :arith-assert-lower      53
;  :arith-assert-upper      40
;  :arith-conflicts         5
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               31
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             584
;  :mk-clause               68
;  :num-allocs              3778858
;  :num-checks              65
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            134134)
(assert (<= $Perm.No $k@36@04))
(assert (<= $k@36@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@36@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))
  $Snap.unit))
; [eval] 0 < diz.Controller_m.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               656
;  :arith-add-rows          3
;  :arith-assert-diseq      14
;  :arith-assert-lower      53
;  :arith-assert-upper      41
;  :arith-conflicts         5
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               32
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             587
;  :mk-clause               68
;  :num-allocs              3778858
;  :num-checks              66
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            134457)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
(declare-const $k@37@04 $Perm)
(assert ($Perm.isReadVar $k@37@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@37@04 $Perm.No) (< $Perm.No $k@37@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               662
;  :arith-add-rows          3
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      42
;  :arith-conflicts         5
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             594
;  :mk-clause               70
;  :num-allocs              3778858
;  :num-checks              67
;  :propagations            45
;  :quant-instantiations    34
;  :rlimit-count            134956)
(assert (<= $Perm.No $k@37@04))
(assert (<= $k@37@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@37@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_sensor != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               668
;  :arith-add-rows          3
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      43
;  :arith-conflicts         5
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               34
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             597
;  :mk-clause               70
;  :num-allocs              3778858
;  :num-checks              68
;  :propagations            45
;  :quant-instantiations    34
;  :rlimit-count            135299)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               674
;  :arith-add-rows          3
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      43
;  :arith-conflicts         5
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               35
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             600
;  :mk-clause               70
;  :num-allocs              3778858
;  :num-checks              69
;  :propagations            45
;  :quant-instantiations    35
;  :rlimit-count            135673)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               679
;  :arith-add-rows          3
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      43
;  :arith-conflicts         5
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               36
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             601
;  :mk-clause               70
;  :num-allocs              3778858
;  :num-checks              70
;  :propagations            45
;  :quant-instantiations    35
;  :rlimit-count            135950)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               679
;  :arith-add-rows          3
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      43
;  :arith-conflicts         5
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               36
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             601
;  :mk-clause               70
;  :num-allocs              3778858
;  :num-checks              71
;  :propagations            45
;  :quant-instantiations    35
;  :rlimit-count            135963)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))
(declare-const $k@38@04 $Perm)
(assert ($Perm.isReadVar $k@38@04 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@38@04 $Perm.No) (< $Perm.No $k@38@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               684
;  :arith-add-rows          3
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      44
;  :arith-conflicts         5
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               37
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             606
;  :mk-clause               72
;  :num-allocs              3778858
;  :num-checks              72
;  :propagations            46
;  :quant-instantiations    35
;  :rlimit-count            136393)
(assert (<= $Perm.No $k@38@04))
(assert (<= $k@38@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@38@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               690
;  :arith-add-rows          3
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      45
;  :arith-conflicts         5
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               38
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             609
;  :mk-clause               72
;  :num-allocs              3778858
;  :num-checks              73
;  :propagations            46
;  :quant-instantiations    35
;  :rlimit-count            136776)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-add-rows          3
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      45
;  :arith-conflicts         5
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               39
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             612
;  :mk-clause               72
;  :num-allocs              3778858
;  :num-checks              74
;  :propagations            46
;  :quant-instantiations    36
;  :rlimit-count            137194)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-add-rows          3
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      45
;  :arith-conflicts         5
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             613
;  :mk-clause               72
;  :num-allocs              3778858
;  :num-checks              75
;  :propagations            46
;  :quant-instantiations    36
;  :rlimit-count            137511)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-add-rows          3
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      45
;  :arith-conflicts         5
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             613
;  :mk-clause               72
;  :num-allocs              3778858
;  :num-checks              76
;  :propagations            46
;  :quant-instantiations    36
;  :rlimit-count            137524)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_process_state[0] == -1 || diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0] == -1
; [eval] diz.Controller_m.Main_process_state[0]
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          3
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      45
;  :arith-conflicts         5
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             615
;  :mk-clause               72
;  :num-allocs              3778858
;  :num-checks              77
;  :propagations            46
;  :quant-instantiations    36
;  :rlimit-count            137850)
; [eval] -1
(push) ; 4
; [then-branch: 16 | First:(Second:(Second:(Second:($t@34@04))))[0] == -1 | live]
; [else-branch: 16 | First:(Second:(Second:(Second:($t@34@04))))[0] != -1 | live]
(push) ; 5
; [then-branch: 16 | First:(Second:(Second:(Second:($t@34@04))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    0)
  (- 0 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | First:(Second:(Second:(Second:($t@34@04))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      0)
    (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               707
;  :arith-add-rows          3
;  :arith-assert-diseq      17
;  :arith-assert-lower      61
;  :arith-assert-upper      46
;  :arith-conflicts         5
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              41
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             621
;  :mk-clause               76
;  :num-allocs              3778858
;  :num-checks              78
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            138082)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_process_state[1] == -1 || diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 4
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               713
;  :arith-add-rows          3
;  :arith-assert-diseq      17
;  :arith-assert-lower      61
;  :arith-assert-upper      46
;  :arith-conflicts         5
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              45
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             625
;  :mk-clause               77
;  :num-allocs              3913590
;  :num-checks              79
;  :propagations            48
;  :quant-instantiations    37
;  :rlimit-count            138509)
; [eval] -1
(push) ; 4
; [then-branch: 17 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1 | live]
; [else-branch: 17 | First:(Second:(Second:(Second:($t@34@04))))[1] != -1 | live]
(push) ; 5
; [then-branch: 17 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    1)
  (- 0 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | First:(Second:(Second:(Second:($t@34@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               713
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      64
;  :arith-assert-upper      47
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              45
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             631
;  :mk-clause               81
;  :num-allocs              3913590
;  :num-checks              80
;  :propagations            50
;  :quant-instantiations    38
;  :rlimit-count            138741)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_event_state[0] != -1
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      64
;  :arith-assert-upper      47
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              49
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             635
;  :mk-clause               82
;  :num-allocs              3913590
;  :num-checks              81
;  :propagations            50
;  :quant-instantiations    38
;  :rlimit-count            139178)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_event_state[0] != 0
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               725
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      64
;  :arith-assert-upper      47
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              49
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             638
;  :mk-clause               82
;  :num-allocs              3913590
;  :num-checks              82
;  :propagations            50
;  :quant-instantiations    38
;  :rlimit-count            139628)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_event_state[2] <= -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               731
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      64
;  :arith-assert-upper      47
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              49
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             641
;  :mk-clause               82
;  :num-allocs              3913590
;  :num-checks              83
;  :propagations            50
;  :quant-instantiations    38
;  :rlimit-count            140073)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Controller_m.Main_controller.Controller_init || (diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1)
; [eval] !diz.Controller_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               737
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      64
;  :arith-assert-upper      48
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               41
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              49
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             644
;  :mk-clause               82
;  :num-allocs              3913590
;  :num-checks              84
;  :propagations            50
;  :quant-instantiations    38
;  :rlimit-count            140552)
(push) ; 4
; [then-branch: 18 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))) | live]
; [else-branch: 18 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))) | live]
(push) ; 5
; [then-branch: 18 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
; [eval] diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      64
;  :arith-assert-upper      48
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         13
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               41
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   41
;  :datatype-splits         62
;  :decisions               93
;  :del-clause              49
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             647
;  :mk-clause               82
;  :num-allocs              3913590
;  :num-checks              85
;  :propagations            50
;  :quant-instantiations    40
;  :rlimit-count            140897)
; [eval] -1
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               942
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      70
;  :arith-assert-upper      56
;  :arith-conflicts         5
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 143
;  :datatype-occurs-check   53
;  :datatype-splits         105
;  :decisions               149
;  :del-clause              57
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             709
;  :mk-clause               90
;  :num-allocs              4050235
;  :num-checks              86
;  :propagations            55
;  :quant-instantiations    40
;  :rlimit-count            142435
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1187
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      79
;  :arith-assert-upper      67
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         26
;  :arith-pivots            15
;  :binary-propagations     11
;  :conflicts               47
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 210
;  :datatype-occurs-check   68
;  :datatype-splits         152
;  :decisions               214
;  :del-clause              72
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             792
;  :mk-clause               105
;  :num-allocs              4050235
;  :num-checks              87
;  :propagations            64
;  :quant-instantiations    41
;  :rlimit-count            144181
;  :time                    0.00)
; [then-branch: 19 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1 | live]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@34@04))))[1] != -1 | live]
(push) ; 7
; [then-branch: 19 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    1)
  (- 0 1)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1188
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      79
;  :arith-assert-upper      67
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         26
;  :arith-pivots            15
;  :binary-propagations     11
;  :conflicts               47
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 210
;  :datatype-occurs-check   68
;  :datatype-splits         152
;  :decisions               214
;  :del-clause              72
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             792
;  :mk-clause               105
;  :num-allocs              4050235
;  :num-checks              88
;  :propagations            64
;  :quant-instantiations    41
;  :rlimit-count            144306)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 19 | First:(Second:(Second:(Second:($t@34@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-add-rows          3
;  :arith-assert-diseq      18
;  :arith-assert-lower      79
;  :arith-assert-upper      67
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         26
;  :arith-pivots            15
;  :binary-propagations     11
;  :conflicts               47
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 210
;  :datatype-occurs-check   68
;  :datatype-splits         152
;  :decisions               214
;  :del-clause              72
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             795
;  :mk-clause               106
;  :num-allocs              4050235
;  :num-checks              89
;  :propagations            64
;  :quant-instantiations    41
;  :rlimit-count            144889)
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1545
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      88
;  :arith-assert-upper      78
;  :arith-conflicts         6
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         35
;  :arith-pivots            23
;  :binary-propagations     11
;  :conflicts               51
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 291
;  :datatype-occurs-check   92
;  :datatype-splits         220
;  :decisions               298
;  :del-clause              87
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             902
;  :mk-clause               121
;  :num-allocs              4050235
;  :num-checks              90
;  :propagations            73
;  :quant-instantiations    44
;  :rlimit-count            147063
;  :time                    0.00)
(push) ; 5
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1689
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      92
;  :arith-assert-upper      84
;  :arith-conflicts         6
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         39
;  :arith-pivots            27
;  :binary-propagations     11
;  :conflicts               52
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 325
;  :datatype-occurs-check   101
;  :datatype-splits         242
;  :decisions               334
;  :del-clause              92
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             937
;  :mk-clause               126
;  :num-allocs              4050235
;  :num-checks              91
;  :propagations            76
;  :quant-instantiations    45
;  :rlimit-count            148305)
; [then-branch: 20 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2] | live]
; [else-branch: 20 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2]) | live]
(push) ; 5
; [then-branch: 20 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1690
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      93
;  :arith-assert-upper      84
;  :arith-conflicts         6
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         40
;  :arith-pivots            27
;  :binary-propagations     11
;  :conflicts               52
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 325
;  :datatype-occurs-check   101
;  :datatype-splits         242
;  :decisions               334
;  :del-clause              92
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             938
;  :mk-clause               126
;  :num-allocs              4050235
;  :num-checks              92
;  :propagations            76
;  :quant-instantiations    45
;  :rlimit-count            148453)
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch: 20 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1696
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      93
;  :arith-assert-upper      84
;  :arith-conflicts         6
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         40
;  :arith-pivots            27
;  :binary-propagations     11
;  :conflicts               52
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 325
;  :datatype-occurs-check   101
;  :datatype-splits         242
;  :decisions               334
;  :del-clause              92
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             941
;  :mk-clause               127
;  :num-allocs              4050235
;  :num-checks              93
;  :propagations            76
;  :quant-instantiations    45
;  :rlimit-count            149036)
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1997
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      102
;  :arith-assert-upper      95
;  :arith-conflicts         7
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         48
;  :arith-pivots            31
;  :binary-propagations     11
;  :conflicts               57
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   123
;  :datatype-splits         296
;  :decisions               405
;  :del-clause              108
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1034
;  :mk-clause               143
;  :num-allocs              4050235
;  :num-checks              94
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            150941
;  :time                    0.00)
(push) ; 5
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2142
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      106
;  :arith-assert-upper      101
;  :arith-conflicts         7
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         52
;  :arith-pivots            35
;  :binary-propagations     11
;  :conflicts               58
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 434
;  :datatype-occurs-check   132
;  :datatype-splits         318
;  :decisions               441
;  :del-clause              113
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1068
;  :mk-clause               148
;  :num-allocs              4050235
;  :num-checks              95
;  :propagations            89
;  :quant-instantiations    47
;  :rlimit-count            152180)
; [then-branch: 21 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2] | live]
; [else-branch: 21 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2]) | live]
(push) ; 5
; [then-branch: 21 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2)))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 6
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2144
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      108
;  :arith-assert-upper      103
;  :arith-conflicts         7
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         53
;  :arith-pivots            35
;  :binary-propagations     11
;  :conflicts               59
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 434
;  :datatype-occurs-check   132
;  :datatype-splits         318
;  :decisions               441
;  :del-clause              113
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1072
;  :mk-clause               151
;  :num-allocs              4050235
;  :num-checks              96
;  :propagations            93
;  :quant-instantiations    48
;  :rlimit-count            152403)
(push) ; 6
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2144
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      108
;  :arith-assert-upper      103
;  :arith-conflicts         7
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         53
;  :arith-pivots            35
;  :binary-propagations     11
;  :conflicts               60
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 434
;  :datatype-occurs-check   132
;  :datatype-splits         318
;  :decisions               441
;  :del-clause              113
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1072
;  :mk-clause               151
;  :num-allocs              4050235
;  :num-checks              97
;  :propagations            93
;  :quant-instantiations    48
;  :rlimit-count            152451)
(pop) ; 5
(push) ; 5
; [else-branch: 21 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1
(push) ; 4
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2150
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      108
;  :arith-assert-upper      103
;  :arith-conflicts         7
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         53
;  :arith-pivots            35
;  :binary-propagations     11
;  :conflicts               61
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 434
;  :datatype-occurs-check   132
;  :datatype-splits         318
;  :decisions               441
;  :del-clause              116
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1075
;  :mk-clause               152
;  :num-allocs              4050235
;  :num-checks              98
;  :propagations            93
;  :quant-instantiations    48
;  :rlimit-count            153133)
(push) ; 4
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))) | live]
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))) | live]
(push) ; 5
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2154
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      108
;  :arith-assert-upper      103
;  :arith-conflicts         7
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         53
;  :arith-pivots            35
;  :binary-propagations     11
;  :conflicts               61
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 434
;  :datatype-occurs-check   132
;  :datatype-splits         318
;  :decisions               441
;  :del-clause              116
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1077
;  :mk-clause               152
;  :num-allocs              4050235
;  :num-checks              99
;  :propagations            93
;  :quant-instantiations    50
;  :rlimit-count            153406)
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2413
;  :arith-add-rows          16
;  :arith-assert-diseq      19
;  :arith-assert-lower      118
;  :arith-assert-upper      118
;  :arith-bound-prop        1
;  :arith-conflicts         7
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         64
;  :arith-pivots            45
;  :binary-propagations     11
;  :conflicts               65
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 501
;  :datatype-occurs-check   147
;  :datatype-splits         365
;  :decisions               506
;  :del-clause              134
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1169
;  :mk-clause               170
;  :num-allocs              4050235
;  :num-checks              100
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            155643
;  :time                    0.00)
(push) ; 5
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2569
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      123
;  :arith-assert-upper      125
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               66
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              142
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1208
;  :mk-clause               178
;  :num-allocs              4050235
;  :num-checks              101
;  :propagations            108
;  :quant-instantiations    54
;  :rlimit-count            157179)
; [then-branch: 23 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))) | live]
; [else-branch: 23 | !(First:(Second:(Second:(Second:($t@34@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))) | live]
(push) ; 5
; [then-branch: 23 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 6
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2575
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      124
;  :arith-assert-upper      127
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               67
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              142
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1214
;  :mk-clause               181
;  :num-allocs              4050235
;  :num-checks              102
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            157588)
(push) ; 6
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2575
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      124
;  :arith-assert-upper      127
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               68
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              142
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1214
;  :mk-clause               181
;  :num-allocs              4050235
;  :num-checks              103
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            157636)
(pop) ; 5
(push) ; 5
; [else-branch: 23 | !(First:(Second:(Second:(Second:($t@34@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller == diz
(push) ; 4
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2581
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      124
;  :arith-assert-upper      127
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               69
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              145
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1216
;  :mk-clause               182
;  :num-allocs              4050235
;  :num-checks              104
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            158362)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
  diz@9@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2589
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      124
;  :arith-assert-upper      127
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               69
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              145
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1218
;  :mk-clause               182
;  :num-allocs              4050235
;  :num-checks              105
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            158806)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2597
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      124
;  :arith-assert-upper      127
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               69
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              157
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1223
;  :mk-clause               182
;  :num-allocs              4050235
;  :num-checks              106
;  :propagations            112
;  :quant-instantiations    60
;  :rlimit-count            159339)
; [eval] diz.Controller_m != null
; [eval] |diz.Controller_m.Main_process_state| == 2
; [eval] |diz.Controller_m.Main_process_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_20__23@30@04) 2)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2597
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      124
;  :arith-assert-upper      127
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               70
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              157
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1226
;  :mk-clause               182
;  :num-allocs              4050235
;  :num-checks              107
;  :propagations            112
;  :quant-instantiations    60
;  :rlimit-count            159413)
(assert (= (Seq_length __flatten_20__23@30@04) 2))
; [eval] |diz.Controller_m.Main_event_state| == 3
; [eval] |diz.Controller_m.Main_event_state|
; [eval] (forall i__28: Int :: { diz.Controller_m.Main_process_state[i__28] } 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|)
(declare-const i__28@39@04 Int)
(push) ; 4
; [eval] 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state|
; [eval] 0 <= i__28
(push) ; 5
; [then-branch: 24 | 0 <= i__28@39@04 | live]
; [else-branch: 24 | !(0 <= i__28@39@04) | live]
(push) ; 6
; [then-branch: 24 | 0 <= i__28@39@04]
(assert (<= 0 i__28@39@04))
; [eval] i__28 < |diz.Controller_m.Main_process_state|
; [eval] |diz.Controller_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 24 | !(0 <= i__28@39@04)]
(assert (not (<= 0 i__28@39@04)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 25 | i__28@39@04 < |__flatten_20__23@30@04| && 0 <= i__28@39@04 | live]
; [else-branch: 25 | !(i__28@39@04 < |__flatten_20__23@30@04| && 0 <= i__28@39@04) | live]
(push) ; 6
; [then-branch: 25 | i__28@39@04 < |__flatten_20__23@30@04| && 0 <= i__28@39@04]
(assert (and (< i__28@39@04 (Seq_length __flatten_20__23@30@04)) (<= 0 i__28@39@04)))
; [eval] diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__28] == -1
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 7
(assert (not (>= i__28@39@04 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2598
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      126
;  :arith-assert-upper      129
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               70
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              157
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1231
;  :mk-clause               182
;  :num-allocs              4050235
;  :num-checks              108
;  :propagations            112
;  :quant-instantiations    60
;  :rlimit-count            159600)
; [eval] -1
(push) ; 7
; [then-branch: 26 | __flatten_20__23@30@04[i__28@39@04] == -1 | live]
; [else-branch: 26 | __flatten_20__23@30@04[i__28@39@04] != -1 | live]
(push) ; 8
; [then-branch: 26 | __flatten_20__23@30@04[i__28@39@04] == -1]
(assert (= (Seq_index __flatten_20__23@30@04 i__28@39@04) (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 26 | __flatten_20__23@30@04[i__28@39@04] != -1]
(assert (not (= (Seq_index __flatten_20__23@30@04 i__28@39@04) (- 0 1))))
; [eval] 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= diz.Controller_m.Main_process_state[i__28]
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 9
(assert (not (>= i__28@39@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2599
;  :arith-add-rows          24
;  :arith-assert-diseq      19
;  :arith-assert-lower      126
;  :arith-assert-upper      130
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               70
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              157
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1239
;  :mk-clause               192
;  :num-allocs              4050235
;  :num-checks              109
;  :propagations            112
;  :quant-instantiations    61
;  :rlimit-count            159768)
(push) ; 9
; [then-branch: 27 | 0 <= __flatten_20__23@30@04[i__28@39@04] | live]
; [else-branch: 27 | !(0 <= __flatten_20__23@30@04[i__28@39@04]) | live]
(push) ; 10
; [then-branch: 27 | 0 <= __flatten_20__23@30@04[i__28@39@04]]
(assert (<= 0 (Seq_index __flatten_20__23@30@04 i__28@39@04)))
; [eval] diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 11
(assert (not (>= i__28@39@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2599
;  :arith-add-rows          24
;  :arith-assert-diseq      20
;  :arith-assert-lower      129
;  :arith-assert-upper      130
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         70
;  :arith-pivots            51
;  :binary-propagations     11
;  :conflicts               70
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 535
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               542
;  :del-clause              157
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1242
;  :mk-clause               193
;  :num-allocs              4050235
;  :num-checks              110
;  :propagations            112
;  :quant-instantiations    61
;  :rlimit-count            159842)
; [eval] |diz.Controller_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 27 | !(0 <= __flatten_20__23@30@04[i__28@39@04])]
(assert (not (<= 0 (Seq_index __flatten_20__23@30@04 i__28@39@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 25 | !(i__28@39@04 < |__flatten_20__23@30@04| && 0 <= i__28@39@04)]
(assert (not
  (and (< i__28@39@04 (Seq_length __flatten_20__23@30@04)) (<= 0 i__28@39@04))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((i__28@39@04 Int)) (!
  (implies
    (and (< i__28@39@04 (Seq_length __flatten_20__23@30@04)) (<= 0 i__28@39@04))
    (or
      (= (Seq_index __flatten_20__23@30@04 i__28@39@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_20__23@30@04 i__28@39@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
        (<= 0 (Seq_index __flatten_20__23@30@04 i__28@39@04)))))
  :pattern ((Seq_index __flatten_20__23@30@04 i__28@39@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      27
;  :arith-assert-lower      140
;  :arith-assert-upper      140
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         74
;  :arith-pivots            53
;  :binary-propagations     11
;  :conflicts               76
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1306
;  :mk-clause               295
;  :num-allocs              4050235
;  :num-checks              111
;  :propagations            140
;  :quant-instantiations    65
;  :rlimit-count            160551)
(assert (forall ((i__28@39@04 Int)) (!
  (implies
    (and (< i__28@39@04 (Seq_length __flatten_20__23@30@04)) (<= 0 i__28@39@04))
    (or
      (= (Seq_index __flatten_20__23@30@04 i__28@39@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_20__23@30@04 i__28@39@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))
        (<= 0 (Seq_index __flatten_20__23@30@04 i__28@39@04)))))
  :pattern ((Seq_index __flatten_20__23@30@04 i__28@39@04))
  :qid |prog.l<no position>|)))
(declare-const $k@40@04 $Perm)
(assert ($Perm.isReadVar $k@40@04 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@40@04 $Perm.No) (< $Perm.No $k@40@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      28
;  :arith-assert-lower      142
;  :arith-assert-upper      141
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         74
;  :arith-pivots            53
;  :binary-propagations     11
;  :conflicts               77
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1311
;  :mk-clause               297
;  :num-allocs              4050235
;  :num-checks              112
;  :propagations            141
;  :quant-instantiations    65
;  :rlimit-count            161021)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@23@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      28
;  :arith-assert-lower      142
;  :arith-assert-upper      141
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         74
;  :arith-pivots            53
;  :binary-propagations     11
;  :conflicts               77
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1311
;  :mk-clause               297
;  :num-allocs              4050235
;  :num-checks              113
;  :propagations            141
;  :quant-instantiations    65
;  :rlimit-count            161032)
(assert (< $k@40@04 $k@23@04))
(assert (<= $Perm.No (- $k@23@04 $k@40@04)))
(assert (<= (- $k@23@04 $k@40@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@23@04 $k@40@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
; [eval] 0 < diz.Controller_m.Main_MIN_DIST
(push) ; 4
(assert (not (< $Perm.No $k@23@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      28
;  :arith-assert-lower      144
;  :arith-assert-upper      142
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         74
;  :arith-pivots            55
;  :binary-propagations     11
;  :conflicts               78
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1314
;  :mk-clause               297
;  :num-allocs              4050235
;  :num-checks              114
;  :propagations            141
;  :quant-instantiations    65
;  :rlimit-count            161252)
(declare-const $k@41@04 $Perm)
(assert ($Perm.isReadVar $k@41@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@41@04 $Perm.No) (< $Perm.No $k@41@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      29
;  :arith-assert-lower      146
;  :arith-assert-upper      143
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         74
;  :arith-pivots            55
;  :binary-propagations     11
;  :conflicts               79
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1318
;  :mk-clause               299
;  :num-allocs              4050235
;  :num-checks              115
;  :propagations            142
;  :quant-instantiations    65
;  :rlimit-count            161451)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@24@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      29
;  :arith-assert-lower      146
;  :arith-assert-upper      143
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         74
;  :arith-pivots            55
;  :binary-propagations     11
;  :conflicts               79
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1318
;  :mk-clause               299
;  :num-allocs              4050235
;  :num-checks              116
;  :propagations            142
;  :quant-instantiations    65
;  :rlimit-count            161462)
(assert (< $k@41@04 $k@24@04))
(assert (<= $Perm.No (- $k@24@04 $k@41@04)))
(assert (<= (- $k@24@04 $k@41@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@24@04 $k@41@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
; [eval] diz.Controller_m.Main_sensor != null
(push) ; 4
(assert (not (< $Perm.No $k@24@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      29
;  :arith-assert-lower      148
;  :arith-assert-upper      144
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         74
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               80
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1321
;  :mk-clause               299
;  :num-allocs              4050235
;  :num-checks              117
;  :propagations            142
;  :quant-instantiations    65
;  :rlimit-count            161676)
(push) ; 4
(assert (not (< $Perm.No $k@24@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      29
;  :arith-assert-lower      148
;  :arith-assert-upper      144
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         74
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               81
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1321
;  :mk-clause               299
;  :num-allocs              4050235
;  :num-checks              118
;  :propagations            142
;  :quant-instantiations    65
;  :rlimit-count            161724)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      29
;  :arith-assert-lower      148
;  :arith-assert-upper      144
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         74
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               81
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1321
;  :mk-clause               299
;  :num-allocs              4050235
;  :num-checks              119
;  :propagations            142
;  :quant-instantiations    65
;  :rlimit-count            161737)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@24@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      29
;  :arith-assert-lower      148
;  :arith-assert-upper      144
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         74
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1321
;  :mk-clause               299
;  :num-allocs              4050235
;  :num-checks              120
;  :propagations            142
;  :quant-instantiations    65
;  :rlimit-count            161785)
(declare-const $k@42@04 $Perm)
(assert ($Perm.isReadVar $k@42@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@42@04 $Perm.No) (< $Perm.No $k@42@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2637
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      150
;  :arith-assert-upper      145
;  :arith-bound-prop        7
;  :arith-conflicts         7
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         74
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               83
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              270
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1325
;  :mk-clause               301
;  :num-allocs              4050235
;  :num-checks              121
;  :propagations            143
;  :quant-instantiations    65
;  :rlimit-count            161984)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@12@04 $k@25@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2638
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      150
;  :arith-assert-upper      146
;  :arith-bound-prop        7
;  :arith-conflicts         8
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         74
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              272
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1327
;  :mk-clause               303
;  :num-allocs              4050235
;  :num-checks              122
;  :propagations            144
;  :quant-instantiations    65
;  :rlimit-count            162044)
(assert (< $k@42@04 (+ $k@12@04 $k@25@04)))
(assert (<= $Perm.No (- (+ $k@12@04 $k@25@04) $k@42@04)))
(assert (<= (- (+ $k@12@04 $k@25@04) $k@42@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@12@04 $k@25@04) $k@42@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
; [eval] diz.Controller_m.Main_controller != null
(push) ; 4
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2638
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      152
;  :arith-assert-upper      148
;  :arith-bound-prop        7
;  :arith-conflicts         9
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         75
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               85
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              272
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1331
;  :mk-clause               303
;  :num-allocs              4050235
;  :num-checks              123
;  :propagations            144
;  :quant-instantiations    65
;  :rlimit-count            162272)
(push) ; 4
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2638
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      152
;  :arith-assert-upper      149
;  :arith-bound-prop        7
;  :arith-conflicts         10
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         76
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              272
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1332
;  :mk-clause               303
;  :num-allocs              4050235
;  :num-checks              124
;  :propagations            144
;  :quant-instantiations    65
;  :rlimit-count            162332)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2638
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      152
;  :arith-assert-upper      149
;  :arith-bound-prop        7
;  :arith-conflicts         10
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         76
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              272
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1332
;  :mk-clause               303
;  :num-allocs              4050235
;  :num-checks              125
;  :propagations            144
;  :quant-instantiations    65
;  :rlimit-count            162345)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2638
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      152
;  :arith-assert-upper      150
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         77
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               87
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              272
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1333
;  :mk-clause               303
;  :num-allocs              4050235
;  :num-checks              126
;  :propagations            144
;  :quant-instantiations    65
;  :rlimit-count            162405)
(push) ; 4
(assert (not (= diz@9@04 $t@26@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2638
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      152
;  :arith-assert-upper      150
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         77
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   156
;  :datatype-splits         387
;  :decisions               549
;  :del-clause              272
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1334
;  :mk-clause               303
;  :num-allocs              4050235
;  :num-checks              127
;  :propagations            144
;  :quant-instantiations    65
;  :rlimit-count            162465)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2681
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      153
;  :arith-assert-upper      152
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         78
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              273
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1344
;  :mk-clause               304
;  :num-allocs              4050235
;  :num-checks              128
;  :propagations            146
;  :quant-instantiations    65
;  :rlimit-count            163074)
; [eval] diz.Controller_m.Main_process_state[0] == -1 || diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0] == -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 4
(assert (not (< 0 (Seq_length __flatten_20__23@30@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2681
;  :arith-add-rows          24
;  :arith-assert-diseq      30
;  :arith-assert-lower      153
;  :arith-assert-upper      152
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         78
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              273
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1344
;  :mk-clause               304
;  :num-allocs              4050235
;  :num-checks              129
;  :propagations            146
;  :quant-instantiations    65
;  :rlimit-count            163089)
; [eval] -1
(push) ; 4
; [then-branch: 28 | __flatten_20__23@30@04[0] == -1 | live]
; [else-branch: 28 | __flatten_20__23@30@04[0] != -1 | live]
(push) ; 5
; [then-branch: 28 | __flatten_20__23@30@04[0] == -1]
(assert (= (Seq_index __flatten_20__23@30@04 0) (- 0 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 28 | __flatten_20__23@30@04[0] != -1]
(assert (not (= (Seq_index __flatten_20__23@30@04 0) (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0]
(push) ; 6
(assert (not (< 0 (Seq_length __flatten_20__23@30@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2689
;  :arith-add-rows          24
;  :arith-assert-diseq      34
;  :arith-assert-lower      161
;  :arith-assert-upper      158
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              273
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1365
;  :mk-clause               318
;  :num-allocs              4050235
;  :num-checks              130
;  :propagations            153
;  :quant-instantiations    68
;  :rlimit-count            163379)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (or
  (= (Seq_index __flatten_20__23@30@04 0) (- 0 1))
  (= (Seq_index __flatten_20__23@30@04 0) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2693
;  :arith-add-rows          24
;  :arith-assert-diseq      36
;  :arith-assert-lower      163
;  :arith-assert-upper      159
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               89
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              297
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1379
;  :mk-clause               328
;  :num-allocs              4050235
;  :num-checks              131
;  :propagations            156
;  :quant-instantiations    71
;  :rlimit-count            163607)
(assert (or
  (= (Seq_index __flatten_20__23@30@04 0) (- 0 1))
  (= (Seq_index __flatten_20__23@30@04 0) 0)))
; [eval] diz.Controller_m.Main_process_state[1] == -1 || diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 4
(assert (not (< 1 (Seq_length __flatten_20__23@30@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2693
;  :arith-add-rows          24
;  :arith-assert-diseq      36
;  :arith-assert-lower      163
;  :arith-assert-upper      159
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               89
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              297
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1381
;  :mk-clause               329
;  :num-allocs              4050235
;  :num-checks              132
;  :propagations            156
;  :quant-instantiations    71
;  :rlimit-count            163693)
; [eval] -1
(push) ; 4
; [then-branch: 29 | __flatten_20__23@30@04[1] == -1 | live]
; [else-branch: 29 | __flatten_20__23@30@04[1] != -1 | live]
(push) ; 5
; [then-branch: 29 | __flatten_20__23@30@04[1] == -1]
(assert (= (Seq_index __flatten_20__23@30@04 1) (- 0 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | __flatten_20__23@30@04[1] != -1]
(assert (not (= (Seq_index __flatten_20__23@30@04 1) (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 6
(assert (not (< 1 (Seq_length __flatten_20__23@30@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2696
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      161
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               89
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              297
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1391
;  :mk-clause               333
;  :num-allocs              4050235
;  :num-checks              133
;  :propagations            158
;  :quant-instantiations    73
;  :rlimit-count            163915)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (or
  (= (Seq_index __flatten_20__23@30@04 1) (- 0 1))
  (= (Seq_index __flatten_20__23@30@04 1) 2))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2698
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      161
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1397
;  :mk-clause               337
;  :num-allocs              4050235
;  :num-checks              134
;  :propagations            160
;  :quant-instantiations    75
;  :rlimit-count            164106)
(assert (or
  (= (Seq_index __flatten_20__23@30@04 1) (- 0 1))
  (= (Seq_index __flatten_20__23@30@04 1) 2)))
; [eval] diz.Controller_m.Main_event_state[0] != -1
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2698
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      161
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1399
;  :mk-clause               338
;  :num-allocs              4050235
;  :num-checks              135
;  :propagations            160
;  :quant-instantiations    75
;  :rlimit-count            164192)
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[0] != 0
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2698
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      161
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1399
;  :mk-clause               338
;  :num-allocs              4050235
;  :num-checks              136
;  :propagations            160
;  :quant-instantiations    75
;  :rlimit-count            164207)
; [eval] diz.Controller_m.Main_event_state[2] <= -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2698
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      161
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1399
;  :mk-clause               338
;  :num-allocs              4050235
;  :num-checks              137
;  :propagations            160
;  :quant-instantiations    75
;  :rlimit-count            164222)
; [eval] -1
; [eval] !diz.Controller_m.Main_controller.Controller_init || (diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1)
; [eval] !diz.Controller_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2698
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      162
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         80
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               91
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1400
;  :mk-clause               338
;  :num-allocs              4050235
;  :num-checks              138
;  :propagations            160
;  :quant-instantiations    75
;  :rlimit-count            164282)
(push) ; 4
(assert (not (= diz@9@04 $t@26@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2698
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      162
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         80
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               92
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1401
;  :mk-clause               338
;  :num-allocs              4050235
;  :num-checks              139
;  :propagations            160
;  :quant-instantiations    75
;  :rlimit-count            164342)
(push) ; 4
; [then-branch: 30 | False | live]
; [else-branch: 30 | True | live]
(push) ; 5
; [then-branch: 30 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 30 | True]
; [eval] diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (< 1 (Seq_length __flatten_20__23@30@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2698
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      162
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         80
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               92
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1401
;  :mk-clause               338
;  :num-allocs              4050235
;  :num-checks              140
;  :propagations            160
;  :quant-instantiations    75
;  :rlimit-count            164374)
; [eval] -1
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (Seq_index __flatten_20__23@30@04 1) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2701
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      162
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         80
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1402
;  :mk-clause               338
;  :num-allocs              4050235
;  :num-checks              141
;  :propagations            160
;  :quant-instantiations    76
;  :rlimit-count            164488)
; [then-branch: 31 | __flatten_20__23@30@04[1] == -1 | dead]
; [else-branch: 31 | __flatten_20__23@30@04[1] != -1 | live]
(push) ; 7
; [else-branch: 31 | __flatten_20__23@30@04[1] != -1]
(assert (not (= (Seq_index __flatten_20__23@30@04 1) (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2701
;  :arith-add-rows          24
;  :arith-assert-diseq      37
;  :arith-assert-lower      167
;  :arith-assert-upper      162
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         80
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   162
;  :datatype-splits         396
;  :decisions               562
;  :del-clause              305
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1402
;  :mk-clause               338
;  :num-allocs              4050235
;  :num-checks              142
;  :propagations            160
;  :quant-instantiations    76
;  :rlimit-count            164521)
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2779
;  :arith-add-rows          24
;  :arith-assert-diseq      41
;  :arith-assert-lower      176
;  :arith-assert-upper      170
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         81
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               97
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 567
;  :datatype-occurs-check   168
;  :datatype-splits         407
;  :decisions               580
;  :del-clause              322
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          1
;  :mk-bool-var             1448
;  :mk-clause               355
;  :num-allocs              4050235
;  :num-checks              143
;  :propagations            174
;  :quant-instantiations    84
;  :rlimit-count            165640
;  :time                    0.00)
(push) ; 5
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2835
;  :arith-add-rows          24
;  :arith-assert-diseq      41
;  :arith-assert-lower      180
;  :arith-assert-upper      174
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         82
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               98
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 579
;  :datatype-occurs-check   174
;  :datatype-splits         416
;  :decisions               595
;  :del-clause              329
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          1
;  :mk-bool-var             1468
;  :mk-clause               362
;  :num-allocs              4050235
;  :num-checks              144
;  :propagations            179
;  :quant-instantiations    88
;  :rlimit-count            166559
;  :time                    0.00)
; [then-branch: 32 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2] | live]
; [else-branch: 32 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2]) | live]
(push) ; 5
; [then-branch: 32 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (< 0 (Seq_length __flatten_20__23@30@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2838
;  :arith-add-rows          24
;  :arith-assert-diseq      41
;  :arith-assert-lower      183
;  :arith-assert-upper      176
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         83
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               98
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 579
;  :datatype-occurs-check   174
;  :datatype-splits         416
;  :decisions               595
;  :del-clause              329
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          1
;  :mk-bool-var             1473
;  :mk-clause               365
;  :num-allocs              4050235
;  :num-checks              145
;  :propagations            184
;  :quant-instantiations    90
;  :rlimit-count            166769)
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch: 32 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2))
  (not (= (Seq_index __flatten_20__23@30@04 0) (- 0 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2845
;  :arith-add-rows          24
;  :arith-assert-diseq      41
;  :arith-assert-lower      185
;  :arith-assert-upper      176
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         84
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               99
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 579
;  :datatype-occurs-check   174
;  :datatype-splits         416
;  :decisions               595
;  :del-clause              338
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          1
;  :mk-bool-var             1480
;  :mk-clause               371
;  :num-allocs              4050235
;  :num-checks              146
;  :propagations            190
;  :quant-instantiations    93
;  :rlimit-count            167080)
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2))
  (not (= (Seq_index __flatten_20__23@30@04 0) (- 0 1)))))
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2845
;  :arith-add-rows          24
;  :arith-assert-diseq      41
;  :arith-assert-lower      185
;  :arith-assert-upper      176
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         84
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               99
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 579
;  :datatype-occurs-check   174
;  :datatype-splits         416
;  :decisions               595
;  :del-clause              338
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          1
;  :mk-bool-var             1480
;  :mk-clause               372
;  :num-allocs              4050235
;  :num-checks              147
;  :propagations            190
;  :quant-instantiations    93
;  :rlimit-count            167272)
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2919
;  :arith-add-rows          24
;  :arith-assert-diseq      45
;  :arith-assert-lower      194
;  :arith-assert-upper      184
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         85
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               102
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 596
;  :datatype-occurs-check   180
;  :datatype-splits         427
;  :decisions               612
;  :del-clause              353
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1523
;  :mk-clause               387
;  :num-allocs              4050235
;  :num-checks              148
;  :propagations            204
;  :quant-instantiations    100
;  :rlimit-count            168336
;  :time                    0.00)
(push) ; 5
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2975
;  :arith-add-rows          24
;  :arith-assert-diseq      45
;  :arith-assert-lower      198
;  :arith-assert-upper      188
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         86
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              360
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1543
;  :mk-clause               394
;  :num-allocs              4050235
;  :num-checks              149
;  :propagations            209
;  :quant-instantiations    104
;  :rlimit-count            169257
;  :time                    0.00)
; [then-branch: 33 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2] | live]
; [else-branch: 33 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2]) | live]
(push) ; 5
; [then-branch: 33 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
    2)))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 6
(assert (not (< $Perm.No $k@24@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2984
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      194
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         87
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               104
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              360
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1558
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              150
;  :propagations            220
;  :quant-instantiations    108
;  :rlimit-count            169567)
(push) ; 6
(assert (not (< $Perm.No $k@23@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2984
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      194
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         87
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              360
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1558
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              151
;  :propagations            220
;  :quant-instantiations    108
;  :rlimit-count            169615)
(pop) ; 5
(push) ; 5
; [else-branch: 33 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@21@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
      2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1
(push) ; 4
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2984
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      195
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         88
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               106
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              372
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1559
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              152
;  :propagations            220
;  :quant-instantiations    108
;  :rlimit-count            169707)
(push) ; 4
(assert (not (= diz@9@04 $t@26@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2984
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      195
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         88
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               107
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              372
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1560
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              153
;  :propagations            220
;  :quant-instantiations    108
;  :rlimit-count            169767)
(push) ; 4
; [then-branch: 34 | True | live]
; [else-branch: 34 | False | live]
(push) ; 5
; [then-branch: 34 | True]
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (< 1 (Seq_length __flatten_20__23@30@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2984
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      195
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         88
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               107
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              372
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1560
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              154
;  :propagations            220
;  :quant-instantiations    108
;  :rlimit-count            169792)
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch: 34 | False]
(assert false)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= (Seq_index __flatten_20__23@30@04 1) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2987
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      195
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         88
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               108
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              372
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1561
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              155
;  :propagations            220
;  :quant-instantiations    109
;  :rlimit-count            169913)
; [then-branch: 35 | __flatten_20__23@30@04[1] == -1 | dead]
; [else-branch: 35 | __flatten_20__23@30@04[1] != -1 | live]
(push) ; 5
; [else-branch: 35 | __flatten_20__23@30@04[1] != -1]
(assert (not (= (Seq_index __flatten_20__23@30@04 1) (- 0 1))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] diz.Controller_m.Main_controller == diz
(push) ; 4
(assert (not (< $Perm.No (+ $k@12@04 $k@25@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2987
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      196
;  :arith-bound-prop        7
;  :arith-conflicts         14
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         89
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               109
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              372
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1562
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              156
;  :propagations            220
;  :quant-instantiations    109
;  :rlimit-count            169991)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@26@04 diz@9@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2987
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      196
;  :arith-bound-prop        7
;  :arith-conflicts         14
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         89
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               110
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              372
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1562
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              157
;  :propagations            220
;  :quant-instantiations    109
;  :rlimit-count            170047)
(assert (= $t@26@04 diz@9@04))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2987
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      203
;  :arith-assert-upper      196
;  :arith-bound-prop        7
;  :arith-conflicts         14
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         89
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               110
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 608
;  :datatype-occurs-check   186
;  :datatype-splits         436
;  :decisions               627
;  :del-clause              372
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             1562
;  :mk-clause               406
;  :num-allocs              4050235
;  :num-checks              158
;  :propagations            220
;  :quant-instantiations    109
;  :rlimit-count            170095)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@36@04 $Perm.Write))
(assert ($Perm.isReadVar $k@37@04 $Perm.Write))
(assert ($Perm.isReadVar $k@38@04 $Perm.Write))
(assert (= $t@34@04 ($Snap.combine ($Snap.first $t@34@04) ($Snap.second $t@34@04))))
(assert (=
  ($Snap.second $t@34@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@34@04))
    ($Snap.second ($Snap.second $t@34@04)))))
(assert (= ($Snap.first ($Snap.second $t@34@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@34@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@34@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@34@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
  $Snap.unit))
(assert (forall ((i__28@35@04 Int)) (!
  (implies
    (and
      (<
        i__28@35@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      (<= 0 i__28@35@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
          i__28@35@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
            i__28@35@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
            i__28@35@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    i__28@35@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
(assert (<= $Perm.No $k@36@04))
(assert (<= $k@36@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@36@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))
  $Snap.unit))
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
(assert (<= $Perm.No $k@37@04))
(assert (<= $k@37@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@37@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))
(assert (<= $Perm.No $k@38@04))
(assert (<= $k@38@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@38@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
  $Snap.unit))
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
  $Snap.unit))
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
  $Snap.unit))
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))
  $Snap.unit))
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))
  diz@9@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3692
;  :arith-add-rows          40
;  :arith-assert-diseq      53
;  :arith-assert-lower      254
;  :arith-assert-upper      243
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               116
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              432
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1859
;  :mk-clause               478
;  :num-allocs              4208902
;  :num-checks              161
;  :propagations            278
;  :quant-instantiations    135
;  :rlimit-count            179724
;  :time                    0.00)
; [then-branch: 36 | True | live]
; [else-branch: 36 | False | dead]
(push) ; 5
; [then-branch: 36 | True]
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@43@04 $Snap)
(assert (= $t@43@04 ($Snap.combine ($Snap.first $t@43@04) ($Snap.second $t@43@04))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3697
;  :arith-add-rows          40
;  :arith-assert-diseq      53
;  :arith-assert-lower      254
;  :arith-assert-upper      243
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               116
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              432
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1860
;  :mk-clause               478
;  :num-allocs              4208902
;  :num-checks              162
;  :propagations            278
;  :quant-instantiations    135
;  :rlimit-count            179842)
(assert (=
  ($Snap.second $t@43@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@43@04))
    ($Snap.second ($Snap.second $t@43@04)))))
(assert (= ($Snap.first ($Snap.second $t@43@04)) $Snap.unit))
; [eval] diz.Controller_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@43@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@43@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@43@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
  $Snap.unit))
; [eval] |diz.Controller_m.Main_process_state| == 2
; [eval] |diz.Controller_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
  $Snap.unit))
; [eval] |diz.Controller_m.Main_event_state| == 3
; [eval] |diz.Controller_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
  $Snap.unit))
; [eval] (forall i__29: Int :: { diz.Controller_m.Main_process_state[i__29] } 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|)
(declare-const i__29@44@04 Int)
(push) ; 7
; [eval] 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state|
; [eval] 0 <= i__29
(push) ; 8
; [then-branch: 37 | 0 <= i__29@44@04 | live]
; [else-branch: 37 | !(0 <= i__29@44@04) | live]
(push) ; 9
; [then-branch: 37 | 0 <= i__29@44@04]
(assert (<= 0 i__29@44@04))
; [eval] i__29 < |diz.Controller_m.Main_process_state|
; [eval] |diz.Controller_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 37 | !(0 <= i__29@44@04)]
(assert (not (<= 0 i__29@44@04)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 38 | i__29@44@04 < |First:(Second:(Second:(Second:($t@43@04))))| && 0 <= i__29@44@04 | live]
; [else-branch: 38 | !(i__29@44@04 < |First:(Second:(Second:(Second:($t@43@04))))| && 0 <= i__29@44@04) | live]
(push) ; 9
; [then-branch: 38 | i__29@44@04 < |First:(Second:(Second:(Second:($t@43@04))))| && 0 <= i__29@44@04]
(assert (and
  (<
    i__29@44@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
  (<= 0 i__29@44@04)))
; [eval] diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__29] == -1
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 10
(assert (not (>= i__29@44@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3741
;  :arith-add-rows          40
;  :arith-assert-diseq      53
;  :arith-assert-lower      259
;  :arith-assert-upper      246
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               116
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              432
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1885
;  :mk-clause               478
;  :num-allocs              4208902
;  :num-checks              163
;  :propagations            278
;  :quant-instantiations    140
;  :rlimit-count            181120)
; [eval] -1
(push) ; 10
; [then-branch: 39 | First:(Second:(Second:(Second:($t@43@04))))[i__29@44@04] == -1 | live]
; [else-branch: 39 | First:(Second:(Second:(Second:($t@43@04))))[i__29@44@04] != -1 | live]
(push) ; 11
; [then-branch: 39 | First:(Second:(Second:(Second:($t@43@04))))[i__29@44@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    i__29@44@04)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 39 | First:(Second:(Second:(Second:($t@43@04))))[i__29@44@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      i__29@44@04)
    (- 0 1))))
; [eval] 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= diz.Controller_m.Main_process_state[i__29]
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 12
(assert (not (>= i__29@44@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3741
;  :arith-add-rows          40
;  :arith-assert-diseq      53
;  :arith-assert-lower      259
;  :arith-assert-upper      246
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               116
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              432
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1886
;  :mk-clause               478
;  :num-allocs              4208902
;  :num-checks              164
;  :propagations            278
;  :quant-instantiations    140
;  :rlimit-count            181295)
(push) ; 12
; [then-branch: 40 | 0 <= First:(Second:(Second:(Second:($t@43@04))))[i__29@44@04] | live]
; [else-branch: 40 | !(0 <= First:(Second:(Second:(Second:($t@43@04))))[i__29@44@04]) | live]
(push) ; 13
; [then-branch: 40 | 0 <= First:(Second:(Second:(Second:($t@43@04))))[i__29@44@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    i__29@44@04)))
; [eval] diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 14
(assert (not (>= i__29@44@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3741
;  :arith-add-rows          40
;  :arith-assert-diseq      54
;  :arith-assert-lower      262
;  :arith-assert-upper      246
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               116
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              432
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1889
;  :mk-clause               479
;  :num-allocs              4208902
;  :num-checks              165
;  :propagations            278
;  :quant-instantiations    140
;  :rlimit-count            181419)
; [eval] |diz.Controller_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 40 | !(0 <= First:(Second:(Second:(Second:($t@43@04))))[i__29@44@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      i__29@44@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 38 | !(i__29@44@04 < |First:(Second:(Second:(Second:($t@43@04))))| && 0 <= i__29@44@04)]
(assert (not
  (and
    (<
      i__29@44@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    (<= 0 i__29@44@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__29@44@04 Int)) (!
  (implies
    (and
      (<
        i__29@44@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      (<= 0 i__29@44@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          i__29@44@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
            i__29@44@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
            i__29@44@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    i__29@44@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
(declare-const $k@45@04 $Perm)
(assert ($Perm.isReadVar $k@45@04 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@45@04 $Perm.No) (< $Perm.No $k@45@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3746
;  :arith-add-rows          40
;  :arith-assert-diseq      55
;  :arith-assert-lower      264
;  :arith-assert-upper      247
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               117
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1895
;  :mk-clause               481
;  :num-allocs              4208902
;  :num-checks              166
;  :propagations            279
;  :quant-instantiations    140
;  :rlimit-count            182188)
(assert (<= $Perm.No $k@45@04))
(assert (<= $k@45@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@45@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))
  $Snap.unit))
; [eval] 0 < diz.Controller_m.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@45@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3752
;  :arith-add-rows          40
;  :arith-assert-diseq      55
;  :arith-assert-lower      264
;  :arith-assert-upper      248
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               118
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1898
;  :mk-clause               481
;  :num-allocs              4208902
;  :num-checks              167
;  :propagations            279
;  :quant-instantiations    140
;  :rlimit-count            182511)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
(declare-const $k@46@04 $Perm)
(assert ($Perm.isReadVar $k@46@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@46@04 $Perm.No) (< $Perm.No $k@46@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3758
;  :arith-add-rows          40
;  :arith-assert-diseq      56
;  :arith-assert-lower      267
;  :arith-assert-upper      249
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               119
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1905
;  :mk-clause               483
;  :num-allocs              4208902
;  :num-checks              168
;  :propagations            280
;  :quant-instantiations    141
;  :rlimit-count            183010)
(assert (<= $Perm.No $k@46@04))
(assert (<= $k@46@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@46@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_sensor != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3764
;  :arith-add-rows          40
;  :arith-assert-diseq      56
;  :arith-assert-lower      267
;  :arith-assert-upper      250
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               120
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1908
;  :mk-clause               483
;  :num-allocs              4208902
;  :num-checks              169
;  :propagations            280
;  :quant-instantiations    141
;  :rlimit-count            183353)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3770
;  :arith-add-rows          40
;  :arith-assert-diseq      56
;  :arith-assert-lower      267
;  :arith-assert-upper      250
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               121
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1911
;  :mk-clause               483
;  :num-allocs              4208902
;  :num-checks              170
;  :propagations            280
;  :quant-instantiations    142
;  :rlimit-count            183727)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3775
;  :arith-add-rows          40
;  :arith-assert-diseq      56
;  :arith-assert-lower      267
;  :arith-assert-upper      250
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               122
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1912
;  :mk-clause               483
;  :num-allocs              4208902
;  :num-checks              171
;  :propagations            280
;  :quant-instantiations    142
;  :rlimit-count            184004)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3775
;  :arith-add-rows          40
;  :arith-assert-diseq      56
;  :arith-assert-lower      267
;  :arith-assert-upper      250
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               122
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1912
;  :mk-clause               483
;  :num-allocs              4208902
;  :num-checks              172
;  :propagations            280
;  :quant-instantiations    142
;  :rlimit-count            184017)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))
(declare-const $k@47@04 $Perm)
(assert ($Perm.isReadVar $k@47@04 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@47@04 $Perm.No) (< $Perm.No $k@47@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3780
;  :arith-add-rows          40
;  :arith-assert-diseq      57
;  :arith-assert-lower      269
;  :arith-assert-upper      251
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               123
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1917
;  :mk-clause               485
;  :num-allocs              4208902
;  :num-checks              173
;  :propagations            281
;  :quant-instantiations    142
;  :rlimit-count            184447)
(assert (<= $Perm.No $k@47@04))
(assert (<= $k@47@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@47@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3786
;  :arith-add-rows          40
;  :arith-assert-diseq      57
;  :arith-assert-lower      269
;  :arith-assert-upper      252
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               124
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1920
;  :mk-clause               485
;  :num-allocs              4208902
;  :num-checks              174
;  :propagations            281
;  :quant-instantiations    142
;  :rlimit-count            184830)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3792
;  :arith-add-rows          40
;  :arith-assert-diseq      57
;  :arith-assert-lower      269
;  :arith-assert-upper      252
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               125
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1923
;  :mk-clause               485
;  :num-allocs              4208902
;  :num-checks              175
;  :propagations            281
;  :quant-instantiations    143
;  :rlimit-count            185248)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3797
;  :arith-add-rows          40
;  :arith-assert-diseq      57
;  :arith-assert-lower      269
;  :arith-assert-upper      252
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1924
;  :mk-clause               485
;  :num-allocs              4208902
;  :num-checks              176
;  :propagations            281
;  :quant-instantiations    143
;  :rlimit-count            185565)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3797
;  :arith-add-rows          40
;  :arith-assert-diseq      57
;  :arith-assert-lower      269
;  :arith-assert-upper      252
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1924
;  :mk-clause               485
;  :num-allocs              4208902
;  :num-checks              177
;  :propagations            281
;  :quant-instantiations    143
;  :rlimit-count            185578)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_process_state[0] == -1 || diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0] == -1
; [eval] diz.Controller_m.Main_process_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3803
;  :arith-add-rows          40
;  :arith-assert-diseq      57
;  :arith-assert-lower      269
;  :arith-assert-upper      252
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1926
;  :mk-clause               485
;  :num-allocs              4208902
;  :num-checks              178
;  :propagations            281
;  :quant-instantiations    143
;  :rlimit-count            185904)
; [eval] -1
(push) ; 7
; [then-branch: 41 | First:(Second:(Second:(Second:($t@43@04))))[0] == -1 | live]
; [else-branch: 41 | First:(Second:(Second:(Second:($t@43@04))))[0] != -1 | live]
(push) ; 8
; [then-branch: 41 | First:(Second:(Second:(Second:($t@43@04))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    0)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 41 | First:(Second:(Second:(Second:($t@43@04))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      0)
    (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3803
;  :arith-add-rows          40
;  :arith-assert-diseq      58
;  :arith-assert-lower      272
;  :arith-assert-upper      253
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              433
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1932
;  :mk-clause               489
;  :num-allocs              4208902
;  :num-checks              179
;  :propagations            283
;  :quant-instantiations    144
;  :rlimit-count            186136)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_process_state[1] == -1 || diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3809
;  :arith-add-rows          40
;  :arith-assert-diseq      58
;  :arith-assert-lower      272
;  :arith-assert-upper      253
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              437
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1936
;  :mk-clause               490
;  :num-allocs              4208902
;  :num-checks              180
;  :propagations            283
;  :quant-instantiations    144
;  :rlimit-count            186563)
; [eval] -1
(push) ; 7
; [then-branch: 42 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 | live]
; [else-branch: 42 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 | live]
(push) ; 8
; [then-branch: 42 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 42 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3809
;  :arith-add-rows          40
;  :arith-assert-diseq      59
;  :arith-assert-lower      275
;  :arith-assert-upper      254
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              437
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1942
;  :mk-clause               494
;  :num-allocs              4208902
;  :num-checks              181
;  :propagations            285
;  :quant-instantiations    145
;  :rlimit-count            186795)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_event_state[0] != -1
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3815
;  :arith-add-rows          40
;  :arith-assert-diseq      59
;  :arith-assert-lower      275
;  :arith-assert-upper      254
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              441
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1946
;  :mk-clause               495
;  :num-allocs              4208902
;  :num-checks              182
;  :propagations            285
;  :quant-instantiations    145
;  :rlimit-count            187232)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_event_state[0] != 0
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3821
;  :arith-add-rows          40
;  :arith-assert-diseq      59
;  :arith-assert-lower      275
;  :arith-assert-upper      254
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              441
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1949
;  :mk-clause               495
;  :num-allocs              4208902
;  :num-checks              183
;  :propagations            285
;  :quant-instantiations    145
;  :rlimit-count            187682)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_event_state[2] <= -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3827
;  :arith-add-rows          40
;  :arith-assert-diseq      59
;  :arith-assert-lower      275
;  :arith-assert-upper      254
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              441
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1952
;  :mk-clause               495
;  :num-allocs              4375608
;  :num-checks              184
;  :propagations            285
;  :quant-instantiations    145
;  :rlimit-count            188127)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Controller_m.Main_controller.Controller_init || (diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1)
; [eval] !diz.Controller_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3833
;  :arith-add-rows          40
;  :arith-assert-diseq      59
;  :arith-assert-lower      275
;  :arith-assert-upper      255
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               127
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              441
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1955
;  :mk-clause               495
;  :num-allocs              4375608
;  :num-checks              185
;  :propagations            285
;  :quant-instantiations    145
;  :rlimit-count            188606)
(push) ; 7
; [then-branch: 43 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
; [else-branch: 43 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
(push) ; 8
; [then-branch: 43 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 43 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; [eval] diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3836
;  :arith-add-rows          40
;  :arith-assert-diseq      59
;  :arith-assert-lower      275
;  :arith-assert-upper      255
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        1
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               127
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   232
;  :datatype-splits         537
;  :decisions               753
;  :del-clause              441
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1957
;  :mk-clause               495
;  :num-allocs              4375608
;  :num-checks              186
;  :propagations            285
;  :quant-instantiations    146
;  :rlimit-count            188931)
; [eval] -1
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4104
;  :arith-add-rows          41
;  :arith-assert-diseq      60
;  :arith-assert-lower      288
;  :arith-assert-upper      267
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         119
;  :arith-offset-eqs        3
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               129
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 807
;  :datatype-occurs-check   254
;  :datatype-splits         581
;  :decisions               818
;  :del-clause              457
;  :final-checks            91
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2029
;  :mk-clause               511
;  :num-allocs              4543772
;  :num-checks              187
;  :propagations            302
;  :quant-instantiations    148
;  :rlimit-count            190873
;  :time                    0.00)
(push) ; 10
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4447
;  :arith-add-rows          42
;  :arith-assert-diseq      61
;  :arith-assert-lower      306
;  :arith-assert-upper      284
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         133
;  :arith-offset-eqs        6
;  :arith-pivots            78
;  :binary-propagations     11
;  :conflicts               132
;  :datatype-accessor-ax    228
;  :datatype-constructor-ax 899
;  :datatype-occurs-check   276
;  :datatype-splits         627
;  :decisions               902
;  :del-clause              481
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2118
;  :mk-clause               535
;  :num-allocs              4543772
;  :num-checks              188
;  :propagations            325
;  :quant-instantiations    151
;  :rlimit-count            193174
;  :time                    0.00)
; [then-branch: 44 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 | live]
; [else-branch: 44 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 | live]
(push) ; 10
; [then-branch: 44 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4449
;  :arith-add-rows          42
;  :arith-assert-diseq      61
;  :arith-assert-lower      306
;  :arith-assert-upper      284
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         133
;  :arith-offset-eqs        6
;  :arith-pivots            78
;  :binary-propagations     11
;  :conflicts               132
;  :datatype-accessor-ax    228
;  :datatype-constructor-ax 899
;  :datatype-occurs-check   276
;  :datatype-splits         627
;  :decisions               902
;  :del-clause              481
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2118
;  :mk-clause               535
;  :num-allocs              4543772
;  :num-checks              189
;  :propagations            325
;  :quant-instantiations    151
;  :rlimit-count            193304)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 44 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4455
;  :arith-add-rows          42
;  :arith-assert-diseq      61
;  :arith-assert-lower      306
;  :arith-assert-upper      284
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         133
;  :arith-offset-eqs        6
;  :arith-pivots            78
;  :binary-propagations     11
;  :conflicts               132
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 899
;  :datatype-occurs-check   276
;  :datatype-splits         627
;  :decisions               902
;  :del-clause              481
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2121
;  :mk-clause               536
;  :num-allocs              4543772
;  :num-checks              190
;  :propagations            325
;  :quant-instantiations    151
;  :rlimit-count            193887)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4740
;  :arith-add-rows          43
;  :arith-assert-diseq      62
;  :arith-assert-lower      320
;  :arith-assert-upper      296
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        8
;  :arith-pivots            82
;  :binary-propagations     11
;  :conflicts               134
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 969
;  :datatype-occurs-check   298
;  :datatype-splits         671
;  :decisions               968
;  :del-clause              497
;  :final-checks            99
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2195
;  :mk-clause               552
;  :num-allocs              4543772
;  :num-checks              191
;  :propagations            343
;  :quant-instantiations    154
;  :rlimit-count            195900
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5024
;  :arith-add-rows          44
;  :arith-assert-diseq      63
;  :arith-assert-lower      333
;  :arith-assert-upper      309
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         154
;  :arith-offset-eqs        10
;  :arith-pivots            86
;  :binary-propagations     11
;  :conflicts               136
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 1039
;  :datatype-occurs-check   320
;  :datatype-splits         715
;  :decisions               1034
;  :del-clause              513
;  :final-checks            103
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2269
;  :mk-clause               568
;  :num-allocs              4543772
;  :num-checks              192
;  :propagations            361
;  :quant-instantiations    157
;  :rlimit-count            197917
;  :time                    0.00)
; [then-branch: 45 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] | live]
; [else-branch: 45 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]) | live]
(push) ; 8
; [then-branch: 45 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5025
;  :arith-add-rows          44
;  :arith-assert-diseq      63
;  :arith-assert-lower      334
;  :arith-assert-upper      309
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         155
;  :arith-offset-eqs        10
;  :arith-pivots            86
;  :binary-propagations     11
;  :conflicts               136
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 1039
;  :datatype-occurs-check   320
;  :datatype-splits         715
;  :decisions               1034
;  :del-clause              513
;  :final-checks            103
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2270
;  :mk-clause               568
;  :num-allocs              4543772
;  :num-checks              193
;  :propagations            361
;  :quant-instantiations    157
;  :rlimit-count            198065)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 45 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.18s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          44
;  :arith-assert-diseq      63
;  :arith-assert-lower      334
;  :arith-assert-upper      309
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         155
;  :arith-offset-eqs        10
;  :arith-pivots            86
;  :binary-propagations     11
;  :conflicts               136
;  :datatype-accessor-ax    250
;  :datatype-constructor-ax 1039
;  :datatype-occurs-check   320
;  :datatype-splits         715
;  :decisions               1034
;  :del-clause              513
;  :final-checks            103
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2273
;  :mk-clause               569
;  :num-allocs              4543772
;  :num-checks              194
;  :propagations            361
;  :quant-instantiations    157
;  :rlimit-count            198648)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5418
;  :arith-add-rows          45
;  :arith-assert-diseq      64
;  :arith-assert-lower      352
;  :arith-assert-upper      326
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         170
;  :arith-offset-eqs        13
;  :arith-pivots            90
;  :binary-propagations     11
;  :conflicts               141
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1138
;  :datatype-occurs-check   346
;  :datatype-splits         766
;  :decisions               1123
;  :del-clause              539
;  :final-checks            108
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2377
;  :mk-clause               595
;  :num-allocs              4543772
;  :num-checks              195
;  :propagations            385
;  :quant-instantiations    160
;  :rlimit-count            201119
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5703
;  :arith-add-rows          46
;  :arith-assert-diseq      65
;  :arith-assert-lower      365
;  :arith-assert-upper      339
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         180
;  :arith-offset-eqs        15
;  :arith-pivots            94
;  :binary-propagations     11
;  :conflicts               143
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1208
;  :datatype-occurs-check   368
;  :datatype-splits         810
;  :decisions               1189
;  :del-clause              555
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2450
;  :mk-clause               611
;  :num-allocs              4543772
;  :num-checks              196
;  :propagations            403
;  :quant-instantiations    163
;  :rlimit-count            203136
;  :time                    0.00)
; [then-branch: 46 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] | live]
; [else-branch: 46 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]) | live]
(push) ; 8
; [then-branch: 46 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2)))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          46
;  :arith-assert-diseq      65
;  :arith-assert-lower      367
;  :arith-assert-upper      341
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        15
;  :arith-pivots            94
;  :binary-propagations     11
;  :conflicts               144
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1208
;  :datatype-occurs-check   368
;  :datatype-splits         810
;  :decisions               1189
;  :del-clause              555
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2454
;  :mk-clause               614
;  :num-allocs              4543772
;  :num-checks              197
;  :propagations            407
;  :quant-instantiations    164
;  :rlimit-count            203359)
(push) ; 9
(assert (not (< $Perm.No $k@45@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          46
;  :arith-assert-diseq      65
;  :arith-assert-lower      367
;  :arith-assert-upper      341
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        15
;  :arith-pivots            94
;  :binary-propagations     11
;  :conflicts               145
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1208
;  :datatype-occurs-check   368
;  :datatype-splits         810
;  :decisions               1189
;  :del-clause              555
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2454
;  :mk-clause               614
;  :num-allocs              4543772
;  :num-checks              198
;  :propagations            407
;  :quant-instantiations    164
;  :rlimit-count            203407)
(pop) ; 8
(push) ; 8
; [else-branch: 46 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1
(push) ; 7
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5711
;  :arith-add-rows          46
;  :arith-assert-diseq      65
;  :arith-assert-lower      367
;  :arith-assert-upper      341
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        15
;  :arith-pivots            94
;  :binary-propagations     11
;  :conflicts               146
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1208
;  :datatype-occurs-check   368
;  :datatype-splits         810
;  :decisions               1189
;  :del-clause              558
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2457
;  :mk-clause               615
;  :num-allocs              4543772
;  :num-checks              199
;  :propagations            407
;  :quant-instantiations    164
;  :rlimit-count            204089)
(push) ; 7
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 47 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5714
;  :arith-add-rows          46
;  :arith-assert-diseq      65
;  :arith-assert-lower      367
;  :arith-assert-upper      341
;  :arith-bound-prop        8
;  :arith-conflicts         14
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        15
;  :arith-pivots            94
;  :binary-propagations     11
;  :conflicts               146
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1208
;  :datatype-occurs-check   368
;  :datatype-splits         810
;  :decisions               1189
;  :del-clause              558
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2458
;  :mk-clause               615
;  :num-allocs              4543772
;  :num-checks              200
;  :propagations            407
;  :quant-instantiations    165
;  :rlimit-count            204344)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 47 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6094
;  :arith-add-rows          54
;  :arith-assert-diseq      66
;  :arith-assert-lower      385
;  :arith-assert-upper      360
;  :arith-bound-prop        9
;  :arith-conflicts         14
;  :arith-eq-adapter        263
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        19
;  :arith-pivots            100
;  :binary-propagations     11
;  :conflicts               151
;  :datatype-accessor-ax    291
;  :datatype-constructor-ax 1306
;  :datatype-occurs-check   394
;  :datatype-splits         860
;  :decisions               1277
;  :del-clause              586
;  :final-checks            117
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2567
;  :mk-clause               643
;  :num-allocs              4543772
;  :num-checks              201
;  :propagations            431
;  :quant-instantiations    169
;  :rlimit-count            207108
;  :time                    0.00)
(push) ; 8
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6385
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      399
;  :arith-assert-upper      374
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               153
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              605
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2645
;  :mk-clause               662
;  :num-allocs              4543772
;  :num-checks              202
;  :propagations            450
;  :quant-instantiations    172
;  :rlimit-count            209382
;  :time                    0.00)
; [then-branch: 48 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 48 | !(First:(Second:(Second:(Second:($t@43@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 48 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6391
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      400
;  :arith-assert-upper      376
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               154
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              605
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2650
;  :mk-clause               665
;  :num-allocs              4543772
;  :num-checks              203
;  :propagations            454
;  :quant-instantiations    174
;  :rlimit-count            209777)
(push) ; 9
(assert (not (< $Perm.No $k@45@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6391
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      400
;  :arith-assert-upper      376
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               155
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              605
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2650
;  :mk-clause               665
;  :num-allocs              4543772
;  :num-checks              204
;  :propagations            454
;  :quant-instantiations    174
;  :rlimit-count            209825)
(pop) ; 8
(push) ; 8
; [else-branch: 48 | !(First:(Second:(Second:(Second:($t@43@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller == diz
(push) ; 7
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6397
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      400
;  :arith-assert-upper      376
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    302
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              608
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2652
;  :mk-clause               666
;  :num-allocs              4543772
;  :num-checks              205
;  :propagations            454
;  :quant-instantiations    174
;  :rlimit-count            210551)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  diz@9@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6405
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      400
;  :arith-assert-upper      376
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              608
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2654
;  :mk-clause               666
;  :num-allocs              4543772
;  :num-checks              206
;  :propagations            454
;  :quant-instantiations    174
;  :rlimit-count            210995)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] diz.Controller_m.Main_process_state[1] != -1 || diz.Controller_m.Main_event_state[2] != -2
; [eval] diz.Controller_m.Main_process_state[1] != -1
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6424
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      400
;  :arith-assert-upper      376
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              608
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2658
;  :mk-clause               666
;  :num-allocs              4543772
;  :num-checks              207
;  :propagations            454
;  :quant-instantiations    176
;  :rlimit-count            211520)
; [eval] -1
(push) ; 8
; [then-branch: 49 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 | live]
; [else-branch: 49 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 | live]
(push) ; 9
; [then-branch: 49 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 49 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1)))
; [eval] diz.Controller_m.Main_event_state[2] != -2
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6428
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      402
;  :arith-assert-upper      378
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            107
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              608
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2663
;  :mk-clause               669
;  :num-allocs              4543772
;  :num-checks              208
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            211734)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !(diz.Controller_m.Main_process_state[1] != -1 || diz.Controller_m.Main_event_state[2] != -2)
; [eval] diz.Controller_m.Main_process_state[1] != -1 || diz.Controller_m.Main_event_state[2] != -2
; [eval] diz.Controller_m.Main_process_state[1] != -1
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6428
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      402
;  :arith-assert-upper      378
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            107
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              611
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2663
;  :mk-clause               669
;  :num-allocs              4543772
;  :num-checks              209
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            211754)
; [eval] -1
(push) ; 8
; [then-branch: 50 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 | live]
(push) ; 9
; [then-branch: 50 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 50 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1)))
; [eval] diz.Controller_m.Main_event_state[2] != -2
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      404
;  :arith-assert-upper      380
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        277
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            107
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              611
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2668
;  :mk-clause               672
;  :num-allocs              4543772
;  :num-checks              210
;  :propagations            464
;  :quant-instantiations    180
;  :rlimit-count            211948)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      404
;  :arith-assert-upper      380
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        277
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              626
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2668
;  :mk-clause               672
;  :num-allocs              4543772
;  :num-checks              211
;  :propagations            464
;  :quant-instantiations    180
;  :rlimit-count            211969)
; [eval] diz.Controller_m != null
; [eval] |diz.Controller_m.Main_process_state| == 2
; [eval] |diz.Controller_m.Main_process_state|
; [eval] |diz.Controller_m.Main_event_state| == 3
; [eval] |diz.Controller_m.Main_event_state|
; [eval] (forall i__29: Int :: { diz.Controller_m.Main_process_state[i__29] } 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|)
(declare-const i__29@48@04 Int)
(push) ; 7
; [eval] 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state|
; [eval] 0 <= i__29
(push) ; 8
; [then-branch: 51 | 0 <= i__29@48@04 | live]
; [else-branch: 51 | !(0 <= i__29@48@04) | live]
(push) ; 9
; [then-branch: 51 | 0 <= i__29@48@04]
(assert (<= 0 i__29@48@04))
; [eval] i__29 < |diz.Controller_m.Main_process_state|
; [eval] |diz.Controller_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 51 | !(0 <= i__29@48@04)]
(assert (not (<= 0 i__29@48@04)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 52 | i__29@48@04 < |First:(Second:(Second:(Second:($t@34@04))))| && 0 <= i__29@48@04 | live]
; [else-branch: 52 | !(i__29@48@04 < |First:(Second:(Second:(Second:($t@34@04))))| && 0 <= i__29@48@04) | live]
(push) ; 9
; [then-branch: 52 | i__29@48@04 < |First:(Second:(Second:(Second:($t@34@04))))| && 0 <= i__29@48@04]
(assert (and
  (<
    i__29@48@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
  (<= 0 i__29@48@04)))
; [eval] diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__29] == -1
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 10
(assert (not (>= i__29@48@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      67
;  :arith-assert-lower      405
;  :arith-assert-upper      381
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        277
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              626
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2670
;  :mk-clause               672
;  :num-allocs              4543772
;  :num-checks              212
;  :propagations            464
;  :quant-instantiations    180
;  :rlimit-count            212105)
; [eval] -1
(push) ; 10
; [then-branch: 53 | First:(Second:(Second:(Second:($t@34@04))))[i__29@48@04] == -1 | live]
; [else-branch: 53 | First:(Second:(Second:(Second:($t@34@04))))[i__29@48@04] != -1 | live]
(push) ; 11
; [then-branch: 53 | First:(Second:(Second:(Second:($t@34@04))))[i__29@48@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    i__29@48@04)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 53 | First:(Second:(Second:(Second:($t@34@04))))[i__29@48@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      i__29@48@04)
    (- 0 1))))
; [eval] 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= diz.Controller_m.Main_process_state[i__29]
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 12
(assert (not (>= i__29@48@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      68
;  :arith-assert-lower      408
;  :arith-assert-upper      382
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              626
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2676
;  :mk-clause               676
;  :num-allocs              4543772
;  :num-checks              213
;  :propagations            466
;  :quant-instantiations    181
;  :rlimit-count            212337)
(push) ; 12
; [then-branch: 54 | 0 <= First:(Second:(Second:(Second:($t@34@04))))[i__29@48@04] | live]
; [else-branch: 54 | !(0 <= First:(Second:(Second:(Second:($t@34@04))))[i__29@48@04]) | live]
(push) ; 13
; [then-branch: 54 | 0 <= First:(Second:(Second:(Second:($t@34@04))))[i__29@48@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    i__29@48@04)))
; [eval] diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 14
(assert (not (>= i__29@48@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      68
;  :arith-assert-lower      408
;  :arith-assert-upper      382
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              626
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2676
;  :mk-clause               676
;  :num-allocs              4543772
;  :num-checks              214
;  :propagations            466
;  :quant-instantiations    181
;  :rlimit-count            212451)
; [eval] |diz.Controller_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 54 | !(0 <= First:(Second:(Second:(Second:($t@34@04))))[i__29@48@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      i__29@48@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 52 | !(i__29@48@04 < |First:(Second:(Second:(Second:($t@34@04))))| && 0 <= i__29@48@04)]
(assert (not
  (and
    (<
      i__29@48@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    (<= 0 i__29@48@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i__29@48@04 Int)) (!
  (implies
    (and
      (<
        i__29@48@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      (<= 0 i__29@48@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
          i__29@48@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
            i__29@48@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
            i__29@48@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    i__29@48@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      69
;  :arith-assert-lower      409
;  :arith-assert-upper      383
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               157
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2684
;  :mk-clause               688
;  :num-allocs              4543772
;  :num-checks              215
;  :propagations            468
;  :quant-instantiations    182
;  :rlimit-count            212897)
(assert (forall ((i__29@48@04 Int)) (!
  (implies
    (and
      (<
        i__29@48@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      (<= 0 i__29@48@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
          i__29@48@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
            i__29@48@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
            i__29@48@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    i__29@48@04))
  :qid |prog.l<no position>|)))
(declare-const $k@49@04 $Perm)
(assert ($Perm.isReadVar $k@49@04 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@49@04 $Perm.No) (< $Perm.No $k@49@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      70
;  :arith-assert-lower      411
;  :arith-assert-upper      384
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        280
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               158
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2689
;  :mk-clause               690
;  :num-allocs              4543772
;  :num-checks              216
;  :propagations            469
;  :quant-instantiations    182
;  :rlimit-count            213458)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@36@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      70
;  :arith-assert-lower      411
;  :arith-assert-upper      384
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        280
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               158
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2689
;  :mk-clause               690
;  :num-allocs              4543772
;  :num-checks              217
;  :propagations            469
;  :quant-instantiations    182
;  :rlimit-count            213469)
(assert (< $k@49@04 $k@36@04))
(assert (<= $Perm.No (- $k@36@04 $k@49@04)))
(assert (<= (- $k@36@04 $k@49@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@36@04 $k@49@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
; [eval] 0 < diz.Controller_m.Main_MIN_DIST
(push) ; 7
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      70
;  :arith-assert-lower      413
;  :arith-assert-upper      385
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        280
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               159
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2692
;  :mk-clause               690
;  :num-allocs              4543772
;  :num-checks              218
;  :propagations            469
;  :quant-instantiations    182
;  :rlimit-count            213677)
(declare-const $k@50@04 $Perm)
(assert ($Perm.isReadVar $k@50@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@50@04 $Perm.No) (< $Perm.No $k@50@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      71
;  :arith-assert-lower      415
;  :arith-assert-upper      386
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               160
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2696
;  :mk-clause               692
;  :num-allocs              4543772
;  :num-checks              219
;  :propagations            470
;  :quant-instantiations    182
;  :rlimit-count            213876)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@37@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      71
;  :arith-assert-lower      415
;  :arith-assert-upper      386
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               160
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2696
;  :mk-clause               692
;  :num-allocs              4543772
;  :num-checks              220
;  :propagations            470
;  :quant-instantiations    182
;  :rlimit-count            213887)
(assert (< $k@50@04 $k@37@04))
(assert (<= $Perm.No (- $k@37@04 $k@50@04)))
(assert (<= (- $k@37@04 $k@50@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@37@04 $k@50@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
; [eval] diz.Controller_m.Main_sensor != null
(push) ; 7
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      71
;  :arith-assert-lower      417
;  :arith-assert-upper      387
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               161
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2699
;  :mk-clause               692
;  :num-allocs              4543772
;  :num-checks              221
;  :propagations            470
;  :quant-instantiations    182
;  :rlimit-count            214095)
(push) ; 7
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      71
;  :arith-assert-lower      417
;  :arith-assert-upper      387
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               162
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2699
;  :mk-clause               692
;  :num-allocs              4543772
;  :num-checks              222
;  :propagations            470
;  :quant-instantiations    182
;  :rlimit-count            214143)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      71
;  :arith-assert-lower      417
;  :arith-assert-upper      387
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               162
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2699
;  :mk-clause               692
;  :num-allocs              4543772
;  :num-checks              223
;  :propagations            470
;  :quant-instantiations    182
;  :rlimit-count            214156)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      71
;  :arith-assert-lower      417
;  :arith-assert-upper      387
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               163
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2699
;  :mk-clause               692
;  :num-allocs              4543772
;  :num-checks              224
;  :propagations            470
;  :quant-instantiations    182
;  :rlimit-count            214204)
(declare-const $k@51@04 $Perm)
(assert ($Perm.isReadVar $k@51@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@51@04 $Perm.No) (< $Perm.No $k@51@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      72
;  :arith-assert-lower      419
;  :arith-assert-upper      388
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               164
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2703
;  :mk-clause               694
;  :num-allocs              4543772
;  :num-checks              225
;  :propagations            471
;  :quant-instantiations    182
;  :rlimit-count            214403)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@38@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      72
;  :arith-assert-lower      419
;  :arith-assert-upper      388
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               164
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2703
;  :mk-clause               694
;  :num-allocs              4543772
;  :num-checks              226
;  :propagations            471
;  :quant-instantiations    182
;  :rlimit-count            214414)
(assert (< $k@51@04 $k@38@04))
(assert (<= $Perm.No (- $k@38@04 $k@51@04)))
(assert (<= (- $k@38@04 $k@51@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@38@04 $k@51@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)) $Ref.null))))
; [eval] diz.Controller_m.Main_controller != null
(push) ; 7
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      72
;  :arith-assert-lower      421
;  :arith-assert-upper      389
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               165
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2706
;  :mk-clause               694
;  :num-allocs              4543772
;  :num-checks              227
;  :propagations            471
;  :quant-instantiations    182
;  :rlimit-count            214622)
(push) ; 7
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      72
;  :arith-assert-lower      421
;  :arith-assert-upper      389
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               166
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2706
;  :mk-clause               694
;  :num-allocs              4543772
;  :num-checks              228
;  :propagations            471
;  :quant-instantiations    182
;  :rlimit-count            214670)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      72
;  :arith-assert-lower      421
;  :arith-assert-upper      389
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               166
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2706
;  :mk-clause               694
;  :num-allocs              4543772
;  :num-checks              229
;  :propagations            471
;  :quant-instantiations    182
;  :rlimit-count            214683)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6432
;  :arith-add-rows          62
;  :arith-assert-diseq      72
;  :arith-assert-lower      421
;  :arith-assert-upper      389
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        22
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1376
;  :datatype-occurs-check   416
;  :datatype-splits         904
;  :decisions               1343
;  :del-clause              642
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2706
;  :mk-clause               694
;  :num-allocs              4543772
;  :num-checks              230
;  :propagations            471
;  :quant-instantiations    182
;  :rlimit-count            214731)
(push) ; 7
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6564
;  :arith-add-rows          62
;  :arith-assert-diseq      73
;  :arith-assert-lower      430
;  :arith-assert-upper      397
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              652
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2746
;  :mk-clause               704
;  :num-allocs              4543772
;  :num-checks              231
;  :propagations            485
;  :quant-instantiations    185
;  :rlimit-count            215915
;  :time                    0.00)
; [eval] diz.Controller_m.Main_process_state[0] == -1 || diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0] == -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6564
;  :arith-add-rows          62
;  :arith-assert-diseq      73
;  :arith-assert-lower      430
;  :arith-assert-upper      397
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              652
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2746
;  :mk-clause               704
;  :num-allocs              4543772
;  :num-checks              232
;  :propagations            485
;  :quant-instantiations    185
;  :rlimit-count            215930)
; [eval] -1
(push) ; 7
; [then-branch: 55 | First:(Second:(Second:(Second:($t@34@04))))[0] == -1 | live]
; [else-branch: 55 | First:(Second:(Second:(Second:($t@34@04))))[0] != -1 | live]
(push) ; 8
; [then-branch: 55 | First:(Second:(Second:(Second:($t@34@04))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    0)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 55 | First:(Second:(Second:(Second:($t@34@04))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      0)
    (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6565
;  :arith-add-rows          62
;  :arith-assert-diseq      73
;  :arith-assert-lower      431
;  :arith-assert-upper      399
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              652
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2750
;  :mk-clause               707
;  :num-allocs              4543772
;  :num-checks              233
;  :propagations            488
;  :quant-instantiations    187
;  :rlimit-count            216161)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_process_state[1] == -1 || diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6565
;  :arith-add-rows          62
;  :arith-assert-diseq      73
;  :arith-assert-lower      431
;  :arith-assert-upper      399
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              655
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2750
;  :mk-clause               707
;  :num-allocs              4543772
;  :num-checks              234
;  :propagations            488
;  :quant-instantiations    187
;  :rlimit-count            216176)
; [eval] -1
(push) ; 7
; [then-branch: 56 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1 | live]
; [else-branch: 56 | First:(Second:(Second:(Second:($t@34@04))))[1] != -1 | live]
(push) ; 8
; [then-branch: 56 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    1)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 56 | First:(Second:(Second:(Second:($t@34@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6567
;  :arith-add-rows          62
;  :arith-assert-diseq      74
;  :arith-assert-lower      435
;  :arith-assert-upper      401
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              655
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2757
;  :mk-clause               711
;  :num-allocs              4543772
;  :num-checks              235
;  :propagations            491
;  :quant-instantiations    189
;  :rlimit-count            216371)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_event_state[0] != -1
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6567
;  :arith-add-rows          62
;  :arith-assert-diseq      74
;  :arith-assert-lower      435
;  :arith-assert-upper      401
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              659
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2757
;  :mk-clause               711
;  :num-allocs              4543772
;  :num-checks              236
;  :propagations            491
;  :quant-instantiations    189
;  :rlimit-count            216386)
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[0] != 0
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6567
;  :arith-add-rows          62
;  :arith-assert-diseq      74
;  :arith-assert-lower      435
;  :arith-assert-upper      401
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              659
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2757
;  :mk-clause               711
;  :num-allocs              4543772
;  :num-checks              237
;  :propagations            491
;  :quant-instantiations    189
;  :rlimit-count            216401)
; [eval] diz.Controller_m.Main_event_state[2] <= -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6567
;  :arith-add-rows          62
;  :arith-assert-diseq      74
;  :arith-assert-lower      435
;  :arith-assert-upper      401
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              659
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2757
;  :mk-clause               711
;  :num-allocs              4543772
;  :num-checks              238
;  :propagations            491
;  :quant-instantiations    189
;  :rlimit-count            216416)
; [eval] -1
; [eval] !diz.Controller_m.Main_controller.Controller_init || (diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1)
; [eval] !diz.Controller_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6567
;  :arith-add-rows          62
;  :arith-assert-diseq      74
;  :arith-assert-lower      435
;  :arith-assert-upper      401
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               168
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              659
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2757
;  :mk-clause               711
;  :num-allocs              4543772
;  :num-checks              239
;  :propagations            491
;  :quant-instantiations    189
;  :rlimit-count            216464)
(push) ; 7
; [then-branch: 57 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))) | live]
; [else-branch: 57 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))) | live]
(push) ; 8
; [then-branch: 57 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 57 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))]
; [eval] diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6567
;  :arith-add-rows          62
;  :arith-assert-diseq      74
;  :arith-assert-lower      435
;  :arith-assert-upper      401
;  :arith-bound-prop        10
;  :arith-conflicts         14
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        23
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               168
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1408
;  :datatype-occurs-check   431
;  :datatype-splits         933
;  :decisions               1373
;  :del-clause              659
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          2
;  :mk-bool-var             2757
;  :mk-clause               711
;  :num-allocs              4543772
;  :num-checks              240
;  :propagations            491
;  :quant-instantiations    189
;  :rlimit-count            216497)
; [eval] -1
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6732
;  :arith-add-rows          68
;  :arith-assert-diseq      76
;  :arith-assert-lower      444
;  :arith-assert-upper      408
;  :arith-bound-prop        12
;  :arith-conflicts         14
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         220
;  :arith-offset-eqs        23
;  :arith-pivots            115
;  :binary-propagations     11
;  :conflicts               171
;  :datatype-accessor-ax    316
;  :datatype-constructor-ax 1450
;  :datatype-occurs-check   446
;  :datatype-splits         963
;  :decisions               1413
;  :del-clause              679
;  :final-checks            128
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          3
;  :mk-bool-var             2813
;  :mk-clause               731
;  :num-allocs              4543772
;  :num-checks              241
;  :propagations            506
;  :quant-instantiations    193
;  :rlimit-count            218027
;  :time                    0.00)
(push) ; 10
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6864
;  :arith-add-rows          69
;  :arith-assert-diseq      77
;  :arith-assert-lower      453
;  :arith-assert-upper      416
;  :arith-bound-prop        12
;  :arith-conflicts         14
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         225
;  :arith-offset-eqs        24
;  :arith-pivots            118
;  :binary-propagations     11
;  :conflicts               171
;  :datatype-accessor-ax    322
;  :datatype-constructor-ax 1482
;  :datatype-occurs-check   461
;  :datatype-splits         992
;  :decisions               1443
;  :del-clause              689
;  :final-checks            131
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          3
;  :mk-bool-var             2853
;  :mk-clause               741
;  :num-allocs              4543772
;  :num-checks              242
;  :propagations            519
;  :quant-instantiations    196
;  :rlimit-count            219324
;  :time                    0.00)
; [then-branch: 58 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@34@04))))[1] != -1 | live]
(push) ; 10
; [then-branch: 58 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
    1)
  (- 0 1)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6868
;  :arith-add-rows          70
;  :arith-assert-diseq      77
;  :arith-assert-lower      455
;  :arith-assert-upper      418
;  :arith-bound-prop        12
;  :arith-conflicts         14
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         225
;  :arith-offset-eqs        24
;  :arith-pivots            119
;  :binary-propagations     11
;  :conflicts               171
;  :datatype-accessor-ax    322
;  :datatype-constructor-ax 1482
;  :datatype-occurs-check   461
;  :datatype-splits         992
;  :decisions               1443
;  :del-clause              689
;  :final-checks            131
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          3
;  :mk-bool-var             2858
;  :mk-clause               744
;  :num-allocs              4543772
;  :num-checks              243
;  :propagations            524
;  :quant-instantiations    199
;  :rlimit-count            219558)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 58 | First:(Second:(Second:(Second:($t@34@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6868
;  :arith-add-rows          70
;  :arith-assert-diseq      77
;  :arith-assert-lower      455
;  :arith-assert-upper      418
;  :arith-bound-prop        12
;  :arith-conflicts         14
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         225
;  :arith-offset-eqs        24
;  :arith-pivots            119
;  :binary-propagations     11
;  :conflicts               171
;  :datatype-accessor-ax    322
;  :datatype-constructor-ax 1482
;  :datatype-occurs-check   461
;  :datatype-splits         992
;  :decisions               1443
;  :del-clause              692
;  :final-checks            131
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          3
;  :mk-bool-var             2858
;  :mk-clause               744
;  :num-allocs              4543772
;  :num-checks              244
;  :propagations            524
;  :quant-instantiations    199
;  :rlimit-count            219601)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7367
;  :arith-add-rows          90
;  :arith-assert-diseq      84
;  :arith-assert-lower      478
;  :arith-assert-upper      435
;  :arith-bound-prop        17
;  :arith-conflicts         15
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        33
;  :arith-pivots            124
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1613
;  :datatype-occurs-check   503
;  :datatype-splits         1089
;  :decisions               1566
;  :del-clause              748
;  :final-checks            141
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          6
;  :mk-bool-var             3023
;  :mk-clause               800
;  :num-allocs              4543772
;  :num-checks              245
;  :propagations            562
;  :quant-instantiations    205
;  :rlimit-count            222766
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7499
;  :arith-add-rows          90
;  :arith-assert-diseq      85
;  :arith-assert-lower      487
;  :arith-assert-upper      443
;  :arith-bound-prop        17
;  :arith-conflicts         15
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         244
;  :arith-offset-eqs        34
;  :arith-pivots            126
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1645
;  :datatype-occurs-check   518
;  :datatype-splits         1118
;  :decisions               1596
;  :del-clause              758
;  :final-checks            144
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          6
;  :mk-bool-var             3063
;  :mk-clause               810
;  :num-allocs              4543772
;  :num-checks              246
;  :propagations            575
;  :quant-instantiations    208
;  :rlimit-count            224072)
; [then-branch: 59 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2] | live]
; [else-branch: 59 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2]) | live]
(push) ; 8
; [then-branch: 59 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7502
;  :arith-add-rows          91
;  :arith-assert-diseq      85
;  :arith-assert-lower      490
;  :arith-assert-upper      445
;  :arith-bound-prop        17
;  :arith-conflicts         15
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         245
;  :arith-offset-eqs        34
;  :arith-pivots            127
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1645
;  :datatype-occurs-check   518
;  :datatype-splits         1118
;  :decisions               1596
;  :del-clause              758
;  :final-checks            144
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          6
;  :mk-bool-var             3068
;  :mk-clause               813
;  :num-allocs              4543772
;  :num-checks              247
;  :propagations            580
;  :quant-instantiations    211
;  :rlimit-count            224323)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 59 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7502
;  :arith-add-rows          91
;  :arith-assert-diseq      85
;  :arith-assert-lower      490
;  :arith-assert-upper      445
;  :arith-bound-prop        17
;  :arith-conflicts         15
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         245
;  :arith-offset-eqs        34
;  :arith-pivots            127
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1645
;  :datatype-occurs-check   518
;  :datatype-splits         1118
;  :decisions               1596
;  :del-clause              761
;  :final-checks            144
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          6
;  :mk-bool-var             3068
;  :mk-clause               813
;  :num-allocs              4543772
;  :num-checks              248
;  :propagations            580
;  :quant-instantiations    211
;  :rlimit-count            224370)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8001
;  :arith-add-rows          111
;  :arith-assert-diseq      92
;  :arith-assert-lower      513
;  :arith-assert-upper      462
;  :arith-bound-prop        22
;  :arith-conflicts         16
;  :arith-eq-adapter        361
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        43
;  :arith-pivots            132
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    376
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   560
;  :datatype-splits         1215
;  :decisions               1719
;  :del-clause              817
;  :final-checks            154
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          9
;  :mk-bool-var             3233
;  :mk-clause               869
;  :num-allocs              4543772
;  :num-checks              249
;  :propagations            618
;  :quant-instantiations    217
;  :rlimit-count            227535
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8133
;  :arith-add-rows          111
;  :arith-assert-diseq      93
;  :arith-assert-lower      522
;  :arith-assert-upper      470
;  :arith-bound-prop        22
;  :arith-conflicts         16
;  :arith-eq-adapter        367
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        44
;  :arith-pivots            134
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1808
;  :datatype-occurs-check   575
;  :datatype-splits         1244
;  :decisions               1749
;  :del-clause              827
;  :final-checks            157
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          9
;  :mk-bool-var             3273
;  :mk-clause               879
;  :num-allocs              4543772
;  :num-checks              250
;  :propagations            631
;  :quant-instantiations    220
;  :rlimit-count            228841
;  :time                    0.00)
; [then-branch: 60 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2] | live]
; [else-branch: 60 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2]) | live]
(push) ; 8
; [then-branch: 60 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
    2)))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8136
;  :arith-add-rows          112
;  :arith-assert-diseq      93
;  :arith-assert-lower      525
;  :arith-assert-upper      472
;  :arith-bound-prop        22
;  :arith-conflicts         16
;  :arith-eq-adapter        368
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        44
;  :arith-pivots            135
;  :binary-propagations     11
;  :conflicts               192
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1808
;  :datatype-occurs-check   575
;  :datatype-splits         1244
;  :decisions               1749
;  :del-clause              827
;  :final-checks            157
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          9
;  :mk-bool-var             3278
;  :mk-clause               882
;  :num-allocs              4543772
;  :num-checks              251
;  :propagations            636
;  :quant-instantiations    223
;  :rlimit-count            229125)
(push) ; 9
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8136
;  :arith-add-rows          112
;  :arith-assert-diseq      93
;  :arith-assert-lower      525
;  :arith-assert-upper      472
;  :arith-bound-prop        22
;  :arith-conflicts         16
;  :arith-eq-adapter        368
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        44
;  :arith-pivots            135
;  :binary-propagations     11
;  :conflicts               193
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1808
;  :datatype-occurs-check   575
;  :datatype-splits         1244
;  :decisions               1749
;  :del-clause              827
;  :final-checks            157
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          9
;  :mk-bool-var             3278
;  :mk-clause               882
;  :num-allocs              4543772
;  :num-checks              252
;  :propagations            636
;  :quant-instantiations    223
;  :rlimit-count            229173)
(pop) ; 8
(push) ; 8
; [else-branch: 60 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1
(push) ; 7
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8136
;  :arith-add-rows          112
;  :arith-assert-diseq      93
;  :arith-assert-lower      525
;  :arith-assert-upper      472
;  :arith-bound-prop        22
;  :arith-conflicts         16
;  :arith-eq-adapter        368
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        44
;  :arith-pivots            135
;  :binary-propagations     11
;  :conflicts               194
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1808
;  :datatype-occurs-check   575
;  :datatype-splits         1244
;  :decisions               1749
;  :del-clause              830
;  :final-checks            157
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          9
;  :mk-bool-var             3278
;  :mk-clause               882
;  :num-allocs              4543772
;  :num-checks              253
;  :propagations            636
;  :quant-instantiations    223
;  :rlimit-count            229253)
(push) ; 7
; [then-branch: 61 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))) | live]
; [else-branch: 61 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 61 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))]
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8136
;  :arith-add-rows          112
;  :arith-assert-diseq      93
;  :arith-assert-lower      525
;  :arith-assert-upper      472
;  :arith-bound-prop        22
;  :arith-conflicts         16
;  :arith-eq-adapter        368
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        44
;  :arith-pivots            135
;  :binary-propagations     11
;  :conflicts               194
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1808
;  :datatype-occurs-check   575
;  :datatype-splits         1244
;  :decisions               1749
;  :del-clause              830
;  :final-checks            157
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          9
;  :mk-bool-var             3278
;  :mk-clause               882
;  :num-allocs              4543772
;  :num-checks              254
;  :propagations            636
;  :quant-instantiations    223
;  :rlimit-count            229278)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 61 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8301
;  :arith-add-rows          117
;  :arith-assert-diseq      95
;  :arith-assert-lower      534
;  :arith-assert-upper      479
;  :arith-bound-prop        24
;  :arith-conflicts         16
;  :arith-eq-adapter        378
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        44
;  :arith-pivots            139
;  :binary-propagations     11
;  :conflicts               197
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1850
;  :datatype-occurs-check   590
;  :datatype-splits         1274
;  :decisions               1789
;  :del-clause              850
;  :final-checks            161
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          10
;  :mk-bool-var             3334
;  :mk-clause               902
;  :num-allocs              4543772
;  :num-checks              255
;  :propagations            651
;  :quant-instantiations    227
;  :rlimit-count            230794
;  :time                    0.00)
(push) ; 8
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8433
;  :arith-add-rows          118
;  :arith-assert-diseq      96
;  :arith-assert-lower      543
;  :arith-assert-upper      487
;  :arith-bound-prop        24
;  :arith-conflicts         16
;  :arith-eq-adapter        384
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        45
;  :arith-pivots            142
;  :binary-propagations     11
;  :conflicts               197
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 1882
;  :datatype-occurs-check   605
;  :datatype-splits         1303
;  :decisions               1819
;  :del-clause              860
;  :final-checks            164
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          10
;  :mk-bool-var             3374
;  :mk-clause               912
;  :num-allocs              4543772
;  :num-checks              256
;  :propagations            664
;  :quant-instantiations    230
;  :rlimit-count            232094
;  :time                    0.00)
; [then-branch: 62 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))) | live]
; [else-branch: 62 | !(First:(Second:(Second:(Second:($t@34@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 62 | First:(Second:(Second:(Second:($t@34@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8437
;  :arith-add-rows          119
;  :arith-assert-diseq      96
;  :arith-assert-lower      545
;  :arith-assert-upper      489
;  :arith-bound-prop        24
;  :arith-conflicts         16
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        45
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               198
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 1882
;  :datatype-occurs-check   605
;  :datatype-splits         1303
;  :decisions               1819
;  :del-clause              860
;  :final-checks            164
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          10
;  :mk-bool-var             3379
;  :mk-clause               915
;  :num-allocs              4543772
;  :num-checks              257
;  :propagations            669
;  :quant-instantiations    233
;  :rlimit-count            232363)
(push) ; 9
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8437
;  :arith-add-rows          119
;  :arith-assert-diseq      96
;  :arith-assert-lower      545
;  :arith-assert-upper      489
;  :arith-bound-prop        24
;  :arith-conflicts         16
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        45
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               199
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 1882
;  :datatype-occurs-check   605
;  :datatype-splits         1303
;  :decisions               1819
;  :del-clause              860
;  :final-checks            164
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          10
;  :mk-bool-var             3379
;  :mk-clause               915
;  :num-allocs              4543772
;  :num-checks              258
;  :propagations            669
;  :quant-instantiations    233
;  :rlimit-count            232411)
(pop) ; 8
(push) ; 8
; [else-branch: 62 | !(First:(Second:(Second:(Second:($t@34@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@04)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_controller == diz
(push) ; 7
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8437
;  :arith-add-rows          119
;  :arith-assert-diseq      96
;  :arith-assert-lower      545
;  :arith-assert-upper      489
;  :arith-bound-prop        24
;  :arith-conflicts         16
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        45
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               200
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 1882
;  :datatype-occurs-check   605
;  :datatype-splits         1303
;  :decisions               1819
;  :del-clause              863
;  :final-checks            164
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          10
;  :mk-bool-var             3379
;  :mk-clause               915
;  :num-allocs              4543772
;  :num-checks              259
;  :propagations            669
;  :quant-instantiations    233
;  :rlimit-count            232489)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8437
;  :arith-add-rows          119
;  :arith-assert-diseq      96
;  :arith-assert-lower      545
;  :arith-assert-upper      489
;  :arith-bound-prop        24
;  :arith-conflicts         16
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        45
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               200
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 1882
;  :datatype-occurs-check   605
;  :datatype-splits         1303
;  :decisions               1819
;  :del-clause              863
;  :final-checks            164
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          10
;  :mk-bool-var             3379
;  :mk-clause               915
;  :num-allocs              4543772
;  :num-checks              260
;  :propagations            669
;  :quant-instantiations    233
;  :rlimit-count            232502)
(push) ; 7
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8437
;  :arith-add-rows          119
;  :arith-assert-diseq      96
;  :arith-assert-lower      545
;  :arith-assert-upper      489
;  :arith-bound-prop        24
;  :arith-conflicts         16
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        45
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               200
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 1882
;  :datatype-occurs-check   605
;  :datatype-splits         1303
;  :decisions               1819
;  :del-clause              863
;  :final-checks            164
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :minimized-lits          10
;  :mk-bool-var             3379
;  :mk-clause               915
;  :num-allocs              4543772
;  :num-checks              261
;  :propagations            669
;  :quant-instantiations    233
;  :rlimit-count            232511)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@04))))))))))))))))))))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@45@04 $Perm.Write))
(assert ($Perm.isReadVar $k@46@04 $Perm.Write))
(assert ($Perm.isReadVar $k@47@04 $Perm.Write))
(assert (= $t@43@04 ($Snap.combine ($Snap.first $t@43@04) ($Snap.second $t@43@04))))
(assert (=
  ($Snap.second $t@43@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@43@04))
    ($Snap.second ($Snap.second $t@43@04)))))
(assert (= ($Snap.first ($Snap.second $t@43@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@43@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@43@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@43@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
  $Snap.unit))
(assert (forall ((i__29@44@04 Int)) (!
  (implies
    (and
      (<
        i__29@44@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      (<= 0 i__29@44@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          i__29@44@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
            i__29@44@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
            i__29@44@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    i__29@44@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
(assert (<= $Perm.No $k@45@04))
(assert (<= $k@45@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@45@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))
  $Snap.unit))
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
(assert (<= $Perm.No $k@46@04))
(assert (<= $k@46@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@46@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))
(assert (<= $Perm.No $k@47@04))
(assert (<= $k@47@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@47@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
  $Snap.unit))
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  $Snap.unit))
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
  $Snap.unit))
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))
  $Snap.unit))
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  diz@9@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Controller_m.Main_process_state[1] != -1 || diz.Controller_m.Main_event_state[2] != -2
; [eval] diz.Controller_m.Main_process_state[1] != -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9194
;  :arith-add-rows          152
;  :arith-assert-diseq      101
;  :arith-assert-lower      589
;  :arith-assert-upper      531
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        415
;  :arith-fixed-eqs         304
;  :arith-offset-eqs        54
;  :arith-pivots            161
;  :binary-propagations     11
;  :conflicts               203
;  :datatype-accessor-ax    446
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   646
;  :datatype-splits         1390
;  :decisions               1945
;  :del-clause              913
;  :final-checks            172
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3636
;  :mk-clause               981
;  :num-allocs              4744455
;  :num-checks              264
;  :propagations            719
;  :quant-instantiations    251
;  :rlimit-count            241848)
; [eval] -1
(push) ; 8
; [then-branch: 63 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 | live]
; [else-branch: 63 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 | live]
(push) ; 9
; [then-branch: 63 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 63 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1)))
; [eval] diz.Controller_m.Main_event_state[2] != -2
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9198
;  :arith-add-rows          154
;  :arith-assert-diseq      101
;  :arith-assert-lower      591
;  :arith-assert-upper      533
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        416
;  :arith-fixed-eqs         304
;  :arith-offset-eqs        54
;  :arith-pivots            162
;  :binary-propagations     11
;  :conflicts               203
;  :datatype-accessor-ax    446
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   646
;  :datatype-splits         1390
;  :decisions               1945
;  :del-clause              913
;  :final-checks            172
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3641
;  :mk-clause               984
;  :num-allocs              4744455
;  :num-checks              265
;  :propagations            724
;  :quant-instantiations    253
;  :rlimit-count            242112)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9420
;  :arith-add-rows          162
;  :arith-assert-diseq      102
;  :arith-assert-lower      605
;  :arith-assert-upper      547
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        427
;  :arith-fixed-eqs         316
;  :arith-offset-eqs        62
;  :arith-pivots            169
;  :binary-propagations     11
;  :conflicts               203
;  :datatype-accessor-ax    455
;  :datatype-constructor-ax 2064
;  :datatype-occurs-check   665
;  :datatype-splits         1433
;  :decisions               1989
;  :del-clause              943
;  :final-checks            176
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3707
;  :mk-clause               1011
;  :num-allocs              4744455
;  :num-checks              266
;  :propagations            752
;  :quant-instantiations    257
;  :rlimit-count            244086
;  :time                    0.00)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      104
;  :arith-assert-lower      621
;  :arith-assert-upper      560
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        441
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               207
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              974
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3791
;  :mk-clause               1042
;  :num-allocs              4744455
;  :num-checks              267
;  :propagations            782
;  :quant-instantiations    262
;  :rlimit-count            246208
;  :time                    0.00)
; [then-branch: 64 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] != -2 | live]
; [else-branch: 64 | !(First:(Second:(Second:(Second:($t@43@04))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] != -2) | live]
(push) ; 8
; [then-branch: 64 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
        2)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Controller_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Controller_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@52@04 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 65 | 0 <= i@52@04 | live]
; [else-branch: 65 | !(0 <= i@52@04) | live]
(push) ; 11
; [then-branch: 65 | 0 <= i@52@04]
(assert (<= 0 i@52@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 65 | !(0 <= i@52@04)]
(assert (not (<= 0 i@52@04)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 66 | i@52@04 < |First:(Second:(Second:(Second:($t@43@04))))| && 0 <= i@52@04 | live]
; [else-branch: 66 | !(i@52@04 < |First:(Second:(Second:(Second:($t@43@04))))| && 0 <= i@52@04) | live]
(push) ; 11
; [then-branch: 66 | i@52@04 < |First:(Second:(Second:(Second:($t@43@04))))| && 0 <= i@52@04]
(assert (and
  (<
    i@52@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
  (<= 0 i@52@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@52@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      104
;  :arith-assert-lower      622
;  :arith-assert-upper      561
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        442
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               207
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              974
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3796
;  :mk-clause               1050
;  :num-allocs              4744455
;  :num-checks              268
;  :propagations            782
;  :quant-instantiations    262
;  :rlimit-count            246562)
; [eval] -1
(push) ; 12
; [then-branch: 67 | First:(Second:(Second:(Second:($t@43@04))))[i@52@04] == -1 | live]
; [else-branch: 67 | First:(Second:(Second:(Second:($t@43@04))))[i@52@04] != -1 | live]
(push) ; 13
; [then-branch: 67 | First:(Second:(Second:(Second:($t@43@04))))[i@52@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    i@52@04)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 67 | First:(Second:(Second:(Second:($t@43@04))))[i@52@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      i@52@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@52@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      105
;  :arith-assert-lower      625
;  :arith-assert-upper      562
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        443
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               207
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              974
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3802
;  :mk-clause               1054
;  :num-allocs              4744455
;  :num-checks              269
;  :propagations            784
;  :quant-instantiations    263
;  :rlimit-count            246794)
(push) ; 14
; [then-branch: 68 | 0 <= First:(Second:(Second:(Second:($t@43@04))))[i@52@04] | live]
; [else-branch: 68 | !(0 <= First:(Second:(Second:(Second:($t@43@04))))[i@52@04]) | live]
(push) ; 15
; [then-branch: 68 | 0 <= First:(Second:(Second:(Second:($t@43@04))))[i@52@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    i@52@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@52@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      105
;  :arith-assert-lower      625
;  :arith-assert-upper      562
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        443
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               207
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              974
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3802
;  :mk-clause               1054
;  :num-allocs              4744455
;  :num-checks              270
;  :propagations            784
;  :quant-instantiations    263
;  :rlimit-count            246908)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 68 | !(0 <= First:(Second:(Second:(Second:($t@43@04))))[i@52@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      i@52@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 66 | !(i@52@04 < |First:(Second:(Second:(Second:($t@43@04))))| && 0 <= i@52@04)]
(assert (not
  (and
    (<
      i@52@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    (<= 0 i@52@04))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i@52@04 Int)) (!
  (implies
    (and
      (<
        i@52@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      (<= 0 i@52@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          i@52@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
            i@52@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
            i@52@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    i@52@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      107
;  :arith-assert-lower      626
;  :arith-assert-upper      563
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        444
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               208
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3810
;  :mk-clause               1068
;  :num-allocs              4744455
;  :num-checks              271
;  :propagations            786
;  :quant-instantiations    264
;  :rlimit-count            247354)
(assert (forall ((i@52@04 Int)) (!
  (implies
    (and
      (<
        i@52@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      (<= 0 i@52@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          i@52@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
            i@52@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
            i@52@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    i@52@04))
  :qid |prog.l<no position>|)))
(declare-const $k@53@04 $Perm)
(assert ($Perm.isReadVar $k@53@04 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@53@04 $Perm.No) (< $Perm.No $k@53@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      108
;  :arith-assert-lower      628
;  :arith-assert-upper      564
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        445
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               209
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3815
;  :mk-clause               1070
;  :num-allocs              4744455
;  :num-checks              272
;  :propagations            787
;  :quant-instantiations    264
;  :rlimit-count            247914)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@45@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      108
;  :arith-assert-lower      628
;  :arith-assert-upper      564
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        445
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               209
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3815
;  :mk-clause               1070
;  :num-allocs              4744455
;  :num-checks              273
;  :propagations            787
;  :quant-instantiations    264
;  :rlimit-count            247925)
(assert (< $k@53@04 $k@45@04))
(assert (<= $Perm.No (- $k@45@04 $k@53@04)))
(assert (<= (- $k@45@04 $k@53@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@45@04 $k@53@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@45@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      108
;  :arith-assert-lower      630
;  :arith-assert-upper      565
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        445
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               210
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3818
;  :mk-clause               1070
;  :num-allocs              4744455
;  :num-checks              274
;  :propagations            787
;  :quant-instantiations    264
;  :rlimit-count            248139)
(declare-const $k@54@04 $Perm)
(assert ($Perm.isReadVar $k@54@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@54@04 $Perm.No) (< $Perm.No $k@54@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      109
;  :arith-assert-lower      632
;  :arith-assert-upper      566
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        446
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               211
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3822
;  :mk-clause               1072
;  :num-allocs              4744455
;  :num-checks              275
;  :propagations            788
;  :quant-instantiations    264
;  :rlimit-count            248338)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@46@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      109
;  :arith-assert-lower      632
;  :arith-assert-upper      566
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        446
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               211
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3822
;  :mk-clause               1072
;  :num-allocs              4744455
;  :num-checks              276
;  :propagations            788
;  :quant-instantiations    264
;  :rlimit-count            248349)
(assert (< $k@54@04 $k@46@04))
(assert (<= $Perm.No (- $k@46@04 $k@54@04)))
(assert (<= (- $k@46@04 $k@54@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@46@04 $k@54@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      109
;  :arith-assert-lower      634
;  :arith-assert-upper      567
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        446
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               212
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3825
;  :mk-clause               1072
;  :num-allocs              4744455
;  :num-checks              277
;  :propagations            788
;  :quant-instantiations    264
;  :rlimit-count            248563)
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      109
;  :arith-assert-lower      634
;  :arith-assert-upper      567
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        446
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               213
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3825
;  :mk-clause               1072
;  :num-allocs              4744455
;  :num-checks              278
;  :propagations            788
;  :quant-instantiations    264
;  :rlimit-count            248611)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      109
;  :arith-assert-lower      634
;  :arith-assert-upper      567
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        446
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               213
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3825
;  :mk-clause               1072
;  :num-allocs              4744455
;  :num-checks              279
;  :propagations            788
;  :quant-instantiations    264
;  :rlimit-count            248624)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      109
;  :arith-assert-lower      634
;  :arith-assert-upper      567
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        446
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               214
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3825
;  :mk-clause               1072
;  :num-allocs              4744455
;  :num-checks              280
;  :propagations            788
;  :quant-instantiations    264
;  :rlimit-count            248672)
(declare-const $k@55@04 $Perm)
(assert ($Perm.isReadVar $k@55@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@55@04 $Perm.No) (< $Perm.No $k@55@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      110
;  :arith-assert-lower      636
;  :arith-assert-upper      568
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        447
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               215
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3829
;  :mk-clause               1074
;  :num-allocs              4744455
;  :num-checks              281
;  :propagations            789
;  :quant-instantiations    264
;  :rlimit-count            248870)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@47@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      110
;  :arith-assert-lower      636
;  :arith-assert-upper      568
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        447
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               215
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3829
;  :mk-clause               1074
;  :num-allocs              4744455
;  :num-checks              282
;  :propagations            789
;  :quant-instantiations    264
;  :rlimit-count            248881)
(assert (< $k@55@04 $k@47@04))
(assert (<= $Perm.No (- $k@47@04 $k@55@04)))
(assert (<= (- $k@47@04 $k@55@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@47@04 $k@55@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      110
;  :arith-assert-lower      638
;  :arith-assert-upper      569
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        447
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            178
;  :binary-propagations     11
;  :conflicts               216
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3832
;  :mk-clause               1074
;  :num-allocs              4744455
;  :num-checks              283
;  :propagations            789
;  :quant-instantiations    264
;  :rlimit-count            249101)
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      110
;  :arith-assert-lower      638
;  :arith-assert-upper      569
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        447
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            178
;  :binary-propagations     11
;  :conflicts               217
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3832
;  :mk-clause               1074
;  :num-allocs              4744455
;  :num-checks              284
;  :propagations            789
;  :quant-instantiations    264
;  :rlimit-count            249149)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      110
;  :arith-assert-lower      638
;  :arith-assert-upper      569
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        447
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            178
;  :binary-propagations     11
;  :conflicts               217
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3832
;  :mk-clause               1074
;  :num-allocs              4744455
;  :num-checks              285
;  :propagations            789
;  :quant-instantiations    264
;  :rlimit-count            249162)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9682
;  :arith-add-rows          167
;  :arith-assert-diseq      110
;  :arith-assert-lower      638
;  :arith-assert-upper      569
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        447
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        69
;  :arith-pivots            178
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2126
;  :datatype-occurs-check   689
;  :datatype-splits         1480
;  :decisions               2044
;  :del-clause              992
;  :final-checks            181
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3832
;  :mk-clause               1074
;  :num-allocs              4744455
;  :num-checks              286
;  :propagations            789
;  :quant-instantiations    264
;  :rlimit-count            249210)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9905
;  :arith-add-rows          170
;  :arith-assert-diseq      111
;  :arith-assert-lower      652
;  :arith-assert-upper      583
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1011
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3895
;  :mk-clause               1093
;  :num-allocs              4744455
;  :num-checks              287
;  :propagations            817
;  :quant-instantiations    269
;  :rlimit-count            250938
;  :time                    0.00)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9905
;  :arith-add-rows          170
;  :arith-assert-diseq      111
;  :arith-assert-lower      652
;  :arith-assert-upper      583
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1011
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3895
;  :mk-clause               1093
;  :num-allocs              4744455
;  :num-checks              288
;  :propagations            817
;  :quant-instantiations    269
;  :rlimit-count            250953)
; [eval] -1
(push) ; 9
; [then-branch: 69 | First:(Second:(Second:(Second:($t@43@04))))[0] == -1 | live]
; [else-branch: 69 | First:(Second:(Second:(Second:($t@43@04))))[0] != -1 | live]
(push) ; 10
; [then-branch: 69 | First:(Second:(Second:(Second:($t@43@04))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    0)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 69 | First:(Second:(Second:(Second:($t@43@04))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9906
;  :arith-add-rows          170
;  :arith-assert-diseq      111
;  :arith-assert-lower      653
;  :arith-assert-upper      585
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        458
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1011
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3899
;  :mk-clause               1096
;  :num-allocs              4744455
;  :num-checks              289
;  :propagations            820
;  :quant-instantiations    271
;  :rlimit-count            251184)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9906
;  :arith-add-rows          170
;  :arith-assert-diseq      111
;  :arith-assert-lower      653
;  :arith-assert-upper      585
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        458
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1014
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3899
;  :mk-clause               1096
;  :num-allocs              4744455
;  :num-checks              290
;  :propagations            820
;  :quant-instantiations    271
;  :rlimit-count            251199)
; [eval] -1
(push) ; 9
; [then-branch: 70 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 | live]
; [else-branch: 70 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 | live]
(push) ; 10
; [then-branch: 70 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 70 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9908
;  :arith-add-rows          170
;  :arith-assert-diseq      112
;  :arith-assert-lower      657
;  :arith-assert-upper      587
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        460
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1014
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3906
;  :mk-clause               1100
;  :num-allocs              4744455
;  :num-checks              291
;  :propagations            823
;  :quant-instantiations    273
;  :rlimit-count            251394)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9908
;  :arith-add-rows          170
;  :arith-assert-diseq      112
;  :arith-assert-lower      657
;  :arith-assert-upper      587
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        460
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1018
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3906
;  :mk-clause               1100
;  :num-allocs              4744455
;  :num-checks              292
;  :propagations            823
;  :quant-instantiations    273
;  :rlimit-count            251409)
; [eval] -1
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9908
;  :arith-add-rows          170
;  :arith-assert-diseq      112
;  :arith-assert-lower      657
;  :arith-assert-upper      587
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        460
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1018
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3906
;  :mk-clause               1100
;  :num-allocs              4744455
;  :num-checks              293
;  :propagations            823
;  :quant-instantiations    273
;  :rlimit-count            251424)
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9908
;  :arith-add-rows          170
;  :arith-assert-diseq      112
;  :arith-assert-lower      657
;  :arith-assert-upper      587
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        460
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1018
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3906
;  :mk-clause               1100
;  :num-allocs              4744455
;  :num-checks              294
;  :propagations            823
;  :quant-instantiations    273
;  :rlimit-count            251439)
; [eval] -1
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9908
;  :arith-add-rows          170
;  :arith-assert-diseq      112
;  :arith-assert-lower      657
;  :arith-assert-upper      587
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        460
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               219
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1018
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3906
;  :mk-clause               1100
;  :num-allocs              4744455
;  :num-checks              295
;  :propagations            823
;  :quant-instantiations    273
;  :rlimit-count            251487)
(push) ; 9
; [then-branch: 71 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
; [else-branch: 71 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
(push) ; 10
; [then-branch: 71 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 71 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9908
;  :arith-add-rows          170
;  :arith-assert-diseq      112
;  :arith-assert-lower      657
;  :arith-assert-upper      587
;  :arith-bound-prop        30
;  :arith-conflicts         16
;  :arith-eq-adapter        460
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        78
;  :arith-pivots            183
;  :binary-propagations     11
;  :conflicts               219
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2172
;  :datatype-occurs-check   708
;  :datatype-splits         1523
;  :decisions               2088
;  :del-clause              1018
;  :final-checks            185
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :minimized-lits          10
;  :mk-bool-var             3906
;  :mk-clause               1100
;  :num-allocs              4744455
;  :num-checks              296
;  :propagations            823
;  :quant-instantiations    273
;  :rlimit-count            251520)
; [eval] -1
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10620
;  :arith-add-rows          208
;  :arith-assert-diseq      124
;  :arith-assert-lower      705
;  :arith-assert-upper      616
;  :arith-bound-prop        36
;  :arith-conflicts         17
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         358
;  :arith-offset-eqs        89
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               232
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2346
;  :datatype-occurs-check   772
;  :datatype-splits         1675
;  :decisions               2240
;  :del-clause              1102
;  :final-checks            196
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4166
;  :mk-clause               1184
;  :num-allocs              4956609
;  :num-checks              297
;  :propagations            902
;  :quant-instantiations    285
;  :rlimit-count            256045
;  :time                    0.00)
(push) ; 12
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10844
;  :arith-add-rows          239
;  :arith-assert-diseq      125
;  :arith-assert-lower      719
;  :arith-assert-upper      630
;  :arith-bound-prop        43
;  :arith-conflicts         17
;  :arith-eq-adapter        505
;  :arith-fixed-eqs         371
;  :arith-offset-eqs        98
;  :arith-pivots            204
;  :binary-propagations     11
;  :conflicts               232
;  :datatype-accessor-ax    527
;  :datatype-constructor-ax 2392
;  :datatype-occurs-check   791
;  :datatype-splits         1718
;  :decisions               2284
;  :del-clause              1129
;  :final-checks            200
;  :interface-eqs           13
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4236
;  :mk-clause               1211
;  :num-allocs              4956609
;  :num-checks              298
;  :propagations            925
;  :quant-instantiations    290
;  :rlimit-count            258217
;  :time                    0.00)
; [then-branch: 72 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 | live]
; [else-branch: 72 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 | live]
(push) ; 12
; [then-branch: 72 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10848
;  :arith-add-rows          239
;  :arith-assert-diseq      126
;  :arith-assert-lower      721
;  :arith-assert-upper      632
;  :arith-bound-prop        43
;  :arith-conflicts         17
;  :arith-eq-adapter        506
;  :arith-fixed-eqs         371
;  :arith-offset-eqs        98
;  :arith-pivots            204
;  :binary-propagations     11
;  :conflicts               232
;  :datatype-accessor-ax    527
;  :datatype-constructor-ax 2392
;  :datatype-occurs-check   791
;  :datatype-splits         1718
;  :decisions               2284
;  :del-clause              1129
;  :final-checks            200
;  :interface-eqs           13
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4241
;  :mk-clause               1214
;  :num-allocs              4956609
;  :num-checks              299
;  :propagations            931
;  :quant-instantiations    293
;  :rlimit-count            258439)
; [eval] -1
(pop) ; 12
(push) ; 12
; [else-branch: 72 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10848
;  :arith-add-rows          239
;  :arith-assert-diseq      126
;  :arith-assert-lower      721
;  :arith-assert-upper      632
;  :arith-bound-prop        43
;  :arith-conflicts         17
;  :arith-eq-adapter        506
;  :arith-fixed-eqs         371
;  :arith-offset-eqs        98
;  :arith-pivots            204
;  :binary-propagations     11
;  :conflicts               232
;  :datatype-accessor-ax    527
;  :datatype-constructor-ax 2392
;  :datatype-occurs-check   791
;  :datatype-splits         1718
;  :decisions               2284
;  :del-clause              1132
;  :final-checks            200
;  :interface-eqs           13
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4241
;  :mk-clause               1214
;  :num-allocs              4956609
;  :num-checks              300
;  :propagations            931
;  :quant-instantiations    293
;  :rlimit-count            258482)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11737
;  :arith-add-rows          292
;  :arith-assert-diseq      139
;  :arith-assert-lower      775
;  :arith-assert-upper      669
;  :arith-bound-prop        50
;  :arith-conflicts         18
;  :arith-eq-adapter        549
;  :arith-fixed-eqs         396
;  :arith-offset-eqs        119
;  :arith-pivots            217
;  :binary-propagations     11
;  :conflicts               246
;  :datatype-accessor-ax    578
;  :datatype-constructor-ax 2613
;  :datatype-occurs-check   869
;  :datatype-splits         1904
;  :decisions               2479
;  :del-clause              1236
;  :final-checks            213
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4537
;  :mk-clause               1318
;  :num-allocs              4956609
;  :num-checks              301
;  :propagations            1024
;  :quant-instantiations    305
;  :rlimit-count            263982
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11961
;  :arith-add-rows          317
;  :arith-assert-diseq      140
;  :arith-assert-lower      789
;  :arith-assert-upper      683
;  :arith-bound-prop        57
;  :arith-conflicts         18
;  :arith-eq-adapter        559
;  :arith-fixed-eqs         409
;  :arith-offset-eqs        128
;  :arith-pivots            226
;  :binary-propagations     11
;  :conflicts               246
;  :datatype-accessor-ax    587
;  :datatype-constructor-ax 2659
;  :datatype-occurs-check   888
;  :datatype-splits         1947
;  :decisions               2523
;  :del-clause              1263
;  :final-checks            217
;  :interface-eqs           17
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4607
;  :mk-clause               1345
;  :num-allocs              4956609
;  :num-checks              302
;  :propagations            1047
;  :quant-instantiations    310
;  :rlimit-count            266080
;  :time                    0.00)
; [then-branch: 73 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] | live]
; [else-branch: 73 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]) | live]
(push) ; 10
; [then-branch: 73 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11964
;  :arith-add-rows          317
;  :arith-assert-diseq      141
;  :arith-assert-lower      794
;  :arith-assert-upper      685
;  :arith-bound-prop        57
;  :arith-conflicts         18
;  :arith-eq-adapter        560
;  :arith-fixed-eqs         410
;  :arith-offset-eqs        128
;  :arith-pivots            226
;  :binary-propagations     11
;  :conflicts               246
;  :datatype-accessor-ax    587
;  :datatype-constructor-ax 2659
;  :datatype-occurs-check   888
;  :datatype-splits         1947
;  :decisions               2523
;  :del-clause              1263
;  :final-checks            217
;  :interface-eqs           17
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4612
;  :mk-clause               1348
;  :num-allocs              4956609
;  :num-checks              303
;  :propagations            1055
;  :quant-instantiations    313
;  :rlimit-count            266323)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 73 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11964
;  :arith-add-rows          317
;  :arith-assert-diseq      141
;  :arith-assert-lower      794
;  :arith-assert-upper      685
;  :arith-bound-prop        57
;  :arith-conflicts         18
;  :arith-eq-adapter        560
;  :arith-fixed-eqs         410
;  :arith-offset-eqs        128
;  :arith-pivots            226
;  :binary-propagations     11
;  :conflicts               246
;  :datatype-accessor-ax    587
;  :datatype-constructor-ax 2659
;  :datatype-occurs-check   888
;  :datatype-splits         1947
;  :decisions               2523
;  :del-clause              1266
;  :final-checks            217
;  :interface-eqs           17
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4612
;  :mk-clause               1348
;  :num-allocs              4956609
;  :num-checks              304
;  :propagations            1055
;  :quant-instantiations    313
;  :rlimit-count            266370)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12853
;  :arith-add-rows          370
;  :arith-assert-diseq      154
;  :arith-assert-lower      848
;  :arith-assert-upper      722
;  :arith-bound-prop        64
;  :arith-conflicts         19
;  :arith-eq-adapter        603
;  :arith-fixed-eqs         435
;  :arith-offset-eqs        149
;  :arith-pivots            239
;  :binary-propagations     11
;  :conflicts               260
;  :datatype-accessor-ax    638
;  :datatype-constructor-ax 2880
;  :datatype-occurs-check   966
;  :datatype-splits         2133
;  :decisions               2718
;  :del-clause              1370
;  :final-checks            230
;  :interface-eqs           20
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4908
;  :mk-clause               1452
;  :num-allocs              4956609
;  :num-checks              305
;  :propagations            1148
;  :quant-instantiations    325
;  :rlimit-count            271868
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13077
;  :arith-add-rows          395
;  :arith-assert-diseq      155
;  :arith-assert-lower      862
;  :arith-assert-upper      736
;  :arith-bound-prop        71
;  :arith-conflicts         19
;  :arith-eq-adapter        613
;  :arith-fixed-eqs         448
;  :arith-offset-eqs        158
;  :arith-pivots            248
;  :binary-propagations     11
;  :conflicts               260
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 2926
;  :datatype-occurs-check   985
;  :datatype-splits         2176
;  :decisions               2762
;  :del-clause              1397
;  :final-checks            234
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4978
;  :mk-clause               1479
;  :num-allocs              4956609
;  :num-checks              306
;  :propagations            1171
;  :quant-instantiations    330
;  :rlimit-count            273968
;  :time                    0.00)
; [then-branch: 74 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] | live]
; [else-branch: 74 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]) | live]
(push) ; 10
; [then-branch: 74 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13080
;  :arith-add-rows          395
;  :arith-assert-diseq      156
;  :arith-assert-lower      867
;  :arith-assert-upper      738
;  :arith-bound-prop        71
;  :arith-conflicts         19
;  :arith-eq-adapter        614
;  :arith-fixed-eqs         449
;  :arith-offset-eqs        158
;  :arith-pivots            248
;  :binary-propagations     11
;  :conflicts               261
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 2926
;  :datatype-occurs-check   985
;  :datatype-splits         2176
;  :decisions               2762
;  :del-clause              1397
;  :final-checks            234
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4983
;  :mk-clause               1482
;  :num-allocs              4956609
;  :num-checks              307
;  :propagations            1179
;  :quant-instantiations    333
;  :rlimit-count            274243)
(push) ; 11
(assert (not (< $Perm.No $k@45@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13080
;  :arith-add-rows          395
;  :arith-assert-diseq      156
;  :arith-assert-lower      867
;  :arith-assert-upper      738
;  :arith-bound-prop        71
;  :arith-conflicts         19
;  :arith-eq-adapter        614
;  :arith-fixed-eqs         449
;  :arith-offset-eqs        158
;  :arith-pivots            248
;  :binary-propagations     11
;  :conflicts               262
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 2926
;  :datatype-occurs-check   985
;  :datatype-splits         2176
;  :decisions               2762
;  :del-clause              1397
;  :final-checks            234
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4983
;  :mk-clause               1482
;  :num-allocs              4956609
;  :num-checks              308
;  :propagations            1179
;  :quant-instantiations    333
;  :rlimit-count            274291)
(pop) ; 10
(push) ; 10
; [else-branch: 74 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13080
;  :arith-add-rows          395
;  :arith-assert-diseq      156
;  :arith-assert-lower      867
;  :arith-assert-upper      738
;  :arith-bound-prop        71
;  :arith-conflicts         19
;  :arith-eq-adapter        614
;  :arith-fixed-eqs         449
;  :arith-offset-eqs        158
;  :arith-pivots            248
;  :binary-propagations     11
;  :conflicts               263
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 2926
;  :datatype-occurs-check   985
;  :datatype-splits         2176
;  :decisions               2762
;  :del-clause              1400
;  :final-checks            234
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4983
;  :mk-clause               1482
;  :num-allocs              4956609
;  :num-checks              309
;  :propagations            1179
;  :quant-instantiations    333
;  :rlimit-count            274371)
(push) ; 9
; [then-branch: 75 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 75 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 75 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13080
;  :arith-add-rows          395
;  :arith-assert-diseq      156
;  :arith-assert-lower      867
;  :arith-assert-upper      738
;  :arith-bound-prop        71
;  :arith-conflicts         19
;  :arith-eq-adapter        614
;  :arith-fixed-eqs         449
;  :arith-offset-eqs        158
;  :arith-pivots            248
;  :binary-propagations     11
;  :conflicts               263
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 2926
;  :datatype-occurs-check   985
;  :datatype-splits         2176
;  :decisions               2762
;  :del-clause              1400
;  :final-checks            234
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             4983
;  :mk-clause               1482
;  :num-allocs              4956609
;  :num-checks              310
;  :propagations            1179
;  :quant-instantiations    333
;  :rlimit-count            274396)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 75 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13965
;  :arith-add-rows          448
;  :arith-assert-diseq      169
;  :arith-assert-lower      920
;  :arith-assert-upper      775
;  :arith-bound-prop        78
;  :arith-conflicts         20
;  :arith-eq-adapter        657
;  :arith-fixed-eqs         474
;  :arith-offset-eqs        179
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               277
;  :datatype-accessor-ax    698
;  :datatype-constructor-ax 3147
;  :datatype-occurs-check   1063
;  :datatype-splits         2362
;  :decisions               2955
;  :del-clause              1504
;  :final-checks            247
;  :interface-eqs           24
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5279
;  :mk-clause               1586
;  :num-allocs              4956609
;  :num-checks              311
;  :propagations            1272
;  :quant-instantiations    345
;  :rlimit-count            279842
;  :time                    0.00)
(push) ; 10
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14189
;  :arith-add-rows          473
;  :arith-assert-diseq      170
;  :arith-assert-lower      934
;  :arith-assert-upper      789
;  :arith-bound-prop        85
;  :arith-conflicts         20
;  :arith-eq-adapter        667
;  :arith-fixed-eqs         487
;  :arith-offset-eqs        188
;  :arith-pivots            270
;  :binary-propagations     11
;  :conflicts               277
;  :datatype-accessor-ax    707
;  :datatype-constructor-ax 3193
;  :datatype-occurs-check   1082
;  :datatype-splits         2405
;  :decisions               2999
;  :del-clause              1531
;  :final-checks            251
;  :interface-eqs           25
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5349
;  :mk-clause               1613
;  :num-allocs              4956609
;  :num-checks              312
;  :propagations            1295
;  :quant-instantiations    350
;  :rlimit-count            281922
;  :time                    0.00)
; [then-branch: 76 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 76 | !(First:(Second:(Second:(Second:($t@43@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 76 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14193
;  :arith-add-rows          473
;  :arith-assert-diseq      171
;  :arith-assert-lower      936
;  :arith-assert-upper      791
;  :arith-bound-prop        85
;  :arith-conflicts         20
;  :arith-eq-adapter        668
;  :arith-fixed-eqs         487
;  :arith-offset-eqs        188
;  :arith-pivots            270
;  :binary-propagations     11
;  :conflicts               278
;  :datatype-accessor-ax    707
;  :datatype-constructor-ax 3193
;  :datatype-occurs-check   1082
;  :datatype-splits         2405
;  :decisions               2999
;  :del-clause              1531
;  :final-checks            251
;  :interface-eqs           25
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5354
;  :mk-clause               1616
;  :num-allocs              4956609
;  :num-checks              313
;  :propagations            1301
;  :quant-instantiations    353
;  :rlimit-count            282179)
(push) ; 11
(assert (not (< $Perm.No $k@45@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14193
;  :arith-add-rows          473
;  :arith-assert-diseq      171
;  :arith-assert-lower      936
;  :arith-assert-upper      791
;  :arith-bound-prop        85
;  :arith-conflicts         20
;  :arith-eq-adapter        668
;  :arith-fixed-eqs         487
;  :arith-offset-eqs        188
;  :arith-pivots            270
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    707
;  :datatype-constructor-ax 3193
;  :datatype-occurs-check   1082
;  :datatype-splits         2405
;  :decisions               2999
;  :del-clause              1531
;  :final-checks            251
;  :interface-eqs           25
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5354
;  :mk-clause               1616
;  :num-allocs              4956609
;  :num-checks              314
;  :propagations            1301
;  :quant-instantiations    353
;  :rlimit-count            282227)
(pop) ; 10
(push) ; 10
; [else-branch: 76 | !(First:(Second:(Second:(Second:($t@43@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) globals@10@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Controller_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Controller_m, globals), write)
(declare-const $t@56@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Controller_m, globals), write)
(assert (= $t@56@04 ($Snap.combine ($Snap.first $t@56@04) ($Snap.second $t@56@04))))
(assert (= ($Snap.first $t@56@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@56@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@56@04))
    ($Snap.second ($Snap.second $t@56@04)))))
(assert (= ($Snap.first ($Snap.second $t@56@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@56@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@56@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@56@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@56@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@57@04 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 77 | 0 <= i@57@04 | live]
; [else-branch: 77 | !(0 <= i@57@04) | live]
(push) ; 11
; [then-branch: 77 | 0 <= i@57@04]
(assert (<= 0 i@57@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 77 | !(0 <= i@57@04)]
(assert (not (<= 0 i@57@04)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 78 | i@57@04 < |First:(Second:(Second:(Second:($t@56@04))))| && 0 <= i@57@04 | live]
; [else-branch: 78 | !(i@57@04 < |First:(Second:(Second:(Second:($t@56@04))))| && 0 <= i@57@04) | live]
(push) ; 11
; [then-branch: 78 | i@57@04 < |First:(Second:(Second:(Second:($t@56@04))))| && 0 <= i@57@04]
(assert (and
  (<
    i@57@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
  (<= 0 i@57@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@57@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14526
;  :arith-add-rows          487
;  :arith-assert-diseq      172
;  :arith-assert-lower      955
;  :arith-assert-upper      808
;  :arith-bound-prop        85
;  :arith-conflicts         20
;  :arith-eq-adapter        680
;  :arith-fixed-eqs         496
;  :arith-offset-eqs        196
;  :arith-pivots            278
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    751
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1559
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5444
;  :mk-clause               1635
;  :num-allocs              4956609
;  :num-checks              316
;  :propagations            1329
;  :quant-instantiations    362
;  :rlimit-count            286290)
; [eval] -1
(push) ; 12
; [then-branch: 79 | First:(Second:(Second:(Second:($t@56@04))))[i@57@04] == -1 | live]
; [else-branch: 79 | First:(Second:(Second:(Second:($t@56@04))))[i@57@04] != -1 | live]
(push) ; 13
; [then-branch: 79 | First:(Second:(Second:(Second:($t@56@04))))[i@57@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    i@57@04)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 79 | First:(Second:(Second:(Second:($t@56@04))))[i@57@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      i@57@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@57@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14526
;  :arith-add-rows          487
;  :arith-assert-diseq      172
;  :arith-assert-lower      955
;  :arith-assert-upper      808
;  :arith-bound-prop        85
;  :arith-conflicts         20
;  :arith-eq-adapter        680
;  :arith-fixed-eqs         496
;  :arith-offset-eqs        196
;  :arith-pivots            278
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    751
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1559
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5445
;  :mk-clause               1635
;  :num-allocs              4956609
;  :num-checks              317
;  :propagations            1329
;  :quant-instantiations    362
;  :rlimit-count            286465)
(push) ; 14
; [then-branch: 80 | 0 <= First:(Second:(Second:(Second:($t@56@04))))[i@57@04] | live]
; [else-branch: 80 | !(0 <= First:(Second:(Second:(Second:($t@56@04))))[i@57@04]) | live]
(push) ; 15
; [then-branch: 80 | 0 <= First:(Second:(Second:(Second:($t@56@04))))[i@57@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    i@57@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@57@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14526
;  :arith-add-rows          487
;  :arith-assert-diseq      173
;  :arith-assert-lower      958
;  :arith-assert-upper      808
;  :arith-bound-prop        85
;  :arith-conflicts         20
;  :arith-eq-adapter        681
;  :arith-fixed-eqs         496
;  :arith-offset-eqs        196
;  :arith-pivots            278
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    751
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1559
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5448
;  :mk-clause               1636
;  :num-allocs              4956609
;  :num-checks              318
;  :propagations            1329
;  :quant-instantiations    362
;  :rlimit-count            286589)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 80 | !(0 <= First:(Second:(Second:(Second:($t@56@04))))[i@57@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      i@57@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 78 | !(i@57@04 < |First:(Second:(Second:(Second:($t@56@04))))| && 0 <= i@57@04)]
(assert (not
  (and
    (<
      i@57@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    (<= 0 i@57@04))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@57@04 Int)) (!
  (implies
    (and
      (<
        i@57@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      (<= 0 i@57@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
          i@57@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
            i@57@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
            i@57@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    i@57@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))
(declare-const $k@58@04 $Perm)
(assert ($Perm.isReadVar $k@58@04 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@58@04 $Perm.No) (< $Perm.No $k@58@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14537
;  :arith-add-rows          487
;  :arith-assert-diseq      174
;  :arith-assert-lower      960
;  :arith-assert-upper      809
;  :arith-bound-prop        85
;  :arith-conflicts         20
;  :arith-eq-adapter        682
;  :arith-fixed-eqs         496
;  :arith-offset-eqs        196
;  :arith-pivots            278
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5456
;  :mk-clause               1638
;  :num-allocs              4956609
;  :num-checks              319
;  :propagations            1330
;  :quant-instantiations    362
;  :rlimit-count            287540)
(declare-const $t@59@04 Int)
(assert (and
  (implies
    (< $Perm.No (- $k@45@04 $k@53@04))
    (=
      $t@59@04
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
  (implies
    (< $Perm.No $k@58@04)
    (=
      $t@59@04
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))
(assert (<= $Perm.No (+ (- $k@45@04 $k@53@04) $k@58@04)))
(assert (<= (+ (- $k@45@04 $k@53@04) $k@58@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@45@04 $k@53@04) $k@58@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
  $Snap.unit))
; [eval] 0 < diz.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@45@04 $k@53@04) $k@58@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14547
;  :arith-add-rows          488
;  :arith-assert-diseq      174
;  :arith-assert-lower      961
;  :arith-assert-upper      811
;  :arith-bound-prop        85
;  :arith-conflicts         21
;  :arith-eq-adapter        682
;  :arith-fixed-eqs         497
;  :arith-offset-eqs        196
;  :arith-pivots            279
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    754
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5464
;  :mk-clause               1638
;  :num-allocs              4956609
;  :num-checks              320
;  :propagations            1330
;  :quant-instantiations    363
;  :rlimit-count            288238)
(assert (< 0 $t@59@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))
(declare-const $k@60@04 $Perm)
(assert ($Perm.isReadVar $k@60@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@60@04 $Perm.No) (< $Perm.No $k@60@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14554
;  :arith-add-rows          489
;  :arith-assert-diseq      175
;  :arith-assert-lower      965
;  :arith-assert-upper      813
;  :arith-bound-prop        85
;  :arith-conflicts         21
;  :arith-eq-adapter        684
;  :arith-fixed-eqs         498
;  :arith-offset-eqs        196
;  :arith-pivots            280
;  :binary-propagations     11
;  :conflicts               282
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5473
;  :mk-clause               1640
;  :num-allocs              4956609
;  :num-checks              321
;  :propagations            1331
;  :quant-instantiations    363
;  :rlimit-count            288708)
(declare-const $t@61@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@46@04 $k@54@04))
    (=
      $t@61@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
  (implies
    (< $Perm.No $k@60@04)
    (=
      $t@61@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))
(assert (<= $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04)))
(assert (<= (+ (- $k@46@04 $k@54@04) $k@60@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))
  $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14564
;  :arith-add-rows          490
;  :arith-assert-diseq      175
;  :arith-assert-lower      966
;  :arith-assert-upper      815
;  :arith-bound-prop        85
;  :arith-conflicts         22
;  :arith-eq-adapter        684
;  :arith-fixed-eqs         499
;  :arith-offset-eqs        196
;  :arith-pivots            281
;  :binary-propagations     11
;  :conflicts               283
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5481
;  :mk-clause               1640
;  :num-allocs              4956609
;  :num-checks              322
;  :propagations            1331
;  :quant-instantiations    364
;  :rlimit-count            289442)
(assert (not (= $t@61@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14570
;  :arith-add-rows          490
;  :arith-assert-diseq      175
;  :arith-assert-lower      966
;  :arith-assert-upper      816
;  :arith-bound-prop        85
;  :arith-conflicts         23
;  :arith-eq-adapter        684
;  :arith-fixed-eqs         500
;  :arith-offset-eqs        196
;  :arith-pivots            281
;  :binary-propagations     11
;  :conflicts               284
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5484
;  :mk-clause               1640
;  :num-allocs              4956609
;  :num-checks              323
;  :propagations            1331
;  :quant-instantiations    364
;  :rlimit-count            289796)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14575
;  :arith-add-rows          490
;  :arith-assert-diseq      175
;  :arith-assert-lower      966
;  :arith-assert-upper      817
;  :arith-bound-prop        85
;  :arith-conflicts         24
;  :arith-eq-adapter        684
;  :arith-fixed-eqs         501
;  :arith-offset-eqs        196
;  :arith-pivots            281
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5486
;  :mk-clause               1640
;  :num-allocs              4956609
;  :num-checks              324
;  :propagations            1331
;  :quant-instantiations    364
;  :rlimit-count            290115)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14575
;  :arith-add-rows          490
;  :arith-assert-diseq      175
;  :arith-assert-lower      966
;  :arith-assert-upper      817
;  :arith-bound-prop        85
;  :arith-conflicts         24
;  :arith-eq-adapter        684
;  :arith-fixed-eqs         501
;  :arith-offset-eqs        196
;  :arith-pivots            281
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5486
;  :mk-clause               1640
;  :num-allocs              4956609
;  :num-checks              325
;  :propagations            1331
;  :quant-instantiations    364
;  :rlimit-count            290128)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))
(declare-const $k@62@04 $Perm)
(assert ($Perm.isReadVar $k@62@04 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@62@04 $Perm.No) (< $Perm.No $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14580
;  :arith-add-rows          490
;  :arith-assert-diseq      176
;  :arith-assert-lower      968
;  :arith-assert-upper      818
;  :arith-bound-prop        85
;  :arith-conflicts         24
;  :arith-eq-adapter        685
;  :arith-fixed-eqs         501
;  :arith-offset-eqs        196
;  :arith-pivots            281
;  :binary-propagations     11
;  :conflicts               286
;  :datatype-accessor-ax    759
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5491
;  :mk-clause               1642
;  :num-allocs              4956609
;  :num-checks              326
;  :propagations            1332
;  :quant-instantiations    364
;  :rlimit-count            290568)
(declare-const $t@63@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@47@04 $k@55@04))
    (=
      $t@63@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))
  (implies
    (< $Perm.No $k@62@04)
    (=
      $t@63@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04)))
(assert (<= (+ (- $k@47@04 $k@55@04) $k@62@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14590
;  :arith-add-rows          491
;  :arith-assert-diseq      176
;  :arith-assert-lower      969
;  :arith-assert-upper      820
;  :arith-bound-prop        85
;  :arith-conflicts         25
;  :arith-eq-adapter        685
;  :arith-fixed-eqs         502
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               287
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5499
;  :mk-clause               1642
;  :num-allocs              4956609
;  :num-checks              327
;  :propagations            1332
;  :quant-instantiations    365
;  :rlimit-count            291232)
(assert (not (= $t@63@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14595
;  :arith-add-rows          491
;  :arith-assert-diseq      176
;  :arith-assert-lower      969
;  :arith-assert-upper      821
;  :arith-bound-prop        85
;  :arith-conflicts         26
;  :arith-eq-adapter        685
;  :arith-fixed-eqs         503
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               288
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5501
;  :mk-clause               1642
;  :num-allocs              4956609
;  :num-checks              328
;  :propagations            1332
;  :quant-instantiations    365
;  :rlimit-count            291599)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14600
;  :arith-add-rows          491
;  :arith-assert-diseq      176
;  :arith-assert-lower      969
;  :arith-assert-upper      822
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        685
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    762
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5503
;  :mk-clause               1642
;  :num-allocs              4956609
;  :num-checks              329
;  :propagations            1332
;  :quant-instantiations    365
;  :rlimit-count            291958)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14600
;  :arith-add-rows          491
;  :arith-assert-diseq      176
;  :arith-assert-lower      969
;  :arith-assert-upper      822
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        685
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    762
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5503
;  :mk-clause               1642
;  :num-allocs              4956609
;  :num-checks              330
;  :propagations            1332
;  :quant-instantiations    365
;  :rlimit-count            291971)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  $t@63@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14600
;  :arith-add-rows          491
;  :arith-assert-diseq      176
;  :arith-assert-lower      969
;  :arith-assert-upper      822
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        685
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    762
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5503
;  :mk-clause               1642
;  :num-allocs              4956609
;  :num-checks              331
;  :propagations            1332
;  :quant-instantiations    365
;  :rlimit-count            291982)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14609
;  :arith-add-rows          491
;  :arith-assert-diseq      176
;  :arith-assert-lower      969
;  :arith-assert-upper      822
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        685
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    763
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5507
;  :mk-clause               1642
;  :num-allocs              4956609
;  :num-checks              332
;  :propagations            1332
;  :quant-instantiations    366
;  :rlimit-count            292400)
; [eval] -1
(push) ; 9
; [then-branch: 81 | First:(Second:(Second:(Second:($t@56@04))))[0] == -1 | live]
; [else-branch: 81 | First:(Second:(Second:(Second:($t@56@04))))[0] != -1 | live]
(push) ; 10
; [then-branch: 81 | First:(Second:(Second:(Second:($t@56@04))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    0)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 81 | First:(Second:(Second:(Second:($t@56@04))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14609
;  :arith-add-rows          491
;  :arith-assert-diseq      177
;  :arith-assert-lower      972
;  :arith-assert-upper      823
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        686
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    763
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1560
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5513
;  :mk-clause               1646
;  :num-allocs              4956609
;  :num-checks              333
;  :propagations            1334
;  :quant-instantiations    367
;  :rlimit-count            292632)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14615
;  :arith-add-rows          491
;  :arith-assert-diseq      177
;  :arith-assert-lower      972
;  :arith-assert-upper      823
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        686
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1564
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5517
;  :mk-clause               1647
;  :num-allocs              4956609
;  :num-checks              334
;  :propagations            1334
;  :quant-instantiations    367
;  :rlimit-count            293069)
; [eval] -1
(push) ; 9
; [then-branch: 82 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1 | live]
; [else-branch: 82 | First:(Second:(Second:(Second:($t@56@04))))[1] != -1 | live]
(push) ; 10
; [then-branch: 82 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    1)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 82 | First:(Second:(Second:(Second:($t@56@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14615
;  :arith-add-rows          491
;  :arith-assert-diseq      178
;  :arith-assert-lower      975
;  :arith-assert-upper      824
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        687
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1564
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5523
;  :mk-clause               1651
;  :num-allocs              4956609
;  :num-checks              335
;  :propagations            1336
;  :quant-instantiations    368
;  :rlimit-count            293301)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14621
;  :arith-add-rows          491
;  :arith-assert-diseq      178
;  :arith-assert-lower      975
;  :arith-assert-upper      824
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        687
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    765
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1568
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.76
;  :memory                  4.76
;  :minimized-lits          10
;  :mk-bool-var             5527
;  :mk-clause               1652
;  :num-allocs              4956609
;  :num-checks              336
;  :propagations            1336
;  :quant-instantiations    368
;  :rlimit-count            293748)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14627
;  :arith-add-rows          491
;  :arith-assert-diseq      178
;  :arith-assert-lower      975
;  :arith-assert-upper      824
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        687
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    766
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1568
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.88
;  :memory                  4.88
;  :minimized-lits          10
;  :mk-bool-var             5530
;  :mk-clause               1652
;  :num-allocs              5190593
;  :num-checks              337
;  :propagations            1336
;  :quant-instantiations    368
;  :rlimit-count            294208)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14633
;  :arith-add-rows          491
;  :arith-assert-diseq      178
;  :arith-assert-lower      975
;  :arith-assert-upper      824
;  :arith-bound-prop        85
;  :arith-conflicts         27
;  :arith-eq-adapter        687
;  :arith-fixed-eqs         504
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               289
;  :datatype-accessor-ax    767
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1568
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.88
;  :memory                  4.88
;  :minimized-lits          10
;  :mk-bool-var             5533
;  :mk-clause               1652
;  :num-allocs              5190593
;  :num-checks              338
;  :propagations            1336
;  :quant-instantiations    368
;  :rlimit-count            294663)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14639
;  :arith-add-rows          491
;  :arith-assert-diseq      178
;  :arith-assert-lower      975
;  :arith-assert-upper      826
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        687
;  :arith-fixed-eqs         505
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               290
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1568
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.88
;  :memory                  4.88
;  :minimized-lits          10
;  :mk-bool-var             5537
;  :mk-clause               1652
;  :num-allocs              5190593
;  :num-checks              339
;  :propagations            1336
;  :quant-instantiations    368
;  :rlimit-count            295184)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  $t@63@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14639
;  :arith-add-rows          491
;  :arith-assert-diseq      178
;  :arith-assert-lower      975
;  :arith-assert-upper      826
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        687
;  :arith-fixed-eqs         505
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               290
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1568
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.88
;  :memory                  4.88
;  :minimized-lits          10
;  :mk-bool-var             5537
;  :mk-clause               1652
;  :num-allocs              5190593
;  :num-checks              340
;  :propagations            1336
;  :quant-instantiations    368
;  :rlimit-count            295195)
(push) ; 9
; [then-branch: 83 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
; [else-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
(push) ; 10
; [then-branch: 83 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14639
;  :arith-add-rows          491
;  :arith-assert-diseq      178
;  :arith-assert-lower      975
;  :arith-assert-upper      826
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        687
;  :arith-fixed-eqs         505
;  :arith-offset-eqs        196
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               290
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 3239
;  :datatype-occurs-check   1158
;  :datatype-splits         2448
;  :decisions               3043
;  :del-clause              1568
;  :final-checks            255
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.88
;  :memory                  4.88
;  :minimized-lits          10
;  :mk-bool-var             5537
;  :mk-clause               1652
;  :num-allocs              5190593
;  :num-checks              341
;  :propagations            1336
;  :quant-instantiations    368
;  :rlimit-count            295230)
; [eval] -1
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15019
;  :arith-add-rows          492
;  :arith-assert-diseq      179
;  :arith-assert-lower      993
;  :arith-assert-upper      844
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        701
;  :arith-fixed-eqs         526
;  :arith-offset-eqs        211
;  :arith-pivots            286
;  :binary-propagations     11
;  :conflicts               292
;  :datatype-accessor-ax    782
;  :datatype-constructor-ax 3324
;  :datatype-occurs-check   1260
;  :datatype-splits         2501
;  :decisions               3122
;  :del-clause              1593
;  :final-checks            260
;  :interface-eqs           27
;  :max-generation          2
;  :max-memory              4.98
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             5627
;  :mk-clause               1677
;  :num-allocs              5426125
;  :num-checks              342
;  :propagations            1372
;  :quant-instantiations    373
;  :rlimit-count            297760
;  :time                    0.00)
(push) ; 12
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15514
;  :arith-add-rows          493
;  :arith-assert-diseq      180
;  :arith-assert-lower      1017
;  :arith-assert-upper      868
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         556
;  :arith-offset-eqs        232
;  :arith-pivots            290
;  :binary-propagations     11
;  :conflicts               295
;  :datatype-accessor-ax    800
;  :datatype-constructor-ax 3437
;  :datatype-occurs-check   1362
;  :datatype-splits         2556
;  :decisions               3225
;  :del-clause              1627
;  :final-checks            265
;  :interface-eqs           28
;  :max-generation          2
;  :max-memory              4.98
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             5737
;  :mk-clause               1711
;  :num-allocs              5426125
;  :num-checks              343
;  :propagations            1419
;  :quant-instantiations    379
;  :rlimit-count            300764
;  :time                    0.00)
; [then-branch: 84 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1 | live]
; [else-branch: 84 | First:(Second:(Second:(Second:($t@56@04))))[1] != -1 | live]
(push) ; 12
; [then-branch: 84 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15516
;  :arith-add-rows          493
;  :arith-assert-diseq      180
;  :arith-assert-lower      1017
;  :arith-assert-upper      868
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         556
;  :arith-offset-eqs        232
;  :arith-pivots            290
;  :binary-propagations     11
;  :conflicts               295
;  :datatype-accessor-ax    800
;  :datatype-constructor-ax 3437
;  :datatype-occurs-check   1362
;  :datatype-splits         2556
;  :decisions               3225
;  :del-clause              1627
;  :final-checks            265
;  :interface-eqs           28
;  :max-generation          2
;  :max-memory              4.98
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             5737
;  :mk-clause               1711
;  :num-allocs              5426125
;  :num-checks              344
;  :propagations            1419
;  :quant-instantiations    379
;  :rlimit-count            300894)
; [eval] -1
(pop) ; 12
(push) ; 12
; [else-branch: 84 | First:(Second:(Second:(Second:($t@56@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15522
;  :arith-add-rows          493
;  :arith-assert-diseq      180
;  :arith-assert-lower      1017
;  :arith-assert-upper      868
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         556
;  :arith-offset-eqs        232
;  :arith-pivots            290
;  :binary-propagations     11
;  :conflicts               295
;  :datatype-accessor-ax    801
;  :datatype-constructor-ax 3437
;  :datatype-occurs-check   1362
;  :datatype-splits         2556
;  :decisions               3225
;  :del-clause              1627
;  :final-checks            265
;  :interface-eqs           28
;  :max-generation          2
;  :max-memory              4.98
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             5739
;  :mk-clause               1712
;  :num-allocs              5426125
;  :num-checks              345
;  :propagations            1419
;  :quant-instantiations    379
;  :rlimit-count            301453)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16019
;  :arith-add-rows          494
;  :arith-assert-diseq      181
;  :arith-assert-lower      1042
;  :arith-assert-upper      892
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        739
;  :arith-fixed-eqs         587
;  :arith-offset-eqs        253
;  :arith-pivots            294
;  :binary-propagations     11
;  :conflicts               298
;  :datatype-accessor-ax    819
;  :datatype-constructor-ax 3550
;  :datatype-occurs-check   1464
;  :datatype-splits         2611
;  :decisions               3328
;  :del-clause              1661
;  :final-checks            270
;  :interface-eqs           29
;  :max-generation          2
;  :max-memory              4.98
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             5850
;  :mk-clause               1746
;  :num-allocs              5426125
;  :num-checks              346
;  :propagations            1467
;  :quant-instantiations    385
;  :rlimit-count            304486
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16515
;  :arith-add-rows          495
;  :arith-assert-diseq      182
;  :arith-assert-lower      1066
;  :arith-assert-upper      917
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         617
;  :arith-offset-eqs        274
;  :arith-pivots            298
;  :binary-propagations     11
;  :conflicts               301
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 3663
;  :datatype-occurs-check   1566
;  :datatype-splits         2666
;  :decisions               3431
;  :del-clause              1695
;  :final-checks            275
;  :interface-eqs           30
;  :max-generation          2
;  :max-memory              4.98
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             5961
;  :mk-clause               1780
;  :num-allocs              5426125
;  :num-checks              347
;  :propagations            1515
;  :quant-instantiations    391
;  :rlimit-count            307524
;  :time                    0.00)
; [then-branch: 85 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2] | live]
; [else-branch: 85 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2]) | live]
(push) ; 10
; [then-branch: 85 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16516
;  :arith-add-rows          495
;  :arith-assert-diseq      182
;  :arith-assert-lower      1067
;  :arith-assert-upper      917
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         618
;  :arith-offset-eqs        274
;  :arith-pivots            298
;  :binary-propagations     11
;  :conflicts               301
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 3663
;  :datatype-occurs-check   1566
;  :datatype-splits         2666
;  :decisions               3431
;  :del-clause              1695
;  :final-checks            275
;  :interface-eqs           30
;  :max-generation          2
;  :max-memory              4.98
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             5962
;  :mk-clause               1780
;  :num-allocs              5426125
;  :num-checks              348
;  :propagations            1515
;  :quant-instantiations    391
;  :rlimit-count            307672)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 85 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16522
;  :arith-add-rows          495
;  :arith-assert-diseq      182
;  :arith-assert-lower      1067
;  :arith-assert-upper      917
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         618
;  :arith-offset-eqs        274
;  :arith-pivots            298
;  :binary-propagations     11
;  :conflicts               301
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 3663
;  :datatype-occurs-check   1566
;  :datatype-splits         2666
;  :decisions               3431
;  :del-clause              1695
;  :final-checks            275
;  :interface-eqs           30
;  :max-generation          2
;  :max-memory              4.98
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             5965
;  :mk-clause               1781
;  :num-allocs              5426125
;  :num-checks              349
;  :propagations            1515
;  :quant-instantiations    391
;  :rlimit-count            308265)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17059
;  :arith-add-rows          496
;  :arith-assert-diseq      183
;  :arith-assert-lower      1091
;  :arith-assert-upper      941
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        777
;  :arith-fixed-eqs         649
;  :arith-offset-eqs        295
;  :arith-pivots            302
;  :binary-propagations     11
;  :conflicts               306
;  :datatype-accessor-ax    858
;  :datatype-constructor-ax 3782
;  :datatype-occurs-check   1639
;  :datatype-splits         2725
;  :decisions               3538
;  :del-clause              1731
;  :final-checks            281
;  :interface-eqs           31
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          10
;  :mk-bool-var             6089
;  :mk-clause               1817
;  :num-allocs              5670354
;  :num-checks              350
;  :propagations            1563
;  :quant-instantiations    397
;  :rlimit-count            311423
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17569
;  :arith-add-rows          497
;  :arith-assert-diseq      184
;  :arith-assert-lower      1115
;  :arith-assert-upper      966
;  :arith-bound-prop        85
;  :arith-conflicts         28
;  :arith-eq-adapter        796
;  :arith-fixed-eqs         679
;  :arith-offset-eqs        316
;  :arith-pivots            306
;  :binary-propagations     11
;  :conflicts               309
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 3895
;  :datatype-occurs-check   1702
;  :datatype-splits         2780
;  :decisions               3641
;  :del-clause              1765
;  :final-checks            286
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          10
;  :mk-bool-var             6199
;  :mk-clause               1851
;  :num-allocs              6161090
;  :num-checks              351
;  :propagations            1611
;  :quant-instantiations    403
;  :rlimit-count            314473
;  :time                    0.00)
; [then-branch: 86 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2] | live]
; [else-branch: 86 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2]) | live]
(push) ; 10
; [then-branch: 86 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17571
;  :arith-add-rows          497
;  :arith-assert-diseq      184
;  :arith-assert-lower      1117
;  :arith-assert-upper      969
;  :arith-bound-prop        85
;  :arith-conflicts         29
;  :arith-eq-adapter        797
;  :arith-fixed-eqs         681
;  :arith-offset-eqs        316
;  :arith-pivots            306
;  :binary-propagations     11
;  :conflicts               310
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 3895
;  :datatype-occurs-check   1702
;  :datatype-splits         2780
;  :decisions               3641
;  :del-clause              1765
;  :final-checks            286
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6204
;  :mk-clause               1854
;  :num-allocs              6407673
;  :num-checks              352
;  :propagations            1615
;  :quant-instantiations    404
;  :rlimit-count            314727)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@45@04 $k@53@04) $k@58@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17571
;  :arith-add-rows          497
;  :arith-assert-diseq      184
;  :arith-assert-lower      1117
;  :arith-assert-upper      970
;  :arith-bound-prop        85
;  :arith-conflicts         30
;  :arith-eq-adapter        797
;  :arith-fixed-eqs         682
;  :arith-offset-eqs        316
;  :arith-pivots            306
;  :binary-propagations     11
;  :conflicts               311
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 3895
;  :datatype-occurs-check   1702
;  :datatype-splits         2780
;  :decisions               3641
;  :del-clause              1765
;  :final-checks            286
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6205
;  :mk-clause               1854
;  :num-allocs              6407673
;  :num-checks              353
;  :propagations            1615
;  :quant-instantiations    404
;  :rlimit-count            314807)
(pop) ; 10
(push) ; 10
; [else-branch: 86 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))
    $t@59@04)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17581
;  :arith-add-rows          498
;  :arith-assert-diseq      184
;  :arith-assert-lower      1117
;  :arith-assert-upper      971
;  :arith-bound-prop        85
;  :arith-conflicts         31
;  :arith-eq-adapter        797
;  :arith-fixed-eqs         683
;  :arith-offset-eqs        316
;  :arith-pivots            306
;  :binary-propagations     11
;  :conflicts               312
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 3895
;  :datatype-occurs-check   1702
;  :datatype-splits         2780
;  :decisions               3641
;  :del-clause              1768
;  :final-checks            286
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6208
;  :mk-clause               1855
;  :num-allocs              6407673
;  :num-checks              354
;  :propagations            1615
;  :quant-instantiations    404
;  :rlimit-count            315420)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  $t@63@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17581
;  :arith-add-rows          498
;  :arith-assert-diseq      184
;  :arith-assert-lower      1117
;  :arith-assert-upper      971
;  :arith-bound-prop        85
;  :arith-conflicts         31
;  :arith-eq-adapter        797
;  :arith-fixed-eqs         683
;  :arith-offset-eqs        316
;  :arith-pivots            306
;  :binary-propagations     11
;  :conflicts               312
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 3895
;  :datatype-occurs-check   1702
;  :datatype-splits         2780
;  :decisions               3641
;  :del-clause              1768
;  :final-checks            286
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6208
;  :mk-clause               1855
;  :num-allocs              6407673
;  :num-checks              355
;  :propagations            1615
;  :quant-instantiations    404
;  :rlimit-count            315431)
(push) ; 9
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 87 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17581
;  :arith-add-rows          498
;  :arith-assert-diseq      184
;  :arith-assert-lower      1117
;  :arith-assert-upper      971
;  :arith-bound-prop        85
;  :arith-conflicts         31
;  :arith-eq-adapter        797
;  :arith-fixed-eqs         683
;  :arith-offset-eqs        316
;  :arith-pivots            306
;  :binary-propagations     11
;  :conflicts               312
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 3895
;  :datatype-occurs-check   1702
;  :datatype-splits         2780
;  :decisions               3641
;  :del-clause              1768
;  :final-checks            286
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6208
;  :mk-clause               1855
;  :num-allocs              6407673
;  :num-checks              356
;  :propagations            1615
;  :quant-instantiations    404
;  :rlimit-count            315458)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 87 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18111
;  :arith-add-rows          503
;  :arith-assert-diseq      185
;  :arith-assert-lower      1141
;  :arith-assert-upper      997
;  :arith-bound-prop        86
;  :arith-conflicts         31
;  :arith-eq-adapter        817
;  :arith-fixed-eqs         715
;  :arith-offset-eqs        338
;  :arith-pivots            312
;  :binary-propagations     11
;  :conflicts               317
;  :datatype-accessor-ax    896
;  :datatype-constructor-ax 4013
;  :datatype-occurs-check   1774
;  :datatype-splits         2838
;  :decisions               3747
;  :del-clause              1806
;  :final-checks            292
;  :interface-eqs           33
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          10
;  :mk-bool-var             6335
;  :mk-clause               1893
;  :num-allocs              6656293
;  :num-checks              357
;  :propagations            1663
;  :quant-instantiations    410
;  :rlimit-count            318654
;  :time                    0.00)
(push) ; 10
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18615
;  :arith-add-rows          508
;  :arith-assert-diseq      186
;  :arith-assert-lower      1166
;  :arith-assert-upper      1023
;  :arith-bound-prop        87
;  :arith-conflicts         31
;  :arith-eq-adapter        837
;  :arith-fixed-eqs         747
;  :arith-offset-eqs        360
;  :arith-pivots            318
;  :binary-propagations     11
;  :conflicts               320
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 4125
;  :datatype-occurs-check   1836
;  :datatype-splits         2892
;  :decisions               3849
;  :del-clause              1842
;  :final-checks            297
;  :interface-eqs           34
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          10
;  :mk-bool-var             6448
;  :mk-clause               1929
;  :num-allocs              7155831
;  :num-checks              358
;  :propagations            1711
;  :quant-instantiations    416
;  :rlimit-count            321735
;  :time                    0.00)
; [then-branch: 88 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 88 | !(First:(Second:(Second:(Second:($t@56@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 88 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18618
;  :arith-add-rows          508
;  :arith-assert-diseq      186
;  :arith-assert-lower      1167
;  :arith-assert-upper      1026
;  :arith-bound-prop        87
;  :arith-conflicts         32
;  :arith-eq-adapter        838
;  :arith-fixed-eqs         748
;  :arith-offset-eqs        360
;  :arith-pivots            318
;  :binary-propagations     11
;  :conflicts               321
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 4125
;  :datatype-occurs-check   1836
;  :datatype-splits         2892
;  :decisions               3849
;  :del-clause              1842
;  :final-checks            297
;  :interface-eqs           34
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6453
;  :mk-clause               1932
;  :num-allocs              7406828
;  :num-checks              359
;  :propagations            1715
;  :quant-instantiations    417
;  :rlimit-count            321974)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@45@04 $k@53@04) $k@58@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18618
;  :arith-add-rows          508
;  :arith-assert-diseq      186
;  :arith-assert-lower      1167
;  :arith-assert-upper      1027
;  :arith-bound-prop        87
;  :arith-conflicts         33
;  :arith-eq-adapter        838
;  :arith-fixed-eqs         749
;  :arith-offset-eqs        360
;  :arith-pivots            318
;  :binary-propagations     11
;  :conflicts               322
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 4125
;  :datatype-occurs-check   1836
;  :datatype-splits         2892
;  :decisions               3849
;  :del-clause              1842
;  :final-checks            297
;  :interface-eqs           34
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6454
;  :mk-clause               1932
;  :num-allocs              7406828
;  :num-checks              360
;  :propagations            1715
;  :quant-instantiations    417
;  :rlimit-count            322054)
(pop) ; 10
(push) ; 10
; [else-branch: 88 | !(First:(Second:(Second:(Second:($t@56@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))))))
    $t@59@04)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@56@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) globals@10@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Controller_m, globals), write)
(declare-const $t@64@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19415
;  :arith-add-rows          516
;  :arith-assert-diseq      188
;  :arith-assert-lower      1210
;  :arith-assert-upper      1072
;  :arith-bound-prop        88
;  :arith-conflicts         33
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               325
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1908
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          10
;  :mk-bool-var             6650
;  :mk-clause               1994
;  :num-allocs              7661212
;  :num-checks              363
;  :propagations            1801
;  :quant-instantiations    429
;  :rlimit-count            327499)
; [eval] diz.Controller_m != null
; [eval] |diz.Controller_m.Main_process_state| == 2
; [eval] |diz.Controller_m.Main_process_state|
; [eval] |diz.Controller_m.Main_event_state| == 3
; [eval] |diz.Controller_m.Main_event_state|
; [eval] (forall i__29: Int :: { diz.Controller_m.Main_process_state[i__29] } 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|)
(declare-const i__29@65@04 Int)
(push) ; 9
; [eval] 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= i__29 && i__29 < |diz.Controller_m.Main_process_state|
; [eval] 0 <= i__29
(push) ; 10
; [then-branch: 89 | 0 <= i__29@65@04 | live]
; [else-branch: 89 | !(0 <= i__29@65@04) | live]
(push) ; 11
; [then-branch: 89 | 0 <= i__29@65@04]
(assert (<= 0 i__29@65@04))
; [eval] i__29 < |diz.Controller_m.Main_process_state|
; [eval] |diz.Controller_m.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 89 | !(0 <= i__29@65@04)]
(assert (not (<= 0 i__29@65@04)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 90 | i__29@65@04 < |First:(Second:(Second:(Second:($t@56@04))))| && 0 <= i__29@65@04 | live]
; [else-branch: 90 | !(i__29@65@04 < |First:(Second:(Second:(Second:($t@56@04))))| && 0 <= i__29@65@04) | live]
(push) ; 11
; [then-branch: 90 | i__29@65@04 < |First:(Second:(Second:(Second:($t@56@04))))| && 0 <= i__29@65@04]
(assert (and
  (<
    i__29@65@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
  (<= 0 i__29@65@04)))
; [eval] diz.Controller_m.Main_process_state[i__29] == -1 || 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__29] == -1
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 12
(assert (not (>= i__29@65@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19415
;  :arith-add-rows          516
;  :arith-assert-diseq      188
;  :arith-assert-lower      1211
;  :arith-assert-upper      1073
;  :arith-bound-prop        88
;  :arith-conflicts         33
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               325
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1908
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          10
;  :mk-bool-var             6652
;  :mk-clause               1994
;  :num-allocs              7661212
;  :num-checks              364
;  :propagations            1801
;  :quant-instantiations    429
;  :rlimit-count            327635)
; [eval] -1
(push) ; 12
; [then-branch: 91 | First:(Second:(Second:(Second:($t@56@04))))[i__29@65@04] == -1 | live]
; [else-branch: 91 | First:(Second:(Second:(Second:($t@56@04))))[i__29@65@04] != -1 | live]
(push) ; 13
; [then-branch: 91 | First:(Second:(Second:(Second:($t@56@04))))[i__29@65@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    i__29@65@04)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 91 | First:(Second:(Second:(Second:($t@56@04))))[i__29@65@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      i__29@65@04)
    (- 0 1))))
; [eval] 0 <= diz.Controller_m.Main_process_state[i__29] && diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= diz.Controller_m.Main_process_state[i__29]
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 14
(assert (not (>= i__29@65@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19415
;  :arith-add-rows          516
;  :arith-assert-diseq      189
;  :arith-assert-lower      1214
;  :arith-assert-upper      1074
;  :arith-bound-prop        88
;  :arith-conflicts         33
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               325
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1908
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          10
;  :mk-bool-var             6658
;  :mk-clause               1998
;  :num-allocs              7661212
;  :num-checks              365
;  :propagations            1803
;  :quant-instantiations    430
;  :rlimit-count            327867)
(push) ; 14
; [then-branch: 92 | 0 <= First:(Second:(Second:(Second:($t@56@04))))[i__29@65@04] | live]
; [else-branch: 92 | !(0 <= First:(Second:(Second:(Second:($t@56@04))))[i__29@65@04]) | live]
(push) ; 15
; [then-branch: 92 | 0 <= First:(Second:(Second:(Second:($t@56@04))))[i__29@65@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    i__29@65@04)))
; [eval] diz.Controller_m.Main_process_state[i__29] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__29]
(push) ; 16
(assert (not (>= i__29@65@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19415
;  :arith-add-rows          516
;  :arith-assert-diseq      189
;  :arith-assert-lower      1214
;  :arith-assert-upper      1074
;  :arith-bound-prop        88
;  :arith-conflicts         33
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               325
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1908
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          10
;  :mk-bool-var             6658
;  :mk-clause               1998
;  :num-allocs              7661212
;  :num-checks              366
;  :propagations            1803
;  :quant-instantiations    430
;  :rlimit-count            327981)
; [eval] |diz.Controller_m.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 92 | !(0 <= First:(Second:(Second:(Second:($t@56@04))))[i__29@65@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      i__29@65@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 90 | !(i__29@65@04 < |First:(Second:(Second:(Second:($t@56@04))))| && 0 <= i__29@65@04)]
(assert (not
  (and
    (<
      i__29@65@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    (<= 0 i__29@65@04))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i__29@65@04 Int)) (!
  (implies
    (and
      (<
        i__29@65@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      (<= 0 i__29@65@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
          i__29@65@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
            i__29@65@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
            i__29@65@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    i__29@65@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19415
;  :arith-add-rows          516
;  :arith-assert-diseq      191
;  :arith-assert-lower      1215
;  :arith-assert-upper      1075
;  :arith-bound-prop        88
;  :arith-conflicts         33
;  :arith-eq-adapter        873
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               326
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1926
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6666
;  :mk-clause               2012
;  :num-allocs              7916404
;  :num-checks              367
;  :propagations            1805
;  :quant-instantiations    431
;  :rlimit-count            328427)
(assert (forall ((i__29@65@04 Int)) (!
  (implies
    (and
      (<
        i__29@65@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      (<= 0 i__29@65@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
          i__29@65@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
            i__29@65@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
            i__29@65@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    i__29@65@04))
  :qid |prog.l<no position>|)))
(declare-const $k@66@04 $Perm)
(assert ($Perm.isReadVar $k@66@04 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@66@04 $Perm.No) (< $Perm.No $k@66@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19415
;  :arith-add-rows          516
;  :arith-assert-diseq      192
;  :arith-assert-lower      1217
;  :arith-assert-upper      1076
;  :arith-bound-prop        88
;  :arith-conflicts         33
;  :arith-eq-adapter        874
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               327
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1926
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6671
;  :mk-clause               2014
;  :num-allocs              7916404
;  :num-checks              368
;  :propagations            1806
;  :quant-instantiations    431
;  :rlimit-count            328988)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@45@04 $k@53@04) $k@58@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19416
;  :arith-add-rows          516
;  :arith-assert-diseq      192
;  :arith-assert-lower      1217
;  :arith-assert-upper      1077
;  :arith-bound-prop        88
;  :arith-conflicts         34
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               328
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1928
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6673
;  :mk-clause               2016
;  :num-allocs              7916404
;  :num-checks              369
;  :propagations            1807
;  :quant-instantiations    431
;  :rlimit-count            329068)
(assert (< $k@66@04 (+ (- $k@45@04 $k@53@04) $k@58@04)))
(assert (<= $Perm.No (- (+ (- $k@45@04 $k@53@04) $k@58@04) $k@66@04)))
(assert (<= (- (+ (- $k@45@04 $k@53@04) $k@58@04) $k@66@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@45@04 $k@53@04) $k@58@04) $k@66@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] 0 < diz.Controller_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@45@04 $k@53@04) $k@58@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19416
;  :arith-add-rows          518
;  :arith-assert-diseq      192
;  :arith-assert-lower      1219
;  :arith-assert-upper      1079
;  :arith-bound-prop        88
;  :arith-conflicts         35
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         797
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               329
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1928
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6677
;  :mk-clause               2016
;  :num-allocs              7916404
;  :num-checks              370
;  :propagations            1807
;  :quant-instantiations    431
;  :rlimit-count            329337)
(declare-const $k@67@04 $Perm)
(assert ($Perm.isReadVar $k@67@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@67@04 $Perm.No) (< $Perm.No $k@67@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19416
;  :arith-add-rows          518
;  :arith-assert-diseq      193
;  :arith-assert-lower      1221
;  :arith-assert-upper      1080
;  :arith-bound-prop        88
;  :arith-conflicts         35
;  :arith-eq-adapter        876
;  :arith-fixed-eqs         797
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1928
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6681
;  :mk-clause               2018
;  :num-allocs              7916404
;  :num-checks              371
;  :propagations            1808
;  :quant-instantiations    431
;  :rlimit-count            329535)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@46@04 $k@54@04) $k@60@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19417
;  :arith-add-rows          518
;  :arith-assert-diseq      193
;  :arith-assert-lower      1221
;  :arith-assert-upper      1081
;  :arith-bound-prop        88
;  :arith-conflicts         36
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         797
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               331
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1930
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6683
;  :mk-clause               2020
;  :num-allocs              7916404
;  :num-checks              372
;  :propagations            1809
;  :quant-instantiations    431
;  :rlimit-count            329615)
(assert (< $k@67@04 (+ (- $k@46@04 $k@54@04) $k@60@04)))
(assert (<= $Perm.No (- (+ (- $k@46@04 $k@54@04) $k@60@04) $k@67@04)))
(assert (<= (- (+ (- $k@46@04 $k@54@04) $k@60@04) $k@67@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@46@04 $k@54@04) $k@60@04) $k@67@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] diz.Controller_m.Main_sensor != null
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19417
;  :arith-add-rows          520
;  :arith-assert-diseq      193
;  :arith-assert-lower      1223
;  :arith-assert-upper      1083
;  :arith-bound-prop        88
;  :arith-conflicts         37
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         798
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               332
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1930
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6687
;  :mk-clause               2020
;  :num-allocs              7916404
;  :num-checks              373
;  :propagations            1809
;  :quant-instantiations    431
;  :rlimit-count            329884)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19417
;  :arith-add-rows          520
;  :arith-assert-diseq      193
;  :arith-assert-lower      1223
;  :arith-assert-upper      1084
;  :arith-bound-prop        88
;  :arith-conflicts         38
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         799
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               333
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1930
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6688
;  :mk-clause               2020
;  :num-allocs              7916404
;  :num-checks              374
;  :propagations            1809
;  :quant-instantiations    431
;  :rlimit-count            329965)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19417
;  :arith-add-rows          520
;  :arith-assert-diseq      193
;  :arith-assert-lower      1223
;  :arith-assert-upper      1084
;  :arith-bound-prop        88
;  :arith-conflicts         38
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         799
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               333
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1930
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6688
;  :mk-clause               2020
;  :num-allocs              7916404
;  :num-checks              375
;  :propagations            1809
;  :quant-instantiations    431
;  :rlimit-count            329978)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19417
;  :arith-add-rows          520
;  :arith-assert-diseq      193
;  :arith-assert-lower      1223
;  :arith-assert-upper      1085
;  :arith-bound-prop        88
;  :arith-conflicts         39
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         800
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               334
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1930
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6689
;  :mk-clause               2020
;  :num-allocs              7916404
;  :num-checks              376
;  :propagations            1809
;  :quant-instantiations    431
;  :rlimit-count            330059)
(declare-const $k@68@04 $Perm)
(assert ($Perm.isReadVar $k@68@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@68@04 $Perm.No) (< $Perm.No $k@68@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19417
;  :arith-add-rows          520
;  :arith-assert-diseq      194
;  :arith-assert-lower      1225
;  :arith-assert-upper      1086
;  :arith-bound-prop        88
;  :arith-conflicts         39
;  :arith-eq-adapter        878
;  :arith-fixed-eqs         800
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               335
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1930
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6693
;  :mk-clause               2022
;  :num-allocs              7916404
;  :num-checks              377
;  :propagations            1810
;  :quant-instantiations    431
;  :rlimit-count            330258)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@47@04 $k@55@04) $k@62@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19418
;  :arith-add-rows          520
;  :arith-assert-diseq      194
;  :arith-assert-lower      1225
;  :arith-assert-upper      1087
;  :arith-bound-prop        88
;  :arith-conflicts         40
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         800
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               336
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1932
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6695
;  :mk-clause               2024
;  :num-allocs              7916404
;  :num-checks              378
;  :propagations            1811
;  :quant-instantiations    431
;  :rlimit-count            330338)
(assert (< $k@68@04 (+ (- $k@47@04 $k@55@04) $k@62@04)))
(assert (<= $Perm.No (- (+ (- $k@47@04 $k@55@04) $k@62@04) $k@68@04)))
(assert (<= (- (+ (- $k@47@04 $k@55@04) $k@62@04) $k@68@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@47@04 $k@55@04) $k@62@04) $k@68@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] diz.Controller_m.Main_controller != null
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19418
;  :arith-add-rows          522
;  :arith-assert-diseq      194
;  :arith-assert-lower      1227
;  :arith-assert-upper      1089
;  :arith-bound-prop        88
;  :arith-conflicts         41
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         801
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               337
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1932
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6699
;  :mk-clause               2024
;  :num-allocs              7916404
;  :num-checks              379
;  :propagations            1811
;  :quant-instantiations    431
;  :rlimit-count            330607)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19418
;  :arith-add-rows          522
;  :arith-assert-diseq      194
;  :arith-assert-lower      1227
;  :arith-assert-upper      1090
;  :arith-bound-prop        88
;  :arith-conflicts         42
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         802
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               338
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1932
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6700
;  :mk-clause               2024
;  :num-allocs              7916404
;  :num-checks              380
;  :propagations            1811
;  :quant-instantiations    431
;  :rlimit-count            330688)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19418
;  :arith-add-rows          522
;  :arith-assert-diseq      194
;  :arith-assert-lower      1227
;  :arith-assert-upper      1090
;  :arith-bound-prop        88
;  :arith-conflicts         42
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         802
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               338
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1932
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6700
;  :mk-clause               2024
;  :num-allocs              7916404
;  :num-checks              381
;  :propagations            1811
;  :quant-instantiations    431
;  :rlimit-count            330701)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19418
;  :arith-add-rows          522
;  :arith-assert-diseq      194
;  :arith-assert-lower      1227
;  :arith-assert-upper      1091
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         803
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1932
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6701
;  :mk-clause               2024
;  :num-allocs              7916404
;  :num-checks              382
;  :propagations            1811
;  :quant-instantiations    431
;  :rlimit-count            330782)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  $t@63@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19418
;  :arith-add-rows          522
;  :arith-assert-diseq      194
;  :arith-assert-lower      1227
;  :arith-assert-upper      1091
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         803
;  :arith-offset-eqs        392
;  :arith-pivots            331
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    944
;  :datatype-constructor-ax 4294
;  :datatype-occurs-check   1946
;  :datatype-splits         3000
;  :decisions               4004
;  :del-clause              1932
;  :final-checks            306
;  :interface-eqs           36
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.98
;  :minimized-lits          10
;  :mk-bool-var             6701
;  :mk-clause               2024
;  :num-allocs              7916404
;  :num-checks              383
;  :propagations            1811
;  :quant-instantiations    431
;  :rlimit-count            330793)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19712
;  :arith-add-rows          524
;  :arith-assert-diseq      195
;  :arith-assert-lower      1245
;  :arith-assert-upper      1110
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        892
;  :arith-fixed-eqs         818
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1957
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6783
;  :mk-clause               2049
;  :num-allocs              8175378
;  :num-checks              384
;  :propagations            1848
;  :quant-instantiations    438
;  :rlimit-count            332912
;  :time                    0.00)
; [eval] diz.Controller_m.Main_process_state[0] == -1 || diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0] == -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19712
;  :arith-add-rows          524
;  :arith-assert-diseq      195
;  :arith-assert-lower      1245
;  :arith-assert-upper      1110
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        892
;  :arith-fixed-eqs         818
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1957
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6783
;  :mk-clause               2049
;  :num-allocs              8175378
;  :num-checks              385
;  :propagations            1848
;  :quant-instantiations    438
;  :rlimit-count            332927)
; [eval] -1
(push) ; 9
; [then-branch: 93 | First:(Second:(Second:(Second:($t@56@04))))[0] == -1 | live]
; [else-branch: 93 | First:(Second:(Second:(Second:($t@56@04))))[0] != -1 | live]
(push) ; 10
; [then-branch: 93 | First:(Second:(Second:(Second:($t@56@04))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    0)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 93 | First:(Second:(Second:(Second:($t@56@04))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      0)
    (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19713
;  :arith-add-rows          524
;  :arith-assert-diseq      195
;  :arith-assert-lower      1246
;  :arith-assert-upper      1112
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        893
;  :arith-fixed-eqs         818
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1957
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6787
;  :mk-clause               2052
;  :num-allocs              8175378
;  :num-checks              386
;  :propagations            1851
;  :quant-instantiations    440
;  :rlimit-count            333158)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_process_state[1] == -1 || diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19713
;  :arith-add-rows          524
;  :arith-assert-diseq      195
;  :arith-assert-lower      1246
;  :arith-assert-upper      1112
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        893
;  :arith-fixed-eqs         818
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1960
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6787
;  :mk-clause               2052
;  :num-allocs              8175378
;  :num-checks              387
;  :propagations            1851
;  :quant-instantiations    440
;  :rlimit-count            333173)
; [eval] -1
(push) ; 9
; [then-branch: 94 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1 | live]
; [else-branch: 94 | First:(Second:(Second:(Second:($t@56@04))))[1] != -1 | live]
(push) ; 10
; [then-branch: 94 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    1)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 94 | First:(Second:(Second:(Second:($t@56@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19715
;  :arith-add-rows          524
;  :arith-assert-diseq      196
;  :arith-assert-lower      1250
;  :arith-assert-upper      1114
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        895
;  :arith-fixed-eqs         818
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1960
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6794
;  :mk-clause               2056
;  :num-allocs              8175378
;  :num-checks              388
;  :propagations            1854
;  :quant-instantiations    442
;  :rlimit-count            333368)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_event_state[0] != -1
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19715
;  :arith-add-rows          524
;  :arith-assert-diseq      196
;  :arith-assert-lower      1250
;  :arith-assert-upper      1114
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        895
;  :arith-fixed-eqs         818
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1964
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6794
;  :mk-clause               2056
;  :num-allocs              8175378
;  :num-checks              389
;  :propagations            1854
;  :quant-instantiations    442
;  :rlimit-count            333383)
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[0] != 0
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19715
;  :arith-add-rows          524
;  :arith-assert-diseq      196
;  :arith-assert-lower      1250
;  :arith-assert-upper      1114
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        895
;  :arith-fixed-eqs         818
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1964
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6794
;  :mk-clause               2056
;  :num-allocs              8175378
;  :num-checks              390
;  :propagations            1854
;  :quant-instantiations    442
;  :rlimit-count            333398)
; [eval] diz.Controller_m.Main_event_state[2] <= -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19715
;  :arith-add-rows          524
;  :arith-assert-diseq      196
;  :arith-assert-lower      1250
;  :arith-assert-upper      1114
;  :arith-bound-prop        88
;  :arith-conflicts         43
;  :arith-eq-adapter        895
;  :arith-fixed-eqs         818
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               339
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1964
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6794
;  :mk-clause               2056
;  :num-allocs              8175378
;  :num-checks              391
;  :propagations            1854
;  :quant-instantiations    442
;  :rlimit-count            333413)
; [eval] -1
; [eval] !diz.Controller_m.Main_controller.Controller_init || (diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1)
; [eval] !diz.Controller_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19715
;  :arith-add-rows          524
;  :arith-assert-diseq      196
;  :arith-assert-lower      1250
;  :arith-assert-upper      1115
;  :arith-bound-prop        88
;  :arith-conflicts         44
;  :arith-eq-adapter        895
;  :arith-fixed-eqs         819
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               340
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1964
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.00
;  :minimized-lits          10
;  :mk-bool-var             6795
;  :mk-clause               2056
;  :num-allocs              8435123
;  :num-checks              392
;  :propagations            1854
;  :quant-instantiations    442
;  :rlimit-count            333494)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  $t@63@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19715
;  :arith-add-rows          524
;  :arith-assert-diseq      196
;  :arith-assert-lower      1250
;  :arith-assert-upper      1115
;  :arith-bound-prop        88
;  :arith-conflicts         44
;  :arith-eq-adapter        895
;  :arith-fixed-eqs         819
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               340
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1964
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.00
;  :minimized-lits          10
;  :mk-bool-var             6795
;  :mk-clause               2056
;  :num-allocs              8435123
;  :num-checks              393
;  :propagations            1854
;  :quant-instantiations    442
;  :rlimit-count            333505)
(push) ; 9
; [then-branch: 95 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
; [else-branch: 95 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
(push) ; 10
; [then-branch: 95 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 95 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; [eval] diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19715
;  :arith-add-rows          524
;  :arith-assert-diseq      196
;  :arith-assert-lower      1250
;  :arith-assert-upper      1115
;  :arith-bound-prop        88
;  :arith-conflicts         44
;  :arith-eq-adapter        895
;  :arith-fixed-eqs         819
;  :arith-offset-eqs        403
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               340
;  :datatype-accessor-ax    956
;  :datatype-constructor-ax 4351
;  :datatype-occurs-check   1994
;  :datatype-splits         3054
;  :decisions               4057
;  :del-clause              1964
;  :final-checks            310
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.00
;  :minimized-lits          10
;  :mk-bool-var             6795
;  :mk-clause               2056
;  :num-allocs              8435123
;  :num-checks              394
;  :propagations            1854
;  :quant-instantiations    442
;  :rlimit-count            333540)
; [eval] -1
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20102
;  :arith-add-rows          527
;  :arith-assert-diseq      198
;  :arith-assert-lower      1271
;  :arith-assert-upper      1134
;  :arith-bound-prop        89
;  :arith-conflicts         44
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        417
;  :arith-pivots            344
;  :binary-propagations     11
;  :conflicts               344
;  :datatype-accessor-ax    973
;  :datatype-constructor-ax 4432
;  :datatype-occurs-check   2082
;  :datatype-splits         3112
;  :decisions               4128
;  :del-clause              2001
;  :final-checks            315
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :minimized-lits          10
;  :mk-bool-var             6901
;  :mk-clause               2093
;  :num-allocs              8696536
;  :num-checks              395
;  :propagations            1897
;  :quant-instantiations    450
;  :rlimit-count            336179
;  :time                    0.00)
(push) ; 12
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20396
;  :arith-add-rows          530
;  :arith-assert-diseq      199
;  :arith-assert-lower      1289
;  :arith-assert-upper      1153
;  :arith-bound-prop        89
;  :arith-conflicts         44
;  :arith-eq-adapter        926
;  :arith-fixed-eqs         853
;  :arith-offset-eqs        428
;  :arith-pivots            351
;  :binary-propagations     11
;  :conflicts               344
;  :datatype-accessor-ax    985
;  :datatype-constructor-ax 4489
;  :datatype-occurs-check   2130
;  :datatype-splits         3166
;  :decisions               4181
;  :del-clause              2026
;  :final-checks            319
;  :interface-eqs           39
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.01
;  :minimized-lits          10
;  :mk-bool-var             6983
;  :mk-clause               2118
;  :num-allocs              8958346
;  :num-checks              396
;  :propagations            1933
;  :quant-instantiations    457
;  :rlimit-count            338425
;  :time                    0.00)
; [then-branch: 96 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1 | live]
; [else-branch: 96 | First:(Second:(Second:(Second:($t@56@04))))[1] != -1 | live]
(push) ; 12
; [then-branch: 96 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
    1)
  (- 0 1)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20400
;  :arith-add-rows          531
;  :arith-assert-diseq      199
;  :arith-assert-lower      1291
;  :arith-assert-upper      1155
;  :arith-bound-prop        89
;  :arith-conflicts         44
;  :arith-eq-adapter        927
;  :arith-fixed-eqs         853
;  :arith-offset-eqs        428
;  :arith-pivots            352
;  :binary-propagations     11
;  :conflicts               344
;  :datatype-accessor-ax    985
;  :datatype-constructor-ax 4489
;  :datatype-occurs-check   2130
;  :datatype-splits         3166
;  :decisions               4181
;  :del-clause              2026
;  :final-checks            319
;  :interface-eqs           39
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.01
;  :minimized-lits          10
;  :mk-bool-var             6988
;  :mk-clause               2121
;  :num-allocs              8958346
;  :num-checks              397
;  :propagations            1938
;  :quant-instantiations    460
;  :rlimit-count            338669)
; [eval] -1
(pop) ; 12
(push) ; 12
; [else-branch: 96 | First:(Second:(Second:(Second:($t@56@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20400
;  :arith-add-rows          531
;  :arith-assert-diseq      199
;  :arith-assert-lower      1291
;  :arith-assert-upper      1155
;  :arith-bound-prop        89
;  :arith-conflicts         44
;  :arith-eq-adapter        927
;  :arith-fixed-eqs         853
;  :arith-offset-eqs        428
;  :arith-pivots            352
;  :binary-propagations     11
;  :conflicts               344
;  :datatype-accessor-ax    985
;  :datatype-constructor-ax 4489
;  :datatype-occurs-check   2130
;  :datatype-splits         3166
;  :decisions               4181
;  :del-clause              2029
;  :final-checks            319
;  :interface-eqs           39
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.01
;  :minimized-lits          10
;  :mk-bool-var             6988
;  :mk-clause               2121
;  :num-allocs              8958346
;  :num-checks              398
;  :propagations            1938
;  :quant-instantiations    460
;  :rlimit-count            338712)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21829
;  :arith-add-rows          620
;  :arith-assert-diseq      211
;  :arith-assert-lower      1366
;  :arith-assert-upper      1219
;  :arith-bound-prop        99
;  :arith-conflicts         46
;  :arith-eq-adapter        990
;  :arith-fixed-eqs         906
;  :arith-offset-eqs        468
;  :arith-pivots            370
;  :binary-propagations     11
;  :conflicts               360
;  :datatype-accessor-ax    1062
;  :datatype-constructor-ax 4817
;  :datatype-occurs-check   2417
;  :datatype-splits         3434
;  :decisions               4460
;  :del-clause              2166
;  :final-checks            333
;  :interface-eqs           42
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             7404
;  :mk-clause               2258
;  :num-allocs              9225208
;  :num-checks              399
;  :propagations            2092
;  :quant-instantiations    478
;  :rlimit-count            346919
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22134
;  :arith-add-rows          680
;  :arith-assert-diseq      212
;  :arith-assert-lower      1384
;  :arith-assert-upper      1238
;  :arith-bound-prop        110
;  :arith-conflicts         46
;  :arith-eq-adapter        1003
;  :arith-fixed-eqs         925
;  :arith-offset-eqs        486
;  :arith-pivots            384
;  :binary-propagations     11
;  :conflicts               360
;  :datatype-accessor-ax    1074
;  :datatype-constructor-ax 4874
;  :datatype-occurs-check   2465
;  :datatype-splits         3488
;  :decisions               4513
;  :del-clause              2203
;  :final-checks            337
;  :interface-eqs           43
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             7498
;  :mk-clause               2295
;  :num-allocs              9225208
;  :num-checks              400
;  :propagations            2122
;  :quant-instantiations    485
;  :rlimit-count            349976
;  :time                    0.00)
; [then-branch: 97 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2] | live]
; [else-branch: 97 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2]) | live]
(push) ; 10
; [then-branch: 97 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2)))
; [eval] diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22137
;  :arith-add-rows          681
;  :arith-assert-diseq      212
;  :arith-assert-lower      1387
;  :arith-assert-upper      1240
;  :arith-bound-prop        110
;  :arith-conflicts         46
;  :arith-eq-adapter        1004
;  :arith-fixed-eqs         926
;  :arith-offset-eqs        486
;  :arith-pivots            385
;  :binary-propagations     11
;  :conflicts               360
;  :datatype-accessor-ax    1074
;  :datatype-constructor-ax 4874
;  :datatype-occurs-check   2465
;  :datatype-splits         3488
;  :decisions               4513
;  :del-clause              2203
;  :final-checks            337
;  :interface-eqs           43
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             7503
;  :mk-clause               2298
;  :num-allocs              9225208
;  :num-checks              401
;  :propagations            2127
;  :quant-instantiations    488
;  :rlimit-count            350236)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 97 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22137
;  :arith-add-rows          681
;  :arith-assert-diseq      212
;  :arith-assert-lower      1387
;  :arith-assert-upper      1240
;  :arith-bound-prop        110
;  :arith-conflicts         46
;  :arith-eq-adapter        1004
;  :arith-fixed-eqs         926
;  :arith-offset-eqs        486
;  :arith-pivots            385
;  :binary-propagations     11
;  :conflicts               360
;  :datatype-accessor-ax    1074
;  :datatype-constructor-ax 4874
;  :datatype-occurs-check   2465
;  :datatype-splits         3488
;  :decisions               4513
;  :del-clause              2206
;  :final-checks            337
;  :interface-eqs           43
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             7503
;  :mk-clause               2298
;  :num-allocs              9225208
;  :num-checks              402
;  :propagations            2127
;  :quant-instantiations    488
;  :rlimit-count            350283)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23554
;  :arith-add-rows          785
;  :arith-assert-diseq      224
;  :arith-assert-lower      1462
;  :arith-assert-upper      1304
;  :arith-bound-prop        120
;  :arith-conflicts         48
;  :arith-eq-adapter        1067
;  :arith-fixed-eqs         972
;  :arith-offset-eqs        521
;  :arith-pivots            406
;  :binary-propagations     11
;  :conflicts               376
;  :datatype-accessor-ax    1151
;  :datatype-constructor-ax 5202
;  :datatype-occurs-check   2752
;  :datatype-splits         3756
;  :decisions               4792
;  :del-clause              2343
;  :final-checks            351
;  :interface-eqs           46
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             7919
;  :mk-clause               2435
;  :num-allocs              9225208
;  :num-checks              403
;  :propagations            2281
;  :quant-instantiations    506
;  :rlimit-count            358719
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23859
;  :arith-add-rows          845
;  :arith-assert-diseq      225
;  :arith-assert-lower      1480
;  :arith-assert-upper      1323
;  :arith-bound-prop        131
;  :arith-conflicts         48
;  :arith-eq-adapter        1080
;  :arith-fixed-eqs         991
;  :arith-offset-eqs        539
;  :arith-pivots            420
;  :binary-propagations     11
;  :conflicts               376
;  :datatype-accessor-ax    1163
;  :datatype-constructor-ax 5259
;  :datatype-occurs-check   2800
;  :datatype-splits         3810
;  :decisions               4845
;  :del-clause              2380
;  :final-checks            355
;  :interface-eqs           47
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8013
;  :mk-clause               2472
;  :num-allocs              9225208
;  :num-checks              404
;  :propagations            2311
;  :quant-instantiations    513
;  :rlimit-count            361777
;  :time                    0.00)
; [then-branch: 98 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2] | live]
; [else-branch: 98 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2]) | live]
(push) ; 10
; [then-branch: 98 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
    2)))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23862
;  :arith-add-rows          846
;  :arith-assert-diseq      225
;  :arith-assert-lower      1483
;  :arith-assert-upper      1326
;  :arith-bound-prop        131
;  :arith-conflicts         49
;  :arith-eq-adapter        1081
;  :arith-fixed-eqs         993
;  :arith-offset-eqs        539
;  :arith-pivots            421
;  :binary-propagations     11
;  :conflicts               377
;  :datatype-accessor-ax    1163
;  :datatype-constructor-ax 5259
;  :datatype-occurs-check   2800
;  :datatype-splits         3810
;  :decisions               4845
;  :del-clause              2380
;  :final-checks            355
;  :interface-eqs           47
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8019
;  :mk-clause               2475
;  :num-allocs              9225208
;  :num-checks              405
;  :propagations            2316
;  :quant-instantiations    516
;  :rlimit-count            362103)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@45@04 $k@53@04) $k@58@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23862
;  :arith-add-rows          846
;  :arith-assert-diseq      225
;  :arith-assert-lower      1483
;  :arith-assert-upper      1327
;  :arith-bound-prop        131
;  :arith-conflicts         50
;  :arith-eq-adapter        1081
;  :arith-fixed-eqs         994
;  :arith-offset-eqs        539
;  :arith-pivots            421
;  :binary-propagations     11
;  :conflicts               378
;  :datatype-accessor-ax    1163
;  :datatype-constructor-ax 5259
;  :datatype-occurs-check   2800
;  :datatype-splits         3810
;  :decisions               4845
;  :del-clause              2380
;  :final-checks            355
;  :interface-eqs           47
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8020
;  :mk-clause               2475
;  :num-allocs              9225208
;  :num-checks              406
;  :propagations            2316
;  :quant-instantiations    516
;  :rlimit-count            362184)
(pop) ; 10
(push) ; 10
; [else-branch: 98 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@56@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23862
;  :arith-add-rows          846
;  :arith-assert-diseq      225
;  :arith-assert-lower      1483
;  :arith-assert-upper      1328
;  :arith-bound-prop        131
;  :arith-conflicts         51
;  :arith-eq-adapter        1081
;  :arith-fixed-eqs         995
;  :arith-offset-eqs        539
;  :arith-pivots            421
;  :binary-propagations     11
;  :conflicts               379
;  :datatype-accessor-ax    1163
;  :datatype-constructor-ax 5259
;  :datatype-occurs-check   2800
;  :datatype-splits         3810
;  :decisions               4845
;  :del-clause              2383
;  :final-checks            355
;  :interface-eqs           47
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8021
;  :mk-clause               2475
;  :num-allocs              9225208
;  :num-checks              407
;  :propagations            2316
;  :quant-instantiations    516
;  :rlimit-count            362297)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))
  $t@63@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23862
;  :arith-add-rows          846
;  :arith-assert-diseq      225
;  :arith-assert-lower      1483
;  :arith-assert-upper      1328
;  :arith-bound-prop        131
;  :arith-conflicts         51
;  :arith-eq-adapter        1081
;  :arith-fixed-eqs         995
;  :arith-offset-eqs        539
;  :arith-pivots            421
;  :binary-propagations     11
;  :conflicts               379
;  :datatype-accessor-ax    1163
;  :datatype-constructor-ax 5259
;  :datatype-occurs-check   2800
;  :datatype-splits         3810
;  :decisions               4845
;  :del-clause              2383
;  :final-checks            355
;  :interface-eqs           47
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8021
;  :mk-clause               2475
;  :num-allocs              9225208
;  :num-checks              408
;  :propagations            2316
;  :quant-instantiations    516
;  :rlimit-count            362308)
(push) ; 9
; [then-branch: 99 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 99 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 99 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23862
;  :arith-add-rows          846
;  :arith-assert-diseq      225
;  :arith-assert-lower      1483
;  :arith-assert-upper      1328
;  :arith-bound-prop        131
;  :arith-conflicts         51
;  :arith-eq-adapter        1081
;  :arith-fixed-eqs         995
;  :arith-offset-eqs        539
;  :arith-pivots            421
;  :binary-propagations     11
;  :conflicts               379
;  :datatype-accessor-ax    1163
;  :datatype-constructor-ax 5259
;  :datatype-occurs-check   2800
;  :datatype-splits         3810
;  :decisions               4845
;  :del-clause              2383
;  :final-checks            355
;  :interface-eqs           47
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8021
;  :mk-clause               2475
;  :num-allocs              9225208
;  :num-checks              409
;  :propagations            2316
;  :quant-instantiations    516
;  :rlimit-count            362335)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 99 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24237
;  :arith-add-rows          863
;  :arith-assert-diseq      227
;  :arith-assert-lower      1504
;  :arith-assert-upper      1347
;  :arith-bound-prop        132
;  :arith-conflicts         51
;  :arith-eq-adapter        1099
;  :arith-fixed-eqs         1007
;  :arith-offset-eqs        548
;  :arith-pivots            430
;  :binary-propagations     11
;  :conflicts               383
;  :datatype-accessor-ax    1180
;  :datatype-constructor-ax 5340
;  :datatype-occurs-check   2888
;  :datatype-splits         3868
;  :decisions               4916
;  :del-clause              2420
;  :final-checks            360
;  :interface-eqs           48
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8127
;  :mk-clause               2512
;  :num-allocs              9225208
;  :num-checks              410
;  :propagations            2359
;  :quant-instantiations    524
;  :rlimit-count            365180
;  :time                    0.00)
(push) ; 10
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24531
;  :arith-add-rows          866
;  :arith-assert-diseq      228
;  :arith-assert-lower      1522
;  :arith-assert-upper      1366
;  :arith-bound-prop        132
;  :arith-conflicts         51
;  :arith-eq-adapter        1112
;  :arith-fixed-eqs         1022
;  :arith-offset-eqs        559
;  :arith-pivots            437
;  :binary-propagations     11
;  :conflicts               383
;  :datatype-accessor-ax    1192
;  :datatype-constructor-ax 5397
;  :datatype-occurs-check   2936
;  :datatype-splits         3922
;  :decisions               4969
;  :del-clause              2445
;  :final-checks            364
;  :interface-eqs           49
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8209
;  :mk-clause               2537
;  :num-allocs              9225208
;  :num-checks              411
;  :propagations            2395
;  :quant-instantiations    531
;  :rlimit-count            367428
;  :time                    0.00)
; [then-branch: 100 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 100 | !(First:(Second:(Second:(Second:($t@56@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 100 | First:(Second:(Second:(Second:($t@56@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@46@04 $k@54@04) $k@60@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24535
;  :arith-add-rows          867
;  :arith-assert-diseq      228
;  :arith-assert-lower      1524
;  :arith-assert-upper      1369
;  :arith-bound-prop        132
;  :arith-conflicts         52
;  :arith-eq-adapter        1113
;  :arith-fixed-eqs         1023
;  :arith-offset-eqs        559
;  :arith-pivots            438
;  :binary-propagations     11
;  :conflicts               384
;  :datatype-accessor-ax    1192
;  :datatype-constructor-ax 5397
;  :datatype-occurs-check   2936
;  :datatype-splits         3922
;  :decisions               4969
;  :del-clause              2445
;  :final-checks            364
;  :interface-eqs           49
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8215
;  :mk-clause               2540
;  :num-allocs              9225208
;  :num-checks              412
;  :propagations            2400
;  :quant-instantiations    534
;  :rlimit-count            367739)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@45@04 $k@53@04) $k@58@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24535
;  :arith-add-rows          867
;  :arith-assert-diseq      228
;  :arith-assert-lower      1524
;  :arith-assert-upper      1370
;  :arith-bound-prop        132
;  :arith-conflicts         53
;  :arith-eq-adapter        1113
;  :arith-fixed-eqs         1024
;  :arith-offset-eqs        559
;  :arith-pivots            438
;  :binary-propagations     11
;  :conflicts               385
;  :datatype-accessor-ax    1192
;  :datatype-constructor-ax 5397
;  :datatype-occurs-check   2936
;  :datatype-splits         3922
;  :decisions               4969
;  :del-clause              2445
;  :final-checks            364
;  :interface-eqs           49
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8216
;  :mk-clause               2540
;  :num-allocs              9225208
;  :num-checks              413
;  :propagations            2400
;  :quant-instantiations    534
;  :rlimit-count            367820)
(pop) ; 10
(push) ; 10
; [else-branch: 100 | !(First:(Second:(Second:(Second:($t@56@04))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@04)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Controller_m.Main_controller == diz
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@47@04 $k@55@04) $k@62@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24535
;  :arith-add-rows          867
;  :arith-assert-diseq      228
;  :arith-assert-lower      1524
;  :arith-assert-upper      1371
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1113
;  :arith-fixed-eqs         1025
;  :arith-offset-eqs        559
;  :arith-pivots            438
;  :binary-propagations     11
;  :conflicts               386
;  :datatype-accessor-ax    1192
;  :datatype-constructor-ax 5397
;  :datatype-occurs-check   2936
;  :datatype-splits         3922
;  :decisions               4969
;  :del-clause              2448
;  :final-checks            364
;  :interface-eqs           49
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8217
;  :mk-clause               2540
;  :num-allocs              9225208
;  :num-checks              414
;  :propagations            2400
;  :quant-instantiations    534
;  :rlimit-count            367931)
(set-option :timeout 0)
(push) ; 9
(assert (not (= $t@63@04 diz@9@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24535
;  :arith-add-rows          867
;  :arith-assert-diseq      228
;  :arith-assert-lower      1524
;  :arith-assert-upper      1371
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1113
;  :arith-fixed-eqs         1025
;  :arith-offset-eqs        559
;  :arith-pivots            438
;  :binary-propagations     11
;  :conflicts               386
;  :datatype-accessor-ax    1192
;  :datatype-constructor-ax 5397
;  :datatype-occurs-check   2936
;  :datatype-splits         3922
;  :decisions               4969
;  :del-clause              2448
;  :final-checks            364
;  :interface-eqs           49
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8217
;  :mk-clause               2540
;  :num-allocs              9225208
;  :num-checks              415
;  :propagations            2400
;  :quant-instantiations    534
;  :rlimit-count            367942)
(assert (= $t@63@04 diz@9@04))
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24535
;  :arith-add-rows          867
;  :arith-assert-diseq      228
;  :arith-assert-lower      1524
;  :arith-assert-upper      1371
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1113
;  :arith-fixed-eqs         1025
;  :arith-offset-eqs        559
;  :arith-pivots            438
;  :binary-propagations     11
;  :conflicts               386
;  :datatype-accessor-ax    1192
;  :datatype-constructor-ax 5397
;  :datatype-occurs-check   2936
;  :datatype-splits         3922
;  :decisions               4969
;  :del-clause              2448
;  :final-checks            364
;  :interface-eqs           49
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8217
;  :mk-clause               2540
;  :num-allocs              9225208
;  :num-checks              416
;  :propagations            2400
;  :quant-instantiations    534
;  :rlimit-count            367958)
(push) ; 9
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24535
;  :arith-add-rows          867
;  :arith-assert-diseq      228
;  :arith-assert-lower      1524
;  :arith-assert-upper      1371
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1113
;  :arith-fixed-eqs         1025
;  :arith-offset-eqs        559
;  :arith-pivots            438
;  :binary-propagations     11
;  :conflicts               386
;  :datatype-accessor-ax    1192
;  :datatype-constructor-ax 5397
;  :datatype-occurs-check   2936
;  :datatype-splits         3922
;  :decisions               4969
;  :del-clause              2448
;  :final-checks            364
;  :interface-eqs           49
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8217
;  :mk-clause               2540
;  :num-allocs              9225208
;  :num-checks              417
;  :propagations            2400
;  :quant-instantiations    534
;  :rlimit-count            367967)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 64 | !(First:(Second:(Second:(Second:($t@43@04))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
          2)
        (- 0 2))))))
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24783
;  :arith-add-rows          868
;  :arith-assert-diseq      229
;  :arith-assert-lower      1539
;  :arith-assert-upper      1386
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1124
;  :arith-fixed-eqs         1039
;  :arith-offset-eqs        569
;  :arith-pivots            450
;  :binary-propagations     11
;  :conflicts               387
;  :datatype-accessor-ax    1202
;  :datatype-constructor-ax 5451
;  :datatype-occurs-check   2956
;  :datatype-splits         3967
;  :decisions               5020
;  :del-clause              2493
;  :final-checks            368
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8288
;  :mk-clause               2561
;  :num-allocs              9225208
;  :num-checks              418
;  :propagations            2428
;  :quant-instantiations    538
;  :rlimit-count            369892
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25031
;  :arith-add-rows          869
;  :arith-assert-diseq      230
;  :arith-assert-lower      1554
;  :arith-assert-upper      1401
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1135
;  :arith-fixed-eqs         1053
;  :arith-offset-eqs        579
;  :arith-pivots            454
;  :binary-propagations     11
;  :conflicts               388
;  :datatype-accessor-ax    1212
;  :datatype-constructor-ax 5505
;  :datatype-occurs-check   2976
;  :datatype-splits         4012
;  :decisions               5071
;  :del-clause              2514
;  :final-checks            372
;  :interface-eqs           51
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8359
;  :mk-clause               2582
;  :num-allocs              9225208
;  :num-checks              419
;  :propagations            2456
;  :quant-instantiations    542
;  :rlimit-count            371735
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25279
;  :arith-add-rows          870
;  :arith-assert-diseq      231
;  :arith-assert-lower      1569
;  :arith-assert-upper      1416
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1146
;  :arith-fixed-eqs         1067
;  :arith-offset-eqs        589
;  :arith-pivots            458
;  :binary-propagations     11
;  :conflicts               389
;  :datatype-accessor-ax    1222
;  :datatype-constructor-ax 5559
;  :datatype-occurs-check   2996
;  :datatype-splits         4057
;  :decisions               5122
;  :del-clause              2535
;  :final-checks            376
;  :interface-eqs           52
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8430
;  :mk-clause               2603
;  :num-allocs              9225208
;  :num-checks              420
;  :propagations            2484
;  :quant-instantiations    546
;  :rlimit-count            373579
;  :time                    0.00)
; [eval] !(diz.Controller_m.Main_process_state[1] != -1 || diz.Controller_m.Main_event_state[2] != -2)
; [eval] diz.Controller_m.Main_process_state[1] != -1 || diz.Controller_m.Main_event_state[2] != -2
; [eval] diz.Controller_m.Main_process_state[1] != -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25279
;  :arith-add-rows          870
;  :arith-assert-diseq      231
;  :arith-assert-lower      1569
;  :arith-assert-upper      1416
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1146
;  :arith-fixed-eqs         1067
;  :arith-offset-eqs        589
;  :arith-pivots            458
;  :binary-propagations     11
;  :conflicts               389
;  :datatype-accessor-ax    1222
;  :datatype-constructor-ax 5559
;  :datatype-occurs-check   2996
;  :datatype-splits         4057
;  :decisions               5122
;  :del-clause              2535
;  :final-checks            376
;  :interface-eqs           52
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8430
;  :mk-clause               2603
;  :num-allocs              9225208
;  :num-checks              421
;  :propagations            2484
;  :quant-instantiations    546
;  :rlimit-count            373594)
; [eval] -1
(push) ; 8
; [then-branch: 101 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 | live]
; [else-branch: 101 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1 | live]
(push) ; 9
; [then-branch: 101 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
      1)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 101 | First:(Second:(Second:(Second:($t@43@04))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1)
  (- 0 1)))
; [eval] diz.Controller_m.Main_event_state[2] != -2
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25283
;  :arith-add-rows          872
;  :arith-assert-diseq      231
;  :arith-assert-lower      1571
;  :arith-assert-upper      1418
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1147
;  :arith-fixed-eqs         1067
;  :arith-offset-eqs        589
;  :arith-pivots            459
;  :binary-propagations     11
;  :conflicts               389
;  :datatype-accessor-ax    1222
;  :datatype-constructor-ax 5559
;  :datatype-occurs-check   2996
;  :datatype-splits         4057
;  :decisions               5122
;  :del-clause              2535
;  :final-checks            376
;  :interface-eqs           52
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8435
;  :mk-clause               2606
;  :num-allocs              9225208
;  :num-checks              422
;  :propagations            2489
;  :quant-instantiations    548
;  :rlimit-count            373855)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25545
;  :arith-add-rows          875
;  :arith-assert-diseq      233
;  :arith-assert-lower      1587
;  :arith-assert-upper      1431
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1161
;  :arith-fixed-eqs         1076
;  :arith-offset-eqs        596
;  :arith-pivots            463
;  :binary-propagations     11
;  :conflicts               393
;  :datatype-accessor-ax    1235
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   3020
;  :datatype-splits         4104
;  :decisions               5177
;  :del-clause              2569
;  :final-checks            381
;  :interface-eqs           53
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8519
;  :mk-clause               2637
;  :num-allocs              9225208
;  :num-checks              423
;  :propagations            2519
;  :quant-instantiations    553
;  :rlimit-count            375933
;  :time                    0.00)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25768
;  :arith-add-rows          878
;  :arith-assert-diseq      234
;  :arith-assert-lower      1601
;  :arith-assert-upper      1445
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         1088
;  :arith-offset-eqs        605
;  :arith-pivots            468
;  :binary-propagations     11
;  :conflicts               393
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8585
;  :mk-clause               2664
;  :num-allocs              9225208
;  :num-checks              424
;  :propagations            2547
;  :quant-instantiations    557
;  :rlimit-count            377816
;  :time                    0.00)
; [then-branch: 102 | !(First:(Second:(Second:(Second:($t@43@04))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] != -2) | live]
; [else-branch: 102 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] != -2 | live]
(push) ; 8
; [then-branch: 102 | !(First:(Second:(Second:(Second:($t@43@04))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
          2)
        (- 0 2))))))
; [exec]
; diz.Controller_alarm_flag := true
; [exec]
; // assert
; assert diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25773
;  :arith-add-rows          880
;  :arith-assert-diseq      234
;  :arith-assert-lower      1604
;  :arith-assert-upper      1448
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1174
;  :arith-fixed-eqs         1088
;  :arith-offset-eqs        605
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               394
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8593
;  :mk-clause               2670
;  :num-allocs              9225208
;  :num-checks              425
;  :propagations            2554
;  :quant-instantiations    559
;  :rlimit-count            378175)
(push) ; 9
(assert (not (< $Perm.No $k@45@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25773
;  :arith-add-rows          880
;  :arith-assert-diseq      234
;  :arith-assert-lower      1604
;  :arith-assert-upper      1448
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1174
;  :arith-fixed-eqs         1088
;  :arith-offset-eqs        605
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               395
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8593
;  :mk-clause               2670
;  :num-allocs              9225208
;  :num-checks              426
;  :propagations            2554
;  :quant-instantiations    559
;  :rlimit-count            378223)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25773
;  :arith-add-rows          880
;  :arith-assert-diseq      234
;  :arith-assert-lower      1604
;  :arith-assert-upper      1448
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1174
;  :arith-fixed-eqs         1088
;  :arith-offset-eqs        605
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               396
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8593
;  :mk-clause               2670
;  :num-allocs              9225208
;  :num-checks              427
;  :propagations            2554
;  :quant-instantiations    559
;  :rlimit-count            378447)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))
; [exec]
; __flatten_22__25 := diz.Controller_m
(declare-const __flatten_22__25@69@04 $Ref)
(assert (= __flatten_22__25@69@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04))))
; [exec]
; __flatten_24__27 := diz.Controller_m
(declare-const __flatten_24__27@70@04 $Ref)
(assert (= __flatten_24__27@70@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04))))
; [exec]
; __flatten_23__26 := __flatten_24__27.Main_process_state[1 := 2]
; [eval] __flatten_24__27.Main_process_state[1 := 2]
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) __flatten_24__27@70@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25775
;  :arith-add-rows          880
;  :arith-assert-diseq      234
;  :arith-assert-lower      1604
;  :arith-assert-upper      1448
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1174
;  :arith-fixed-eqs         1088
;  :arith-offset-eqs        605
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               396
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8595
;  :mk-clause               2670
;  :num-allocs              9225208
;  :num-checks              428
;  :propagations            2554
;  :quant-instantiations    559
;  :rlimit-count            378770)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25775
;  :arith-add-rows          880
;  :arith-assert-diseq      234
;  :arith-assert-lower      1604
;  :arith-assert-upper      1448
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1174
;  :arith-fixed-eqs         1088
;  :arith-offset-eqs        605
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               396
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8595
;  :mk-clause               2670
;  :num-allocs              9225208
;  :num-checks              429
;  :propagations            2554
;  :quant-instantiations    559
;  :rlimit-count            378785)
(declare-const __flatten_23__26@71@04 Seq<Int>)
(assert (Seq_equal
  __flatten_23__26@71@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
    1
    2)))
; [exec]
; __flatten_22__25.Main_process_state := __flatten_23__26
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) __flatten_22__25@69@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25785
;  :arith-add-rows          883
;  :arith-assert-diseq      235
;  :arith-assert-lower      1608
;  :arith-assert-upper      1450
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1177
;  :arith-fixed-eqs         1090
;  :arith-offset-eqs        605
;  :arith-pivots            471
;  :binary-propagations     11
;  :conflicts               396
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8618
;  :mk-clause               2691
;  :num-allocs              9225208
;  :num-checks              430
;  :propagations            2563
;  :quant-instantiations    564
;  :rlimit-count            379259)
(assert (not (= __flatten_22__25@69@04 $Ref.null)))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25786
;  :arith-add-rows          883
;  :arith-assert-diseq      235
;  :arith-assert-lower      1608
;  :arith-assert-upper      1450
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1177
;  :arith-fixed-eqs         1090
;  :arith-offset-eqs        605
;  :arith-pivots            471
;  :binary-propagations     11
;  :conflicts               396
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8619
;  :mk-clause               2691
;  :num-allocs              9225208
;  :num-checks              431
;  :propagations            2563
;  :quant-instantiations    564
;  :rlimit-count            379328)
; [eval] diz.Controller_m != null
; [eval] |diz.Controller_m.Main_process_state| == 2
; [eval] |diz.Controller_m.Main_process_state|
(push) ; 9
(assert (not (= (Seq_length __flatten_23__26@71@04) 2)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25786
;  :arith-add-rows          883
;  :arith-assert-diseq      235
;  :arith-assert-lower      1608
;  :arith-assert-upper      1450
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1178
;  :arith-fixed-eqs         1090
;  :arith-offset-eqs        605
;  :arith-pivots            471
;  :binary-propagations     11
;  :conflicts               397
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8622
;  :mk-clause               2691
;  :num-allocs              9225208
;  :num-checks              432
;  :propagations            2563
;  :quant-instantiations    564
;  :rlimit-count            379402)
(assert (= (Seq_length __flatten_23__26@71@04) 2))
; [eval] |diz.Controller_m.Main_event_state| == 3
; [eval] |diz.Controller_m.Main_event_state|
; [eval] (forall i__28: Int :: { diz.Controller_m.Main_process_state[i__28] } 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|)
(declare-const i__28@72@04 Int)
(push) ; 9
; [eval] 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state| ==> diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= i__28 && i__28 < |diz.Controller_m.Main_process_state|
; [eval] 0 <= i__28
(push) ; 10
; [then-branch: 103 | 0 <= i__28@72@04 | live]
; [else-branch: 103 | !(0 <= i__28@72@04) | live]
(push) ; 11
; [then-branch: 103 | 0 <= i__28@72@04]
(assert (<= 0 i__28@72@04))
; [eval] i__28 < |diz.Controller_m.Main_process_state|
; [eval] |diz.Controller_m.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 103 | !(0 <= i__28@72@04)]
(assert (not (<= 0 i__28@72@04)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 104 | i__28@72@04 < |__flatten_23__26@71@04| && 0 <= i__28@72@04 | live]
; [else-branch: 104 | !(i__28@72@04 < |__flatten_23__26@71@04| && 0 <= i__28@72@04) | live]
(push) ; 11
; [then-branch: 104 | i__28@72@04 < |__flatten_23__26@71@04| && 0 <= i__28@72@04]
(assert (and (< i__28@72@04 (Seq_length __flatten_23__26@71@04)) (<= 0 i__28@72@04)))
; [eval] diz.Controller_m.Main_process_state[i__28] == -1 || 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__28] == -1
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 12
(assert (not (>= i__28@72@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25787
;  :arith-add-rows          883
;  :arith-assert-diseq      235
;  :arith-assert-lower      1610
;  :arith-assert-upper      1452
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1179
;  :arith-fixed-eqs         1090
;  :arith-offset-eqs        605
;  :arith-pivots            471
;  :binary-propagations     11
;  :conflicts               397
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8627
;  :mk-clause               2691
;  :num-allocs              9225208
;  :num-checks              433
;  :propagations            2563
;  :quant-instantiations    564
;  :rlimit-count            379589)
; [eval] -1
(push) ; 12
; [then-branch: 105 | __flatten_23__26@71@04[i__28@72@04] == -1 | live]
; [else-branch: 105 | __flatten_23__26@71@04[i__28@72@04] != -1 | live]
(push) ; 13
; [then-branch: 105 | __flatten_23__26@71@04[i__28@72@04] == -1]
(assert (= (Seq_index __flatten_23__26@71@04 i__28@72@04) (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 105 | __flatten_23__26@71@04[i__28@72@04] != -1]
(assert (not (= (Seq_index __flatten_23__26@71@04 i__28@72@04) (- 0 1))))
; [eval] 0 <= diz.Controller_m.Main_process_state[i__28] && diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] 0 <= diz.Controller_m.Main_process_state[i__28]
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 14
(assert (not (>= i__28@72@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25788
;  :arith-add-rows          883
;  :arith-assert-diseq      235
;  :arith-assert-lower      1610
;  :arith-assert-upper      1453
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1180
;  :arith-fixed-eqs         1090
;  :arith-offset-eqs        605
;  :arith-pivots            471
;  :binary-propagations     11
;  :conflicts               397
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8635
;  :mk-clause               2701
;  :num-allocs              9225208
;  :num-checks              434
;  :propagations            2563
;  :quant-instantiations    565
;  :rlimit-count            379757)
(push) ; 14
; [then-branch: 106 | 0 <= __flatten_23__26@71@04[i__28@72@04] | live]
; [else-branch: 106 | !(0 <= __flatten_23__26@71@04[i__28@72@04]) | live]
(push) ; 15
; [then-branch: 106 | 0 <= __flatten_23__26@71@04[i__28@72@04]]
(assert (<= 0 (Seq_index __flatten_23__26@71@04 i__28@72@04)))
; [eval] diz.Controller_m.Main_process_state[i__28] < |diz.Controller_m.Main_event_state|
; [eval] diz.Controller_m.Main_process_state[i__28]
(push) ; 16
(assert (not (>= i__28@72@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25788
;  :arith-add-rows          883
;  :arith-assert-diseq      236
;  :arith-assert-lower      1613
;  :arith-assert-upper      1453
;  :arith-bound-prop        132
;  :arith-conflicts         54
;  :arith-eq-adapter        1181
;  :arith-fixed-eqs         1090
;  :arith-offset-eqs        605
;  :arith-pivots            471
;  :binary-propagations     11
;  :conflicts               397
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5667
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5221
;  :del-clause              2596
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8638
;  :mk-clause               2702
;  :num-allocs              9225208
;  :num-checks              435
;  :propagations            2563
;  :quant-instantiations    565
;  :rlimit-count            379830)
; [eval] |diz.Controller_m.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 106 | !(0 <= __flatten_23__26@71@04[i__28@72@04])]
(assert (not (<= 0 (Seq_index __flatten_23__26@71@04 i__28@72@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 104 | !(i__28@72@04 < |__flatten_23__26@71@04| && 0 <= i__28@72@04)]
(assert (not
  (and (< i__28@72@04 (Seq_length __flatten_23__26@71@04)) (<= 0 i__28@72@04))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i__28@72@04 Int)) (!
  (implies
    (and (< i__28@72@04 (Seq_length __flatten_23__26@71@04)) (<= 0 i__28@72@04))
    (or
      (= (Seq_index __flatten_23__26@71@04 i__28@72@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_23__26@71@04 i__28@72@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
        (<= 0 (Seq_index __flatten_23__26@71@04 i__28@72@04)))))
  :pattern ((Seq_index __flatten_23__26@71@04 i__28@72@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      244
;  :arith-assert-lower      1635
;  :arith-assert-upper      1470
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1195
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            475
;  :binary-propagations     11
;  :conflicts               408
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8698
;  :mk-clause               2759
;  :num-allocs              9225208
;  :num-checks              436
;  :propagations            2601
;  :quant-instantiations    571
;  :rlimit-count            380765)
(assert (forall ((i__28@72@04 Int)) (!
  (implies
    (and (< i__28@72@04 (Seq_length __flatten_23__26@71@04)) (<= 0 i__28@72@04))
    (or
      (= (Seq_index __flatten_23__26@71@04 i__28@72@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_23__26@71@04 i__28@72@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))
        (<= 0 (Seq_index __flatten_23__26@71@04 i__28@72@04)))))
  :pattern ((Seq_index __flatten_23__26@71@04 i__28@72@04))
  :qid |prog.l<no position>|)))
(declare-const $k@73@04 $Perm)
(assert ($Perm.isReadVar $k@73@04 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@73@04 $Perm.No) (< $Perm.No $k@73@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      245
;  :arith-assert-lower      1637
;  :arith-assert-upper      1471
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1196
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            475
;  :binary-propagations     11
;  :conflicts               409
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8703
;  :mk-clause               2761
;  :num-allocs              9225208
;  :num-checks              437
;  :propagations            2602
;  :quant-instantiations    571
;  :rlimit-count            381236)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@45@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      245
;  :arith-assert-lower      1637
;  :arith-assert-upper      1471
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1196
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            475
;  :binary-propagations     11
;  :conflicts               409
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8703
;  :mk-clause               2761
;  :num-allocs              9225208
;  :num-checks              438
;  :propagations            2602
;  :quant-instantiations    571
;  :rlimit-count            381247)
(assert (< $k@73@04 $k@45@04))
(assert (<= $Perm.No (- $k@45@04 $k@73@04)))
(assert (<= (- $k@45@04 $k@73@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@45@04 $k@73@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] 0 < diz.Controller_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@45@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      245
;  :arith-assert-lower      1639
;  :arith-assert-upper      1472
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1196
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            475
;  :binary-propagations     11
;  :conflicts               410
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8706
;  :mk-clause               2761
;  :num-allocs              9225208
;  :num-checks              439
;  :propagations            2602
;  :quant-instantiations    571
;  :rlimit-count            381455)
(declare-const $k@74@04 $Perm)
(assert ($Perm.isReadVar $k@74@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@74@04 $Perm.No) (< $Perm.No $k@74@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      246
;  :arith-assert-lower      1641
;  :arith-assert-upper      1473
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1197
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            475
;  :binary-propagations     11
;  :conflicts               411
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8710
;  :mk-clause               2763
;  :num-allocs              9225208
;  :num-checks              440
;  :propagations            2603
;  :quant-instantiations    571
;  :rlimit-count            381653)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@46@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      246
;  :arith-assert-lower      1641
;  :arith-assert-upper      1473
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1197
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            475
;  :binary-propagations     11
;  :conflicts               411
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8710
;  :mk-clause               2763
;  :num-allocs              9225208
;  :num-checks              441
;  :propagations            2603
;  :quant-instantiations    571
;  :rlimit-count            381664)
(assert (< $k@74@04 $k@46@04))
(assert (<= $Perm.No (- $k@46@04 $k@74@04)))
(assert (<= (- $k@46@04 $k@74@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@46@04 $k@74@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] diz.Controller_m.Main_sensor != null
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      246
;  :arith-assert-lower      1643
;  :arith-assert-upper      1474
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1197
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            477
;  :binary-propagations     11
;  :conflicts               412
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8713
;  :mk-clause               2763
;  :num-allocs              9225208
;  :num-checks              442
;  :propagations            2603
;  :quant-instantiations    571
;  :rlimit-count            381884)
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      246
;  :arith-assert-lower      1643
;  :arith-assert-upper      1474
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1197
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            477
;  :binary-propagations     11
;  :conflicts               413
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8713
;  :mk-clause               2763
;  :num-allocs              9225208
;  :num-checks              443
;  :propagations            2603
;  :quant-instantiations    571
;  :rlimit-count            381932)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      246
;  :arith-assert-lower      1643
;  :arith-assert-upper      1474
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1197
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            477
;  :binary-propagations     11
;  :conflicts               413
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8713
;  :mk-clause               2763
;  :num-allocs              9225208
;  :num-checks              444
;  :propagations            2603
;  :quant-instantiations    571
;  :rlimit-count            381945)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@46@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      246
;  :arith-assert-lower      1643
;  :arith-assert-upper      1474
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1197
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            477
;  :binary-propagations     11
;  :conflicts               414
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8713
;  :mk-clause               2763
;  :num-allocs              9225208
;  :num-checks              445
;  :propagations            2603
;  :quant-instantiations    571
;  :rlimit-count            381993)
(declare-const $k@75@04 $Perm)
(assert ($Perm.isReadVar $k@75@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@75@04 $Perm.No) (< $Perm.No $k@75@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      247
;  :arith-assert-lower      1645
;  :arith-assert-upper      1475
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1198
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            477
;  :binary-propagations     11
;  :conflicts               415
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8717
;  :mk-clause               2765
;  :num-allocs              9225208
;  :num-checks              446
;  :propagations            2604
;  :quant-instantiations    571
;  :rlimit-count            382191)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@47@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      247
;  :arith-assert-lower      1645
;  :arith-assert-upper      1475
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1198
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            477
;  :binary-propagations     11
;  :conflicts               415
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8717
;  :mk-clause               2765
;  :num-allocs              9225208
;  :num-checks              447
;  :propagations            2604
;  :quant-instantiations    571
;  :rlimit-count            382202)
(assert (< $k@75@04 $k@47@04))
(assert (<= $Perm.No (- $k@47@04 $k@75@04)))
(assert (<= (- $k@47@04 $k@75@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@47@04 $k@75@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@43@04)) $Ref.null))))
; [eval] diz.Controller_m.Main_controller != null
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      247
;  :arith-assert-lower      1647
;  :arith-assert-upper      1476
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1198
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            478
;  :binary-propagations     11
;  :conflicts               416
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8720
;  :mk-clause               2765
;  :num-allocs              9225208
;  :num-checks              448
;  :propagations            2604
;  :quant-instantiations    571
;  :rlimit-count            382416)
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      247
;  :arith-assert-lower      1647
;  :arith-assert-upper      1476
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1198
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            478
;  :binary-propagations     11
;  :conflicts               417
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8720
;  :mk-clause               2765
;  :num-allocs              9225208
;  :num-checks              449
;  :propagations            2604
;  :quant-instantiations    571
;  :rlimit-count            382464)
(push) ; 9
(assert (not (=
  diz@9@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      247
;  :arith-assert-lower      1647
;  :arith-assert-upper      1476
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1198
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            478
;  :binary-propagations     11
;  :conflicts               417
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8720
;  :mk-clause               2765
;  :num-allocs              9225208
;  :num-checks              450
;  :propagations            2604
;  :quant-instantiations    571
;  :rlimit-count            382475)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      247
;  :arith-assert-lower      1647
;  :arith-assert-upper      1476
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1198
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            478
;  :binary-propagations     11
;  :conflicts               417
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8720
;  :mk-clause               2765
;  :num-allocs              9225208
;  :num-checks              451
;  :propagations            2604
;  :quant-instantiations    571
;  :rlimit-count            382488)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25842
;  :arith-add-rows          885
;  :arith-assert-diseq      247
;  :arith-assert-lower      1647
;  :arith-assert-upper      1476
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1198
;  :arith-fixed-eqs         1096
;  :arith-offset-eqs        605
;  :arith-pivots            478
;  :binary-propagations     11
;  :conflicts               418
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5670
;  :datatype-occurs-check   3039
;  :datatype-splits         4147
;  :decisions               5231
;  :del-clause              2664
;  :final-checks            385
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8720
;  :mk-clause               2765
;  :num-allocs              9225208
;  :num-checks              452
;  :propagations            2604
;  :quant-instantiations    571
;  :rlimit-count            382536)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26099
;  :arith-add-rows          888
;  :arith-assert-diseq      249
;  :arith-assert-lower      1660
;  :arith-assert-upper      1486
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1210
;  :arith-fixed-eqs         1105
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               422
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2688
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8796
;  :mk-clause               2789
;  :num-allocs              9225208
;  :num-checks              453
;  :propagations            2627
;  :quant-instantiations    574
;  :rlimit-count            384378
;  :time                    0.00)
; [eval] diz.Controller_m.Main_process_state[0] == -1 || diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0] == -1
; [eval] diz.Controller_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (< 0 (Seq_length __flatten_23__26@71@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26099
;  :arith-add-rows          888
;  :arith-assert-diseq      249
;  :arith-assert-lower      1660
;  :arith-assert-upper      1486
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1210
;  :arith-fixed-eqs         1105
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               422
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2688
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8796
;  :mk-clause               2789
;  :num-allocs              9225208
;  :num-checks              454
;  :propagations            2627
;  :quant-instantiations    574
;  :rlimit-count            384393)
; [eval] -1
(push) ; 9
; [then-branch: 107 | __flatten_23__26@71@04[0] == -1 | live]
; [else-branch: 107 | __flatten_23__26@71@04[0] != -1 | live]
(push) ; 10
; [then-branch: 107 | __flatten_23__26@71@04[0] == -1]
(assert (= (Seq_index __flatten_23__26@71@04 0) (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 107 | __flatten_23__26@71@04[0] != -1]
(assert (not (= (Seq_index __flatten_23__26@71@04 0) (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[0] == 0
; [eval] diz.Controller_m.Main_process_state[0]
(push) ; 11
(assert (not (< 0 (Seq_length __flatten_23__26@71@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26106
;  :arith-add-rows          888
;  :arith-assert-diseq      252
;  :arith-assert-lower      1665
;  :arith-assert-upper      1490
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1213
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               422
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2688
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8811
;  :mk-clause               2799
;  :num-allocs              9225208
;  :num-checks              455
;  :propagations            2631
;  :quant-instantiations    576
;  :rlimit-count            384636)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(assert (not (or
  (= (Seq_index __flatten_23__26@71@04 0) (- 0 1))
  (= (Seq_index __flatten_23__26@71@04 0) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26108
;  :arith-add-rows          888
;  :arith-assert-diseq      252
;  :arith-assert-lower      1665
;  :arith-assert-upper      1490
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1213
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               423
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2704
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8819
;  :mk-clause               2805
;  :num-allocs              9225208
;  :num-checks              456
;  :propagations            2634
;  :quant-instantiations    578
;  :rlimit-count            384829)
(assert (or
  (= (Seq_index __flatten_23__26@71@04 0) (- 0 1))
  (= (Seq_index __flatten_23__26@71@04 0) 0)))
; [eval] diz.Controller_m.Main_process_state[1] == -1 || diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 9
(assert (not (< 1 (Seq_length __flatten_23__26@71@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26108
;  :arith-add-rows          888
;  :arith-assert-diseq      252
;  :arith-assert-lower      1665
;  :arith-assert-upper      1490
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1213
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               423
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2704
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8821
;  :mk-clause               2806
;  :num-allocs              9225208
;  :num-checks              457
;  :propagations            2634
;  :quant-instantiations    578
;  :rlimit-count            384915)
; [eval] -1
(push) ; 9
; [then-branch: 108 | __flatten_23__26@71@04[1] == -1 | live]
; [else-branch: 108 | __flatten_23__26@71@04[1] != -1 | live]
(push) ; 10
; [then-branch: 108 | __flatten_23__26@71@04[1] == -1]
(assert (= (Seq_index __flatten_23__26@71@04 1) (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 108 | __flatten_23__26@71@04[1] != -1]
(assert (not (= (Seq_index __flatten_23__26@71@04 1) (- 0 1))))
; [eval] diz.Controller_m.Main_process_state[1] == 2
; [eval] diz.Controller_m.Main_process_state[1]
(push) ; 11
(assert (not (< 1 (Seq_length __flatten_23__26@71@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               423
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2704
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8833
;  :mk-clause               2811
;  :num-allocs              9225208
;  :num-checks              458
;  :propagations            2636
;  :quant-instantiations    580
;  :rlimit-count            385146)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(assert (not (or
  (= (Seq_index __flatten_23__26@71@04 1) (- 0 1))
  (= (Seq_index __flatten_23__26@71@04 1) 2))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26114
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8839
;  :mk-clause               2815
;  :num-allocs              9225208
;  :num-checks              459
;  :propagations            2638
;  :quant-instantiations    582
;  :rlimit-count            385337)
(assert (or
  (= (Seq_index __flatten_23__26@71@04 1) (- 0 1))
  (= (Seq_index __flatten_23__26@71@04 1) 2)))
; [eval] diz.Controller_m.Main_event_state[0] != -1
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26114
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8841
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              460
;  :propagations            2638
;  :quant-instantiations    582
;  :rlimit-count            385423)
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[0] != 0
; [eval] diz.Controller_m.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26114
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8841
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              461
;  :propagations            2638
;  :quant-instantiations    582
;  :rlimit-count            385438)
; [eval] diz.Controller_m.Main_event_state[2] <= -1
; [eval] diz.Controller_m.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26114
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8841
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              462
;  :propagations            2638
;  :quant-instantiations    582
;  :rlimit-count            385453)
; [eval] -1
; [eval] !diz.Controller_m.Main_controller.Controller_init || (diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1)
; [eval] !diz.Controller_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26114
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               425
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8841
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              463
;  :propagations            2638
;  :quant-instantiations    582
;  :rlimit-count            385501)
(push) ; 9
; [then-branch: 109 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
; [else-branch: 109 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
(push) ; 10
; [then-branch: 109 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 109 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; [eval] diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (< 1 (Seq_length __flatten_23__26@71@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26114
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               425
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8841
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              464
;  :propagations            2638
;  :quant-instantiations    582
;  :rlimit-count            385536)
; [eval] -1
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (Seq_index __flatten_23__26@71@04 1) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26118
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8842
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              465
;  :propagations            2638
;  :quant-instantiations    583
;  :rlimit-count            385652)
; [then-branch: 110 | __flatten_23__26@71@04[1] == -1 | dead]
; [else-branch: 110 | __flatten_23__26@71@04[1] != -1 | live]
(push) ; 12
; [else-branch: 110 | __flatten_23__26@71@04[1] != -1]
(assert (not (= (Seq_index __flatten_23__26@71@04 1) (- 0 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26118
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8842
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              466
;  :propagations            2638
;  :quant-instantiations    583
;  :rlimit-count            385685)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26118
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8842
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              467
;  :propagations            2638
;  :quant-instantiations    583
;  :rlimit-count            385709)
; [then-branch: 111 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] | dead]
; [else-branch: 111 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]) | live]
(push) ; 10
; [else-branch: 111 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] -1 <= diz.Controller_m.Main_event_state[2] ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] -1 <= diz.Controller_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Controller_m.Main_event_state[2]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26118
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8842
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              468
;  :propagations            2638
;  :quant-instantiations    583
;  :rlimit-count            385740)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26118
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8842
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              469
;  :propagations            2638
;  :quant-instantiations    583
;  :rlimit-count            385764)
; [then-branch: 112 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] | dead]
; [else-branch: 112 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2]) | live]
(push) ; 10
; [else-branch: 112 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1 ==> diz.Controller_m.Main_sensor.Sensor_dist < diz.Controller_m.Main_MIN_DIST
; [eval] diz.Controller_m.Main_controller.Controller_init && diz.Controller_m.Main_process_state[1] == -1
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26118
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               427
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8842
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              470
;  :propagations            2638
;  :quant-instantiations    583
;  :rlimit-count            385828)
(push) ; 9
; [then-branch: 113 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | live]
; [else-branch: 113 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 113 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
; [eval] diz.Controller_m.Main_process_state[1] == -1
; [eval] diz.Controller_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (< 1 (Seq_length __flatten_23__26@71@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26118
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               427
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8842
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              471
;  :propagations            2638
;  :quant-instantiations    583
;  :rlimit-count            385855)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 113 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (= (Seq_index __flatten_23__26@71@04 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26122
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               428
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8843
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              472
;  :propagations            2638
;  :quant-instantiations    584
;  :rlimit-count            385981)
; [then-branch: 114 | __flatten_23__26@71@04[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))) | dead]
; [else-branch: 114 | !(__flatten_23__26@71@04[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))))))))))))))) | live]
(push) ; 10
; [else-branch: 114 | !(__flatten_23__26@71@04[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@43@04)))))))))))))))))))]
(assert (not
  (and
    (= (Seq_index __flatten_23__26@71@04 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] diz.Controller_m.Main_controller == diz
(push) ; 9
(assert (not (< $Perm.No $k@47@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26122
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               429
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8843
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              473
;  :propagations            2638
;  :quant-instantiations    584
;  :rlimit-count            386049)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26122
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               429
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8843
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              474
;  :propagations            2638
;  :quant-instantiations    584
;  :rlimit-count            386062)
(push) ; 9
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26122
;  :arith-add-rows          888
;  :arith-assert-diseq      254
;  :arith-assert-lower      1671
;  :arith-assert-upper      1492
;  :arith-bound-prop        132
;  :arith-conflicts         56
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1106
;  :arith-offset-eqs        612
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               429
;  :datatype-accessor-ax    1257
;  :datatype-constructor-ax 5732
;  :datatype-occurs-check   3063
;  :datatype-splits         4194
;  :decisions               5286
;  :del-clause              2713
;  :final-checks            390
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          10
;  :mk-bool-var             8843
;  :mk-clause               2816
;  :num-allocs              9225208
;  :num-checks              475
;  :propagations            2638
;  :quant-instantiations    584
;  :rlimit-count            386071)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04))))))))))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 102 | First:(Second:(Second:(Second:($t@43@04))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@43@04))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@04)))))))
        2)
      (- 0 2)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26348
;  :arith-add-rows          902
;  :arith-assert-diseq      256
;  :arith-assert-lower      1687
;  :arith-assert-upper      1506
;  :arith-bound-prop        134
;  :arith-conflicts         56
;  :arith-eq-adapter        1226
;  :arith-fixed-eqs         1115
;  :arith-offset-eqs        615
;  :arith-pivots            494
;  :binary-propagations     11
;  :conflicts               430
;  :datatype-accessor-ax    1270
;  :datatype-constructor-ax 5784
;  :datatype-occurs-check   3087
;  :datatype-splits         4245
;  :decisions               5337
;  :del-clause              2797
;  :final-checks            396
;  :interface-eqs           57
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.01
;  :minimized-lits          10
;  :mk-bool-var             8919
;  :mk-clause               2843
;  :num-allocs              9518894
;  :num-checks              476
;  :propagations            2667
;  :quant-instantiations    588
;  :rlimit-count            387946
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26574
;  :arith-add-rows          910
;  :arith-assert-diseq      258
;  :arith-assert-lower      1703
;  :arith-assert-upper      1520
;  :arith-bound-prop        136
;  :arith-conflicts         56
;  :arith-eq-adapter        1236
;  :arith-fixed-eqs         1124
;  :arith-offset-eqs        618
;  :arith-pivots            498
;  :binary-propagations     11
;  :conflicts               431
;  :datatype-accessor-ax    1283
;  :datatype-constructor-ax 5836
;  :datatype-occurs-check   3111
;  :datatype-splits         4296
;  :decisions               5388
;  :del-clause              2824
;  :final-checks            402
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.01
;  :minimized-lits          10
;  :mk-bool-var             8995
;  :mk-clause               2870
;  :num-allocs              9518894
;  :num-checks              477
;  :propagations            2696
;  :quant-instantiations    592
;  :rlimit-count            389646
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@34@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26800
;  :arith-add-rows          918
;  :arith-assert-diseq      260
;  :arith-assert-lower      1719
;  :arith-assert-upper      1534
;  :arith-bound-prop        138
;  :arith-conflicts         56
;  :arith-eq-adapter        1246
;  :arith-fixed-eqs         1133
;  :arith-offset-eqs        621
;  :arith-pivots            502
;  :binary-propagations     11
;  :conflicts               432
;  :datatype-accessor-ax    1296
;  :datatype-constructor-ax 5888
;  :datatype-occurs-check   3135
;  :datatype-splits         4347
;  :decisions               5439
;  :del-clause              2851
;  :final-checks            408
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.01
;  :minimized-lits          10
;  :mk-bool-var             9071
;  :mk-clause               2897
;  :num-allocs              9518894
;  :num-checks              478
;  :propagations            2725
;  :quant-instantiations    596
;  :rlimit-count            391348
;  :time                    0.00)
; [eval] !true
; [then-branch: 115 | False | dead]
; [else-branch: 115 | True | live]
(push) ; 5
; [else-branch: 115 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
