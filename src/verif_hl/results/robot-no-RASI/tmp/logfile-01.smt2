(get-info :version)
; (:version "4.8.6")
; Started: 2024-06-21 14:46:57
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Sensor<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Controller<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Sensor_m: Ref]
(declare-fun $FVF.domain_Sensor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Sensor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Sensor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Sensor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Sensor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Sensor_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Controller_m: Ref]
(declare-fun $FVF.domain_Controller_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Controller_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Controller_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Controller_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Controller_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Controller_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Sensor_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Sensor_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Controller_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Controller_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Sensor<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Controller<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Sensor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Controller<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Sensor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Sensor_m vs) ($FVF.domain_Sensor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Sensor_m vs))
            (= ($FVF.lookup_Sensor_m vs x) ($FVF.lookup_Sensor_m ws x)))
          :pattern (($FVF.lookup_Sensor_m vs x) ($FVF.lookup_Sensor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Sensor_m pm r))
    :pattern ($FVF.perm_Sensor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Sensor_m f r) true)
    :pattern ($FVF.loc_Sensor_m f r))))
; /field_value_functions_axioms.smt2 [Controller_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Controller_m vs) ($FVF.domain_Controller_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Controller_m vs))
            (= ($FVF.lookup_Controller_m vs x) ($FVF.lookup_Controller_m ws x)))
          :pattern (($FVF.lookup_Controller_m vs x) ($FVF.lookup_Controller_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Controller_m pm r))
    :pattern ($FVF.perm_Controller_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Controller_m f r) true)
    :pattern ($FVF.loc_Controller_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@0@00 vals@1@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (let ((result@2@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))) (implies
    (and (not (= diz@0@00 $Ref.null)) (= (Seq_length vals@1@00) 3))
    (and
      (and
        (and
          (or
            (< (Seq_index vals@1@00 0) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 0)))
          (or
            (< (Seq_index vals@1@00 1) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 1))))
        (or
          (< (Seq_index vals@1@00 2) (- 0 1))
          (<= result@2@00 (Seq_index vals@1@00 2))))
      (and
        (implies
          (and
            (and
              (< (Seq_index vals@1@00 0) (- 0 1))
              (< (Seq_index vals@1@00 1) (- 0 1)))
            (< (Seq_index vals@1@00 2) (- 0 1)))
          (= result@2@00 0))
        (implies
          (or
            (or
              (<= (- 0 1) (Seq_index vals@1@00 0))
              (<= (- 0 1) (Seq_index vals@1@00 1)))
            (<= (- 0 1) (Seq_index vals@1@00 2)))
          (or
            (or
              (and
                (<= (- 0 1) (Seq_index vals@1@00 0))
                (= result@2@00 (Seq_index vals@1@00 0)))
              (and
                (<= (- 0 1) (Seq_index vals@1@00 1))
                (= result@2@00 (Seq_index vals@1@00 1))))
            (and
              (<= (- 0 1) (Seq_index vals@1@00 2))
              (= result@2@00 (Seq_index vals@1@00 2)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00)
    (instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@3@00 u@4@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (let ((result@5@00 (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))) (=
    result@5@00
    (or (= t@3@00 u@4@00) (= (directSuperclass<TYPE> t@3@00) u@4@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (= (new_frac%limited s@$ x@6@00) (new_frac s@$ x@6@00))
  :pattern ((new_frac s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (new_frac%stateless x@6@00)
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (let ((result@7@00 (new_frac%limited s@$ x@6@00))) (implies
    (and (< $Perm.No x@6@00) (<= x@6@00 $Perm.Write))
    (= (frac_val<Perm> result@7@00) x@6@00)))
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@8@00) (new_zfrac s@$ x@8@00))
  :pattern ((new_zfrac s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (new_zfrac%stateless x@8@00)
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (let ((result@9@00 (new_zfrac%limited s@$ x@8@00))) (implies
    (and (<= $Perm.No x@8@00) (<= x@8@00 $Perm.Write))
    (= (zfrac_val<Perm> result@9@00) x@8@00)))
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Controller___contract_unsatisfiable__Controller_EncodedGlobalVariables_Main ----------
(declare-const diz@0@01 $Ref)
(declare-const globals@1@01 $Ref)
(declare-const m0@2@01 $Ref)
(declare-const diz@3@01 $Ref)
(declare-const globals@4@01 $Ref)
(declare-const m0@5@01 $Ref)
(push) ; 1
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@3@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@7@01 $Snap)
(assert (= $t@7@01 ($Snap.combine ($Snap.first $t@7@01) ($Snap.second $t@7@01))))
(assert (= ($Snap.first $t@7@01) $Snap.unit))
(assert (= ($Snap.second $t@7@01) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Controller_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@8@01 $Ref)
(declare-const globals@9@01 $Ref)
(declare-const diz@10@01 $Ref)
(declare-const globals@11@01 $Ref)
(push) ; 1
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@10@01 $Ref.null)))
(assert (=
  ($Snap.second $t@12@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@01))
    ($Snap.second ($Snap.second $t@12@01)))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             24
;  :arith-assert-lower    1
;  :arith-assert-upper    1
;  :arith-eq-adapter      1
;  :binary-propagations   11
;  :datatype-accessor-ax  5
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           256
;  :mk-clause             1
;  :num-allocs            3404233
;  :num-checks            6
;  :propagations          11
;  :quant-instantiations  1
;  :rlimit-count          111652)
(assert (=
  ($Snap.second ($Snap.second $t@12@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@01))) $Snap.unit))
; [eval] diz.Controller_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@01))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
(declare-const $k@13@01 $Perm)
(assert ($Perm.isReadVar $k@13@01 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@13@01 $Perm.No) (< $Perm.No $k@13@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             36
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    2
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             1
;  :datatype-accessor-ax  7
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           265
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            7
;  :propagations          12
;  :quant-instantiations  2
;  :rlimit-count          112224)
(assert (<= $Perm.No $k@13@01))
(assert (<= $k@13@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@13@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  $Snap.unit))
; [eval] diz.Controller_m.Main_controller == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             42
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             2
;  :datatype-accessor-ax  8
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           268
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            8
;  :propagations          12
;  :quant-instantiations  2
;  :rlimit-count          112497)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  diz@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             49
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             2
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           271
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            9
;  :propagations          12
;  :quant-instantiations  3
;  :rlimit-count          112748)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  $Snap.unit))
; [eval] !diz.Controller_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@14@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Main_main_EncodedGlobalVariables ----------
(declare-const diz@15@01 $Ref)
(declare-const globals@16@01 $Ref)
(declare-const diz@17@01 $Ref)
(declare-const globals@18@01 $Ref)
(push) ; 1
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 ($Snap.combine ($Snap.first $t@19@01) ($Snap.second $t@19@01))))
(assert (= ($Snap.first $t@19@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@17@01 $Ref.null)))
(assert (=
  ($Snap.second $t@19@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@19@01))
    ($Snap.second ($Snap.second $t@19@01)))))
(declare-const $k@20@01 $Perm)
(assert ($Perm.isReadVar $k@20@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@20@01 $Perm.No) (< $Perm.No $k@20@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               3
;  :datatype-accessor-ax    13
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             288
;  :mk-clause               5
;  :num-allocs              3404233
;  :num-checks              11
;  :propagations            13
;  :quant-instantiations    5
;  :rlimit-count            113891)
(assert (<= $Perm.No $k@20@01))
(assert (<= $k@20@01 $Perm.Write))
(assert (implies (< $Perm.No $k@20@01) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@19@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@19@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@19@01))) $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               86
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    14
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             291
;  :mk-clause               5
;  :num-allocs              3404233
;  :num-checks              12
;  :propagations            13
;  :quant-instantiations    5
;  :rlimit-count            114144)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@19@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
(push) ; 2
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               92
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               5
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             294
;  :mk-clause               5
;  :num-allocs              3404233
;  :num-checks              13
;  :propagations            13
;  :quant-instantiations    6
;  :rlimit-count            114428)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               92
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               5
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             294
;  :mk-clause               5
;  :num-allocs              3404233
;  :num-checks              14
;  :propagations            13
;  :quant-instantiations    6
;  :rlimit-count            114441)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))
  $Snap.unit))
; [eval] diz.Main_sensor.Sensor_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               98
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               6
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             296
;  :mk-clause               5
;  :num-allocs              3404233
;  :num-checks              15
;  :propagations            13
;  :quant-instantiations    6
;  :rlimit-count            114660)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))
  diz@17@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
(push) ; 2
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               105
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               7
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             299
;  :mk-clause               5
;  :num-allocs              3404233
;  :num-checks              16
;  :propagations            13
;  :quant-instantiations    7
;  :rlimit-count            114946)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               105
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               7
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             299
;  :mk-clause               5
;  :num-allocs              3404233
;  :num-checks              17
;  :propagations            13
;  :quant-instantiations    7
;  :rlimit-count            114959)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
  $Snap.unit))
; [eval] !diz.Main_sensor.Sensor_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               111
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               8
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             301
;  :mk-clause               5
;  :num-allocs              3404233
;  :num-checks              18
;  :propagations            13
;  :quant-instantiations    7
;  :rlimit-count            115198)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
(declare-const $k@21@01 $Perm)
(assert ($Perm.isReadVar $k@21@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@21@01 $Perm.No) (< $Perm.No $k@21@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               120
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      6
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               9
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             309
;  :mk-clause               7
;  :num-allocs              3404233
;  :num-checks              19
;  :propagations            14
;  :quant-instantiations    9
;  :rlimit-count            115660)
(assert (<= $Perm.No $k@21@01))
(assert (<= $k@21@01 $Perm.Write))
(assert (implies (< $Perm.No $k@21@01) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               126
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               10
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             312
;  :mk-clause               7
;  :num-allocs              3404233
;  :num-checks              20
;  :propagations            14
;  :quant-instantiations    9
;  :rlimit-count            115973
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               11
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             315
;  :mk-clause               7
;  :num-allocs              3404233
;  :num-checks              21
;  :propagations            14
;  :quant-instantiations    10
;  :rlimit-count            116317)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               11
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             315
;  :mk-clause               7
;  :num-allocs              3404233
;  :num-checks              22
;  :propagations            14
;  :quant-instantiations    10
;  :rlimit-count            116330)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               138
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               12
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             317
;  :mk-clause               7
;  :num-allocs              3404233
;  :num-checks              23
;  :propagations            14
;  :quant-instantiations    10
;  :rlimit-count            116609)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
  diz@17@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               146
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               13
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             320
;  :mk-clause               7
;  :num-allocs              3404233
;  :num-checks              24
;  :propagations            14
;  :quant-instantiations    11
;  :rlimit-count            116954)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               146
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               13
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             320
;  :mk-clause               7
;  :num-allocs              3404233
;  :num-checks              25
;  :propagations            14
;  :quant-instantiations    11
;  :rlimit-count            116967)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               152
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               14
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             322
;  :mk-clause               7
;  :num-allocs              3525791
;  :num-checks              26
;  :propagations            14
;  :quant-instantiations    11
;  :rlimit-count            117266)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               160
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             325
;  :mk-clause               7
;  :num-allocs              3525791
;  :num-checks              27
;  :propagations            14
;  :quant-instantiations    12
;  :rlimit-count            117632)
(push) ; 2
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               160
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               16
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   11
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             325
;  :mk-clause               7
;  :num-allocs              3525791
;  :num-checks              28
;  :propagations            14
;  :quant-instantiations    12
;  :rlimit-count            117680)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01))))
(declare-const $k@23@01 $Perm)
(assert ($Perm.isReadVar $k@23@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@23@01 $Perm.No) (< $Perm.No $k@23@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               181
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      8
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    26
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             336
;  :mk-clause               9
;  :num-allocs              3525791
;  :num-checks              30
;  :propagations            15
;  :quant-instantiations    12
;  :rlimit-count            118346)
(assert (<= $Perm.No $k@23@01))
(assert (<= $k@23@01 $Perm.Write))
(assert (implies (< $Perm.No $k@23@01) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second $t@22@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@22@01))
    ($Snap.second ($Snap.second $t@22@01)))))
(assert (= ($Snap.first ($Snap.second $t@22@01)) $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               187
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               18
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             339
;  :mk-clause               9
;  :num-allocs              3525791
;  :num-checks              31
;  :propagations            15
;  :quant-instantiations    12
;  :rlimit-count            118589)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@22@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@22@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               193
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               19
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             342
;  :mk-clause               9
;  :num-allocs              3525791
;  :num-checks              32
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            118861)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               193
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               19
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             342
;  :mk-clause               9
;  :num-allocs              3525791
;  :num-checks              33
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            118874)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@22@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
  $Snap.unit))
; [eval] diz.Main_sensor.Sensor_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               199
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               20
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             344
;  :mk-clause               9
;  :num-allocs              3525791
;  :num-checks              34
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            119083)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  diz@17@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               207
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               21
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             347
;  :mk-clause               9
;  :num-allocs              3525791
;  :num-checks              35
;  :propagations            15
;  :quant-instantiations    14
;  :rlimit-count            119358)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               207
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               21
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             347
;  :mk-clause               9
;  :num-allocs              3525791
;  :num-checks              36
;  :propagations            15
;  :quant-instantiations    14
;  :rlimit-count            119371)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
  $Snap.unit))
; [eval] !diz.Main_sensor.Sensor_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               213
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               22
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             349
;  :mk-clause               9
;  :num-allocs              3525791
;  :num-checks              37
;  :propagations            15
;  :quant-instantiations    14
;  :rlimit-count            119600)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
(declare-const $k@24@01 $Perm)
(assert ($Perm.isReadVar $k@24@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@24@01 $Perm.No) (< $Perm.No $k@24@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               221
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      10
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               23
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             356
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              38
;  :propagations            16
;  :quant-instantiations    15
;  :rlimit-count            120040)
(assert (<= $Perm.No $k@24@01))
(assert (<= $k@24@01 $Perm.Write))
(assert (implies (< $Perm.No $k@24@01) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@24@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               227
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               24
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             359
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              39
;  :propagations            16
;  :quant-instantiations    15
;  :rlimit-count            120343)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@24@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               233
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               25
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             362
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              40
;  :propagations            16
;  :quant-instantiations    16
;  :rlimit-count            120677)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               233
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               25
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             362
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              41
;  :propagations            16
;  :quant-instantiations    16
;  :rlimit-count            120690)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@24@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               239
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               26
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             364
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              42
;  :propagations            16
;  :quant-instantiations    16
;  :rlimit-count            120959)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
  diz@17@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@24@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               247
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               27
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             367
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              43
;  :propagations            16
;  :quant-instantiations    17
;  :rlimit-count            121294)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               247
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               27
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             367
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              44
;  :propagations            16
;  :quant-instantiations    17
;  :rlimit-count            121307)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@24@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               253
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               28
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             369
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              45
;  :propagations            16
;  :quant-instantiations    17
;  :rlimit-count            121596)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               261
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               29
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             372
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              46
;  :propagations            16
;  :quant-instantiations    18
;  :rlimit-count            121952)
(push) ; 3
(assert (not (< $Perm.No $k@24@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               261
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 10
;  :datatype-occurs-check   13
;  :datatype-splits         10
;  :decisions               10
;  :del-clause              6
;  :final-checks            9
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             372
;  :mk-clause               11
;  :num-allocs              3525791
;  :num-checks              47
;  :propagations            16
;  :quant-instantiations    18
;  :rlimit-count            122000
;  :time                    0.00)
(pop) ; 2
(push) ; 2
; [exec]
; var min_advance__39: Int
(declare-const min_advance__39@25@01 Int)
; [exec]
; var __flatten_38__37: Seq[Int]
(declare-const __flatten_38__37@26@01 Seq<Int>)
; [exec]
; var __flatten_39__38: Seq[Int]
(declare-const __flatten_39__38@27@01 Seq<Int>)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@28@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@28@01 ($Snap.combine ($Snap.first $t@28@01) ($Snap.second $t@28@01))))
(assert (= ($Snap.first $t@28@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@28@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@28@01))
    ($Snap.second ($Snap.second $t@28@01)))))
(assert (= ($Snap.first ($Snap.second $t@28@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@28@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@28@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@28@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@28@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@29@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@29@01 | live]
; [else-branch: 0 | !(0 <= i@29@01) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@29@01]
(assert (<= 0 i@29@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@29@01)]
(assert (not (<= 0 i@29@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@29@01 < |First:(Second:(Second:(Second:($t@28@01))))| && 0 <= i@29@01 | live]
; [else-branch: 1 | !(i@29@01 < |First:(Second:(Second:(Second:($t@28@01))))| && 0 <= i@29@01) | live]
(push) ; 5
; [then-branch: 1 | i@29@01 < |First:(Second:(Second:(Second:($t@28@01))))| && 0 <= i@29@01]
(assert (and
  (<
    i@29@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
  (<= 0 i@29@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@29@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               327
;  :arith-assert-diseq      7
;  :arith-assert-lower      18
;  :arith-assert-upper      14
;  :arith-eq-adapter        10
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              10
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             404
;  :mk-clause               17
;  :num-allocs              3525791
;  :num-checks              49
;  :propagations            18
;  :quant-instantiations    24
;  :rlimit-count            123714)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@28@01))))[i@29@01] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@28@01))))[i@29@01] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@28@01))))[i@29@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    i@29@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@28@01))))[i@29@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      i@29@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@29@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               327
;  :arith-assert-diseq      7
;  :arith-assert-lower      18
;  :arith-assert-upper      14
;  :arith-eq-adapter        10
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              10
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             405
;  :mk-clause               17
;  :num-allocs              3525791
;  :num-checks              50
;  :propagations            18
;  :quant-instantiations    24
;  :rlimit-count            123889)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@28@01))))[i@29@01] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@28@01))))[i@29@01]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@28@01))))[i@29@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    i@29@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@29@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               327
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              10
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             408
;  :mk-clause               18
;  :num-allocs              3525791
;  :num-checks              51
;  :propagations            18
;  :quant-instantiations    24
;  :rlimit-count            124012)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@28@01))))[i@29@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      i@29@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@29@01 < |First:(Second:(Second:(Second:($t@28@01))))| && 0 <= i@29@01)]
(assert (not
  (and
    (<
      i@29@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    (<= 0 i@29@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@29@01 Int)) (!
  (implies
    (and
      (<
        i@29@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      (<= 0 i@29@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
          i@29@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
            i@29@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
            i@29@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    i@29@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))
(declare-const $k@30@01 $Perm)
(assert ($Perm.isReadVar $k@30@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@30@01 $Perm.No) (< $Perm.No $k@30@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               338
;  :arith-assert-diseq      9
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :binary-propagations     11
;  :conflicts               31
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             416
;  :mk-clause               20
;  :num-allocs              3525791
;  :num-checks              52
;  :propagations            19
;  :quant-instantiations    24
;  :rlimit-count            124964)
(assert (<= $Perm.No $k@30@01))
(assert (<= $k@30@01 $Perm.Write))
(assert (implies (< $Perm.No $k@30@01) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
  $Snap.unit))
; [eval] 0 < diz.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@30@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               344
;  :arith-assert-diseq      9
;  :arith-assert-lower      23
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     11
;  :conflicts               32
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             419
;  :mk-clause               20
;  :num-allocs              3525791
;  :num-checks              53
;  :propagations            19
;  :quant-instantiations    24
;  :rlimit-count            125297)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))
(declare-const $k@31@01 $Perm)
(assert ($Perm.isReadVar $k@31@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@31@01 $Perm.No) (< $Perm.No $k@31@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               350
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             426
;  :mk-clause               22
;  :num-allocs              3525791
;  :num-checks              54
;  :propagations            20
;  :quant-instantiations    25
;  :rlimit-count            125808)
(declare-const $t@32@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@20@01)
    (=
      $t@32@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01)))))
  (implies
    (< $Perm.No $k@31@01)
    (=
      $t@32@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))
(assert (<= $Perm.No (+ $k@20@01 $k@31@01)))
(assert (<= (+ $k@20@01 $k@31@01) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@20@01 $k@31@01)) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))
  $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@20@01 $k@31@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               360
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      19
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         1
;  :binary-propagations     11
;  :conflicts               34
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             434
;  :mk-clause               22
;  :num-allocs              3653620
;  :num-checks              55
;  :propagations            20
;  :quant-instantiations    26
;  :rlimit-count            126435)
(assert (not (= $t@32@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@20@01 $k@31@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               366
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :binary-propagations     11
;  :conflicts               35
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             437
;  :mk-clause               22
;  :num-allocs              3653620
;  :num-checks              56
;  :propagations            20
;  :quant-instantiations    26
;  :rlimit-count            126769
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@20@01 $k@31@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               371
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      21
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               36
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             439
;  :mk-clause               22
;  :num-allocs              3653620
;  :num-checks              57
;  :propagations            20
;  :quant-instantiations    26
;  :rlimit-count            127068)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               371
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      21
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               36
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             439
;  :mk-clause               22
;  :num-allocs              3653620
;  :num-checks              58
;  :propagations            20
;  :quant-instantiations    26
;  :rlimit-count            127081)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               371
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      21
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               37
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             440
;  :mk-clause               22
;  :num-allocs              3653620
;  :num-checks              59
;  :propagations            20
;  :quant-instantiations    26
;  :rlimit-count            127171)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))
(declare-const $k@33@01 $Perm)
(assert ($Perm.isReadVar $k@33@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@33@01 $Perm.No) (< $Perm.No $k@33@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               379
;  :arith-assert-diseq      11
;  :arith-assert-lower      29
;  :arith-assert-upper      22
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               38
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             447
;  :mk-clause               24
;  :num-allocs              3653620
;  :num-checks              60
;  :propagations            21
;  :quant-instantiations    27
;  :rlimit-count            127703)
(declare-const $t@34@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@21@01)
    (=
      $t@34@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
  (implies
    (< $Perm.No $k@33@01)
    (=
      $t@34@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))
(assert (<= $Perm.No (+ $k@21@01 $k@33@01)))
(assert (<= (+ $k@21@01 $k@33@01) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@21@01 $k@33@01)) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@21@01 $k@33@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               389
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      24
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :binary-propagations     11
;  :conflicts               39
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             455
;  :mk-clause               24
;  :num-allocs              3653620
;  :num-checks              61
;  :propagations            21
;  :quant-instantiations    28
;  :rlimit-count            128428)
(assert (not (= $t@34@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@21@01 $k@33@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               395
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      25
;  :arith-conflicts         5
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         5
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             458
;  :mk-clause               24
;  :num-allocs              3653620
;  :num-checks              62
;  :propagations            21
;  :quant-instantiations    28
;  :rlimit-count            128802)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@21@01 $k@33@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               41
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             460
;  :mk-clause               24
;  :num-allocs              3653620
;  :num-checks              63
;  :propagations            21
;  :quant-instantiations    28
;  :rlimit-count            129141)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               41
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             460
;  :mk-clause               24
;  :num-allocs              3653620
;  :num-checks              64
;  :propagations            21
;  :quant-instantiations    28
;  :rlimit-count            129154)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             461
;  :mk-clause               24
;  :num-allocs              3653620
;  :num-checks              65
;  :propagations            21
;  :quant-instantiations    28
;  :rlimit-count            129304)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               409
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             465
;  :mk-clause               24
;  :num-allocs              3653620
;  :num-checks              66
;  :propagations            21
;  :quant-instantiations    29
;  :rlimit-count            129734)
; [eval] -1
(push) ; 3
; [then-branch: 4 | First:(Second:(Second:(Second:($t@28@01))))[0] == -1 | live]
; [else-branch: 4 | First:(Second:(Second:(Second:($t@28@01))))[0] != -1 | live]
(push) ; 4
; [then-branch: 4 | First:(Second:(Second:(Second:($t@28@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    0)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 4 | First:(Second:(Second:(Second:($t@28@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               409
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      27
;  :arith-conflicts         6
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              11
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             471
;  :mk-clause               28
;  :num-allocs              3653620
;  :num-checks              67
;  :propagations            23
;  :quant-instantiations    30
;  :rlimit-count            129972)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               415
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      27
;  :arith-conflicts         6
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              15
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             475
;  :mk-clause               29
;  :num-allocs              3653620
;  :num-checks              68
;  :propagations            23
;  :quant-instantiations    30
;  :rlimit-count            130409)
; [eval] -1
(push) ; 3
; [then-branch: 5 | First:(Second:(Second:(Second:($t@28@01))))[1] == -1 | live]
; [else-branch: 5 | First:(Second:(Second:(Second:($t@28@01))))[1] != -1 | live]
(push) ; 4
; [then-branch: 5 | First:(Second:(Second:(Second:($t@28@01))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    1)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | First:(Second:(Second:(Second:($t@28@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               415
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      28
;  :arith-conflicts         6
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              15
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             481
;  :mk-clause               33
;  :num-allocs              3653620
;  :num-checks              69
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            130647)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               421
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      28
;  :arith-conflicts         6
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              19
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             485
;  :mk-clause               34
;  :num-allocs              3653620
;  :num-checks              70
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            131094)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               427
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      28
;  :arith-conflicts         6
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              19
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             488
;  :mk-clause               34
;  :num-allocs              3653620
;  :num-checks              71
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            131554)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               433
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      28
;  :arith-conflicts         6
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              19
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             491
;  :mk-clause               34
;  :num-allocs              3653620
;  :num-checks              72
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            132009)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@21@01 $k@33@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               439
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      30
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         7
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              19
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             495
;  :mk-clause               34
;  :num-allocs              3653620
;  :num-checks              73
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            132511)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               439
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      30
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         7
;  :binary-propagations     11
;  :conflicts               44
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              19
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             496
;  :mk-clause               34
;  :num-allocs              3653620
;  :num-checks              74
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            132661)
(push) ; 3
; [then-branch: 6 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))) | live]
; [else-branch: 6 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))) | live]
(push) ; 4
; [then-branch: 6 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))))]
(pop) ; 4
(push) ; 4
; [else-branch: 6 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               439
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      30
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         7
;  :binary-propagations     11
;  :conflicts               45
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              19
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             496
;  :mk-clause               34
;  :num-allocs              3653620
;  :num-checks              75
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            132681)
; [eval] -1
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      1)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               439
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      30
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         7
;  :binary-propagations     11
;  :conflicts               45
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              19
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             496
;  :mk-clause               34
;  :num-allocs              3653620
;  :num-checks              76
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            132685)
; [then-branch: 7 | First:(Second:(Second:(Second:($t@28@01))))[1] == -1 | dead]
; [else-branch: 7 | First:(Second:(Second:(Second:($t@28@01))))[1] != -1 | live]
(push) ; 6
; [else-branch: 7 | First:(Second:(Second:(Second:($t@28@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      1)
    (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               445
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      30
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         7
;  :binary-propagations     11
;  :conflicts               45
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   14
;  :datatype-splits         10
;  :decisions               16
;  :del-clause              19
;  :final-checks            10
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             498
;  :mk-clause               34
;  :num-allocs              3653620
;  :num-checks              77
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            133079)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               502
;  :arith-assert-diseq      13
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     11
;  :conflicts               46
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 31
;  :datatype-occurs-check   20
;  :datatype-splits         18
;  :decisions               32
;  :del-clause              20
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             510
;  :mk-clause               35
;  :num-allocs              3785135
;  :num-checks              78
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            133846)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               558
;  :arith-assert-diseq      13
;  :arith-assert-lower      37
;  :arith-assert-upper      31
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     11
;  :conflicts               47
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   26
;  :datatype-splits         26
;  :decisions               48
;  :del-clause              21
;  :final-checks            16
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             522
;  :mk-clause               36
;  :num-allocs              3785135
;  :num-checks              79
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            134614)
; [then-branch: 8 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2] | live]
; [else-branch: 8 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2]) | live]
(push) ; 4
; [then-branch: 8 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               559
;  :arith-assert-diseq      13
;  :arith-assert-lower      38
;  :arith-assert-upper      31
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         9
;  :binary-propagations     11
;  :conflicts               47
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   26
;  :datatype-splits         26
;  :decisions               48
;  :del-clause              21
;  :final-checks            16
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             523
;  :mk-clause               36
;  :num-allocs              3785135
;  :num-checks              80
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            134762)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               565
;  :arith-assert-diseq      13
;  :arith-assert-lower      38
;  :arith-assert-upper      31
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         9
;  :binary-propagations     11
;  :conflicts               47
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 46
;  :datatype-occurs-check   26
;  :datatype-splits         26
;  :decisions               48
;  :del-clause              21
;  :final-checks            16
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             526
;  :mk-clause               37
;  :num-allocs              3785135
;  :num-checks              81
;  :propagations            25
;  :quant-instantiations    31
;  :rlimit-count            135361)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               622
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      33
;  :arith-conflicts         7
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         10
;  :binary-propagations     11
;  :conflicts               48
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   32
;  :datatype-splits         34
;  :decisions               63
;  :del-clause              26
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             541
;  :mk-clause               42
;  :num-allocs              3785135
;  :num-checks              82
;  :propagations            29
;  :quant-instantiations    32
;  :rlimit-count            136156)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               678
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      34
;  :arith-conflicts         7
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         10
;  :binary-propagations     11
;  :conflicts               49
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 76
;  :datatype-occurs-check   38
;  :datatype-splits         42
;  :decisions               79
;  :del-clause              27
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             552
;  :mk-clause               43
;  :num-allocs              3785135
;  :num-checks              83
;  :propagations            29
;  :quant-instantiations    32
;  :rlimit-count            136923)
; [then-branch: 9 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2] | live]
; [else-branch: 9 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2]) | live]
(push) ; 4
; [then-branch: 9 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 5
(assert (not (< $Perm.No (+ $k@20@01 $k@31@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               680
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      37
;  :arith-conflicts         8
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         12
;  :binary-propagations     11
;  :conflicts               50
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 76
;  :datatype-occurs-check   38
;  :datatype-splits         42
;  :decisions               79
;  :del-clause              27
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             557
;  :mk-clause               46
;  :num-allocs              3785135
;  :num-checks              84
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            137157)
(push) ; 5
(assert (not (< $Perm.No $k@30@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               680
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      37
;  :arith-conflicts         8
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         12
;  :binary-propagations     11
;  :conflicts               51
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 76
;  :datatype-occurs-check   38
;  :datatype-splits         42
;  :decisions               79
;  :del-clause              27
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             557
;  :mk-clause               46
;  :num-allocs              3785135
;  :num-checks              85
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            137205)
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 3
(assert (not (< $Perm.No (+ $k@21@01 $k@33@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               681
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      38
;  :arith-conflicts         9
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         13
;  :binary-propagations     11
;  :conflicts               52
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 76
;  :datatype-occurs-check   38
;  :datatype-splits         42
;  :decisions               79
;  :del-clause              30
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             560
;  :mk-clause               47
;  :num-allocs              3785135
;  :num-checks              86
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            137808)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               681
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      38
;  :arith-conflicts         9
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         13
;  :binary-propagations     11
;  :conflicts               53
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 76
;  :datatype-occurs-check   38
;  :datatype-splits         42
;  :decisions               79
;  :del-clause              30
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             561
;  :mk-clause               47
;  :num-allocs              3785135
;  :num-checks              87
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            137958)
(push) ; 3
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))) | live]
; [else-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))) | live]
(push) ; 4
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               681
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      38
;  :arith-conflicts         9
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         13
;  :binary-propagations     11
;  :conflicts               54
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 76
;  :datatype-occurs-check   38
;  :datatype-splits         42
;  :decisions               79
;  :del-clause              30
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             561
;  :mk-clause               47
;  :num-allocs              3785135
;  :num-checks              88
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            137973)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               681
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      38
;  :arith-conflicts         9
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         13
;  :binary-propagations     11
;  :conflicts               54
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 76
;  :datatype-occurs-check   38
;  :datatype-splits         42
;  :decisions               79
;  :del-clause              30
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             561
;  :mk-clause               47
;  :num-allocs              3785135
;  :num-checks              89
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            138016)
; [then-branch: 11 | First:(Second:(Second:(Second:($t@28@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))) | dead]
; [else-branch: 11 | !(First:(Second:(Second:(Second:($t@28@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))) | live]
(push) ; 4
; [else-branch: 11 | !(First:(Second:(Second:(Second:($t@28@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@28@01 diz@17@01 globals@18@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@35@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Sensor_forkOperator_EncodedGlobalVariables(diz.Main_sensor, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@20@01 $k@31@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-assert-diseq      13
;  :arith-assert-lower      44
;  :arith-assert-upper      43
;  :arith-conflicts         10
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               56
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              44
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             583
;  :mk-clause               50
;  :num-allocs              3785135
;  :num-checks              92
;  :propagations            36
;  :quant-instantiations    33
;  :rlimit-count            139392)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-assert-diseq      13
;  :arith-assert-lower      44
;  :arith-assert-upper      43
;  :arith-conflicts         10
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               56
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              44
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             583
;  :mk-clause               50
;  :num-allocs              3785135
;  :num-checks              93
;  :propagations            36
;  :quant-instantiations    33
;  :rlimit-count            139405)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-assert-diseq      13
;  :arith-assert-lower      44
;  :arith-assert-upper      43
;  :arith-conflicts         10
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               57
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              44
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             584
;  :mk-clause               50
;  :num-allocs              3785135
;  :num-checks              94
;  :propagations            36
;  :quant-instantiations    33
;  :rlimit-count            139495)
; [eval] diz.Sensor_m != null
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-assert-diseq      13
;  :arith-assert-lower      44
;  :arith-assert-upper      43
;  :arith-conflicts         10
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               58
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              44
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             585
;  :mk-clause               50
;  :num-allocs              3785135
;  :num-checks              95
;  :propagations            36
;  :quant-instantiations    33
;  :rlimit-count            139585)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-assert-diseq      13
;  :arith-assert-lower      44
;  :arith-assert-upper      43
;  :arith-conflicts         10
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               58
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              44
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             585
;  :mk-clause               50
;  :num-allocs              3785135
;  :num-checks              96
;  :propagations            36
;  :quant-instantiations    33
;  :rlimit-count            139603)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))
    $Ref.null)))
(declare-const $k@36@01 $Perm)
(assert ($Perm.isReadVar $k@36@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-assert-diseq      14
;  :arith-assert-lower      46
;  :arith-assert-upper      44
;  :arith-conflicts         10
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               59
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              44
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             590
;  :mk-clause               52
;  :num-allocs              3785135
;  :num-checks              97
;  :propagations            37
;  :quant-instantiations    33
;  :rlimit-count            139868)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@36@01 $Perm.No) (< $Perm.No $k@36@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-assert-diseq      14
;  :arith-assert-lower      46
;  :arith-assert-upper      44
;  :arith-conflicts         10
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               60
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              44
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             590
;  :mk-clause               52
;  :num-allocs              3785135
;  :num-checks              98
;  :propagations            37
;  :quant-instantiations    33
;  :rlimit-count            139918)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@17@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               791
;  :arith-assert-diseq      14
;  :arith-assert-lower      46
;  :arith-assert-upper      44
;  :arith-conflicts         10
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               60
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              44
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             590
;  :mk-clause               52
;  :num-allocs              3785135
;  :num-checks              99
;  :propagations            37
;  :quant-instantiations    33
;  :rlimit-count            139929)
(push) ; 3
(assert (not (not (= (+ $k@20@01 $k@31@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      14
;  :arith-assert-lower      46
;  :arith-assert-upper      45
;  :arith-conflicts         11
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               61
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              46
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             592
;  :mk-clause               54
;  :num-allocs              3785135
;  :num-checks              100
;  :propagations            38
;  :quant-instantiations    33
;  :rlimit-count            139989)
(assert (< $k@36@01 (+ $k@20@01 $k@31@01)))
(assert (<= $Perm.No (- (+ $k@20@01 $k@31@01) $k@36@01)))
(assert (<= (- (+ $k@20@01 $k@31@01) $k@36@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@20@01 $k@31@01) $k@36@01))
  (not (= diz@17@01 $Ref.null))))
; [eval] diz.Sensor_m.Main_sensor == diz
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      14
;  :arith-assert-lower      48
;  :arith-assert-upper      46
;  :arith-conflicts         11
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               62
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              46
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             596
;  :mk-clause               54
;  :num-allocs              3785135
;  :num-checks              101
;  :propagations            38
;  :quant-instantiations    33
;  :rlimit-count            140247)
(push) ; 3
(assert (not (=
  diz@17@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      14
;  :arith-assert-lower      48
;  :arith-assert-upper      46
;  :arith-conflicts         11
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               62
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              46
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             596
;  :mk-clause               54
;  :num-allocs              3785135
;  :num-checks              102
;  :propagations            38
;  :quant-instantiations    33
;  :rlimit-count            140258)
(push) ; 3
(assert (not (< $Perm.No (+ $k@20@01 $k@31@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      14
;  :arith-assert-lower      48
;  :arith-assert-upper      47
;  :arith-conflicts         12
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         17
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               63
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              46
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             597
;  :mk-clause               54
;  :num-allocs              3785135
;  :num-checks              103
;  :propagations            38
;  :quant-instantiations    33
;  :rlimit-count            140318)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      14
;  :arith-assert-lower      48
;  :arith-assert-upper      47
;  :arith-conflicts         12
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         17
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               63
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              46
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             597
;  :mk-clause               54
;  :num-allocs              3785135
;  :num-checks              104
;  :propagations            38
;  :quant-instantiations    33
;  :rlimit-count            140331)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      14
;  :arith-assert-lower      48
;  :arith-assert-upper      47
;  :arith-conflicts         12
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         17
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               64
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   54
;  :datatype-splits         56
;  :decisions               108
;  :del-clause              46
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             598
;  :mk-clause               54
;  :num-allocs              3785135
;  :num-checks              105
;  :propagations            38
;  :quant-instantiations    33
;  :rlimit-count            140421)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      14
;  :arith-assert-lower      49
;  :arith-assert-upper      49
;  :arith-conflicts         12
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         18
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               64
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   62
;  :datatype-splits         63
;  :decisions               122
;  :del-clause              47
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             606
;  :mk-clause               55
;  :num-allocs              3785135
;  :num-checks              106
;  :propagations            40
;  :quant-instantiations    33
;  :rlimit-count            141054)
; [eval] !diz.Sensor_init
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      14
;  :arith-assert-lower      49
;  :arith-assert-upper      49
;  :arith-conflicts         12
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         18
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               65
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   62
;  :datatype-splits         63
;  :decisions               122
;  :del-clause              47
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             607
;  :mk-clause               55
;  :num-allocs              3785135
;  :num-checks              107
;  :propagations            40
;  :quant-instantiations    33
;  :rlimit-count            141144)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      14
;  :arith-assert-lower      49
;  :arith-assert-upper      49
;  :arith-conflicts         12
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         18
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               66
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 116
;  :datatype-occurs-check   62
;  :datatype-splits         63
;  :decisions               122
;  :del-clause              47
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             608
;  :mk-clause               55
;  :num-allocs              3785135
;  :num-checks              108
;  :propagations            40
;  :quant-instantiations    33
;  :rlimit-count            141234)
(declare-const $t@37@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Controller_forkOperator_EncodedGlobalVariables(diz.Main_controller, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@21@01 $k@33@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               898
;  :arith-assert-diseq      14
;  :arith-assert-lower      50
;  :arith-assert-upper      52
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               67
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              50
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             617
;  :mk-clause               56
;  :num-allocs              3785135
;  :num-checks              110
;  :propagations            42
;  :quant-instantiations    33
;  :rlimit-count            141911)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               898
;  :arith-assert-diseq      14
;  :arith-assert-lower      50
;  :arith-assert-upper      52
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               67
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              50
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             617
;  :mk-clause               56
;  :num-allocs              3785135
;  :num-checks              111
;  :propagations            42
;  :quant-instantiations    33
;  :rlimit-count            141924)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               898
;  :arith-assert-diseq      14
;  :arith-assert-lower      50
;  :arith-assert-upper      52
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               68
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              50
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             618
;  :mk-clause               56
;  :num-allocs              3785135
;  :num-checks              112
;  :propagations            42
;  :quant-instantiations    33
;  :rlimit-count            142074)
; [eval] diz.Controller_m != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               898
;  :arith-assert-diseq      14
;  :arith-assert-lower      50
;  :arith-assert-upper      52
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               69
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              50
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             619
;  :mk-clause               56
;  :num-allocs              3785135
;  :num-checks              113
;  :propagations            42
;  :quant-instantiations    33
;  :rlimit-count            142224)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               898
;  :arith-assert-diseq      14
;  :arith-assert-lower      50
;  :arith-assert-upper      52
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               69
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              50
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             619
;  :mk-clause               56
;  :num-allocs              3785135
;  :num-checks              114
;  :propagations            42
;  :quant-instantiations    33
;  :rlimit-count            142242)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
    $Ref.null)))
(declare-const $k@38@01 $Perm)
(assert ($Perm.isReadVar $k@38@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               898
;  :arith-assert-diseq      15
;  :arith-assert-lower      52
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               70
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              50
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             624
;  :mk-clause               58
;  :num-allocs              3785135
;  :num-checks              115
;  :propagations            43
;  :quant-instantiations    33
;  :rlimit-count            142567)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@38@01 $Perm.No) (< $Perm.No $k@38@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               898
;  :arith-assert-diseq      15
;  :arith-assert-lower      52
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               71
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              50
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             624
;  :mk-clause               58
;  :num-allocs              3785135
;  :num-checks              116
;  :propagations            43
;  :quant-instantiations    33
;  :rlimit-count            142617)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@17@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               898
;  :arith-assert-diseq      15
;  :arith-assert-lower      52
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               71
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              50
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             624
;  :mk-clause               58
;  :num-allocs              3785135
;  :num-checks              117
;  :propagations            43
;  :quant-instantiations    33
;  :rlimit-count            142628)
(push) ; 3
(assert (not (not (= (+ $k@21@01 $k@33@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-assert-diseq      15
;  :arith-assert-lower      52
;  :arith-assert-upper      54
;  :arith-conflicts         14
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               72
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              52
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             626
;  :mk-clause               60
;  :num-allocs              3785135
;  :num-checks              118
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            142688)
(assert (< $k@38@01 (+ $k@21@01 $k@33@01)))
(assert (<= $Perm.No (- (+ $k@21@01 $k@33@01) $k@38@01)))
(assert (<= (- (+ $k@21@01 $k@33@01) $k@38@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@21@01 $k@33@01) $k@38@01))
  (not (= diz@17@01 $Ref.null))))
; [eval] diz.Controller_m.Main_controller == diz
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-assert-diseq      15
;  :arith-assert-lower      54
;  :arith-assert-upper      55
;  :arith-conflicts         14
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               73
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              52
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             630
;  :mk-clause               60
;  :num-allocs              3785135
;  :num-checks              119
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            143006)
(push) ; 3
(assert (not (=
  diz@17@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-assert-diseq      15
;  :arith-assert-lower      54
;  :arith-assert-upper      55
;  :arith-conflicts         14
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         20
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               73
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              52
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             630
;  :mk-clause               60
;  :num-allocs              3785135
;  :num-checks              120
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            143017)
(push) ; 3
(assert (not (< $Perm.No (+ $k@21@01 $k@33@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-assert-diseq      15
;  :arith-assert-lower      54
;  :arith-assert-upper      56
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         21
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               74
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              52
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             631
;  :mk-clause               60
;  :num-allocs              3785135
;  :num-checks              121
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            143077)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-assert-diseq      15
;  :arith-assert-lower      54
;  :arith-assert-upper      56
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         21
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               74
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              52
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             631
;  :mk-clause               60
;  :num-allocs              3785135
;  :num-checks              122
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            143090)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-assert-diseq      15
;  :arith-assert-lower      54
;  :arith-assert-upper      56
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         21
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               75
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 129
;  :datatype-occurs-check   70
;  :datatype-splits         70
;  :decisions               136
;  :del-clause              52
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             632
;  :mk-clause               60
;  :num-allocs              3785135
;  :num-checks              123
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            143240)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-assert-diseq      15
;  :arith-assert-lower      55
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         22
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               75
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 142
;  :datatype-occurs-check   78
;  :datatype-splits         77
;  :decisions               150
;  :del-clause              53
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             640
;  :mk-clause               61
;  :num-allocs              3785135
;  :num-checks              124
;  :propagations            46
;  :quant-instantiations    33
;  :rlimit-count            143879)
; [eval] !diz.Controller_init
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-assert-diseq      15
;  :arith-assert-lower      55
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         22
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               76
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 142
;  :datatype-occurs-check   78
;  :datatype-splits         77
;  :decisions               150
;  :del-clause              53
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             641
;  :mk-clause               61
;  :num-allocs              3785135
;  :num-checks              125
;  :propagations            46
;  :quant-instantiations    33
;  :rlimit-count            144029)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-assert-diseq      15
;  :arith-assert-lower      55
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         22
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               77
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 142
;  :datatype-occurs-check   78
;  :datatype-splits         77
;  :decisions               150
;  :del-clause              53
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             642
;  :mk-clause               61
;  :num-allocs              3785135
;  :num-checks              126
;  :propagations            46
;  :quant-instantiations    33
;  :rlimit-count            144179)
(declare-const $t@39@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@40@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 12 | 0 <= i@40@01 | live]
; [else-branch: 12 | !(0 <= i@40@01) | live]
(push) ; 5
; [then-branch: 12 | 0 <= i@40@01]
(assert (<= 0 i@40@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 12 | !(0 <= i@40@01)]
(assert (not (<= 0 i@40@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 13 | i@40@01 < |First:(Second:(Second:(Second:($t@28@01))))| && 0 <= i@40@01 | live]
; [else-branch: 13 | !(i@40@01 < |First:(Second:(Second:(Second:($t@28@01))))| && 0 <= i@40@01) | live]
(push) ; 5
; [then-branch: 13 | i@40@01 < |First:(Second:(Second:(Second:($t@28@01))))| && 0 <= i@40@01]
(assert (and
  (<
    i@40@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
  (<= 0 i@40@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@40@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      15
;  :arith-assert-lower      57
;  :arith-assert-upper      61
;  :arith-conflicts         15
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         23
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               77
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              56
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             652
;  :mk-clause               62
;  :num-allocs              3785135
;  :num-checks              128
;  :propagations            48
;  :quant-instantiations    33
;  :rlimit-count            144938)
; [eval] -1
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@28@01))))[i@40@01] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@28@01))))[i@40@01] != -1 | live]
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:($t@28@01))))[i@40@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    i@40@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | First:(Second:(Second:(Second:($t@28@01))))[i@40@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      i@40@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@40@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      16
;  :arith-assert-lower      60
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         23
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               77
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              56
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             658
;  :mk-clause               66
;  :num-allocs              3785135
;  :num-checks              129
;  :propagations            50
;  :quant-instantiations    34
;  :rlimit-count            145170)
(push) ; 8
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@28@01))))[i@40@01] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@28@01))))[i@40@01]) | live]
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@28@01))))[i@40@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    i@40@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@40@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      16
;  :arith-assert-lower      60
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         23
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               77
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              56
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             658
;  :mk-clause               66
;  :num-allocs              3785135
;  :num-checks              130
;  :propagations            50
;  :quant-instantiations    34
;  :rlimit-count            145284)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@28@01))))[i@40@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      i@40@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 13 | !(i@40@01 < |First:(Second:(Second:(Second:($t@28@01))))| && 0 <= i@40@01)]
(assert (not
  (and
    (<
      i@40@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    (<= 0 i@40@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 3
(assert (not (forall ((i@40@01 Int)) (!
  (implies
    (and
      (<
        i@40@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      (<= 0 i@40@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
          i@40@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
            i@40@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
            i@40@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    i@40@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      18
;  :arith-assert-lower      61
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         23
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               78
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             666
;  :mk-clause               80
;  :num-allocs              3785135
;  :num-checks              131
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            145730)
(assert (forall ((i@40@01 Int)) (!
  (implies
    (and
      (<
        i@40@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      (<= 0 i@40@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
          i@40@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
            i@40@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
            i@40@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    i@40@01))
  :qid |prog.l<no position>|)))
(declare-const $k@41@01 $Perm)
(assert ($Perm.isReadVar $k@41@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@41@01 $Perm.No) (< $Perm.No $k@41@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         23
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               79
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             671
;  :mk-clause               82
;  :num-allocs              3785135
;  :num-checks              132
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            146290)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@30@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      19
;  :arith-assert-lower      63
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         23
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               79
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             671
;  :mk-clause               82
;  :num-allocs              3785135
;  :num-checks              133
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            146301)
(assert (< $k@41@01 $k@30@01))
(assert (<= $Perm.No (- $k@30@01 $k@41@01)))
(assert (<= (- $k@30@01 $k@41@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@30@01 $k@41@01)) (not (= diz@17@01 $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 3
(assert (not (< $Perm.No $k@30@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      19
;  :arith-assert-lower      65
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         23
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               80
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             674
;  :mk-clause               82
;  :num-allocs              3785135
;  :num-checks              134
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            146521)
(declare-const $k@42@01 $Perm)
(assert ($Perm.isReadVar $k@42@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@42@01 $Perm.No) (< $Perm.No $k@42@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      20
;  :arith-assert-lower      67
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               81
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             678
;  :mk-clause               84
;  :num-allocs              3785135
;  :num-checks              135
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            146720)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@20@01 $k@31@01) $k@36@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      20
;  :arith-assert-lower      67
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         23
;  :arith-pivots            3
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             679
;  :mk-clause               84
;  :num-allocs              3785135
;  :num-checks              136
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            146794)
(assert (< $k@42@01 (- (+ $k@20@01 $k@31@01) $k@36@01)))
(assert (<= $Perm.No (- (- (+ $k@20@01 $k@31@01) $k@36@01) $k@42@01)))
(assert (<= (- (- (+ $k@20@01 $k@31@01) $k@36@01) $k@42@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@20@01 $k@31@01) $k@36@01) $k@42@01))
  (not (= diz@17@01 $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@20@01 $k@31@01) $k@36@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      69
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             682
;  :mk-clause               84
;  :num-allocs              3785135
;  :num-checks              137
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            147049)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@20@01 $k@31@01) $k@36@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      69
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             682
;  :mk-clause               84
;  :num-allocs              3785135
;  :num-checks              138
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            147070)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      69
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             682
;  :mk-clause               84
;  :num-allocs              3785135
;  :num-checks              139
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            147083)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@20@01 $k@31@01) $k@36@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      69
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             682
;  :mk-clause               84
;  :num-allocs              3785135
;  :num-checks              140
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            147104)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@01))) $t@32@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      69
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               83
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             683
;  :mk-clause               84
;  :num-allocs              3785135
;  :num-checks              141
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            147194)
(declare-const $k@43@01 $Perm)
(assert ($Perm.isReadVar $k@43@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@43@01 $Perm.No) (< $Perm.No $k@43@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          2
;  :arith-assert-diseq      21
;  :arith-assert-lower      71
;  :arith-assert-upper      68
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             687
;  :mk-clause               86
;  :num-allocs              3785135
;  :num-checks              142
;  :propagations            55
;  :quant-instantiations    35
;  :rlimit-count            147392)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@21@01 $k@33@01) $k@38@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          2
;  :arith-assert-diseq      21
;  :arith-assert-lower      71
;  :arith-assert-upper      68
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               85
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             688
;  :mk-clause               86
;  :num-allocs              3785135
;  :num-checks              143
;  :propagations            55
;  :quant-instantiations    35
;  :rlimit-count            147466)
(assert (< $k@43@01 (- (+ $k@21@01 $k@33@01) $k@38@01)))
(assert (<= $Perm.No (- (- (+ $k@21@01 $k@33@01) $k@38@01) $k@43@01)))
(assert (<= (- (- (+ $k@21@01 $k@33@01) $k@38@01) $k@43@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@21@01 $k@33@01) $k@38@01) $k@43@01))
  (not (= diz@17@01 $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@21@01 $k@33@01) $k@38@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      73
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               85
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             691
;  :mk-clause               86
;  :num-allocs              3785135
;  :num-checks              144
;  :propagations            55
;  :quant-instantiations    35
;  :rlimit-count            147729)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@21@01 $k@33@01) $k@38@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      73
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               85
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             691
;  :mk-clause               86
;  :num-allocs              3785135
;  :num-checks              145
;  :propagations            55
;  :quant-instantiations    35
;  :rlimit-count            147750)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      73
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               85
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             691
;  :mk-clause               86
;  :num-allocs              3785135
;  :num-checks              146
;  :propagations            55
;  :quant-instantiations    35
;  :rlimit-count            147763)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@21@01 $k@33@01) $k@38@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      73
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               85
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             691
;  :mk-clause               86
;  :num-allocs              3785135
;  :num-checks              147
;  :propagations            55
;  :quant-instantiations    35
;  :rlimit-count            147784)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      73
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             692
;  :mk-clause               86
;  :num-allocs              3785135
;  :num-checks              148
;  :propagations            55
;  :quant-instantiations    35
;  :rlimit-count            147934)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      73
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             692
;  :mk-clause               86
;  :num-allocs              3785135
;  :num-checks              149
;  :propagations            55
;  :quant-instantiations    35
;  :rlimit-count            147949)
; [eval] -1
(push) ; 3
; [then-branch: 16 | First:(Second:(Second:(Second:($t@28@01))))[0] == -1 | live]
; [else-branch: 16 | First:(Second:(Second:(Second:($t@28@01))))[0] != -1 | live]
(push) ; 4
; [then-branch: 16 | First:(Second:(Second:(Second:($t@28@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    0)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 16 | First:(Second:(Second:(Second:($t@28@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1006
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      74
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              74
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             696
;  :mk-clause               89
;  :num-allocs              3785135
;  :num-checks              150
;  :propagations            58
;  :quant-instantiations    37
;  :rlimit-count            148181)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1006
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      74
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              77
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             696
;  :mk-clause               89
;  :num-allocs              3785135
;  :num-checks              151
;  :propagations            58
;  :quant-instantiations    37
;  :rlimit-count            148196)
; [eval] -1
(push) ; 3
; [then-branch: 17 | First:(Second:(Second:(Second:($t@28@01))))[1] == -1 | live]
; [else-branch: 17 | First:(Second:(Second:(Second:($t@28@01))))[1] != -1 | live]
(push) ; 4
; [then-branch: 17 | First:(Second:(Second:(Second:($t@28@01))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    1)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 17 | First:(Second:(Second:(Second:($t@28@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              77
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             701
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              152
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148430)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              80
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             701
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              153
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148445)
; [eval] -1
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              80
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             701
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              154
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148460)
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              80
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             701
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              155
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148475)
; [eval] -1
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@21@01 $k@33@01) $k@38@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              80
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             701
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              156
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148496)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               87
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              80
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             702
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              157
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148646)
(push) ; 3
; [then-branch: 18 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))) | live]
; [else-branch: 18 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))) | live]
(push) ; 4
; [then-branch: 18 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))))]
(pop) ; 4
(push) ; 4
; [else-branch: 18 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              80
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             702
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              158
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148666)
; [eval] -1
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      1)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              80
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             702
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              159
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148670)
; [then-branch: 19 | First:(Second:(Second:(Second:($t@28@01))))[1] == -1 | dead]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@28@01))))[1] != -1 | live]
(push) ; 6
; [else-branch: 19 | First:(Second:(Second:(Second:($t@28@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
      1)
    (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      76
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   86
;  :datatype-splits         84
;  :decisions               164
;  :del-clause              80
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             702
;  :mk-clause               92
;  :num-allocs              3785135
;  :num-checks              160
;  :propagations            61
;  :quant-instantiations    39
;  :rlimit-count            148687)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1072
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      80
;  :arith-assert-upper      75
;  :arith-conflicts         15
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         24
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 172
;  :datatype-occurs-check   92
;  :datatype-splits         93
;  :decisions               180
;  :del-clause              85
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          1
;  :mk-bool-var             724
;  :mk-clause               97
;  :num-allocs              3931635
;  :num-checks              161
;  :propagations            67
;  :quant-instantiations    42
;  :rlimit-count            149600
;  :time                    0.00)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1125
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      81
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         25
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   100
;  :datatype-splits         100
;  :decisions               194
;  :del-clause              86
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          1
;  :mk-bool-var             732
;  :mk-clause               98
;  :num-allocs              3931635
;  :num-checks              162
;  :propagations            68
;  :quant-instantiations    42
;  :rlimit-count            150384)
; [then-branch: 20 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2] | live]
; [else-branch: 20 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2]) | live]
(push) ; 4
; [then-branch: 20 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1128
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      84
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         26
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   100
;  :datatype-splits         100
;  :decisions               194
;  :del-clause              86
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          1
;  :mk-bool-var             737
;  :mk-clause               101
;  :num-allocs              3931635
;  :num-checks              163
;  :propagations            73
;  :quant-instantiations    45
;  :rlimit-count            150618)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1128
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      84
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         26
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   100
;  :datatype-splits         100
;  :decisions               194
;  :del-clause              89
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          1
;  :mk-bool-var             737
;  :mk-clause               101
;  :num-allocs              3931635
;  :num-checks              164
;  :propagations            73
;  :quant-instantiations    45
;  :rlimit-count            150665)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1193
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      88
;  :arith-assert-upper      81
;  :arith-conflicts         15
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         27
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               92
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 202
;  :datatype-occurs-check   106
;  :datatype-splits         109
;  :decisions               210
;  :del-clause              94
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             759
;  :mk-clause               106
;  :num-allocs              3931635
;  :num-checks              165
;  :propagations            79
;  :quant-instantiations    48
;  :rlimit-count            151567)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1246
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      89
;  :arith-assert-upper      83
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         28
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               92
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 215
;  :datatype-occurs-check   114
;  :datatype-splits         116
;  :decisions               224
;  :del-clause              95
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             767
;  :mk-clause               107
;  :num-allocs              3931635
;  :num-checks              166
;  :propagations            80
;  :quant-instantiations    48
;  :rlimit-count            152351)
; [then-branch: 21 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2] | live]
; [else-branch: 21 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2]) | live]
(push) ; 4
; [then-branch: 21 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 5
(assert (not (< $Perm.No (- (+ $k@20@01 $k@31@01) $k@36@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      92
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               92
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 215
;  :datatype-occurs-check   114
;  :datatype-splits         116
;  :decisions               224
;  :del-clause              95
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             772
;  :mk-clause               110
;  :num-allocs              3931635
;  :num-checks              167
;  :propagations            85
;  :quant-instantiations    51
;  :rlimit-count            152591)
(push) ; 5
(assert (not (< $Perm.No $k@30@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      92
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 215
;  :datatype-occurs-check   114
;  :datatype-splits         116
;  :decisions               224
;  :del-clause              95
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             772
;  :mk-clause               110
;  :num-allocs              3931635
;  :num-checks              168
;  :propagations            85
;  :quant-instantiations    51
;  :rlimit-count            152639)
(pop) ; 4
(push) ; 4
; [else-branch: 21 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@28@01))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@21@01 $k@33@01) $k@38@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      92
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 215
;  :datatype-occurs-check   114
;  :datatype-splits         116
;  :decisions               224
;  :del-clause              98
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             772
;  :mk-clause               110
;  :num-allocs              3931635
;  :num-checks              169
;  :propagations            85
;  :quant-instantiations    51
;  :rlimit-count            152692)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $t@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      92
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               94
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 215
;  :datatype-occurs-check   114
;  :datatype-splits         116
;  :decisions               224
;  :del-clause              98
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             773
;  :mk-clause               110
;  :num-allocs              3931635
;  :num-checks              170
;  :propagations            85
;  :quant-instantiations    51
;  :rlimit-count            152842)
(push) ; 3
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))) | live]
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))) | live]
(push) ; 4
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      92
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 215
;  :datatype-occurs-check   114
;  :datatype-splits         116
;  :decisions               224
;  :del-clause              98
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             773
;  :mk-clause               110
;  :num-allocs              3931635
;  :num-checks              171
;  :propagations            85
;  :quant-instantiations    51
;  :rlimit-count            152857)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      92
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 215
;  :datatype-occurs-check   114
;  :datatype-splits         116
;  :decisions               224
;  :del-clause              98
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             773
;  :mk-clause               110
;  :num-allocs              3931635
;  :num-checks              172
;  :propagations            85
;  :quant-instantiations    51
;  :rlimit-count            152900)
; [then-branch: 23 | First:(Second:(Second:(Second:($t@28@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))) | dead]
; [else-branch: 23 | !(First:(Second:(Second:(Second:($t@28@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01))))))))))))) | live]
(push) ; 4
; [else-branch: 23 | !(First:(Second:(Second:(Second:($t@28@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@19@01)))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap $t@32@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))
                              ($Snap.combine
                                ($SortWrappers.$RefTo$Snap $t@34@01)
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) diz@17@01 globals@18@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const min_advance__39@44@01 Int)
(declare-const __flatten_39__38@45@01 Seq<Int>)
(declare-const __flatten_38__37@46@01 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1494
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      95
;  :arith-assert-upper      91
;  :arith-conflicts         15
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         32
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   132
;  :datatype-splits         137
;  :decisions               266
;  :del-clause              101
;  :final-checks            61
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             798
;  :mk-clause               113
;  :num-allocs              3931635
;  :num-checks              175
;  :propagations            91
;  :quant-instantiations    51
;  :rlimit-count            155868
;  :time                    0.00)
; [then-branch: 24 | True | live]
; [else-branch: 24 | False | dead]
(push) ; 5
; [then-branch: 24 | True]
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@47@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@47@01 ($Snap.combine ($Snap.first $t@47@01) ($Snap.second $t@47@01))))
(assert (= ($Snap.first $t@47@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@47@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@47@01))
    ($Snap.second ($Snap.second $t@47@01)))))
(assert (= ($Snap.first ($Snap.second $t@47@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@47@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@47@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@47@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@47@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@48@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 25 | 0 <= i@48@01 | live]
; [else-branch: 25 | !(0 <= i@48@01) | live]
(push) ; 8
; [then-branch: 25 | 0 <= i@48@01]
(assert (<= 0 i@48@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(0 <= i@48@01)]
(assert (not (<= 0 i@48@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 26 | i@48@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@48@01 | live]
; [else-branch: 26 | !(i@48@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@48@01) | live]
(push) ; 8
; [then-branch: 26 | i@48@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@48@01]
(assert (and
  (<
    i@48@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  (<= 0 i@48@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@48@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1597
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      101
;  :arith-assert-upper      96
;  :arith-conflicts         15
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              102
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             832
;  :mk-clause               114
;  :num-allocs              3931635
;  :num-checks              177
;  :propagations            93
;  :quant-instantiations    55
;  :rlimit-count            157822)
; [eval] -1
(push) ; 9
; [then-branch: 27 | First:(Second:(Second:(Second:($t@47@01))))[i@48@01] == -1 | live]
; [else-branch: 27 | First:(Second:(Second:(Second:($t@47@01))))[i@48@01] != -1 | live]
(push) ; 10
; [then-branch: 27 | First:(Second:(Second:(Second:($t@47@01))))[i@48@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@48@01)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 27 | First:(Second:(Second:(Second:($t@47@01))))[i@48@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i@48@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@48@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1597
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      101
;  :arith-assert-upper      96
;  :arith-conflicts         15
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              102
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             833
;  :mk-clause               114
;  :num-allocs              3931635
;  :num-checks              178
;  :propagations            93
;  :quant-instantiations    55
;  :rlimit-count            157997)
(push) ; 11
; [then-branch: 28 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i@48@01] | live]
; [else-branch: 28 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i@48@01]) | live]
(push) ; 12
; [then-branch: 28 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i@48@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@48@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@48@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1597
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      104
;  :arith-assert-upper      96
;  :arith-conflicts         15
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              102
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             836
;  :mk-clause               115
;  :num-allocs              3931635
;  :num-checks              179
;  :propagations            93
;  :quant-instantiations    55
;  :rlimit-count            158121)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 28 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i@48@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i@48@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 26 | !(i@48@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@48@01)]
(assert (not
  (and
    (<
      i@48@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    (<= 0 i@48@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@48@01 Int)) (!
  (implies
    (and
      (<
        i@48@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (<= 0 i@48@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          i@48@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i@48@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i@48@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@48@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
(declare-const $k@49@01 $Perm)
(assert ($Perm.isReadVar $k@49@01 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@49@01 $Perm.No) (< $Perm.No $k@49@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1608
;  :arith-add-rows          4
;  :arith-assert-diseq      25
;  :arith-assert-lower      106
;  :arith-assert-upper      97
;  :arith-conflicts         15
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               96
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             844
;  :mk-clause               117
;  :num-allocs              4086133
;  :num-checks              180
;  :propagations            94
;  :quant-instantiations    55
;  :rlimit-count            159072)
(assert (<= $Perm.No $k@49@01))
(assert (<= $k@49@01 $Perm.Write))
(assert (implies (< $Perm.No $k@49@01) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
  $Snap.unit))
; [eval] 0 < diz.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1614
;  :arith-add-rows          4
;  :arith-assert-diseq      25
;  :arith-assert-lower      106
;  :arith-assert-upper      98
;  :arith-conflicts         15
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               97
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             847
;  :mk-clause               117
;  :num-allocs              4086133
;  :num-checks              181
;  :propagations            94
;  :quant-instantiations    55
;  :rlimit-count            159405)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
(declare-const $k@50@01 $Perm)
(assert ($Perm.isReadVar $k@50@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@50@01 $Perm.No) (< $Perm.No $k@50@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1620
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      109
;  :arith-assert-upper      99
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               98
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             854
;  :mk-clause               119
;  :num-allocs              4086133
;  :num-checks              182
;  :propagations            95
;  :quant-instantiations    56
;  :rlimit-count            159915)
(assert (<= $Perm.No $k@50@01))
(assert (<= $k@50@01 $Perm.Write))
(assert (implies (< $Perm.No $k@50@01) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
  $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1626
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      109
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               99
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             857
;  :mk-clause               119
;  :num-allocs              4086133
;  :num-checks              183
;  :propagations            95
;  :quant-instantiations    56
;  :rlimit-count            160268)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1632
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      109
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               100
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             860
;  :mk-clause               119
;  :num-allocs              4086133
;  :num-checks              184
;  :propagations            95
;  :quant-instantiations    57
;  :rlimit-count            160652)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1637
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      109
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               101
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             861
;  :mk-clause               119
;  :num-allocs              4086133
;  :num-checks              185
;  :propagations            95
;  :quant-instantiations    57
;  :rlimit-count            160939)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1637
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      109
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               101
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             861
;  :mk-clause               119
;  :num-allocs              4086133
;  :num-checks              186
;  :propagations            95
;  :quant-instantiations    57
;  :rlimit-count            160952)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
(declare-const $k@51@01 $Perm)
(assert ($Perm.isReadVar $k@51@01 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@51@01 $Perm.No) (< $Perm.No $k@51@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1642
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      111
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               102
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             866
;  :mk-clause               121
;  :num-allocs              4086133
;  :num-checks              187
;  :propagations            96
;  :quant-instantiations    57
;  :rlimit-count            161393)
(assert (<= $Perm.No $k@51@01))
(assert (<= $k@51@01 $Perm.Write))
(assert (implies (< $Perm.No $k@51@01) (not (= diz@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1648
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      111
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             869
;  :mk-clause               121
;  :num-allocs              4086133
;  :num-checks              188
;  :propagations            96
;  :quant-instantiations    57
;  :rlimit-count            161786)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1654
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      111
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               104
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             872
;  :mk-clause               121
;  :num-allocs              4086133
;  :num-checks              189
;  :propagations            96
;  :quant-instantiations    58
;  :rlimit-count            162214)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1659
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      111
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             873
;  :mk-clause               121
;  :num-allocs              4086133
;  :num-checks              190
;  :propagations            96
;  :quant-instantiations    58
;  :rlimit-count            162541)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1659
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      111
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             873
;  :mk-clause               121
;  :num-allocs              4086133
;  :num-checks              191
;  :propagations            96
;  :quant-instantiations    58
;  :rlimit-count            162554)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      111
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             875
;  :mk-clause               121
;  :num-allocs              4086133
;  :num-checks              192
;  :propagations            96
;  :quant-instantiations    58
;  :rlimit-count            162890)
; [eval] -1
(push) ; 6
; [then-branch: 29 | First:(Second:(Second:(Second:($t@47@01))))[0] == -1 | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@47@01))))[0] != -1 | live]
(push) ; 7
; [then-branch: 29 | First:(Second:(Second:(Second:($t@47@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    0)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 29 | First:(Second:(Second:(Second:($t@47@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1665
;  :arith-add-rows          4
;  :arith-assert-diseq      28
;  :arith-assert-lower      114
;  :arith-assert-upper      103
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              103
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             881
;  :mk-clause               125
;  :num-allocs              4086133
;  :num-checks              193
;  :propagations            98
;  :quant-instantiations    59
;  :rlimit-count            163122)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          4
;  :arith-assert-diseq      28
;  :arith-assert-lower      114
;  :arith-assert-upper      103
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              107
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             885
;  :mk-clause               126
;  :num-allocs              4086133
;  :num-checks              194
;  :propagations            98
;  :quant-instantiations    59
;  :rlimit-count            163559)
; [eval] -1
(push) ; 6
; [then-branch: 30 | First:(Second:(Second:(Second:($t@47@01))))[1] == -1 | live]
; [else-branch: 30 | First:(Second:(Second:(Second:($t@47@01))))[1] != -1 | live]
(push) ; 7
; [then-branch: 30 | First:(Second:(Second:(Second:($t@47@01))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 30 | First:(Second:(Second:(Second:($t@47@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      117
;  :arith-assert-upper      104
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              107
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             891
;  :mk-clause               130
;  :num-allocs              4086133
;  :num-checks              195
;  :propagations            100
;  :quant-instantiations    60
;  :rlimit-count            163791)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1677
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      117
;  :arith-assert-upper      104
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              111
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             895
;  :mk-clause               131
;  :num-allocs              4086133
;  :num-checks              196
;  :propagations            100
;  :quant-instantiations    60
;  :rlimit-count            164238)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1683
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      117
;  :arith-assert-upper      104
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              111
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             898
;  :mk-clause               131
;  :num-allocs              4086133
;  :num-checks              197
;  :propagations            100
;  :quant-instantiations    60
;  :rlimit-count            164698)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1689
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      117
;  :arith-assert-upper      104
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              111
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             901
;  :mk-clause               131
;  :num-allocs              4086133
;  :num-checks              198
;  :propagations            100
;  :quant-instantiations    60
;  :rlimit-count            165153)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1695
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      117
;  :arith-assert-upper      105
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               106
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              111
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             904
;  :mk-clause               131
;  :num-allocs              4086133
;  :num-checks              199
;  :propagations            100
;  :quant-instantiations    60
;  :rlimit-count            165642)
(push) ; 6
; [then-branch: 31 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
; [else-branch: 31 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
(push) ; 7
; [then-branch: 31 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 31 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1699
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      117
;  :arith-assert-upper      105
;  :arith-conflicts         15
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               106
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   138
;  :datatype-splits         144
;  :decisions               280
;  :del-clause              111
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :minimized-lits          2
;  :mk-bool-var             907
;  :mk-clause               131
;  :num-allocs              4086133
;  :num-checks              200
;  :propagations            100
;  :quant-instantiations    62
;  :rlimit-count            165999)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1911
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      123
;  :arith-assert-upper      113
;  :arith-conflicts         15
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         39
;  :arith-pivots            12
;  :binary-propagations     11
;  :conflicts               108
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 317
;  :datatype-occurs-check   150
;  :datatype-splits         179
;  :decisions               331
;  :del-clause              119
;  :final-checks            68
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             961
;  :mk-clause               139
;  :num-allocs              4244798
;  :num-checks              201
;  :propagations            105
;  :quant-instantiations    62
;  :rlimit-count            167551
;  :time                    0.00)
(push) ; 9
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2160
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      132
;  :arith-assert-upper      124
;  :arith-conflicts         15
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         46
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               112
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 375
;  :datatype-occurs-check   165
;  :datatype-splits         218
;  :decisions               387
;  :del-clause              134
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1036
;  :mk-clause               154
;  :num-allocs              4244798
;  :num-checks              202
;  :propagations            114
;  :quant-instantiations    63
;  :rlimit-count            169268
;  :time                    0.00)
; [then-branch: 32 | First:(Second:(Second:(Second:($t@47@01))))[1] == -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@47@01))))[1] != -1 | live]
(push) ; 9
; [then-branch: 32 | First:(Second:(Second:(Second:($t@47@01))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      132
;  :arith-assert-upper      124
;  :arith-conflicts         15
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         46
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               112
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 375
;  :datatype-occurs-check   165
;  :datatype-splits         218
;  :decisions               387
;  :del-clause              134
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1036
;  :mk-clause               154
;  :num-allocs              4244798
;  :num-checks              203
;  :propagations            114
;  :quant-instantiations    63
;  :rlimit-count            169393)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 32 | First:(Second:(Second:(Second:($t@47@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2167
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      132
;  :arith-assert-upper      124
;  :arith-conflicts         15
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         46
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               112
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 375
;  :datatype-occurs-check   165
;  :datatype-splits         218
;  :decisions               387
;  :del-clause              134
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1039
;  :mk-clause               155
;  :num-allocs              4244798
;  :num-checks              204
;  :propagations            114
;  :quant-instantiations    63
;  :rlimit-count            169986)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2504
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      141
;  :arith-assert-upper      135
;  :arith-conflicts         16
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         55
;  :arith-pivots            24
;  :binary-propagations     11
;  :conflicts               116
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 443
;  :datatype-occurs-check   189
;  :datatype-splits         274
;  :decisions               458
;  :del-clause              149
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1134
;  :mk-clause               170
;  :num-allocs              4244798
;  :num-checks              205
;  :propagations            123
;  :quant-instantiations    66
;  :rlimit-count            172064
;  :time                    0.00)
(push) ; 7
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2646
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      145
;  :arith-assert-upper      141
;  :arith-conflicts         16
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         59
;  :arith-pivots            28
;  :binary-propagations     11
;  :conflicts               117
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 472
;  :datatype-occurs-check   198
;  :datatype-splits         292
;  :decisions               489
;  :del-clause              154
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1165
;  :mk-clause               175
;  :num-allocs              4244798
;  :num-checks              206
;  :propagations            126
;  :quant-instantiations    67
;  :rlimit-count            173306
;  :time                    0.00)
; [then-branch: 33 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[2] | live]
; [else-branch: 33 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[2]) | live]
(push) ; 7
; [then-branch: 33 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2647
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      146
;  :arith-assert-upper      141
;  :arith-conflicts         16
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         60
;  :arith-pivots            28
;  :binary-propagations     11
;  :conflicts               117
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 472
;  :datatype-occurs-check   198
;  :datatype-splits         292
;  :decisions               489
;  :del-clause              154
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1166
;  :mk-clause               175
;  :num-allocs              4244798
;  :num-checks              207
;  :propagations            126
;  :quant-instantiations    67
;  :rlimit-count            173454)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 33 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2653
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      146
;  :arith-assert-upper      141
;  :arith-conflicts         16
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         60
;  :arith-pivots            28
;  :binary-propagations     11
;  :conflicts               117
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 472
;  :datatype-occurs-check   198
;  :datatype-splits         292
;  :decisions               489
;  :del-clause              154
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1169
;  :mk-clause               176
;  :num-allocs              4244798
;  :num-checks              208
;  :propagations            126
;  :quant-instantiations    67
;  :rlimit-count            174047)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2941
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      155
;  :arith-assert-upper      152
;  :arith-conflicts         17
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         68
;  :arith-pivots            32
;  :binary-propagations     11
;  :conflicts               122
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 534
;  :datatype-occurs-check   220
;  :datatype-splits         338
;  :decisions               547
;  :del-clause              170
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1254
;  :mk-clause               192
;  :num-allocs              4244798
;  :num-checks              209
;  :propagations            136
;  :quant-instantiations    68
;  :rlimit-count            175866
;  :time                    0.00)
(push) ; 7
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3090
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      159
;  :arith-assert-upper      158
;  :arith-conflicts         17
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         72
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               123
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 563
;  :datatype-occurs-check   228
;  :datatype-splits         356
;  :decisions               578
;  :del-clause              175
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1284
;  :mk-clause               197
;  :num-allocs              4244798
;  :num-checks              210
;  :propagations            139
;  :quant-instantiations    69
;  :rlimit-count            177114
;  :time                    0.00)
; [then-branch: 34 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[2] | live]
; [else-branch: 34 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[2]) | live]
(push) ; 7
; [then-branch: 34 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 8
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3092
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      161
;  :arith-assert-upper      160
;  :arith-conflicts         17
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         73
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               124
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 563
;  :datatype-occurs-check   228
;  :datatype-splits         356
;  :decisions               578
;  :del-clause              175
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1288
;  :mk-clause               200
;  :num-allocs              4244798
;  :num-checks              211
;  :propagations            143
;  :quant-instantiations    70
;  :rlimit-count            177337)
(push) ; 8
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3092
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      161
;  :arith-assert-upper      160
;  :arith-conflicts         17
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         73
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               125
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 563
;  :datatype-occurs-check   228
;  :datatype-splits         356
;  :decisions               578
;  :del-clause              175
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1288
;  :mk-clause               200
;  :num-allocs              4244798
;  :num-checks              212
;  :propagations            143
;  :quant-instantiations    70
;  :rlimit-count            177385)
(pop) ; 7
(push) ; 7
; [else-branch: 34 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 6
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3101
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      161
;  :arith-assert-upper      160
;  :arith-conflicts         17
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         73
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 563
;  :datatype-occurs-check   228
;  :datatype-splits         356
;  :decisions               578
;  :del-clause              178
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1290
;  :mk-clause               201
;  :num-allocs              4244798
;  :num-checks              213
;  :propagations            143
;  :quant-instantiations    70
;  :rlimit-count            177984)
(push) ; 6
; [then-branch: 35 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
; [else-branch: 35 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
(push) ; 7
; [then-branch: 35 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3105
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      161
;  :arith-assert-upper      160
;  :arith-conflicts         17
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         73
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 563
;  :datatype-occurs-check   228
;  :datatype-splits         356
;  :decisions               578
;  :del-clause              178
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1292
;  :mk-clause               201
;  :num-allocs              4244798
;  :num-checks              214
;  :propagations            143
;  :quant-instantiations    72
;  :rlimit-count            178267)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 35 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3358
;  :arith-add-rows          17
;  :arith-assert-diseq      30
;  :arith-assert-lower      171
;  :arith-assert-upper      175
;  :arith-bound-prop        1
;  :arith-conflicts         17
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         84
;  :arith-pivots            46
;  :binary-propagations     11
;  :conflicts               130
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 620
;  :datatype-occurs-check   243
;  :datatype-splits         393
;  :decisions               633
;  :del-clause              196
;  :final-checks            98
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1374
;  :mk-clause               219
;  :num-allocs              4412569
;  :num-checks              215
;  :propagations            154
;  :quant-instantiations    75
;  :rlimit-count            180466
;  :time                    0.00)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3501
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      176
;  :arith-assert-upper      182
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         90
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               131
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 648
;  :datatype-occurs-check   251
;  :datatype-splits         410
;  :decisions               663
;  :del-clause              204
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1408
;  :mk-clause               227
;  :num-allocs              4412569
;  :num-checks              216
;  :propagations            158
;  :quant-instantiations    76
;  :rlimit-count            181993)
; [then-branch: 36 | First:(Second:(Second:(Second:($t@47@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
; [else-branch: 36 | !(First:(Second:(Second:(Second:($t@47@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
(push) ; 7
; [then-branch: 36 | First:(Second:(Second:(Second:($t@47@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 8
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3507
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      177
;  :arith-assert-upper      184
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         90
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               132
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 648
;  :datatype-occurs-check   251
;  :datatype-splits         410
;  :decisions               663
;  :del-clause              204
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1414
;  :mk-clause               230
;  :num-allocs              4412569
;  :num-checks              217
;  :propagations            162
;  :quant-instantiations    79
;  :rlimit-count            182412)
(push) ; 8
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3507
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      177
;  :arith-assert-upper      184
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         90
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 648
;  :datatype-occurs-check   251
;  :datatype-splits         410
;  :decisions               663
;  :del-clause              204
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1414
;  :mk-clause               230
;  :num-allocs              4412569
;  :num-checks              218
;  :propagations            162
;  :quant-instantiations    79
;  :rlimit-count            182460)
(pop) ; 7
(push) ; 7
; [else-branch: 36 | !(First:(Second:(Second:(Second:($t@47@01))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@47@01 diz@17@01 globals@18@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@52@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Main_immediate_wakeup_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@53@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 37 | 0 <= i@53@01 | live]
; [else-branch: 37 | !(0 <= i@53@01) | live]
(push) ; 8
; [then-branch: 37 | 0 <= i@53@01]
(assert (<= 0 i@53@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 37 | !(0 <= i@53@01)]
(assert (not (<= 0 i@53@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 38 | i@53@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@53@01 | live]
; [else-branch: 38 | !(i@53@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@53@01) | live]
(push) ; 8
; [then-branch: 38 | i@53@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@53@01]
(assert (and
  (<
    i@53@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  (<= 0 i@53@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@53@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3773
;  :arith-add-rows          34
;  :arith-assert-diseq      30
;  :arith-assert-lower      187
;  :arith-assert-upper      198
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         101
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               134
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              222
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1477
;  :mk-clause               242
;  :num-allocs              4412569
;  :num-checks              221
;  :propagations            172
;  :quant-instantiations    81
;  :rlimit-count            185335)
; [eval] -1
(push) ; 9
; [then-branch: 39 | First:(Second:(Second:(Second:($t@47@01))))[i@53@01] == -1 | live]
; [else-branch: 39 | First:(Second:(Second:(Second:($t@47@01))))[i@53@01] != -1 | live]
(push) ; 10
; [then-branch: 39 | First:(Second:(Second:(Second:($t@47@01))))[i@53@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@53@01)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 39 | First:(Second:(Second:(Second:($t@47@01))))[i@53@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i@53@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@53@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3773
;  :arith-add-rows          34
;  :arith-assert-diseq      31
;  :arith-assert-lower      190
;  :arith-assert-upper      199
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         101
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               134
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              222
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1483
;  :mk-clause               246
;  :num-allocs              4412569
;  :num-checks              222
;  :propagations            174
;  :quant-instantiations    82
;  :rlimit-count            185567)
(push) ; 11
; [then-branch: 40 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i@53@01] | live]
; [else-branch: 40 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i@53@01]) | live]
(push) ; 12
; [then-branch: 40 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i@53@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@53@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@53@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3773
;  :arith-add-rows          34
;  :arith-assert-diseq      31
;  :arith-assert-lower      190
;  :arith-assert-upper      199
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         101
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               134
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              222
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1483
;  :mk-clause               246
;  :num-allocs              4412569
;  :num-checks              223
;  :propagations            174
;  :quant-instantiations    82
;  :rlimit-count            185681)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 40 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i@53@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i@53@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 38 | !(i@53@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@53@01)]
(assert (not
  (and
    (<
      i@53@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    (<= 0 i@53@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@53@01 Int)) (!
  (implies
    (and
      (<
        i@53@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (<= 0 i@53@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          i@53@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i@53@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i@53@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@53@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3773
;  :arith-add-rows          34
;  :arith-assert-diseq      33
;  :arith-assert-lower      191
;  :arith-assert-upper      200
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         101
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               135
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              240
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1491
;  :mk-clause               260
;  :num-allocs              4412569
;  :num-checks              224
;  :propagations            176
;  :quant-instantiations    83
;  :rlimit-count            186127)
(assert (forall ((i@53@01 Int)) (!
  (implies
    (and
      (<
        i@53@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (<= 0 i@53@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          i@53@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i@53@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i@53@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@53@01))
  :qid |prog.l<no position>|)))
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (=
  ($Snap.second $t@54@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@54@01))
    ($Snap.second ($Snap.second $t@54@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@54@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@54@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@54@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@54@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@55@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 41 | 0 <= i@55@01 | live]
; [else-branch: 41 | !(0 <= i@55@01) | live]
(push) ; 8
; [then-branch: 41 | 0 <= i@55@01]
(assert (<= 0 i@55@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 41 | !(0 <= i@55@01)]
(assert (not (<= 0 i@55@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 42 | i@55@01 < |First:(Second:($t@54@01))| && 0 <= i@55@01 | live]
; [else-branch: 42 | !(i@55@01 < |First:(Second:($t@54@01))| && 0 <= i@55@01) | live]
(push) ; 8
; [then-branch: 42 | i@55@01 < |First:(Second:($t@54@01))| && 0 <= i@55@01]
(assert (and
  (<
    i@55@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))
  (<= 0 i@55@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@55@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3810
;  :arith-add-rows          34
;  :arith-assert-diseq      33
;  :arith-assert-lower      196
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         101
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               135
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              240
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1513
;  :mk-clause               260
;  :num-allocs              4412569
;  :num-checks              225
;  :propagations            176
;  :quant-instantiations    87
;  :rlimit-count            187554)
; [eval] -1
(push) ; 9
; [then-branch: 43 | First:(Second:($t@54@01))[i@55@01] == -1 | live]
; [else-branch: 43 | First:(Second:($t@54@01))[i@55@01] != -1 | live]
(push) ; 10
; [then-branch: 43 | First:(Second:($t@54@01))[i@55@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
    i@55@01)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 43 | First:(Second:($t@54@01))[i@55@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
      i@55@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@55@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3810
;  :arith-add-rows          34
;  :arith-assert-diseq      33
;  :arith-assert-lower      196
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         101
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               135
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              240
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1514
;  :mk-clause               260
;  :num-allocs              4412569
;  :num-checks              226
;  :propagations            176
;  :quant-instantiations    87
;  :rlimit-count            187705)
(push) ; 11
; [then-branch: 44 | 0 <= First:(Second:($t@54@01))[i@55@01] | live]
; [else-branch: 44 | !(0 <= First:(Second:($t@54@01))[i@55@01]) | live]
(push) ; 12
; [then-branch: 44 | 0 <= First:(Second:($t@54@01))[i@55@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
    i@55@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@55@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3810
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      199
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         101
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               135
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              240
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1517
;  :mk-clause               261
;  :num-allocs              4412569
;  :num-checks              227
;  :propagations            176
;  :quant-instantiations    87
;  :rlimit-count            187809)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 44 | !(0 <= First:(Second:($t@54@01))[i@55@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
      i@55@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 42 | !(i@55@01 < |First:(Second:($t@54@01))| && 0 <= i@55@01)]
(assert (not
  (and
    (<
      i@55@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))
    (<= 0 i@55@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@55@01 Int)) (!
  (implies
    (and
      (<
        i@55@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))
      (<= 0 i@55@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
          i@55@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
            i@55@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
            i@55@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
    i@55@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3827
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      200
;  :arith-assert-upper      204
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               135
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              241
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1536
;  :mk-clause               271
;  :num-allocs              4412569
;  :num-checks              228
;  :propagations            180
;  :quant-instantiations    89
;  :rlimit-count            188880)
(push) ; 6
; [then-branch: 45 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[0] | live]
; [else-branch: 45 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[0]) | live]
(push) ; 7
; [then-branch: 45 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3827
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      201
;  :arith-assert-upper      204
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               135
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              241
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1539
;  :mk-clause               275
;  :num-allocs              4412569
;  :num-checks              229
;  :propagations            180
;  :quant-instantiations    91
;  :rlimit-count            189053)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3827
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      201
;  :arith-assert-upper      204
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               135
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              241
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1539
;  :mk-clause               275
;  :num-allocs              4412569
;  :num-checks              230
;  :propagations            180
;  :quant-instantiations    91
;  :rlimit-count            189062)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3828
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      201
;  :arith-assert-upper      204
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               136
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 699
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               718
;  :del-clause              241
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1541
;  :mk-clause               275
;  :num-allocs              4412569
;  :num-checks              231
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            189177)
(pop) ; 7
(push) ; 7
; [else-branch: 45 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        0))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3861
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      202
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               146
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 705
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               727
;  :del-clause              249
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1547
;  :mk-clause               279
;  :num-allocs              4412569
;  :num-checks              232
;  :propagations            188
;  :quant-instantiations    93
;  :rlimit-count            189606)
; [then-branch: 46 | First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[0] | dead]
; [else-branch: 46 | !(First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[0]) | live]
(push) ; 7
; [else-branch: 46 | !(First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        0)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3867
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      202
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               146
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 705
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               727
;  :del-clause              249
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1549
;  :mk-clause               279
;  :num-allocs              4412569
;  :num-checks              233
;  :propagations            188
;  :quant-instantiations    93
;  :rlimit-count            189864)
(push) ; 6
; [then-branch: 47 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[1] | live]
; [else-branch: 47 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[1]) | live]
(push) ; 7
; [then-branch: 47 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3867
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      203
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               146
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 705
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               727
;  :del-clause              249
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1552
;  :mk-clause               283
;  :num-allocs              4412569
;  :num-checks              234
;  :propagations            188
;  :quant-instantiations    95
;  :rlimit-count            190037)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3867
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      203
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               146
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 705
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               727
;  :del-clause              249
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1552
;  :mk-clause               283
;  :num-allocs              4412569
;  :num-checks              235
;  :propagations            188
;  :quant-instantiations    95
;  :rlimit-count            190046)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3868
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      203
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               147
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 705
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               727
;  :del-clause              249
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1554
;  :mk-clause               283
;  :num-allocs              4412569
;  :num-checks              236
;  :propagations            190
;  :quant-instantiations    95
;  :rlimit-count            190159)
(pop) ; 7
(push) ; 7
; [else-branch: 47 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3911
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      204
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               158
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 711
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               737
;  :del-clause              257
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1594
;  :mk-clause               287
;  :num-allocs              4412569
;  :num-checks              237
;  :propagations            208
;  :quant-instantiations    97
;  :rlimit-count            190648)
; [then-branch: 48 | First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[1] | dead]
; [else-branch: 48 | !(First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[1]) | live]
(push) ; 7
; [else-branch: 48 | !(First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3917
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      204
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               158
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 711
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               737
;  :del-clause              257
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1596
;  :mk-clause               287
;  :num-allocs              4412569
;  :num-checks              238
;  :propagations            208
;  :quant-instantiations    97
;  :rlimit-count            190916)
(push) ; 6
; [then-branch: 49 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[0] | live]
; [else-branch: 49 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[0]) | live]
(push) ; 7
; [then-branch: 49 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3917
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      205
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               158
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 711
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               737
;  :del-clause              257
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1599
;  :mk-clause               291
;  :num-allocs              4412569
;  :num-checks              239
;  :propagations            208
;  :quant-instantiations    99
;  :rlimit-count            191090)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3917
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      205
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               158
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 711
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               737
;  :del-clause              257
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1599
;  :mk-clause               291
;  :num-allocs              4412569
;  :num-checks              240
;  :propagations            208
;  :quant-instantiations    99
;  :rlimit-count            191099)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3918
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      205
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         102
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               159
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 711
;  :datatype-occurs-check   267
;  :datatype-splits         444
;  :decisions               737
;  :del-clause              257
;  :final-checks            107
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1601
;  :mk-clause               291
;  :num-allocs              4412569
;  :num-checks              241
;  :propagations            211
;  :quant-instantiations    99
;  :rlimit-count            191214)
(pop) ; 7
(push) ; 7
; [else-branch: 49 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      0)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4057
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      210
;  :arith-assert-upper      215
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               159
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 737
;  :datatype-occurs-check   278
;  :datatype-splits         464
;  :decisions               765
;  :del-clause              270
;  :final-checks            110
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1635
;  :mk-clause               300
;  :num-allocs              4412569
;  :num-checks              242
;  :propagations            218
;  :quant-instantiations    100
;  :rlimit-count            192542
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        0))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4090
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      211
;  :arith-assert-upper      216
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               169
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 743
;  :datatype-occurs-check   278
;  :datatype-splits         464
;  :decisions               774
;  :del-clause              274
;  :final-checks            110
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1641
;  :mk-clause               304
;  :num-allocs              4412569
;  :num-checks              243
;  :propagations            223
;  :quant-instantiations    102
;  :rlimit-count            192945)
; [then-branch: 50 | !(First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[0]) | live]
; [else-branch: 50 | First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[0] | dead]
(push) ; 7
; [then-branch: 50 | !(First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4090
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      211
;  :arith-assert-upper      216
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               169
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 743
;  :datatype-occurs-check   278
;  :datatype-splits         464
;  :decisions               774
;  :del-clause              274
;  :final-checks            110
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1643
;  :mk-clause               305
;  :num-allocs              4412569
;  :num-checks              244
;  :propagations            223
;  :quant-instantiations    102
;  :rlimit-count            193150)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4090
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      211
;  :arith-assert-upper      216
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               169
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 743
;  :datatype-occurs-check   278
;  :datatype-splits         464
;  :decisions               774
;  :del-clause              274
;  :final-checks            110
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1643
;  :mk-clause               305
;  :num-allocs              4412569
;  :num-checks              245
;  :propagations            223
;  :quant-instantiations    102
;  :rlimit-count            193165)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            0))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4097
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      211
;  :arith-assert-upper      216
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               169
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 743
;  :datatype-occurs-check   278
;  :datatype-splits         464
;  :decisions               774
;  :del-clause              275
;  :final-checks            110
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1648
;  :mk-clause               309
;  :num-allocs              4412569
;  :num-checks              246
;  :propagations            223
;  :quant-instantiations    102
;  :rlimit-count            193567)
(push) ; 6
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[1] | live]
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[1]) | live]
(push) ; 7
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4097
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      212
;  :arith-assert-upper      216
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               169
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 743
;  :datatype-occurs-check   278
;  :datatype-splits         464
;  :decisions               774
;  :del-clause              275
;  :final-checks            110
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1651
;  :mk-clause               313
;  :num-allocs              4412569
;  :num-checks              247
;  :propagations            223
;  :quant-instantiations    104
;  :rlimit-count            193740)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4097
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      212
;  :arith-assert-upper      216
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               169
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 743
;  :datatype-occurs-check   278
;  :datatype-splits         464
;  :decisions               774
;  :del-clause              275
;  :final-checks            110
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1651
;  :mk-clause               313
;  :num-allocs              4412569
;  :num-checks              248
;  :propagations            223
;  :quant-instantiations    104
;  :rlimit-count            193749)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4098
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      212
;  :arith-assert-upper      216
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 743
;  :datatype-occurs-check   278
;  :datatype-splits         464
;  :decisions               774
;  :del-clause              275
;  :final-checks            110
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1653
;  :mk-clause               313
;  :num-allocs              4412569
;  :num-checks              249
;  :propagations            225
;  :quant-instantiations    104
;  :rlimit-count            193862)
(pop) ; 7
(push) ; 7
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4232
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      218
;  :arith-assert-upper      225
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        2
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 768
;  :datatype-occurs-check   289
;  :datatype-splits         483
;  :decisions               801
;  :del-clause              292
;  :final-checks            113
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1688
;  :mk-clause               326
;  :num-allocs              4412569
;  :num-checks              250
;  :propagations            235
;  :quant-instantiations    105
;  :rlimit-count            195190
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4279
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      220
;  :arith-assert-upper      228
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        2
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 774
;  :datatype-occurs-check   289
;  :datatype-splits         483
;  :decisions               811
;  :del-clause              301
;  :final-checks            113
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1731
;  :mk-clause               335
;  :num-allocs              4412569
;  :num-checks              251
;  :propagations            256
;  :quant-instantiations    107
;  :rlimit-count            195671)
; [then-branch: 52 | !(First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[1]) | live]
; [else-branch: 52 | First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[1] | dead]
(push) ; 7
; [then-branch: 52 | !(First:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))[First:(Second:(Second:(Second:($t@47@01))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@47@01))))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4279
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      220
;  :arith-assert-upper      228
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        2
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 774
;  :datatype-occurs-check   289
;  :datatype-splits         483
;  :decisions               811
;  :del-clause              301
;  :final-checks            113
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1733
;  :mk-clause               336
;  :num-allocs              4412569
;  :num-checks              252
;  :propagations            256
;  :quant-instantiations    107
;  :rlimit-count            195876)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4279
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      220
;  :arith-assert-upper      228
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        2
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 774
;  :datatype-occurs-check   289
;  :datatype-splits         483
;  :decisions               811
;  :del-clause              301
;  :final-checks            113
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1733
;  :mk-clause               336
;  :num-allocs              4412569
;  :num-checks              253
;  :propagations            256
;  :quant-instantiations    107
;  :rlimit-count            195891)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            1))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_events_no_delta_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@56@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 53 | 0 <= i@56@01 | live]
; [else-branch: 53 | !(0 <= i@56@01) | live]
(push) ; 8
; [then-branch: 53 | 0 <= i@56@01]
(assert (<= 0 i@56@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 53 | !(0 <= i@56@01)]
(assert (not (<= 0 i@56@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 54 | i@56@01 < |First:(Second:($t@54@01))| && 0 <= i@56@01 | live]
; [else-branch: 54 | !(i@56@01 < |First:(Second:($t@54@01))| && 0 <= i@56@01) | live]
(push) ; 8
; [then-branch: 54 | i@56@01 < |First:(Second:($t@54@01))| && 0 <= i@56@01]
(assert (and
  (<
    i@56@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))
  (<= 0 i@56@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@56@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4414
;  :arith-add-rows          34
;  :arith-assert-diseq      34
;  :arith-assert-lower      227
;  :arith-assert-upper      237
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              324
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1772
;  :mk-clause               352
;  :num-allocs              4412569
;  :num-checks              255
;  :propagations            268
;  :quant-instantiations    108
;  :rlimit-count            197387)
; [eval] -1
(push) ; 9
; [then-branch: 55 | First:(Second:($t@54@01))[i@56@01] == -1 | live]
; [else-branch: 55 | First:(Second:($t@54@01))[i@56@01] != -1 | live]
(push) ; 10
; [then-branch: 55 | First:(Second:($t@54@01))[i@56@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
    i@56@01)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 55 | First:(Second:($t@54@01))[i@56@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
      i@56@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@56@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4414
;  :arith-add-rows          34
;  :arith-assert-diseq      35
;  :arith-assert-lower      230
;  :arith-assert-upper      238
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              324
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1778
;  :mk-clause               356
;  :num-allocs              4412569
;  :num-checks              256
;  :propagations            270
;  :quant-instantiations    109
;  :rlimit-count            197595)
(push) ; 11
; [then-branch: 56 | 0 <= First:(Second:($t@54@01))[i@56@01] | live]
; [else-branch: 56 | !(0 <= First:(Second:($t@54@01))[i@56@01]) | live]
(push) ; 12
; [then-branch: 56 | 0 <= First:(Second:($t@54@01))[i@56@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
    i@56@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@56@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4414
;  :arith-add-rows          34
;  :arith-assert-diseq      35
;  :arith-assert-lower      230
;  :arith-assert-upper      238
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              324
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1778
;  :mk-clause               356
;  :num-allocs              4412569
;  :num-checks              257
;  :propagations            270
;  :quant-instantiations    109
;  :rlimit-count            197689)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 56 | !(0 <= First:(Second:($t@54@01))[i@56@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
      i@56@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 54 | !(i@56@01 < |First:(Second:($t@54@01))| && 0 <= i@56@01)]
(assert (not
  (and
    (<
      i@56@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))
    (<= 0 i@56@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@56@01 Int)) (!
  (implies
    (and
      (<
        i@56@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))
      (<= 0 i@56@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
          i@56@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
            i@56@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
            i@56@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
    i@56@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4414
;  :arith-add-rows          34
;  :arith-assert-diseq      37
;  :arith-assert-lower      231
;  :arith-assert-upper      239
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               182
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              342
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1786
;  :mk-clause               370
;  :num-allocs              4412569
;  :num-checks              258
;  :propagations            272
;  :quant-instantiations    110
;  :rlimit-count            198111)
(assert (forall ((i@56@01 Int)) (!
  (implies
    (and
      (<
        i@56@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))
      (<= 0 i@56@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
          i@56@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
            i@56@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
            i@56@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))
    i@56@01))
  :qid |prog.l<no position>|)))
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 ($Snap.combine ($Snap.first $t@57@01) ($Snap.second $t@57@01))))
(assert (=
  ($Snap.second $t@57@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@57@01))
    ($Snap.second ($Snap.second $t@57@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@57@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@57@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@57@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@57@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@58@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 57 | 0 <= i@58@01 | live]
; [else-branch: 57 | !(0 <= i@58@01) | live]
(push) ; 8
; [then-branch: 57 | 0 <= i@58@01]
(assert (<= 0 i@58@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 57 | !(0 <= i@58@01)]
(assert (not (<= 0 i@58@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 58 | i@58@01 < |First:(Second:($t@57@01))| && 0 <= i@58@01 | live]
; [else-branch: 58 | !(i@58@01 < |First:(Second:($t@57@01))| && 0 <= i@58@01) | live]
(push) ; 8
; [then-branch: 58 | i@58@01 < |First:(Second:($t@57@01))| && 0 <= i@58@01]
(assert (and
  (<
    i@58@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
  (<= 0 i@58@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@58@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4451
;  :arith-add-rows          34
;  :arith-assert-diseq      37
;  :arith-assert-lower      236
;  :arith-assert-upper      242
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               182
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              342
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1808
;  :mk-clause               370
;  :num-allocs              4412569
;  :num-checks              259
;  :propagations            272
;  :quant-instantiations    114
;  :rlimit-count            199500)
; [eval] -1
(push) ; 9
; [then-branch: 59 | First:(Second:($t@57@01))[i@58@01] == -1 | live]
; [else-branch: 59 | First:(Second:($t@57@01))[i@58@01] != -1 | live]
(push) ; 10
; [then-branch: 59 | First:(Second:($t@57@01))[i@58@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@58@01)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 59 | First:(Second:($t@57@01))[i@58@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      i@58@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@58@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4451
;  :arith-add-rows          34
;  :arith-assert-diseq      37
;  :arith-assert-lower      236
;  :arith-assert-upper      242
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               182
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              342
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1809
;  :mk-clause               370
;  :num-allocs              4412569
;  :num-checks              260
;  :propagations            272
;  :quant-instantiations    114
;  :rlimit-count            199651)
(push) ; 11
; [then-branch: 60 | 0 <= First:(Second:($t@57@01))[i@58@01] | live]
; [else-branch: 60 | !(0 <= First:(Second:($t@57@01))[i@58@01]) | live]
(push) ; 12
; [then-branch: 60 | 0 <= First:(Second:($t@57@01))[i@58@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@58@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@58@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4451
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      239
;  :arith-assert-upper      242
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               182
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              342
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1812
;  :mk-clause               371
;  :num-allocs              4412569
;  :num-checks              261
;  :propagations            272
;  :quant-instantiations    114
;  :rlimit-count            199754)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 60 | !(0 <= First:(Second:($t@57@01))[i@58@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      i@58@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 58 | !(i@58@01 < |First:(Second:($t@57@01))| && 0 <= i@58@01)]
(assert (not
  (and
    (<
      i@58@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
    (<= 0 i@58@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@58@01 Int)) (!
  (implies
    (and
      (<
        i@58@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
      (<= 0 i@58@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          i@58@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@58@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@58@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@58@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@54@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4469
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      240
;  :arith-assert-upper      243
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               182
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              343
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1832
;  :mk-clause               381
;  :num-allocs              4412569
;  :num-checks              262
;  :propagations            276
;  :quant-instantiations    116
;  :rlimit-count            200769)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4471
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      240
;  :arith-assert-upper      243
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               183
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              343
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1833
;  :mk-clause               381
;  :num-allocs              4412569
;  :num-checks              263
;  :propagations            276
;  :quant-instantiations    116
;  :rlimit-count            200891)
; [then-branch: 61 | First:(Second:(Second:(Second:($t@54@01))))[0] == 0 | dead]
; [else-branch: 61 | First:(Second:(Second:(Second:($t@54@01))))[0] != 0 | live]
(push) ; 7
; [else-branch: 61 | First:(Second:(Second:(Second:($t@54@01))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      0)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4477
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      240
;  :arith-assert-upper      243
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        3
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               183
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 799
;  :datatype-occurs-check   300
;  :datatype-splits         502
;  :decisions               838
;  :del-clause              343
;  :final-checks            116
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          2
;  :mk-bool-var             1835
;  :mk-clause               381
;  :num-allocs              4412569
;  :num-checks              264
;  :propagations            276
;  :quant-instantiations    116
;  :rlimit-count            201135)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4697
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      249
;  :arith-assert-upper      254
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         127
;  :arith-offset-eqs        5
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               184
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 843
;  :datatype-occurs-check   314
;  :datatype-splits         526
;  :decisions               883
;  :del-clause              359
;  :final-checks            119
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1882
;  :mk-clause               397
;  :num-allocs              4594495
;  :num-checks              265
;  :propagations            289
;  :quant-instantiations    117
;  :rlimit-count            202752
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4916
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      258
;  :arith-assert-upper      265
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            72
;  :binary-propagations     11
;  :conflicts               185
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 887
;  :datatype-occurs-check   328
;  :datatype-splits         550
;  :decisions               928
;  :del-clause              375
;  :final-checks            122
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1929
;  :mk-clause               413
;  :num-allocs              4594495
;  :num-checks              266
;  :propagations            302
;  :quant-instantiations    118
;  :rlimit-count            204378)
; [then-branch: 62 | First:(Second:(Second:(Second:($t@54@01))))[1] == 0 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@54@01))))[1] != 0 | live]
(push) ; 7
; [then-branch: 62 | First:(Second:(Second:(Second:($t@54@01))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    1)
  0))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4917
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      258
;  :arith-assert-upper      265
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            72
;  :binary-propagations     11
;  :conflicts               185
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 887
;  :datatype-occurs-check   328
;  :datatype-splits         550
;  :decisions               928
;  :del-clause              375
;  :final-checks            122
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1930
;  :mk-clause               413
;  :num-allocs              4594495
;  :num-checks              267
;  :propagations            302
;  :quant-instantiations    118
;  :rlimit-count            204506)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 62 | First:(Second:(Second:(Second:($t@54@01))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      1)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4923
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      258
;  :arith-assert-upper      265
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            72
;  :binary-propagations     11
;  :conflicts               185
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 887
;  :datatype-occurs-check   328
;  :datatype-splits         550
;  :decisions               928
;  :del-clause              375
;  :final-checks            122
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1934
;  :mk-clause               414
;  :num-allocs              4594495
;  :num-checks              268
;  :propagations            302
;  :quant-instantiations    118
;  :rlimit-count            204951)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      2)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4925
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      258
;  :arith-assert-upper      265
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            72
;  :binary-propagations     11
;  :conflicts               186
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 887
;  :datatype-occurs-check   328
;  :datatype-splits         550
;  :decisions               928
;  :del-clause              377
;  :final-checks            122
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1938
;  :mk-clause               416
;  :num-allocs              4594495
;  :num-checks              269
;  :propagations            302
;  :quant-instantiations    118
;  :rlimit-count            205073)
; [then-branch: 63 | First:(Second:(Second:(Second:($t@54@01))))[2] == 0 | dead]
; [else-branch: 63 | First:(Second:(Second:(Second:($t@54@01))))[2] != 0 | live]
(push) ; 7
; [else-branch: 63 | First:(Second:(Second:(Second:($t@54@01))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      2)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) != 0 ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] old(diz.Main_event_state[0]) != 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4931
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      258
;  :arith-assert-upper      265
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            72
;  :binary-propagations     11
;  :conflicts               186
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 887
;  :datatype-occurs-check   328
;  :datatype-splits         550
;  :decisions               928
;  :del-clause              377
;  :final-checks            122
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1940
;  :mk-clause               416
;  :num-allocs              4594495
;  :num-checks              270
;  :propagations            302
;  :quant-instantiations    118
;  :rlimit-count            205337)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    0)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5155
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      267
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               187
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 931
;  :datatype-occurs-check   342
;  :datatype-splits         574
;  :decisions               974
;  :del-clause              393
;  :final-checks            125
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1987
;  :mk-clause               432
;  :num-allocs              4594495
;  :num-checks              271
;  :propagations            315
;  :quant-instantiations    119
;  :rlimit-count            206989
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5157
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      267
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               188
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 931
;  :datatype-occurs-check   342
;  :datatype-splits         574
;  :decisions               974
;  :del-clause              393
;  :final-checks            125
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1988
;  :mk-clause               432
;  :num-allocs              4594495
;  :num-checks              272
;  :propagations            315
;  :quant-instantiations    119
;  :rlimit-count            207106)
; [then-branch: 64 | First:(Second:(Second:(Second:($t@54@01))))[0] != 0 | live]
; [else-branch: 64 | First:(Second:(Second:(Second:($t@54@01))))[0] == 0 | dead]
(push) ; 7
; [then-branch: 64 | First:(Second:(Second:(Second:($t@54@01))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      0)
    0)))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5159
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      267
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               188
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 931
;  :datatype-occurs-check   342
;  :datatype-splits         574
;  :decisions               974
;  :del-clause              393
;  :final-checks            125
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1989
;  :mk-clause               432
;  :num-allocs              4594495
;  :num-checks              273
;  :propagations            315
;  :quant-instantiations    119
;  :rlimit-count            207247)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5159
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      267
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               188
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 931
;  :datatype-occurs-check   342
;  :datatype-splits         574
;  :decisions               974
;  :del-clause              393
;  :final-checks            125
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1989
;  :mk-clause               432
;  :num-allocs              4594495
;  :num-checks              274
;  :propagations            315
;  :quant-instantiations    119
;  :rlimit-count            207262)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
        0)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) != 0 ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] old(diz.Main_event_state[1]) != 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5168
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      267
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               188
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 931
;  :datatype-occurs-check   342
;  :datatype-splits         574
;  :decisions               974
;  :del-clause              393
;  :final-checks            125
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             1993
;  :mk-clause               433
;  :num-allocs              4594495
;  :num-checks              275
;  :propagations            316
;  :quant-instantiations    119
;  :rlimit-count            207679)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5391
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      276
;  :arith-assert-upper      287
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         154
;  :arith-offset-eqs        11
;  :arith-pivots            76
;  :binary-propagations     11
;  :conflicts               189
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 975
;  :datatype-occurs-check   356
;  :datatype-splits         598
;  :decisions               1019
;  :del-clause              409
;  :final-checks            128
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2039
;  :mk-clause               449
;  :num-allocs              4594495
;  :num-checks              276
;  :propagations            329
;  :quant-instantiations    120
;  :rlimit-count            209310
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5627
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      285
;  :arith-assert-upper      298
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        13
;  :arith-pivots            78
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1022
;  :datatype-occurs-check   374
;  :datatype-splits         624
;  :decisions               1066
;  :del-clause              426
;  :final-checks            132
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2097
;  :mk-clause               466
;  :num-allocs              4594495
;  :num-checks              277
;  :propagations            343
;  :quant-instantiations    121
;  :rlimit-count            210991
;  :time                    0.00)
; [then-branch: 65 | First:(Second:(Second:(Second:($t@54@01))))[1] != 0 | live]
; [else-branch: 65 | First:(Second:(Second:(Second:($t@54@01))))[1] == 0 | live]
(push) ; 7
; [then-branch: 65 | First:(Second:(Second:(Second:($t@54@01))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      1)
    0)))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5627
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      285
;  :arith-assert-upper      298
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        13
;  :arith-pivots            78
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1022
;  :datatype-occurs-check   374
;  :datatype-splits         624
;  :decisions               1066
;  :del-clause              426
;  :final-checks            132
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2097
;  :mk-clause               466
;  :num-allocs              4594495
;  :num-checks              278
;  :propagations            343
;  :quant-instantiations    121
;  :rlimit-count            211121)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5627
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      285
;  :arith-assert-upper      298
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        13
;  :arith-pivots            78
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1022
;  :datatype-occurs-check   374
;  :datatype-splits         624
;  :decisions               1066
;  :del-clause              426
;  :final-checks            132
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2097
;  :mk-clause               466
;  :num-allocs              4594495
;  :num-checks              279
;  :propagations            343
;  :quant-instantiations    121
;  :rlimit-count            211136)
(pop) ; 7
(push) ; 7
; [else-branch: 65 | First:(Second:(Second:(Second:($t@54@01))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    1)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
        1)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) != 0 ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] old(diz.Main_event_state[2]) != 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5636
;  :arith-add-rows          34
;  :arith-assert-diseq      38
;  :arith-assert-lower      285
;  :arith-assert-upper      298
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        13
;  :arith-pivots            78
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1022
;  :datatype-occurs-check   374
;  :datatype-splits         624
;  :decisions               1066
;  :del-clause              426
;  :final-checks            132
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2099
;  :mk-clause               467
;  :num-allocs              4594495
;  :num-checks              280
;  :propagations            343
;  :quant-instantiations    121
;  :rlimit-count            211480)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    2)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5853
;  :arith-add-rows          34
;  :arith-assert-diseq      40
;  :arith-assert-lower      294
;  :arith-assert-upper      311
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        15
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               192
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 1065
;  :datatype-occurs-check   388
;  :datatype-splits         647
;  :decisions               1111
;  :del-clause              444
;  :final-checks            135
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2148
;  :mk-clause               485
;  :num-allocs              4594495
;  :num-checks              281
;  :propagations            357
;  :quant-instantiations    122
;  :rlimit-count            213137
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      2)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5855
;  :arith-add-rows          34
;  :arith-assert-diseq      40
;  :arith-assert-lower      294
;  :arith-assert-upper      311
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        15
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               193
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 1065
;  :datatype-occurs-check   388
;  :datatype-splits         647
;  :decisions               1111
;  :del-clause              446
;  :final-checks            135
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2152
;  :mk-clause               487
;  :num-allocs              4594495
;  :num-checks              282
;  :propagations            357
;  :quant-instantiations    122
;  :rlimit-count            213254)
; [then-branch: 66 | First:(Second:(Second:(Second:($t@54@01))))[2] != 0 | live]
; [else-branch: 66 | First:(Second:(Second:(Second:($t@54@01))))[2] == 0 | dead]
(push) ; 7
; [then-branch: 66 | First:(Second:(Second:(Second:($t@54@01))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      2)
    0)))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5857
;  :arith-add-rows          34
;  :arith-assert-diseq      42
;  :arith-assert-lower      294
;  :arith-assert-upper      311
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        15
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               193
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 1065
;  :datatype-occurs-check   388
;  :datatype-splits         647
;  :decisions               1111
;  :del-clause              446
;  :final-checks            135
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2156
;  :mk-clause               492
;  :num-allocs              4594495
;  :num-checks              283
;  :propagations            357
;  :quant-instantiations    122
;  :rlimit-count            213407)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5857
;  :arith-add-rows          34
;  :arith-assert-diseq      42
;  :arith-assert-lower      294
;  :arith-assert-upper      311
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        15
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               193
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 1065
;  :datatype-occurs-check   388
;  :datatype-splits         647
;  :decisions               1111
;  :del-clause              446
;  :final-checks            135
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2156
;  :mk-clause               492
;  :num-allocs              4594495
;  :num-checks              284
;  :propagations            357
;  :quant-instantiations    122
;  :rlimit-count            213422)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
        2)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6087
;  :arith-add-rows          34
;  :arith-assert-diseq      44
;  :arith-assert-lower      304
;  :arith-assert-upper      325
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        262
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        17
;  :arith-pivots            82
;  :binary-propagations     11
;  :conflicts               195
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 1108
;  :datatype-occurs-check   402
;  :datatype-splits         670
;  :decisions               1159
;  :del-clause              481
;  :final-checks            138
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2215
;  :mk-clause               519
;  :num-allocs              4594495
;  :num-checks              286
;  :propagations            377
;  :quant-instantiations    124
;  :rlimit-count            215245)
; [eval] -1
(push) ; 6
; [then-branch: 67 | First:(Second:($t@57@01))[0] != -1 | live]
; [else-branch: 67 | First:(Second:($t@57@01))[0] == -1 | live]
(push) ; 7
; [then-branch: 67 | First:(Second:($t@57@01))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6091
;  :arith-add-rows          34
;  :arith-assert-diseq      46
;  :arith-assert-lower      311
;  :arith-assert-upper      328
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        265
;  :arith-fixed-eqs         182
;  :arith-offset-eqs        17
;  :arith-pivots            83
;  :binary-propagations     11
;  :conflicts               195
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 1108
;  :datatype-occurs-check   402
;  :datatype-splits         670
;  :decisions               1159
;  :del-clause              481
;  :final-checks            138
;  :max-generation          2
;  :max-memory              4.59
;  :memory                  4.59
;  :minimized-lits          2
;  :mk-bool-var             2230
;  :mk-clause               536
;  :num-allocs              4594495
;  :num-checks              287
;  :propagations            384
;  :quant-instantiations    127
;  :rlimit-count            215529)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 67 | First:(Second:($t@57@01))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (- 0 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0)
        (- 0 1)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6381
;  :arith-add-rows          40
;  :arith-assert-diseq      57
;  :arith-assert-lower      342
;  :arith-assert-upper      355
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         196
;  :arith-offset-eqs        21
;  :arith-pivots            94
;  :binary-propagations     11
;  :conflicts               201
;  :datatype-accessor-ax    243
;  :datatype-constructor-ax 1165
;  :datatype-occurs-check   422
;  :datatype-splits         702
;  :decisions               1216
;  :del-clause              569
;  :final-checks            142
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          3
;  :mk-bool-var             2348
;  :mk-clause               607
;  :num-allocs              4786722
;  :num-checks              288
;  :propagations            426
;  :quant-instantiations    137
;  :rlimit-count            217989
;  :time                    0.00)
(push) ; 6
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6537
;  :arith-add-rows          40
;  :arith-assert-diseq      59
;  :arith-assert-lower      348
;  :arith-assert-upper      365
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         201
;  :arith-offset-eqs        22
;  :arith-pivots            96
;  :binary-propagations     11
;  :conflicts               201
;  :datatype-accessor-ax    246
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   436
;  :datatype-splits         725
;  :decisions               1247
;  :del-clause              582
;  :final-checks            145
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          3
;  :mk-bool-var             2387
;  :mk-clause               620
;  :num-allocs              4786722
;  :num-checks              289
;  :propagations            444
;  :quant-instantiations    138
;  :rlimit-count            219387
;  :time                    0.00)
; [then-branch: 68 | First:(Second:($t@57@01))[1] != -1 && First:(Second:($t@57@01))[0] != -1 | live]
; [else-branch: 68 | !(First:(Second:($t@57@01))[1] != -1 && First:(Second:($t@57@01))[0] != -1) | live]
(push) ; 6
; [then-branch: 68 | First:(Second:($t@57@01))[1] != -1 && First:(Second:($t@57@01))[0] != -1]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)
      (- 0 1)))))
; [exec]
; min_advance__39 := Main_find_minimum_advance_Sequence$Integer$(diz, diz.Main_event_state)
; [eval] Main_find_minimum_advance_Sequence$Integer$(diz, diz.Main_event_state)
(push) ; 7
; [eval] diz != null
; [eval] |vals| == 3
; [eval] |vals|
(pop) ; 7
; Joined path conditions
(declare-const min_advance__39@59@01 Int)
(assert (=
  min_advance__39@59@01
  (Main_find_minimum_advance_Sequence$Integer$ ($Snap.combine
    $Snap.unit
    $Snap.unit) diz@17@01 ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))))
; [eval] min_advance__39 == -1
; [eval] -1
(push) ; 7
(assert (not (not (= min_advance__39@59@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6851
;  :arith-add-rows          48
;  :arith-assert-diseq      93
;  :arith-assert-lower      397
;  :arith-assert-upper      402
;  :arith-bound-prop        10
;  :arith-conflicts         18
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        26
;  :arith-pivots            108
;  :binary-propagations     11
;  :conflicts               209
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1251
;  :datatype-occurs-check   456
;  :datatype-splits         757
;  :decisions               1310
;  :del-clause              640
;  :final-checks            149
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          4
;  :mk-bool-var             2560
;  :mk-clause               780
;  :num-allocs              4786722
;  :num-checks              290
;  :propagations            515
;  :quant-instantiations    151
;  :rlimit-count            222492
;  :time                    0.00)
(push) ; 7
(assert (not (= min_advance__39@59@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7155
;  :arith-add-rows          68
;  :arith-assert-diseq      132
;  :arith-assert-lower      447
;  :arith-assert-upper      435
;  :arith-bound-prop        21
;  :arith-conflicts         19
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         233
;  :arith-offset-eqs        30
;  :arith-pivots            123
;  :binary-propagations     11
;  :conflicts               220
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 1308
;  :datatype-occurs-check   476
;  :datatype-splits         789
;  :decisions               1383
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          5
;  :mk-bool-var             2672
;  :mk-clause               862
;  :num-allocs              4983736
;  :num-checks              291
;  :propagations            605
;  :quant-instantiations    156
;  :rlimit-count            225284
;  :time                    0.00)
; [then-branch: 69 | min_advance__39@59@01 == -1 | live]
; [else-branch: 69 | min_advance__39@59@01 != -1 | live]
(push) ; 7
; [then-branch: 69 | min_advance__39@59@01 == -1]
(assert (= min_advance__39@59@01 (- 0 1)))
; [exec]
; min_advance__39 := 0
; [exec]
; __flatten_39__38 := Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39))
; [eval] Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39))
; [eval] (diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39)
; [eval] diz.Main_event_state[0] < -1
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7158
;  :arith-add-rows          68
;  :arith-assert-diseq      135
;  :arith-assert-lower      448
;  :arith-assert-upper      438
;  :arith-bound-prop        21
;  :arith-conflicts         19
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         233
;  :arith-offset-eqs        30
;  :arith-pivots            123
;  :binary-propagations     11
;  :conflicts               220
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 1308
;  :datatype-occurs-check   476
;  :datatype-splits         789
;  :decisions               1383
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          5
;  :mk-bool-var             2676
;  :mk-clause               862
;  :num-allocs              4983736
;  :num-checks              292
;  :propagations            607
;  :quant-instantiations    156
;  :rlimit-count            225372)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7443
;  :arith-add-rows          78
;  :arith-assert-diseq      153
;  :arith-assert-lower      469
;  :arith-assert-upper      471
;  :arith-bound-prop        27
;  :arith-conflicts         20
;  :arith-eq-adapter        367
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        33
;  :arith-pivots            132
;  :binary-propagations     11
;  :conflicts               227
;  :datatype-accessor-ax    267
;  :datatype-constructor-ax 1363
;  :datatype-occurs-check   496
;  :datatype-splits         820
;  :decisions               1442
;  :del-clause              771
;  :final-checks            158
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          6
;  :mk-bool-var             2773
;  :mk-clause               911
;  :num-allocs              4983736
;  :num-checks              293
;  :propagations            649
;  :quant-instantiations    160
;  :rlimit-count            227632
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7728
;  :arith-add-rows          87
;  :arith-assert-diseq      171
;  :arith-assert-lower      496
;  :arith-assert-upper      498
;  :arith-bound-prop        31
;  :arith-conflicts         21
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        36
;  :arith-pivots            140
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    274
;  :datatype-constructor-ax 1418
;  :datatype-occurs-check   516
;  :datatype-splits         851
;  :decisions               1501
;  :del-clause              818
;  :final-checks            163
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          7
;  :mk-bool-var             2870
;  :mk-clause               958
;  :num-allocs              4983736
;  :num-checks              294
;  :propagations            693
;  :quant-instantiations    164
;  :rlimit-count            229836
;  :time                    0.00)
; [then-branch: 70 | First:(Second:(Second:(Second:($t@57@01))))[0] < -1 | live]
; [else-branch: 70 | !(First:(Second:(Second:(Second:($t@57@01))))[0] < -1) | live]
(push) ; 9
; [then-branch: 70 | First:(Second:(Second:(Second:($t@57@01))))[0] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    0)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 70 | !(First:(Second:(Second:(Second:($t@57@01))))[0] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] - min_advance__39
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7728
;  :arith-add-rows          87
;  :arith-assert-diseq      171
;  :arith-assert-lower      502
;  :arith-assert-upper      498
;  :arith-bound-prop        31
;  :arith-conflicts         21
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        36
;  :arith-pivots            140
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    274
;  :datatype-constructor-ax 1418
;  :datatype-occurs-check   516
;  :datatype-splits         851
;  :decisions               1501
;  :del-clause              818
;  :final-checks            163
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          7
;  :mk-bool-var             2870
;  :mk-clause               958
;  :num-allocs              4983736
;  :num-checks              295
;  :propagations            699
;  :quant-instantiations    164
;  :rlimit-count            230006)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39)
; [eval] diz.Main_event_state[1] < -1
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7728
;  :arith-add-rows          87
;  :arith-assert-diseq      171
;  :arith-assert-lower      502
;  :arith-assert-upper      498
;  :arith-bound-prop        31
;  :arith-conflicts         21
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        36
;  :arith-pivots            140
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    274
;  :datatype-constructor-ax 1418
;  :datatype-occurs-check   516
;  :datatype-splits         851
;  :decisions               1501
;  :del-clause              818
;  :final-checks            163
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          7
;  :mk-bool-var             2870
;  :mk-clause               958
;  :num-allocs              4983736
;  :num-checks              296
;  :propagations            699
;  :quant-instantiations    164
;  :rlimit-count            230021)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8302
;  :arith-add-rows          98
;  :arith-assert-diseq      196
;  :arith-assert-lower      546
;  :arith-assert-upper      542
;  :arith-bound-prop        38
;  :arith-conflicts         23
;  :arith-eq-adapter        415
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        36
;  :arith-pivots            148
;  :binary-propagations     11
;  :conflicts               250
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1541
;  :datatype-occurs-check   566
;  :datatype-splits         967
;  :decisions               1617
;  :del-clause              889
;  :final-checks            176
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          8
;  :mk-bool-var             3101
;  :mk-clause               1029
;  :num-allocs              4983736
;  :num-checks              297
;  :propagations            780
;  :quant-instantiations    169
;  :rlimit-count            233503
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8595
;  :arith-add-rows          109
;  :arith-assert-diseq      214
;  :arith-assert-lower      580
;  :arith-assert-upper      570
;  :arith-bound-prop        45
;  :arith-conflicts         24
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        40
;  :arith-pivots            157
;  :binary-propagations     11
;  :conflicts               257
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1598
;  :datatype-occurs-check   586
;  :datatype-splits         999
;  :decisions               1678
;  :del-clause              935
;  :final-checks            180
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          9
;  :mk-bool-var             3201
;  :mk-clause               1075
;  :num-allocs              4983736
;  :num-checks              298
;  :propagations            823
;  :quant-instantiations    173
;  :rlimit-count            235799
;  :time                    0.00)
; [then-branch: 71 | First:(Second:(Second:(Second:($t@57@01))))[1] < -1 | live]
; [else-branch: 71 | !(First:(Second:(Second:(Second:($t@57@01))))[1] < -1) | live]
(push) ; 9
; [then-branch: 71 | First:(Second:(Second:(Second:($t@57@01))))[1] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    1)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 71 | !(First:(Second:(Second:(Second:($t@57@01))))[1] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] - min_advance__39
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8595
;  :arith-add-rows          109
;  :arith-assert-diseq      214
;  :arith-assert-lower      582
;  :arith-assert-upper      570
;  :arith-bound-prop        45
;  :arith-conflicts         24
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        40
;  :arith-pivots            157
;  :binary-propagations     11
;  :conflicts               257
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1598
;  :datatype-occurs-check   586
;  :datatype-splits         999
;  :decisions               1678
;  :del-clause              935
;  :final-checks            180
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          9
;  :mk-bool-var             3201
;  :mk-clause               1075
;  :num-allocs              4983736
;  :num-checks              299
;  :propagations            825
;  :quant-instantiations    173
;  :rlimit-count            235962)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39)
; [eval] diz.Main_event_state[2] < -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8595
;  :arith-add-rows          109
;  :arith-assert-diseq      214
;  :arith-assert-lower      582
;  :arith-assert-upper      570
;  :arith-bound-prop        45
;  :arith-conflicts         24
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        40
;  :arith-pivots            157
;  :binary-propagations     11
;  :conflicts               257
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1598
;  :datatype-occurs-check   586
;  :datatype-splits         999
;  :decisions               1678
;  :del-clause              935
;  :final-checks            180
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          9
;  :mk-bool-var             3201
;  :mk-clause               1075
;  :num-allocs              4983736
;  :num-checks              300
;  :propagations            825
;  :quant-instantiations    173
;  :rlimit-count            235977)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8877
;  :arith-add-rows          118
;  :arith-assert-diseq      231
;  :arith-assert-lower      607
;  :arith-assert-upper      597
;  :arith-bound-prop        55
;  :arith-conflicts         24
;  :arith-eq-adapter        451
;  :arith-fixed-eqs         302
;  :arith-offset-eqs        43
;  :arith-pivots            165
;  :binary-propagations     11
;  :conflicts               264
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1653
;  :datatype-occurs-check   606
;  :datatype-splits         1030
;  :decisions               1736
;  :del-clause              987
;  :final-checks            185
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          10
;  :mk-bool-var             3295
;  :mk-clause               1127
;  :num-allocs              4983736
;  :num-checks              301
;  :propagations            868
;  :quant-instantiations    177
;  :rlimit-count            238188
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9451
;  :arith-add-rows          129
;  :arith-assert-diseq      260
;  :arith-assert-lower      663
;  :arith-assert-upper      632
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        43
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1075
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3526
;  :mk-clause               1215
;  :num-allocs              4983736
;  :num-checks              302
;  :propagations            953
;  :quant-instantiations    182
;  :rlimit-count            241733
;  :time                    0.00)
; [then-branch: 72 | First:(Second:(Second:(Second:($t@57@01))))[2] < -1 | live]
; [else-branch: 72 | !(First:(Second:(Second:(Second:($t@57@01))))[2] < -1) | live]
(push) ; 9
; [then-branch: 72 | First:(Second:(Second:(Second:($t@57@01))))[2] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 72 | !(First:(Second:(Second:(Second:($t@57@01))))[2] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] - min_advance__39
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9451
;  :arith-add-rows          129
;  :arith-assert-diseq      260
;  :arith-assert-lower      665
;  :arith-assert-upper      632
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        43
;  :arith-pivots            174
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1075
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3526
;  :mk-clause               1215
;  :num-allocs              4983736
;  :num-checks              303
;  :propagations            955
;  :quant-instantiations    182
;  :rlimit-count            241896)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
              0)
            (- 0 1))
          (- 0 3)
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            0)))
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
              1)
            (- 0 1))
          (- 0 3)
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            1))))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            2)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
          2)))))
  3))
(declare-const __flatten_39__38@60@01 Seq<Int>)
(assert (Seq_equal
  __flatten_39__38@60@01
  (Seq_append
    (Seq_append
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            0)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
          0)))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            1)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
          1))))
    (Seq_singleton (ite
      (<
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
          2)
        (- 0 1))
      (- 0 3)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
        2))))))
; [exec]
; __flatten_38__37 := __flatten_39__38
; [exec]
; diz.Main_event_state := __flatten_38__37
; [exec]
; Main_wakeup_after_wait_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(push) ; 8
(assert (not (= (Seq_length __flatten_39__38@60@01) 3)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9458
;  :arith-add-rows          130
;  :arith-assert-diseq      260
;  :arith-assert-lower      668
;  :arith-assert-upper      634
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        485
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1075
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3559
;  :mk-clause               1238
;  :num-allocs              4983736
;  :num-checks              304
;  :propagations            960
;  :quant-instantiations    186
;  :rlimit-count            242665)
(assert (= (Seq_length __flatten_39__38@60@01) 3))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@61@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 73 | 0 <= i@61@01 | live]
; [else-branch: 73 | !(0 <= i@61@01) | live]
(push) ; 10
; [then-branch: 73 | 0 <= i@61@01]
(assert (<= 0 i@61@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 73 | !(0 <= i@61@01)]
(assert (not (<= 0 i@61@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 74 | i@61@01 < |First:(Second:($t@57@01))| && 0 <= i@61@01 | live]
; [else-branch: 74 | !(i@61@01 < |First:(Second:($t@57@01))| && 0 <= i@61@01) | live]
(push) ; 10
; [then-branch: 74 | i@61@01 < |First:(Second:($t@57@01))| && 0 <= i@61@01]
(assert (and
  (<
    i@61@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
  (<= 0 i@61@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@61@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9459
;  :arith-add-rows          130
;  :arith-assert-diseq      260
;  :arith-assert-lower      670
;  :arith-assert-upper      636
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        486
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1075
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3564
;  :mk-clause               1238
;  :num-allocs              4983736
;  :num-checks              305
;  :propagations            960
;  :quant-instantiations    186
;  :rlimit-count            242852)
; [eval] -1
(push) ; 11
; [then-branch: 75 | First:(Second:($t@57@01))[i@61@01] == -1 | live]
; [else-branch: 75 | First:(Second:($t@57@01))[i@61@01] != -1 | live]
(push) ; 12
; [then-branch: 75 | First:(Second:($t@57@01))[i@61@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@61@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 75 | First:(Second:($t@57@01))[i@61@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      i@61@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@61@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9463
;  :arith-add-rows          130
;  :arith-assert-diseq      262
;  :arith-assert-lower      677
;  :arith-assert-upper      639
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        489
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1075
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3579
;  :mk-clause               1249
;  :num-allocs              4983736
;  :num-checks              306
;  :propagations            965
;  :quant-instantiations    189
;  :rlimit-count            243153)
(push) ; 13
; [then-branch: 76 | 0 <= First:(Second:($t@57@01))[i@61@01] | live]
; [else-branch: 76 | !(0 <= First:(Second:($t@57@01))[i@61@01]) | live]
(push) ; 14
; [then-branch: 76 | 0 <= First:(Second:($t@57@01))[i@61@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@61@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@61@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9463
;  :arith-add-rows          130
;  :arith-assert-diseq      262
;  :arith-assert-lower      677
;  :arith-assert-upper      639
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        489
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1075
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3579
;  :mk-clause               1249
;  :num-allocs              4983736
;  :num-checks              307
;  :propagations            965
;  :quant-instantiations    189
;  :rlimit-count            243247)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 76 | !(0 <= First:(Second:($t@57@01))[i@61@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      i@61@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 74 | !(i@61@01 < |First:(Second:($t@57@01))| && 0 <= i@61@01)]
(assert (not
  (and
    (<
      i@61@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
    (<= 0 i@61@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@61@01 Int)) (!
  (implies
    (and
      (<
        i@61@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
      (<= 0 i@61@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          i@61@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@61@01)
          (Seq_length __flatten_39__38@60@01))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@61@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@61@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9463
;  :arith-add-rows          130
;  :arith-assert-diseq      263
;  :arith-assert-lower      678
;  :arith-assert-upper      640
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        491
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1111
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3593
;  :mk-clause               1274
;  :num-allocs              4983736
;  :num-checks              308
;  :propagations            967
;  :quant-instantiations    192
;  :rlimit-count            243735)
(assert (forall ((i@61@01 Int)) (!
  (implies
    (and
      (<
        i@61@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
      (<= 0 i@61@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          i@61@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@61@01)
          (Seq_length __flatten_39__38@60@01))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@61@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@61@01))
  :qid |prog.l<no position>|)))
(declare-const $t@62@01 $Snap)
(assert (= $t@62@01 ($Snap.combine ($Snap.first $t@62@01) ($Snap.second $t@62@01))))
(assert (=
  ($Snap.second $t@62@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@62@01))
    ($Snap.second ($Snap.second $t@62@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@62@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@62@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@62@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@62@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@63@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 77 | 0 <= i@63@01 | live]
; [else-branch: 77 | !(0 <= i@63@01) | live]
(push) ; 10
; [then-branch: 77 | 0 <= i@63@01]
(assert (<= 0 i@63@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 77 | !(0 <= i@63@01)]
(assert (not (<= 0 i@63@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 78 | i@63@01 < |First:(Second:($t@62@01))| && 0 <= i@63@01 | live]
; [else-branch: 78 | !(i@63@01 < |First:(Second:($t@62@01))| && 0 <= i@63@01) | live]
(push) ; 10
; [then-branch: 78 | i@63@01 < |First:(Second:($t@62@01))| && 0 <= i@63@01]
(assert (and
  (<
    i@63@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))
  (<= 0 i@63@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@63@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9500
;  :arith-add-rows          130
;  :arith-assert-diseq      263
;  :arith-assert-lower      683
;  :arith-assert-upper      643
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        493
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1111
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3615
;  :mk-clause               1274
;  :num-allocs              4983736
;  :num-checks              309
;  :propagations            967
;  :quant-instantiations    198
;  :rlimit-count            245175)
; [eval] -1
(push) ; 11
; [then-branch: 79 | First:(Second:($t@62@01))[i@63@01] == -1 | live]
; [else-branch: 79 | First:(Second:($t@62@01))[i@63@01] != -1 | live]
(push) ; 12
; [then-branch: 79 | First:(Second:($t@62@01))[i@63@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
    i@63@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 79 | First:(Second:($t@62@01))[i@63@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
      i@63@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@63@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9500
;  :arith-add-rows          130
;  :arith-assert-diseq      263
;  :arith-assert-lower      683
;  :arith-assert-upper      643
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        493
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1111
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3616
;  :mk-clause               1274
;  :num-allocs              4983736
;  :num-checks              310
;  :propagations            967
;  :quant-instantiations    198
;  :rlimit-count            245326)
(push) ; 13
; [then-branch: 80 | 0 <= First:(Second:($t@62@01))[i@63@01] | live]
; [else-branch: 80 | !(0 <= First:(Second:($t@62@01))[i@63@01]) | live]
(push) ; 14
; [then-branch: 80 | 0 <= First:(Second:($t@62@01))[i@63@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
    i@63@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@63@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9500
;  :arith-add-rows          130
;  :arith-assert-diseq      264
;  :arith-assert-lower      686
;  :arith-assert-upper      643
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        494
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1111
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3619
;  :mk-clause               1275
;  :num-allocs              4983736
;  :num-checks              311
;  :propagations            967
;  :quant-instantiations    198
;  :rlimit-count            245429)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 80 | !(0 <= First:(Second:($t@62@01))[i@63@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
      i@63@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 78 | !(i@63@01 < |First:(Second:($t@62@01))| && 0 <= i@63@01)]
(assert (not
  (and
    (<
      i@63@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))
    (<= 0 i@63@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@63@01 Int)) (!
  (implies
    (and
      (<
        i@63@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))
      (<= 0 i@63@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
          i@63@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
            i@63@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
            i@63@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
    i@63@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
  __flatten_39__38@60@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9521
;  :arith-add-rows          130
;  :arith-assert-diseq      264
;  :arith-assert-lower      687
;  :arith-assert-upper      644
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        496
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1112
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3643
;  :mk-clause               1291
;  :num-allocs              4983736
;  :num-checks              312
;  :propagations            973
;  :quant-instantiations    200
;  :rlimit-count            246464)
(push) ; 8
; [then-branch: 81 | 0 <= First:(Second:($t@57@01))[0] | live]
; [else-branch: 81 | !(0 <= First:(Second:($t@57@01))[0]) | live]
(push) ; 9
; [then-branch: 81 | 0 <= First:(Second:($t@57@01))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9521
;  :arith-add-rows          130
;  :arith-assert-diseq      264
;  :arith-assert-lower      687
;  :arith-assert-upper      644
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        496
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1112
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3643
;  :mk-clause               1291
;  :num-allocs              4983736
;  :num-checks              313
;  :propagations            973
;  :quant-instantiations    200
;  :rlimit-count            246564)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9521
;  :arith-add-rows          130
;  :arith-assert-diseq      264
;  :arith-assert-lower      687
;  :arith-assert-upper      644
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        496
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1112
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3643
;  :mk-clause               1291
;  :num-allocs              4983736
;  :num-checks              314
;  :propagations            973
;  :quant-instantiations    200
;  :rlimit-count            246573)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (Seq_length __flatten_39__38@60@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9521
;  :arith-add-rows          130
;  :arith-assert-diseq      264
;  :arith-assert-lower      687
;  :arith-assert-upper      644
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        496
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               282
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1112
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3643
;  :mk-clause               1291
;  :num-allocs              4983736
;  :num-checks              315
;  :propagations            973
;  :quant-instantiations    200
;  :rlimit-count            246661)
(push) ; 10
; [then-branch: 82 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0 | live]
; [else-branch: 82 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] != 0 | live]
(push) ; 11
; [then-branch: 82 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@60@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 82 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@60@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9522
;  :arith-add-rows          131
;  :arith-assert-diseq      264
;  :arith-assert-lower      687
;  :arith-assert-upper      644
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        496
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               282
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1112
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3648
;  :mk-clause               1296
;  :num-allocs              4983736
;  :num-checks              316
;  :propagations            973
;  :quant-instantiations    201
;  :rlimit-count            246876)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9522
;  :arith-add-rows          131
;  :arith-assert-diseq      264
;  :arith-assert-lower      687
;  :arith-assert-upper      644
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        496
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               282
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1112
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3648
;  :mk-clause               1296
;  :num-allocs              4983736
;  :num-checks              317
;  :propagations            973
;  :quant-instantiations    201
;  :rlimit-count            246885)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (Seq_length __flatten_39__38@60@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9522
;  :arith-add-rows          131
;  :arith-assert-diseq      264
;  :arith-assert-lower      687
;  :arith-assert-upper      644
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        496
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               283
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1776
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1857
;  :del-clause              1112
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          11
;  :mk-bool-var             3648
;  :mk-clause               1296
;  :num-allocs              4983736
;  :num-checks              318
;  :propagations            973
;  :quant-instantiations    201
;  :rlimit-count            246973)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 81 | !(0 <= First:(Second:($t@57@01))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9948
;  :arith-add-rows          179
;  :arith-assert-diseq      351
;  :arith-assert-lower      826
;  :arith-assert-upper      749
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            192
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1782
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1909
;  :del-clause              1412
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          42
;  :mk-bool-var             4038
;  :mk-clause               1591
;  :num-allocs              4983736
;  :num-checks              319
;  :propagations            1278
;  :quant-instantiations    308
;  :rlimit-count            251400
;  :time                    0.00)
; [then-branch: 83 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0] | dead]
; [else-branch: 83 | !(__flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0]) | live]
(push) ; 9
; [else-branch: 83 | !(__flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1) ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9954
;  :arith-add-rows          179
;  :arith-assert-diseq      351
;  :arith-assert-lower      826
;  :arith-assert-upper      749
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            192
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1782
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1909
;  :del-clause              1412
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          42
;  :mk-bool-var             4040
;  :mk-clause               1591
;  :num-allocs              4983736
;  :num-checks              320
;  :propagations            1278
;  :quant-instantiations    308
;  :rlimit-count            251656)
(push) ; 8
; [then-branch: 84 | 0 <= First:(Second:($t@57@01))[1] | live]
; [else-branch: 84 | !(0 <= First:(Second:($t@57@01))[1]) | live]
(push) ; 9
; [then-branch: 84 | 0 <= First:(Second:($t@57@01))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9954
;  :arith-add-rows          179
;  :arith-assert-diseq      351
;  :arith-assert-lower      826
;  :arith-assert-upper      749
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            192
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1782
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1909
;  :del-clause              1412
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          42
;  :mk-bool-var             4040
;  :mk-clause               1591
;  :num-allocs              4983736
;  :num-checks              321
;  :propagations            1278
;  :quant-instantiations    308
;  :rlimit-count            251756)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9954
;  :arith-add-rows          179
;  :arith-assert-diseq      351
;  :arith-assert-lower      826
;  :arith-assert-upper      749
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            192
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1782
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1909
;  :del-clause              1412
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          42
;  :mk-bool-var             4040
;  :mk-clause               1591
;  :num-allocs              4983736
;  :num-checks              322
;  :propagations            1278
;  :quant-instantiations    308
;  :rlimit-count            251765)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (Seq_length __flatten_39__38@60@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9954
;  :arith-add-rows          179
;  :arith-assert-diseq      351
;  :arith-assert-lower      826
;  :arith-assert-upper      749
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            192
;  :binary-propagations     11
;  :conflicts               317
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1782
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1909
;  :del-clause              1412
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          42
;  :mk-bool-var             4040
;  :mk-clause               1591
;  :num-allocs              4983736
;  :num-checks              323
;  :propagations            1278
;  :quant-instantiations    308
;  :rlimit-count            251853)
(push) ; 10
; [then-branch: 85 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 | live]
; [else-branch: 85 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] != 0 | live]
(push) ; 11
; [then-branch: 85 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@60@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 85 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@60@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9955
;  :arith-add-rows          181
;  :arith-assert-diseq      351
;  :arith-assert-lower      826
;  :arith-assert-upper      749
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            192
;  :binary-propagations     11
;  :conflicts               317
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1782
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1909
;  :del-clause              1412
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          42
;  :mk-bool-var             4045
;  :mk-clause               1596
;  :num-allocs              4983736
;  :num-checks              324
;  :propagations            1278
;  :quant-instantiations    309
;  :rlimit-count            252067)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9955
;  :arith-add-rows          181
;  :arith-assert-diseq      351
;  :arith-assert-lower      826
;  :arith-assert-upper      749
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            192
;  :binary-propagations     11
;  :conflicts               317
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1782
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1909
;  :del-clause              1412
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          42
;  :mk-bool-var             4045
;  :mk-clause               1596
;  :num-allocs              4983736
;  :num-checks              325
;  :propagations            1278
;  :quant-instantiations    309
;  :rlimit-count            252076)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (Seq_length __flatten_39__38@60@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9955
;  :arith-add-rows          181
;  :arith-assert-diseq      351
;  :arith-assert-lower      826
;  :arith-assert-upper      749
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            192
;  :binary-propagations     11
;  :conflicts               318
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1782
;  :datatype-occurs-check   656
;  :datatype-splits         1146
;  :decisions               1909
;  :del-clause              1412
;  :final-checks            198
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.78
;  :memory                  4.78
;  :minimized-lits          42
;  :mk-bool-var             4045
;  :mk-clause               1596
;  :num-allocs              4983736
;  :num-checks              326
;  :propagations            1278
;  :quant-instantiations    309
;  :rlimit-count            252164)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 84 | !(0 <= First:(Second:($t@57@01))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10901
;  :arith-add-rows          219
;  :arith-assert-diseq      420
;  :arith-assert-lower      962
;  :arith-assert-upper      857
;  :arith-bound-prop        84
;  :arith-conflicts         31
;  :arith-eq-adapter        654
;  :arith-fixed-eqs         399
;  :arith-offset-eqs        63
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               344
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1936
;  :datatype-occurs-check   716
;  :datatype-splits         1286
;  :decisions               2085
;  :del-clause              1637
;  :final-checks            211
;  :interface-eqs           12
;  :max-generation          3
;  :max-memory              5.00
;  :memory                  5.00
;  :minimized-lits          51
;  :mk-bool-var             4511
;  :mk-clause               1816
;  :num-allocs              5414047
;  :num-checks              327
;  :propagations            1528
;  :quant-instantiations    379
;  :rlimit-count            258889
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11978
;  :arith-add-rows          263
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               357
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1861
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4946
;  :mk-clause               2040
;  :num-allocs              5850606
;  :num-checks              328
;  :propagations            1706
;  :quant-instantiations    439
;  :rlimit-count            265688
;  :time                    0.01)
; [then-branch: 86 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1] | live]
; [else-branch: 86 | !(__flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1]) | live]
(push) ; 9
; [then-branch: 86 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11978
;  :arith-add-rows          263
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               357
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1861
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4948
;  :mk-clause               2041
;  :num-allocs              5850606
;  :num-checks              329
;  :propagations            1706
;  :quant-instantiations    439
;  :rlimit-count            265856)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 86 | !(__flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11984
;  :arith-add-rows          263
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               357
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1862
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4954
;  :mk-clause               2045
;  :num-allocs              5850606
;  :num-checks              330
;  :propagations            1706
;  :quant-instantiations    439
;  :rlimit-count            266349)
(push) ; 8
; [then-branch: 87 | 0 <= First:(Second:($t@57@01))[0] | live]
; [else-branch: 87 | !(0 <= First:(Second:($t@57@01))[0]) | live]
(push) ; 9
; [then-branch: 87 | 0 <= First:(Second:($t@57@01))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11984
;  :arith-add-rows          263
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               357
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1862
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4954
;  :mk-clause               2045
;  :num-allocs              5850606
;  :num-checks              331
;  :propagations            1706
;  :quant-instantiations    439
;  :rlimit-count            266449)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11984
;  :arith-add-rows          263
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               357
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1862
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4954
;  :mk-clause               2045
;  :num-allocs              5850606
;  :num-checks              332
;  :propagations            1706
;  :quant-instantiations    439
;  :rlimit-count            266458)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (Seq_length __flatten_39__38@60@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11984
;  :arith-add-rows          263
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               358
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1862
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4954
;  :mk-clause               2045
;  :num-allocs              5850606
;  :num-checks              333
;  :propagations            1706
;  :quant-instantiations    439
;  :rlimit-count            266546)
(push) ; 10
; [then-branch: 88 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0 | live]
; [else-branch: 88 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] != 0 | live]
(push) ; 11
; [then-branch: 88 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@60@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 88 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@60@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11985
;  :arith-add-rows          265
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               358
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1862
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4959
;  :mk-clause               2050
;  :num-allocs              5850606
;  :num-checks              334
;  :propagations            1706
;  :quant-instantiations    440
;  :rlimit-count            266732)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11985
;  :arith-add-rows          265
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               358
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1862
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4959
;  :mk-clause               2050
;  :num-allocs              5850606
;  :num-checks              335
;  :propagations            1706
;  :quant-instantiations    440
;  :rlimit-count            266741)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (Seq_length __flatten_39__38@60@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11985
;  :arith-add-rows          265
;  :arith-assert-diseq      467
;  :arith-assert-lower      1084
;  :arith-assert-upper      933
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            235
;  :binary-propagations     11
;  :conflicts               359
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2121
;  :datatype-occurs-check   794
;  :datatype-splits         1431
;  :decisions               2272
;  :del-clause              1862
;  :final-checks            223
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          54
;  :mk-bool-var             4959
;  :mk-clause               2050
;  :num-allocs              5850606
;  :num-checks              336
;  :propagations            1706
;  :quant-instantiations    440
;  :rlimit-count            266829)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 87 | !(0 <= First:(Second:($t@57@01))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12691
;  :arith-add-rows          300
;  :arith-assert-diseq      511
;  :arith-assert-lower      1166
;  :arith-assert-upper      990
;  :arith-bound-prop        103
;  :arith-conflicts         34
;  :arith-eq-adapter        775
;  :arith-fixed-eqs         500
;  :arith-offset-eqs        115
;  :arith-pivots            248
;  :binary-propagations     11
;  :conflicts               371
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2229
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2396
;  :del-clause              2018
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  5.01
;  :minimized-lits          55
;  :mk-bool-var             5259
;  :mk-clause               2201
;  :num-allocs              6292157
;  :num-checks              337
;  :propagations            1844
;  :quant-instantiations    487
;  :rlimit-count            271892
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0))))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13122
;  :arith-add-rows          345
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2289
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5633
;  :mk-clause               2472
;  :num-allocs              6514322
;  :num-checks              338
;  :propagations            2142
;  :quant-instantiations    586
;  :rlimit-count            276131
;  :time                    0.00)
; [then-branch: 89 | !(__flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0]) | live]
; [else-branch: 89 | __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0] | dead]
(push) ; 9
; [then-branch: 89 | !(__flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13123
;  :arith-add-rows          347
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2289
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5640
;  :mk-clause               2480
;  :num-allocs              6514322
;  :num-checks              339
;  :propagations            2144
;  :quant-instantiations    587
;  :rlimit-count            276369)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13123
;  :arith-add-rows          347
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2289
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5640
;  :mk-clause               2480
;  :num-allocs              6514322
;  :num-checks              340
;  :propagations            2144
;  :quant-instantiations    587
;  :rlimit-count            276384)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_39__38@60@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
              0))
          0)
        (=
          (Seq_index
            __flatten_39__38@60@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13130
;  :arith-add-rows          347
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2297
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5646
;  :mk-clause               2486
;  :num-allocs              6514322
;  :num-checks              341
;  :propagations            2144
;  :quant-instantiations    587
;  :rlimit-count            276768)
(push) ; 8
; [then-branch: 90 | 0 <= First:(Second:($t@57@01))[1] | live]
; [else-branch: 90 | !(0 <= First:(Second:($t@57@01))[1]) | live]
(push) ; 9
; [then-branch: 90 | 0 <= First:(Second:($t@57@01))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13130
;  :arith-add-rows          347
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2297
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5646
;  :mk-clause               2486
;  :num-allocs              6514322
;  :num-checks              342
;  :propagations            2144
;  :quant-instantiations    587
;  :rlimit-count            276868)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13130
;  :arith-add-rows          347
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2297
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5646
;  :mk-clause               2486
;  :num-allocs              6514322
;  :num-checks              343
;  :propagations            2144
;  :quant-instantiations    587
;  :rlimit-count            276877)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (Seq_length __flatten_39__38@60@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13130
;  :arith-add-rows          347
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               405
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2297
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5646
;  :mk-clause               2486
;  :num-allocs              6514322
;  :num-checks              344
;  :propagations            2144
;  :quant-instantiations    587
;  :rlimit-count            276965)
(push) ; 10
; [then-branch: 91 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 | live]
; [else-branch: 91 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] != 0 | live]
(push) ; 11
; [then-branch: 91 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@60@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 91 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@60@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13131
;  :arith-add-rows          349
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               405
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2297
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5650
;  :mk-clause               2491
;  :num-allocs              6514322
;  :num-checks              345
;  :propagations            2144
;  :quant-instantiations    588
;  :rlimit-count            277151)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13131
;  :arith-add-rows          349
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               405
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2297
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5650
;  :mk-clause               2491
;  :num-allocs              6514322
;  :num-checks              346
;  :propagations            2144
;  :quant-instantiations    588
;  :rlimit-count            277160)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (Seq_length __flatten_39__38@60@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13131
;  :arith-add-rows          349
;  :arith-assert-diseq      594
;  :arith-assert-lower      1291
;  :arith-assert-upper      1089
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            261
;  :binary-propagations     11
;  :conflicts               406
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 2235
;  :datatype-occurs-check   832
;  :datatype-splits         1501
;  :decisions               2454
;  :del-clause              2297
;  :final-checks            230
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              5.01
;  :memory                  4.92
;  :minimized-lits          84
;  :mk-bool-var             5650
;  :mk-clause               2491
;  :num-allocs              6514322
;  :num-checks              347
;  :propagations            2144
;  :quant-instantiations    588
;  :rlimit-count            277248)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 90 | !(0 <= First:(Second:($t@57@01))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13978
;  :arith-add-rows          395
;  :arith-assert-diseq      641
;  :arith-assert-lower      1400
;  :arith-assert-upper      1158
;  :arith-bound-prop        122
;  :arith-conflicts         38
;  :arith-eq-adapter        915
;  :arith-fixed-eqs         592
;  :arith-offset-eqs        150
;  :arith-pivots            280
;  :binary-propagations     11
;  :conflicts               423
;  :datatype-accessor-ax    458
;  :datatype-constructor-ax 2364
;  :datatype-occurs-check   871
;  :datatype-splits         1576
;  :decisions               2597
;  :del-clause              2497
;  :final-checks            236
;  :interface-eqs           18
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          94
;  :mk-bool-var             6027
;  :mk-clause               2686
;  :num-allocs              6740692
;  :num-checks              348
;  :propagations            2321
;  :quant-instantiations    647
;  :rlimit-count            283248
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15104
;  :arith-add-rows          444
;  :arith-assert-diseq      724
;  :arith-assert-lower      1559
;  :arith-assert-upper      1273
;  :arith-bound-prop        133
;  :arith-conflicts         41
;  :arith-eq-adapter        1005
;  :arith-fixed-eqs         642
;  :arith-offset-eqs        165
;  :arith-pivots            299
;  :binary-propagations     11
;  :conflicts               457
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 2538
;  :datatype-occurs-check   937
;  :datatype-splits         1724
;  :decisions               2795
;  :del-clause              2785
;  :final-checks            250
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          112
;  :mk-bool-var             6627
;  :mk-clause               2974
;  :num-allocs              7197417
;  :num-checks              349
;  :propagations            2631
;  :quant-instantiations    747
;  :rlimit-count            290902
;  :time                    0.00)
; [then-branch: 92 | !(__flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1]) | live]
; [else-branch: 92 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1] | live]
(push) ; 9
; [then-branch: 92 | !(__flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@60@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15105
;  :arith-add-rows          446
;  :arith-assert-diseq      724
;  :arith-assert-lower      1559
;  :arith-assert-upper      1273
;  :arith-bound-prop        133
;  :arith-conflicts         41
;  :arith-eq-adapter        1005
;  :arith-fixed-eqs         642
;  :arith-offset-eqs        165
;  :arith-pivots            299
;  :binary-propagations     11
;  :conflicts               457
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 2538
;  :datatype-occurs-check   937
;  :datatype-splits         1724
;  :decisions               2795
;  :del-clause              2785
;  :final-checks            250
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          112
;  :mk-bool-var             6631
;  :mk-clause               2979
;  :num-allocs              7197417
;  :num-checks              350
;  :propagations            2633
;  :quant-instantiations    748
;  :rlimit-count            291118)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15105
;  :arith-add-rows          446
;  :arith-assert-diseq      724
;  :arith-assert-lower      1559
;  :arith-assert-upper      1273
;  :arith-bound-prop        133
;  :arith-conflicts         41
;  :arith-eq-adapter        1005
;  :arith-fixed-eqs         642
;  :arith-offset-eqs        165
;  :arith-pivots            299
;  :binary-propagations     11
;  :conflicts               457
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 2538
;  :datatype-occurs-check   937
;  :datatype-splits         1724
;  :decisions               2795
;  :del-clause              2785
;  :final-checks            250
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          112
;  :mk-bool-var             6631
;  :mk-clause               2979
;  :num-allocs              7197417
;  :num-checks              351
;  :propagations            2633
;  :quant-instantiations    748
;  :rlimit-count            291133)
(pop) ; 9
(push) ; 9
; [else-branch: 92 | __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@60@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@60@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_39__38@60@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
              1))
          0)
        (=
          (Seq_index
            __flatten_39__38@60@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
              1))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_all_events_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@64@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 93 | 0 <= i@64@01 | live]
; [else-branch: 93 | !(0 <= i@64@01) | live]
(push) ; 10
; [then-branch: 93 | 0 <= i@64@01]
(assert (<= 0 i@64@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 93 | !(0 <= i@64@01)]
(assert (not (<= 0 i@64@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 94 | i@64@01 < |First:(Second:($t@62@01))| && 0 <= i@64@01 | live]
; [else-branch: 94 | !(i@64@01 < |First:(Second:($t@62@01))| && 0 <= i@64@01) | live]
(push) ; 10
; [then-branch: 94 | i@64@01 < |First:(Second:($t@62@01))| && 0 <= i@64@01]
(assert (and
  (<
    i@64@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))
  (<= 0 i@64@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@64@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15838
;  :arith-add-rows          483
;  :arith-assert-diseq      784
;  :arith-assert-lower      1692
;  :arith-assert-upper      1351
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1075
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               475
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              2987
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             6995
;  :mk-clause               3189
;  :num-allocs              7197417
;  :num-checks              353
;  :propagations            2847
;  :quant-instantiations    824
;  :rlimit-count            296999)
; [eval] -1
(push) ; 11
; [then-branch: 95 | First:(Second:($t@62@01))[i@64@01] == -1 | live]
; [else-branch: 95 | First:(Second:($t@62@01))[i@64@01] != -1 | live]
(push) ; 12
; [then-branch: 95 | First:(Second:($t@62@01))[i@64@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
    i@64@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 95 | First:(Second:($t@62@01))[i@64@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
      i@64@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@64@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15838
;  :arith-add-rows          483
;  :arith-assert-diseq      785
;  :arith-assert-lower      1695
;  :arith-assert-upper      1352
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1076
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               475
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              2987
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             7001
;  :mk-clause               3193
;  :num-allocs              7197417
;  :num-checks              354
;  :propagations            2849
;  :quant-instantiations    825
;  :rlimit-count            297207)
(push) ; 13
; [then-branch: 96 | 0 <= First:(Second:($t@62@01))[i@64@01] | live]
; [else-branch: 96 | !(0 <= First:(Second:($t@62@01))[i@64@01]) | live]
(push) ; 14
; [then-branch: 96 | 0 <= First:(Second:($t@62@01))[i@64@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
    i@64@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@64@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15838
;  :arith-add-rows          483
;  :arith-assert-diseq      785
;  :arith-assert-lower      1695
;  :arith-assert-upper      1352
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1076
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               475
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              2987
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             7001
;  :mk-clause               3193
;  :num-allocs              7197417
;  :num-checks              355
;  :propagations            2849
;  :quant-instantiations    825
;  :rlimit-count            297301)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 96 | !(0 <= First:(Second:($t@62@01))[i@64@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
      i@64@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 94 | !(i@64@01 < |First:(Second:($t@62@01))| && 0 <= i@64@01)]
(assert (not
  (and
    (<
      i@64@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))
    (<= 0 i@64@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@64@01 Int)) (!
  (implies
    (and
      (<
        i@64@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))
      (<= 0 i@64@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
          i@64@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
            i@64@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
            i@64@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
    i@64@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15838
;  :arith-add-rows          483
;  :arith-assert-diseq      787
;  :arith-assert-lower      1696
;  :arith-assert-upper      1353
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1077
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               476
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              3005
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             7009
;  :mk-clause               3207
;  :num-allocs              7197417
;  :num-checks              356
;  :propagations            2851
;  :quant-instantiations    826
;  :rlimit-count            297723)
(assert (forall ((i@64@01 Int)) (!
  (implies
    (and
      (<
        i@64@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))
      (<= 0 i@64@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
          i@64@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
            i@64@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
            i@64@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))
    i@64@01))
  :qid |prog.l<no position>|)))
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 ($Snap.combine ($Snap.first $t@65@01) ($Snap.second $t@65@01))))
(assert (=
  ($Snap.second $t@65@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@65@01))
    ($Snap.second ($Snap.second $t@65@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@65@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@65@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@65@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@65@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@66@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 97 | 0 <= i@66@01 | live]
; [else-branch: 97 | !(0 <= i@66@01) | live]
(push) ; 10
; [then-branch: 97 | 0 <= i@66@01]
(assert (<= 0 i@66@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 97 | !(0 <= i@66@01)]
(assert (not (<= 0 i@66@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 98 | i@66@01 < |First:(Second:($t@65@01))| && 0 <= i@66@01 | live]
; [else-branch: 98 | !(i@66@01 < |First:(Second:($t@65@01))| && 0 <= i@66@01) | live]
(push) ; 10
; [then-branch: 98 | i@66@01 < |First:(Second:($t@65@01))| && 0 <= i@66@01]
(assert (and
  (<
    i@66@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))
  (<= 0 i@66@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@66@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15875
;  :arith-add-rows          483
;  :arith-assert-diseq      787
;  :arith-assert-lower      1701
;  :arith-assert-upper      1356
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1079
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               476
;  :datatype-accessor-ax    515
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              3005
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             7031
;  :mk-clause               3207
;  :num-allocs              7197417
;  :num-checks              357
;  :propagations            2851
;  :quant-instantiations    830
;  :rlimit-count            299111)
; [eval] -1
(push) ; 11
; [then-branch: 99 | First:(Second:($t@65@01))[i@66@01] == -1 | live]
; [else-branch: 99 | First:(Second:($t@65@01))[i@66@01] != -1 | live]
(push) ; 12
; [then-branch: 99 | First:(Second:($t@65@01))[i@66@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    i@66@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 99 | First:(Second:($t@65@01))[i@66@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      i@66@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@66@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15875
;  :arith-add-rows          483
;  :arith-assert-diseq      787
;  :arith-assert-lower      1701
;  :arith-assert-upper      1356
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1079
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               476
;  :datatype-accessor-ax    515
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              3005
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             7032
;  :mk-clause               3207
;  :num-allocs              7197417
;  :num-checks              358
;  :propagations            2851
;  :quant-instantiations    830
;  :rlimit-count            299262)
(push) ; 13
; [then-branch: 100 | 0 <= First:(Second:($t@65@01))[i@66@01] | live]
; [else-branch: 100 | !(0 <= First:(Second:($t@65@01))[i@66@01]) | live]
(push) ; 14
; [then-branch: 100 | 0 <= First:(Second:($t@65@01))[i@66@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    i@66@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@66@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15875
;  :arith-add-rows          483
;  :arith-assert-diseq      788
;  :arith-assert-lower      1704
;  :arith-assert-upper      1356
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1080
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               476
;  :datatype-accessor-ax    515
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              3005
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             7035
;  :mk-clause               3208
;  :num-allocs              7197417
;  :num-checks              359
;  :propagations            2851
;  :quant-instantiations    830
;  :rlimit-count            299366)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 100 | !(0 <= First:(Second:($t@65@01))[i@66@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      i@66@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 98 | !(i@66@01 < |First:(Second:($t@65@01))| && 0 <= i@66@01)]
(assert (not
  (and
    (<
      i@66@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))
    (<= 0 i@66@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@66@01 Int)) (!
  (implies
    (and
      (<
        i@66@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))
      (<= 0 i@66@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
          i@66@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
            i@66@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
            i@66@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    i@66@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@62@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15893
;  :arith-add-rows          483
;  :arith-assert-diseq      788
;  :arith-assert-lower      1705
;  :arith-assert-upper      1357
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1081
;  :arith-fixed-eqs         692
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               476
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              3006
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             7055
;  :mk-clause               3218
;  :num-allocs              7197417
;  :num-checks              360
;  :propagations            2855
;  :quant-instantiations    832
;  :rlimit-count            300381)
(push) ; 8
; [then-branch: 101 | First:(Second:(Second:(Second:($t@62@01))))[0] == 0 | live]
; [else-branch: 101 | First:(Second:(Second:(Second:($t@62@01))))[0] != 0 | live]
(push) ; 9
; [then-branch: 101 | First:(Second:(Second:(Second:($t@62@01))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 101 | First:(Second:(Second:(Second:($t@62@01))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15896
;  :arith-add-rows          484
;  :arith-assert-diseq      788
;  :arith-assert-lower      1705
;  :arith-assert-upper      1357
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1081
;  :arith-fixed-eqs         692
;  :arith-offset-eqs        183
;  :arith-pivots            313
;  :binary-propagations     11
;  :conflicts               476
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2922
;  :del-clause              3006
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          134
;  :mk-bool-var             7060
;  :mk-clause               3224
;  :num-allocs              7197417
;  :num-checks              361
;  :propagations            2855
;  :quant-instantiations    833
;  :rlimit-count            300598)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        0)
      (- 0 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16170
;  :arith-add-rows          515
;  :arith-assert-diseq      839
;  :arith-assert-lower      1807
;  :arith-assert-upper      1414
;  :arith-bound-prop        145
;  :arith-conflicts         43
;  :arith-eq-adapter        1127
;  :arith-fixed-eqs         719
;  :arith-offset-eqs        195
;  :arith-pivots            325
;  :binary-propagations     11
;  :conflicts               497
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2639
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2962
;  :del-clause              3175
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          143
;  :mk-bool-var             7273
;  :mk-clause               3387
;  :num-allocs              7197417
;  :num-checks              362
;  :propagations            3083
;  :quant-instantiations    894
;  :rlimit-count            303589
;  :time                    0.00)
; [then-branch: 102 | First:(Second:(Second:(Second:($t@62@01))))[0] == 0 || First:(Second:(Second:(Second:($t@62@01))))[0] == -1 | dead]
; [else-branch: 102 | !(First:(Second:(Second:(Second:($t@62@01))))[0] == 0 || First:(Second:(Second:(Second:($t@62@01))))[0] == -1) | live]
(push) ; 9
; [else-branch: 102 | !(First:(Second:(Second:(Second:($t@62@01))))[0] == 0 || First:(Second:(Second:(Second:($t@62@01))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        0)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16176
;  :arith-add-rows          515
;  :arith-assert-diseq      839
;  :arith-assert-lower      1807
;  :arith-assert-upper      1414
;  :arith-bound-prop        145
;  :arith-conflicts         43
;  :arith-eq-adapter        1127
;  :arith-fixed-eqs         719
;  :arith-offset-eqs        195
;  :arith-pivots            325
;  :binary-propagations     11
;  :conflicts               497
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2639
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2962
;  :del-clause              3175
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          143
;  :mk-bool-var             7275
;  :mk-clause               3387
;  :num-allocs              7197417
;  :num-checks              363
;  :propagations            3083
;  :quant-instantiations    894
;  :rlimit-count            303843)
(push) ; 8
; [then-branch: 103 | First:(Second:(Second:(Second:($t@62@01))))[1] == 0 | live]
; [else-branch: 103 | First:(Second:(Second:(Second:($t@62@01))))[1] != 0 | live]
(push) ; 9
; [then-branch: 103 | First:(Second:(Second:(Second:($t@62@01))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 103 | First:(Second:(Second:(Second:($t@62@01))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16177
;  :arith-add-rows          516
;  :arith-assert-diseq      839
;  :arith-assert-lower      1807
;  :arith-assert-upper      1414
;  :arith-bound-prop        145
;  :arith-conflicts         43
;  :arith-eq-adapter        1127
;  :arith-fixed-eqs         719
;  :arith-offset-eqs        195
;  :arith-pivots            325
;  :binary-propagations     11
;  :conflicts               497
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2639
;  :datatype-occurs-check   960
;  :datatype-splits         1765
;  :decisions               2962
;  :del-clause              3175
;  :final-checks            254
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.02
;  :memory                  5.02
;  :minimized-lits          143
;  :mk-bool-var             7280
;  :mk-clause               3393
;  :num-allocs              7197417
;  :num-checks              364
;  :propagations            3083
;  :quant-instantiations    895
;  :rlimit-count            304056)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16671
;  :arith-add-rows          535
;  :arith-assert-diseq      886
;  :arith-assert-lower      1906
;  :arith-assert-upper      1468
;  :arith-bound-prop        146
;  :arith-conflicts         44
;  :arith-eq-adapter        1179
;  :arith-fixed-eqs         748
;  :arith-offset-eqs        205
;  :arith-pivots            341
;  :binary-propagations     11
;  :conflicts               502
;  :datatype-accessor-ax    532
;  :datatype-constructor-ax 2716
;  :datatype-occurs-check   990
;  :datatype-splits         1811
;  :decisions               3039
;  :del-clause              3337
;  :final-checks            257
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          148
;  :mk-bool-var             7522
;  :mk-clause               3549
;  :num-allocs              7435364
;  :num-checks              365
;  :propagations            3258
;  :quant-instantiations    941
;  :rlimit-count            307967
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17727
;  :arith-add-rows          585
;  :arith-assert-diseq      987
;  :arith-assert-lower      2113
;  :arith-assert-upper      1584
;  :arith-bound-prop        155
;  :arith-conflicts         46
;  :arith-eq-adapter        1280
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        225
;  :arith-pivots            368
;  :binary-propagations     11
;  :conflicts               525
;  :datatype-accessor-ax    585
;  :datatype-constructor-ax 2875
;  :datatype-occurs-check   1086
;  :datatype-splits         1966
;  :decisions               3188
;  :del-clause              3680
;  :final-checks            268
;  :interface-eqs           24
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          152
;  :mk-bool-var             8067
;  :mk-clause               3892
;  :num-allocs              7435364
;  :num-checks              366
;  :propagations            3683
;  :quant-instantiations    1042
;  :rlimit-count            315585
;  :time                    0.00)
; [then-branch: 104 | First:(Second:(Second:(Second:($t@62@01))))[1] == 0 || First:(Second:(Second:(Second:($t@62@01))))[1] == -1 | live]
; [else-branch: 104 | !(First:(Second:(Second:(Second:($t@62@01))))[1] == 0 || First:(Second:(Second:(Second:($t@62@01))))[1] == -1) | live]
(push) ; 9
; [then-branch: 104 | First:(Second:(Second:(Second:($t@62@01))))[1] == 0 || First:(Second:(Second:(Second:($t@62@01))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17727
;  :arith-add-rows          585
;  :arith-assert-diseq      987
;  :arith-assert-lower      2113
;  :arith-assert-upper      1584
;  :arith-bound-prop        155
;  :arith-conflicts         46
;  :arith-eq-adapter        1280
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        225
;  :arith-pivots            368
;  :binary-propagations     11
;  :conflicts               525
;  :datatype-accessor-ax    585
;  :datatype-constructor-ax 2875
;  :datatype-occurs-check   1086
;  :datatype-splits         1966
;  :decisions               3188
;  :del-clause              3680
;  :final-checks            268
;  :interface-eqs           24
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          152
;  :mk-bool-var             8069
;  :mk-clause               3893
;  :num-allocs              7435364
;  :num-checks              367
;  :propagations            3683
;  :quant-instantiations    1042
;  :rlimit-count            315734)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 104 | !(First:(Second:(Second:(Second:($t@62@01))))[1] == 0 || First:(Second:(Second:(Second:($t@62@01))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17733
;  :arith-add-rows          585
;  :arith-assert-diseq      987
;  :arith-assert-lower      2113
;  :arith-assert-upper      1584
;  :arith-bound-prop        155
;  :arith-conflicts         46
;  :arith-eq-adapter        1280
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        225
;  :arith-pivots            368
;  :binary-propagations     11
;  :conflicts               525
;  :datatype-accessor-ax    586
;  :datatype-constructor-ax 2875
;  :datatype-occurs-check   1086
;  :datatype-splits         1966
;  :decisions               3188
;  :del-clause              3681
;  :final-checks            268
;  :interface-eqs           24
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          152
;  :mk-bool-var             8075
;  :mk-clause               3897
;  :num-allocs              7435364
;  :num-checks              368
;  :propagations            3683
;  :quant-instantiations    1042
;  :rlimit-count            316227)
(push) ; 8
; [then-branch: 105 | First:(Second:(Second:(Second:($t@62@01))))[2] == 0 | live]
; [else-branch: 105 | First:(Second:(Second:(Second:($t@62@01))))[2] != 0 | live]
(push) ; 9
; [then-branch: 105 | First:(Second:(Second:(Second:($t@62@01))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
    2)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 105 | First:(Second:(Second:(Second:($t@62@01))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17734
;  :arith-add-rows          585
;  :arith-assert-diseq      987
;  :arith-assert-lower      2113
;  :arith-assert-upper      1584
;  :arith-bound-prop        155
;  :arith-conflicts         46
;  :arith-eq-adapter        1280
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        225
;  :arith-pivots            368
;  :binary-propagations     11
;  :conflicts               525
;  :datatype-accessor-ax    586
;  :datatype-constructor-ax 2875
;  :datatype-occurs-check   1086
;  :datatype-splits         1966
;  :decisions               3188
;  :del-clause              3681
;  :final-checks            268
;  :interface-eqs           24
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          152
;  :mk-bool-var             8079
;  :mk-clause               3902
;  :num-allocs              7435364
;  :num-checks              369
;  :propagations            3683
;  :quant-instantiations    1043
;  :rlimit-count            316411)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18644
;  :arith-add-rows          611
;  :arith-assert-diseq      1055
;  :arith-assert-lower      2248
;  :arith-assert-upper      1641
;  :arith-bound-prop        158
;  :arith-conflicts         48
;  :arith-eq-adapter        1344
;  :arith-fixed-eqs         844
;  :arith-offset-eqs        239
;  :arith-pivots            383
;  :binary-propagations     11
;  :conflicts               543
;  :datatype-accessor-ax    639
;  :datatype-constructor-ax 3034
;  :datatype-occurs-check   1179
;  :datatype-splits         2120
;  :decisions               3338
;  :del-clause              3906
;  :final-checks            279
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          156
;  :mk-bool-var             8482
;  :mk-clause               4122
;  :num-allocs              7435364
;  :num-checks              370
;  :propagations            3943
;  :quant-instantiations    1110
;  :rlimit-count            322365
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19153
;  :arith-add-rows          627
;  :arith-assert-diseq      1103
;  :arith-assert-lower      2347
;  :arith-assert-upper      1695
;  :arith-bound-prop        159
;  :arith-conflicts         49
;  :arith-eq-adapter        1396
;  :arith-fixed-eqs         873
;  :arith-offset-eqs        249
;  :arith-pivots            403
;  :binary-propagations     11
;  :conflicts               549
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3114
;  :datatype-occurs-check   1215
;  :datatype-splits         2168
;  :decisions               3417
;  :del-clause              4063
;  :final-checks            283
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          158
;  :mk-bool-var             8730
;  :mk-clause               4279
;  :num-allocs              7435364
;  :num-checks              371
;  :propagations            4122
;  :quant-instantiations    1156
;  :rlimit-count            326329
;  :time                    0.00)
; [then-branch: 106 | First:(Second:(Second:(Second:($t@62@01))))[2] == 0 || First:(Second:(Second:(Second:($t@62@01))))[2] == -1 | live]
; [else-branch: 106 | !(First:(Second:(Second:(Second:($t@62@01))))[2] == 0 || First:(Second:(Second:(Second:($t@62@01))))[2] == -1) | live]
(push) ; 9
; [then-branch: 106 | First:(Second:(Second:(Second:($t@62@01))))[2] == 0 || First:(Second:(Second:(Second:($t@62@01))))[2] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] == -2
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19153
;  :arith-add-rows          627
;  :arith-assert-diseq      1103
;  :arith-assert-lower      2347
;  :arith-assert-upper      1695
;  :arith-bound-prop        159
;  :arith-conflicts         49
;  :arith-eq-adapter        1396
;  :arith-fixed-eqs         873
;  :arith-offset-eqs        249
;  :arith-pivots            403
;  :binary-propagations     11
;  :conflicts               549
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3114
;  :datatype-occurs-check   1215
;  :datatype-splits         2168
;  :decisions               3417
;  :del-clause              4063
;  :final-checks            283
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          158
;  :mk-bool-var             8732
;  :mk-clause               4280
;  :num-allocs              7435364
;  :num-checks              372
;  :propagations            4122
;  :quant-instantiations    1156
;  :rlimit-count            326478)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 106 | !(First:(Second:(Second:(Second:($t@62@01))))[2] == 0 || First:(Second:(Second:(Second:($t@62@01))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      2)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) != 0 && old(diz.Main_event_state[0]) != -1 ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] old(diz.Main_event_state[0]) != 0 && old(diz.Main_event_state[0]) != -1
; [eval] old(diz.Main_event_state[0]) != 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19159
;  :arith-add-rows          627
;  :arith-assert-diseq      1103
;  :arith-assert-lower      2347
;  :arith-assert-upper      1695
;  :arith-bound-prop        159
;  :arith-conflicts         49
;  :arith-eq-adapter        1396
;  :arith-fixed-eqs         873
;  :arith-offset-eqs        249
;  :arith-pivots            403
;  :binary-propagations     11
;  :conflicts               549
;  :datatype-accessor-ax    655
;  :datatype-constructor-ax 3114
;  :datatype-occurs-check   1215
;  :datatype-splits         2168
;  :decisions               3417
;  :del-clause              4064
;  :final-checks            283
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          158
;  :mk-bool-var             8738
;  :mk-clause               4284
;  :num-allocs              7435364
;  :num-checks              373
;  :propagations            4122
;  :quant-instantiations    1156
;  :rlimit-count            326977)
(push) ; 8
; [then-branch: 107 | First:(Second:(Second:(Second:($t@62@01))))[0] != 0 | live]
; [else-branch: 107 | First:(Second:(Second:(Second:($t@62@01))))[0] == 0 | live]
(push) ; 9
; [then-branch: 107 | First:(Second:(Second:(Second:($t@62@01))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) != -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19162
;  :arith-add-rows          628
;  :arith-assert-diseq      1103
;  :arith-assert-lower      2347
;  :arith-assert-upper      1695
;  :arith-bound-prop        159
;  :arith-conflicts         49
;  :arith-eq-adapter        1396
;  :arith-fixed-eqs         873
;  :arith-offset-eqs        249
;  :arith-pivots            403
;  :binary-propagations     11
;  :conflicts               549
;  :datatype-accessor-ax    655
;  :datatype-constructor-ax 3114
;  :datatype-occurs-check   1215
;  :datatype-splits         2168
;  :decisions               3417
;  :del-clause              4064
;  :final-checks            283
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          158
;  :mk-bool-var             8743
;  :mk-clause               4290
;  :num-allocs              7435364
;  :num-checks              374
;  :propagations            4122
;  :quant-instantiations    1157
;  :rlimit-count            327130)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 107 | First:(Second:(Second:(Second:($t@62@01))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
    0)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          0)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19665
;  :arith-add-rows          640
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2431
;  :arith-assert-upper      1740
;  :arith-bound-prop        160
;  :arith-conflicts         50
;  :arith-eq-adapter        1439
;  :arith-fixed-eqs         901
;  :arith-offset-eqs        259
;  :arith-pivots            413
;  :binary-propagations     11
;  :conflicts               555
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 3192
;  :datatype-occurs-check   1251
;  :datatype-splits         2215
;  :decisions               3496
;  :del-clause              4194
;  :final-checks            288
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          160
;  :mk-bool-var             8955
;  :mk-clause               4414
;  :num-allocs              7435364
;  :num-checks              375
;  :propagations            4284
;  :quant-instantiations    1200
;  :rlimit-count            330969
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        0)
      0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19956
;  :arith-add-rows          674
;  :arith-assert-diseq      1200
;  :arith-assert-lower      2533
;  :arith-assert-upper      1797
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1485
;  :arith-fixed-eqs         930
;  :arith-offset-eqs        272
;  :arith-pivots            421
;  :binary-propagations     11
;  :conflicts               576
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 3198
;  :datatype-occurs-check   1251
;  :datatype-splits         2215
;  :decisions               3538
;  :del-clause              4373
;  :final-checks            288
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          169
;  :mk-bool-var             9184
;  :mk-clause               4593
;  :num-allocs              7435364
;  :num-checks              376
;  :propagations            4523
;  :quant-instantiations    1263
;  :rlimit-count            334068
;  :time                    0.00)
; [then-branch: 108 | First:(Second:(Second:(Second:($t@62@01))))[0] != -1 && First:(Second:(Second:(Second:($t@62@01))))[0] != 0 | live]
; [else-branch: 108 | !(First:(Second:(Second:(Second:($t@62@01))))[0] != -1 && First:(Second:(Second:(Second:($t@62@01))))[0] != 0) | dead]
(push) ; 9
; [then-branch: 108 | First:(Second:(Second:(Second:($t@62@01))))[0] != -1 && First:(Second:(Second:(Second:($t@62@01))))[0] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        0)
      0))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19967
;  :arith-add-rows          675
;  :arith-assert-diseq      1202
;  :arith-assert-lower      2540
;  :arith-assert-upper      1801
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1489
;  :arith-fixed-eqs         931
;  :arith-offset-eqs        272
;  :arith-pivots            422
;  :binary-propagations     11
;  :conflicts               576
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 3198
;  :datatype-occurs-check   1251
;  :datatype-splits         2215
;  :decisions               3538
;  :del-clause              4373
;  :final-checks            288
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          169
;  :mk-bool-var             9207
;  :mk-clause               4617
;  :num-allocs              7435364
;  :num-checks              377
;  :propagations            4532
;  :quant-instantiations    1267
;  :rlimit-count            334345)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19967
;  :arith-add-rows          675
;  :arith-assert-diseq      1202
;  :arith-assert-lower      2540
;  :arith-assert-upper      1801
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1489
;  :arith-fixed-eqs         931
;  :arith-offset-eqs        272
;  :arith-pivots            422
;  :binary-propagations     11
;  :conflicts               576
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 3198
;  :datatype-occurs-check   1251
;  :datatype-splits         2215
;  :decisions               3538
;  :del-clause              4373
;  :final-checks            288
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          169
;  :mk-bool-var             9207
;  :mk-clause               4617
;  :num-allocs              7435364
;  :num-checks              378
;  :propagations            4532
;  :quant-instantiations    1267
;  :rlimit-count            334360)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          0)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) != 0 && old(diz.Main_event_state[1]) != -1 ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] old(diz.Main_event_state[1]) != 0 && old(diz.Main_event_state[1]) != -1
; [eval] old(diz.Main_event_state[1]) != 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19976
;  :arith-add-rows          675
;  :arith-assert-diseq      1202
;  :arith-assert-lower      2540
;  :arith-assert-upper      1801
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1489
;  :arith-fixed-eqs         931
;  :arith-offset-eqs        272
;  :arith-pivots            423
;  :binary-propagations     11
;  :conflicts               576
;  :datatype-accessor-ax    671
;  :datatype-constructor-ax 3198
;  :datatype-occurs-check   1251
;  :datatype-splits         2215
;  :decisions               3538
;  :del-clause              4397
;  :final-checks            288
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          169
;  :mk-bool-var             9212
;  :mk-clause               4618
;  :num-allocs              7435364
;  :num-checks              379
;  :propagations            4532
;  :quant-instantiations    1267
;  :rlimit-count            334837)
(push) ; 8
; [then-branch: 109 | First:(Second:(Second:(Second:($t@62@01))))[1] != 0 | live]
; [else-branch: 109 | First:(Second:(Second:(Second:($t@62@01))))[1] == 0 | live]
(push) ; 9
; [then-branch: 109 | First:(Second:(Second:(Second:($t@62@01))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) != -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19977
;  :arith-add-rows          676
;  :arith-assert-diseq      1202
;  :arith-assert-lower      2540
;  :arith-assert-upper      1801
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1489
;  :arith-fixed-eqs         931
;  :arith-offset-eqs        272
;  :arith-pivots            423
;  :binary-propagations     11
;  :conflicts               576
;  :datatype-accessor-ax    671
;  :datatype-constructor-ax 3198
;  :datatype-occurs-check   1251
;  :datatype-splits         2215
;  :decisions               3538
;  :del-clause              4397
;  :final-checks            288
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.12
;  :memory                  5.12
;  :minimized-lits          169
;  :mk-bool-var             9216
;  :mk-clause               4624
;  :num-allocs              7435364
;  :num-checks              380
;  :propagations            4532
;  :quant-instantiations    1268
;  :rlimit-count            334984)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 109 | First:(Second:(Second:(Second:($t@62@01))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
    1)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          1)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21053
;  :arith-add-rows          715
;  :arith-assert-diseq      1309
;  :arith-assert-lower      2729
;  :arith-assert-upper      1897
;  :arith-bound-prop        175
;  :arith-conflicts         53
;  :arith-eq-adapter        1580
;  :arith-fixed-eqs         983
;  :arith-offset-eqs        294
;  :arith-pivots            452
;  :binary-propagations     11
;  :conflicts               601
;  :datatype-accessor-ax    725
;  :datatype-constructor-ax 3360
;  :datatype-occurs-check   1347
;  :datatype-splits         2372
;  :decisions               3695
;  :del-clause              4723
;  :final-checks            299
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          171
;  :mk-bool-var             9733
;  :mk-clause               4944
;  :num-allocs              8201102
;  :num-checks              381
;  :propagations            4937
;  :quant-instantiations    1361
;  :rlimit-count            342363
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21501
;  :arith-add-rows          729
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2779
;  :arith-assert-upper      1932
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1612
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            467
;  :binary-propagations     11
;  :conflicts               606
;  :datatype-accessor-ax    740
;  :datatype-constructor-ax 3440
;  :datatype-occurs-check   1383
;  :datatype-splits         2420
;  :decisions               3772
;  :del-clause              4814
;  :final-checks            303
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          171
;  :mk-bool-var             9895
;  :mk-clause               5035
;  :num-allocs              8201102
;  :num-checks              382
;  :propagations            5040
;  :quant-instantiations    1386
;  :rlimit-count            345815
;  :time                    0.00)
; [then-branch: 110 | First:(Second:(Second:(Second:($t@62@01))))[1] != -1 && First:(Second:(Second:(Second:($t@62@01))))[1] != 0 | live]
; [else-branch: 110 | !(First:(Second:(Second:(Second:($t@62@01))))[1] != -1 && First:(Second:(Second:(Second:($t@62@01))))[1] != 0) | live]
(push) ; 9
; [then-branch: 110 | First:(Second:(Second:(Second:($t@62@01))))[1] != -1 && First:(Second:(Second:(Second:($t@62@01))))[1] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        1)
      0))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21502
;  :arith-add-rows          730
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2779
;  :arith-assert-upper      1932
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1612
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            467
;  :binary-propagations     11
;  :conflicts               606
;  :datatype-accessor-ax    740
;  :datatype-constructor-ax 3440
;  :datatype-occurs-check   1383
;  :datatype-splits         2420
;  :decisions               3772
;  :del-clause              4814
;  :final-checks            303
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          171
;  :mk-bool-var             9899
;  :mk-clause               5041
;  :num-allocs              8201102
;  :num-checks              383
;  :propagations            5041
;  :quant-instantiations    1387
;  :rlimit-count            346005)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21502
;  :arith-add-rows          730
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2779
;  :arith-assert-upper      1932
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1612
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            467
;  :binary-propagations     11
;  :conflicts               606
;  :datatype-accessor-ax    740
;  :datatype-constructor-ax 3440
;  :datatype-occurs-check   1383
;  :datatype-splits         2420
;  :decisions               3772
;  :del-clause              4814
;  :final-checks            303
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          171
;  :mk-bool-var             9899
;  :mk-clause               5041
;  :num-allocs              8201102
;  :num-checks              384
;  :propagations            5041
;  :quant-instantiations    1387
;  :rlimit-count            346020)
(pop) ; 9
(push) ; 9
; [else-branch: 110 | !(First:(Second:(Second:(Second:($t@62@01))))[1] != -1 && First:(Second:(Second:(Second:($t@62@01))))[1] != 0)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          1)
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          1)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) != 0 && old(diz.Main_event_state[2]) != -1 ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] old(diz.Main_event_state[2]) != 0 && old(diz.Main_event_state[2]) != -1
; [eval] old(diz.Main_event_state[2]) != 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21511
;  :arith-add-rows          730
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2779
;  :arith-assert-upper      1932
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1612
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            467
;  :binary-propagations     11
;  :conflicts               606
;  :datatype-accessor-ax    740
;  :datatype-constructor-ax 3440
;  :datatype-occurs-check   1383
;  :datatype-splits         2420
;  :decisions               3772
;  :del-clause              4820
;  :final-checks            303
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          171
;  :mk-bool-var             9901
;  :mk-clause               5042
;  :num-allocs              8201102
;  :num-checks              385
;  :propagations            5041
;  :quant-instantiations    1387
;  :rlimit-count            346434)
(push) ; 8
; [then-branch: 111 | First:(Second:(Second:(Second:($t@62@01))))[2] != 0 | live]
; [else-branch: 111 | First:(Second:(Second:(Second:($t@62@01))))[2] == 0 | live]
(push) ; 9
; [then-branch: 111 | First:(Second:(Second:(Second:($t@62@01))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) != -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21512
;  :arith-add-rows          731
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2779
;  :arith-assert-upper      1932
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1612
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            467
;  :binary-propagations     11
;  :conflicts               606
;  :datatype-accessor-ax    740
;  :datatype-constructor-ax 3440
;  :datatype-occurs-check   1383
;  :datatype-splits         2420
;  :decisions               3772
;  :del-clause              4820
;  :final-checks            303
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          171
;  :mk-bool-var             9904
;  :mk-clause               5047
;  :num-allocs              8201102
;  :num-checks              386
;  :propagations            5041
;  :quant-instantiations    1388
;  :rlimit-count            346583)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 111 | First:(Second:(Second:(Second:($t@62@01))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
    2)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          2)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22026
;  :arith-add-rows          744
;  :arith-assert-diseq      1389
;  :arith-assert-lower      2877
;  :arith-assert-upper      1985
;  :arith-bound-prop        177
;  :arith-conflicts         54
;  :arith-eq-adapter        1663
;  :arith-fixed-eqs         1036
;  :arith-offset-eqs        313
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               614
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 3517
;  :datatype-occurs-check   1419
;  :datatype-splits         2466
;  :decisions               3854
;  :del-clause              4994
;  :final-checks            308
;  :interface-eqs           32
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          173
;  :mk-bool-var             10158
;  :mk-clause               5216
;  :num-allocs              8201102
;  :num-checks              387
;  :propagations            5233
;  :quant-instantiations    1439
;  :rlimit-count            350676
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23002
;  :arith-add-rows          780
;  :arith-assert-diseq      1469
;  :arith-assert-lower      3012
;  :arith-assert-upper      2044
;  :arith-bound-prop        180
;  :arith-conflicts         56
;  :arith-eq-adapter        1727
;  :arith-fixed-eqs         1077
;  :arith-offset-eqs        334
;  :arith-pivots            498
;  :binary-propagations     11
;  :conflicts               635
;  :datatype-accessor-ax    809
;  :datatype-constructor-ax 3678
;  :datatype-occurs-check   1515
;  :datatype-splits         2618
;  :decisions               4014
;  :del-clause              5237
;  :final-checks            319
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          177
;  :mk-bool-var             10591
;  :mk-clause               5459
;  :num-allocs              8201102
;  :num-checks              388
;  :propagations            5532
;  :quant-instantiations    1517
;  :rlimit-count            357138
;  :time                    0.00)
; [then-branch: 112 | First:(Second:(Second:(Second:($t@62@01))))[2] != -1 && First:(Second:(Second:(Second:($t@62@01))))[2] != 0 | live]
; [else-branch: 112 | !(First:(Second:(Second:(Second:($t@62@01))))[2] != -1 && First:(Second:(Second:(Second:($t@62@01))))[2] != 0) | live]
(push) ; 9
; [then-branch: 112 | First:(Second:(Second:(Second:($t@62@01))))[2] != -1 && First:(Second:(Second:(Second:($t@62@01))))[2] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
        2)
      0))))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23003
;  :arith-add-rows          781
;  :arith-assert-diseq      1469
;  :arith-assert-lower      3012
;  :arith-assert-upper      2044
;  :arith-bound-prop        180
;  :arith-conflicts         56
;  :arith-eq-adapter        1727
;  :arith-fixed-eqs         1077
;  :arith-offset-eqs        334
;  :arith-pivots            498
;  :binary-propagations     11
;  :conflicts               635
;  :datatype-accessor-ax    809
;  :datatype-constructor-ax 3678
;  :datatype-occurs-check   1515
;  :datatype-splits         2618
;  :decisions               4014
;  :del-clause              5237
;  :final-checks            319
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          177
;  :mk-bool-var             10594
;  :mk-clause               5464
;  :num-allocs              8201102
;  :num-checks              389
;  :propagations            5533
;  :quant-instantiations    1518
;  :rlimit-count            357330)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23003
;  :arith-add-rows          781
;  :arith-assert-diseq      1469
;  :arith-assert-lower      3012
;  :arith-assert-upper      2044
;  :arith-bound-prop        180
;  :arith-conflicts         56
;  :arith-eq-adapter        1727
;  :arith-fixed-eqs         1077
;  :arith-offset-eqs        334
;  :arith-pivots            498
;  :binary-propagations     11
;  :conflicts               635
;  :datatype-accessor-ax    809
;  :datatype-constructor-ax 3678
;  :datatype-occurs-check   1515
;  :datatype-splits         2618
;  :decisions               4014
;  :del-clause              5237
;  :final-checks            319
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          177
;  :mk-bool-var             10594
;  :mk-clause               5464
;  :num-allocs              8201102
;  :num-checks              390
;  :propagations            5533
;  :quant-instantiations    1518
;  :rlimit-count            357345)
(pop) ; 9
(push) ; 9
; [else-branch: 112 | !(First:(Second:(Second:(Second:($t@62@01))))[2] != -1 && First:(Second:(Second:(Second:($t@62@01))))[2] != 0)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          2)
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
          2)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@67@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 113 | 0 <= i@67@01 | live]
; [else-branch: 113 | !(0 <= i@67@01) | live]
(push) ; 10
; [then-branch: 113 | 0 <= i@67@01]
(assert (<= 0 i@67@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 113 | !(0 <= i@67@01)]
(assert (not (<= 0 i@67@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 114 | i@67@01 < |First:(Second:($t@65@01))| && 0 <= i@67@01 | live]
; [else-branch: 114 | !(i@67@01 < |First:(Second:($t@65@01))| && 0 <= i@67@01) | live]
(push) ; 10
; [then-branch: 114 | i@67@01 < |First:(Second:($t@65@01))| && 0 <= i@67@01]
(assert (and
  (<
    i@67@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))
  (<= 0 i@67@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@67@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23527
;  :arith-add-rows          795
;  :arith-assert-diseq      1520
;  :arith-assert-lower      3112
;  :arith-assert-upper      2099
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1779
;  :arith-fixed-eqs         1109
;  :arith-offset-eqs        345
;  :arith-pivots            514
;  :binary-propagations     11
;  :conflicts               643
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5417
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10854
;  :mk-clause               5633
;  :num-allocs              8201102
;  :num-checks              392
;  :propagations            5726
;  :quant-instantiations    1569
;  :rlimit-count            361705)
; [eval] -1
(push) ; 11
; [then-branch: 115 | First:(Second:($t@65@01))[i@67@01] == -1 | live]
; [else-branch: 115 | First:(Second:($t@65@01))[i@67@01] != -1 | live]
(push) ; 12
; [then-branch: 115 | First:(Second:($t@65@01))[i@67@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    i@67@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 115 | First:(Second:($t@65@01))[i@67@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      i@67@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@67@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1522
;  :arith-assert-lower      3119
;  :arith-assert-upper      2102
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1782
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            514
;  :binary-propagations     11
;  :conflicts               643
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5417
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10869
;  :mk-clause               5650
;  :num-allocs              8201102
;  :num-checks              393
;  :propagations            5733
;  :quant-instantiations    1572
;  :rlimit-count            362008)
(push) ; 13
; [then-branch: 116 | 0 <= First:(Second:($t@65@01))[i@67@01] | live]
; [else-branch: 116 | !(0 <= First:(Second:($t@65@01))[i@67@01]) | live]
(push) ; 14
; [then-branch: 116 | 0 <= First:(Second:($t@65@01))[i@67@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    i@67@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@67@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1522
;  :arith-assert-lower      3119
;  :arith-assert-upper      2102
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1782
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            514
;  :binary-propagations     11
;  :conflicts               643
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5417
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10869
;  :mk-clause               5650
;  :num-allocs              8201102
;  :num-checks              394
;  :propagations            5733
;  :quant-instantiations    1572
;  :rlimit-count            362102)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 116 | !(0 <= First:(Second:($t@65@01))[i@67@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      i@67@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 114 | !(i@67@01 < |First:(Second:($t@65@01))| && 0 <= i@67@01)]
(assert (not
  (and
    (<
      i@67@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))
    (<= 0 i@67@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@67@01 Int)) (!
  (implies
    (and
      (<
        i@67@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))
      (<= 0 i@67@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
          i@67@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
            i@67@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
            i@67@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    i@67@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1524
;  :arith-assert-lower      3120
;  :arith-assert-upper      2103
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1784
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            514
;  :binary-propagations     11
;  :conflicts               644
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10883
;  :mk-clause               5677
;  :num-allocs              8201102
;  :num-checks              395
;  :propagations            5735
;  :quant-instantiations    1575
;  :rlimit-count            362590)
(assert (forall ((i@67@01 Int)) (!
  (implies
    (and
      (<
        i@67@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))
      (<= 0 i@67@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
          i@67@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
            i@67@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
            i@67@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    i@67@01))
  :qid |prog.l<no position>|)))
(declare-const $k@68@01 $Perm)
(assert ($Perm.isReadVar $k@68@01 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@68@01 $Perm.No) (< $Perm.No $k@68@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3122
;  :arith-assert-upper      2104
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            514
;  :binary-propagations     11
;  :conflicts               645
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10888
;  :mk-clause               5679
;  :num-allocs              8201102
;  :num-checks              396
;  :propagations            5736
;  :quant-instantiations    1575
;  :rlimit-count            363114)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@49@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3122
;  :arith-assert-upper      2104
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            514
;  :binary-propagations     11
;  :conflicts               645
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10888
;  :mk-clause               5679
;  :num-allocs              8201102
;  :num-checks              397
;  :propagations            5736
;  :quant-instantiations    1575
;  :rlimit-count            363125)
(assert (< $k@68@01 $k@49@01))
(assert (<= $Perm.No (- $k@49@01 $k@68@01)))
(assert (<= (- $k@49@01 $k@68@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@49@01 $k@68@01)) (not (= diz@17@01 $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 8
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3124
;  :arith-assert-upper      2105
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            515
;  :binary-propagations     11
;  :conflicts               646
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10891
;  :mk-clause               5679
;  :num-allocs              8201102
;  :num-checks              398
;  :propagations            5736
;  :quant-instantiations    1575
;  :rlimit-count            363339)
(declare-const $k@69@01 $Perm)
(assert ($Perm.isReadVar $k@69@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@69@01 $Perm.No) (< $Perm.No $k@69@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3126
;  :arith-assert-upper      2106
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            515
;  :binary-propagations     11
;  :conflicts               647
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10895
;  :mk-clause               5681
;  :num-allocs              8201102
;  :num-checks              399
;  :propagations            5737
;  :quant-instantiations    1575
;  :rlimit-count            363538)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@50@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3126
;  :arith-assert-upper      2106
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            515
;  :binary-propagations     11
;  :conflicts               647
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10895
;  :mk-clause               5681
;  :num-allocs              8201102
;  :num-checks              400
;  :propagations            5737
;  :quant-instantiations    1575
;  :rlimit-count            363549)
(assert (< $k@69@01 $k@50@01))
(assert (<= $Perm.No (- $k@50@01 $k@69@01)))
(assert (<= (- $k@50@01 $k@69@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@50@01 $k@69@01)) (not (= diz@17@01 $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 8
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3128
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               648
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10898
;  :mk-clause               5681
;  :num-allocs              8201102
;  :num-checks              401
;  :propagations            5737
;  :quant-instantiations    1575
;  :rlimit-count            363763)
(push) ; 8
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3128
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               649
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10898
;  :mk-clause               5681
;  :num-allocs              8201102
;  :num-checks              402
;  :propagations            5737
;  :quant-instantiations    1575
;  :rlimit-count            363811)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3128
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               649
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10898
;  :mk-clause               5681
;  :num-allocs              8201102
;  :num-checks              403
;  :propagations            5737
;  :quant-instantiations    1575
;  :rlimit-count            363824)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3128
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               650
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10898
;  :mk-clause               5681
;  :num-allocs              8201102
;  :num-checks              404
;  :propagations            5737
;  :quant-instantiations    1575
;  :rlimit-count            363872)
(declare-const $k@70@01 $Perm)
(assert ($Perm.isReadVar $k@70@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@70@01 $Perm.No) (< $Perm.No $k@70@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1527
;  :arith-assert-lower      3130
;  :arith-assert-upper      2108
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1787
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               651
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10902
;  :mk-clause               5683
;  :num-allocs              8201102
;  :num-checks              405
;  :propagations            5738
;  :quant-instantiations    1575
;  :rlimit-count            364070)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@51@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1527
;  :arith-assert-lower      3130
;  :arith-assert-upper      2108
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1787
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               651
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10902
;  :mk-clause               5683
;  :num-allocs              8201102
;  :num-checks              406
;  :propagations            5738
;  :quant-instantiations    1575
;  :rlimit-count            364081)
(assert (< $k@70@01 $k@51@01))
(assert (<= $Perm.No (- $k@51@01 $k@70@01)))
(assert (<= (- $k@51@01 $k@70@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@51@01 $k@70@01)) (not (= diz@17@01 $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1527
;  :arith-assert-lower      3132
;  :arith-assert-upper      2109
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1787
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            518
;  :binary-propagations     11
;  :conflicts               652
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10905
;  :mk-clause               5683
;  :num-allocs              8201102
;  :num-checks              407
;  :propagations            5738
;  :quant-instantiations    1575
;  :rlimit-count            364301)
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1527
;  :arith-assert-lower      3132
;  :arith-assert-upper      2109
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1787
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            518
;  :binary-propagations     11
;  :conflicts               653
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10905
;  :mk-clause               5683
;  :num-allocs              8201102
;  :num-checks              408
;  :propagations            5738
;  :quant-instantiations    1575
;  :rlimit-count            364349)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1527
;  :arith-assert-lower      3132
;  :arith-assert-upper      2109
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1787
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            518
;  :binary-propagations     11
;  :conflicts               653
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10905
;  :mk-clause               5683
;  :num-allocs              8201102
;  :num-checks              409
;  :propagations            5738
;  :quant-instantiations    1575
;  :rlimit-count            364362)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1527
;  :arith-assert-lower      3132
;  :arith-assert-upper      2109
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1787
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            518
;  :binary-propagations     11
;  :conflicts               654
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10905
;  :mk-clause               5683
;  :num-allocs              8201102
;  :num-checks              410
;  :propagations            5738
;  :quant-instantiations    1575
;  :rlimit-count            364410)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23531
;  :arith-add-rows          795
;  :arith-assert-diseq      1527
;  :arith-assert-lower      3132
;  :arith-assert-upper      2109
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1787
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            518
;  :binary-propagations     11
;  :conflicts               654
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10905
;  :mk-clause               5683
;  :num-allocs              8201102
;  :num-checks              411
;  :propagations            5738
;  :quant-instantiations    1575
;  :rlimit-count            364425)
; [eval] -1
(push) ; 8
; [then-branch: 117 | First:(Second:($t@65@01))[0] == -1 | live]
; [else-branch: 117 | First:(Second:($t@65@01))[0] != -1 | live]
(push) ; 9
; [then-branch: 117 | First:(Second:($t@65@01))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    0)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 117 | First:(Second:($t@65@01))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23535
;  :arith-add-rows          795
;  :arith-assert-diseq      1529
;  :arith-assert-lower      3139
;  :arith-assert-upper      2112
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1790
;  :arith-fixed-eqs         1111
;  :arith-offset-eqs        345
;  :arith-pivots            519
;  :binary-propagations     11
;  :conflicts               654
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3757
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4096
;  :del-clause              5461
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          179
;  :mk-bool-var             10920
;  :mk-clause               5700
;  :num-allocs              8201102
;  :num-checks              412
;  :propagations            5745
;  :quant-instantiations    1579
;  :rlimit-count            364724)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24053
;  :arith-add-rows          847
;  :arith-assert-diseq      1606
;  :arith-assert-lower      3266
;  :arith-assert-upper      2208
;  :arith-bound-prop        189
;  :arith-conflicts         59
;  :arith-eq-adapter        1864
;  :arith-fixed-eqs         1152
;  :arith-offset-eqs        361
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               676
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3793
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4170
;  :del-clause              5738
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          186
;  :mk-bool-var             11208
;  :mk-clause               5960
;  :num-allocs              8201102
;  :num-checks              413
;  :propagations            6085
;  :quant-instantiations    1670
;  :rlimit-count            369455
;  :time                    0.00)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      0)
    0)))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24055
;  :arith-add-rows          847
;  :arith-assert-diseq      1606
;  :arith-assert-lower      3266
;  :arith-assert-upper      2208
;  :arith-bound-prop        189
;  :arith-conflicts         59
;  :arith-eq-adapter        1864
;  :arith-fixed-eqs         1152
;  :arith-offset-eqs        361
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               676
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3793
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4170
;  :del-clause              5738
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          186
;  :mk-bool-var             11210
;  :mk-clause               5961
;  :num-allocs              8201102
;  :num-checks              414
;  :propagations            6085
;  :quant-instantiations    1670
;  :rlimit-count            369573)
; [eval] -1
(push) ; 8
; [then-branch: 118 | First:(Second:($t@65@01))[1] == -1 | live]
; [else-branch: 118 | First:(Second:($t@65@01))[1] != -1 | live]
(push) ; 9
; [then-branch: 118 | First:(Second:($t@65@01))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    1)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 118 | First:(Second:($t@65@01))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24064
;  :arith-add-rows          850
;  :arith-assert-diseq      1608
;  :arith-assert-lower      3274
;  :arith-assert-upper      2212
;  :arith-bound-prop        189
;  :arith-conflicts         59
;  :arith-eq-adapter        1868
;  :arith-fixed-eqs         1154
;  :arith-offset-eqs        361
;  :arith-pivots            542
;  :binary-propagations     11
;  :conflicts               676
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3793
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4170
;  :del-clause              5738
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          186
;  :mk-bool-var             11231
;  :mk-clause               5975
;  :num-allocs              8201102
;  :num-checks              415
;  :propagations            6094
;  :quant-instantiations    1675
;  :rlimit-count            369866)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    2))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24078
;  :arith-add-rows          860
;  :arith-assert-diseq      1613
;  :arith-assert-lower      3285
;  :arith-assert-upper      2219
;  :arith-bound-prop        191
;  :arith-conflicts         60
;  :arith-eq-adapter        1874
;  :arith-fixed-eqs         1156
;  :arith-offset-eqs        361
;  :arith-pivots            549
;  :binary-propagations     11
;  :conflicts               677
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3793
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4170
;  :del-clause              5773
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          186
;  :mk-bool-var             11258
;  :mk-clause               5996
;  :num-allocs              8201102
;  :num-checks              416
;  :propagations            6110
;  :quant-instantiations    1680
;  :rlimit-count            370405)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    2)))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24080
;  :arith-add-rows          860
;  :arith-assert-diseq      1613
;  :arith-assert-lower      3285
;  :arith-assert-upper      2219
;  :arith-bound-prop        191
;  :arith-conflicts         60
;  :arith-eq-adapter        1874
;  :arith-fixed-eqs         1156
;  :arith-offset-eqs        361
;  :arith-pivots            549
;  :binary-propagations     11
;  :conflicts               677
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3793
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4170
;  :del-clause              5773
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          186
;  :mk-bool-var             11260
;  :mk-clause               5997
;  :num-allocs              8201102
;  :num-checks              417
;  :propagations            6110
;  :quant-instantiations    1680
;  :rlimit-count            370523)
; [eval] -1
(push) ; 8
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      0)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24384
;  :arith-add-rows          893
;  :arith-assert-diseq      1659
;  :arith-assert-lower      3373
;  :arith-assert-upper      2273
;  :arith-bound-prop        196
;  :arith-conflicts         61
;  :arith-eq-adapter        1914
;  :arith-fixed-eqs         1189
;  :arith-offset-eqs        380
;  :arith-pivots            559
;  :binary-propagations     11
;  :conflicts               698
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3799
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4214
;  :del-clause              5910
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          200
;  :mk-bool-var             11458
;  :mk-clause               6134
;  :num-allocs              8201102
;  :num-checks              418
;  :propagations            6366
;  :quant-instantiations    1741
;  :rlimit-count            373678
;  :time                    0.00)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24384
;  :arith-add-rows          893
;  :arith-assert-diseq      1659
;  :arith-assert-lower      3373
;  :arith-assert-upper      2273
;  :arith-bound-prop        196
;  :arith-conflicts         61
;  :arith-eq-adapter        1914
;  :arith-fixed-eqs         1189
;  :arith-offset-eqs        380
;  :arith-pivots            559
;  :binary-propagations     11
;  :conflicts               698
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3799
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4214
;  :del-clause              5910
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          200
;  :mk-bool-var             11459
;  :mk-clause               6134
;  :num-allocs              8201102
;  :num-checks              419
;  :propagations            6366
;  :quant-instantiations    1741
;  :rlimit-count            373815)
(push) ; 8
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24669
;  :arith-add-rows          923
;  :arith-assert-diseq      1702
;  :arith-assert-lower      3452
;  :arith-assert-upper      2323
;  :arith-bound-prop        201
;  :arith-conflicts         62
;  :arith-eq-adapter        1951
;  :arith-fixed-eqs         1216
;  :arith-offset-eqs        394
;  :arith-pivots            565
;  :binary-propagations     11
;  :conflicts               717
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3805
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4253
;  :del-clause              6035
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          209
;  :mk-bool-var             11638
;  :mk-clause               6259
;  :num-allocs              8201102
;  :num-checks              420
;  :propagations            6598
;  :quant-instantiations    1797
;  :rlimit-count            376687
;  :time                    0.00)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      0)
    0)))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24669
;  :arith-add-rows          923
;  :arith-assert-diseq      1702
;  :arith-assert-lower      3452
;  :arith-assert-upper      2323
;  :arith-bound-prop        201
;  :arith-conflicts         62
;  :arith-eq-adapter        1951
;  :arith-fixed-eqs         1216
;  :arith-offset-eqs        394
;  :arith-pivots            565
;  :binary-propagations     11
;  :conflicts               717
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3805
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4253
;  :del-clause              6035
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          209
;  :mk-bool-var             11639
;  :mk-clause               6259
;  :num-allocs              8201102
;  :num-checks              421
;  :propagations            6598
;  :quant-instantiations    1797
;  :rlimit-count            376817)
; [eval] -1
(push) ; 8
(assert (not (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
    2)
  (- 0 1))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24820
;  :arith-add-rows          945
;  :arith-assert-diseq      1749
;  :arith-assert-lower      3530
;  :arith-assert-upper      2354
;  :arith-bound-prop        204
;  :arith-conflicts         63
;  :arith-eq-adapter        1987
;  :arith-fixed-eqs         1231
;  :arith-offset-eqs        399
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               732
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3811
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4276
;  :del-clause              6118
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          213
;  :mk-bool-var             11767
;  :mk-clause               6342
;  :num-allocs              8201102
;  :num-checks              422
;  :propagations            6729
;  :quant-instantiations    1829
;  :rlimit-count            378519)
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
    2)
  (- 0 1)))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24820
;  :arith-add-rows          945
;  :arith-assert-diseq      1749
;  :arith-assert-lower      3530
;  :arith-assert-upper      2355
;  :arith-bound-prop        204
;  :arith-conflicts         63
;  :arith-eq-adapter        1987
;  :arith-fixed-eqs         1231
;  :arith-offset-eqs        399
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               733
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3811
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4276
;  :del-clause              6118
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          213
;  :mk-bool-var             11768
;  :mk-clause               6342
;  :num-allocs              8201102
;  :num-checks              423
;  :propagations            6729
;  :quant-instantiations    1829
;  :rlimit-count            378672)
(push) ; 8
; [then-branch: 119 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
; [else-branch: 119 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 119 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 119 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24824
;  :arith-add-rows          945
;  :arith-assert-diseq      1749
;  :arith-assert-lower      3530
;  :arith-assert-upper      2355
;  :arith-bound-prop        204
;  :arith-conflicts         63
;  :arith-eq-adapter        1987
;  :arith-fixed-eqs         1231
;  :arith-offset-eqs        399
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               733
;  :datatype-accessor-ax    824
;  :datatype-constructor-ax 3811
;  :datatype-occurs-check   1551
;  :datatype-splits         2665
;  :decisions               4276
;  :del-clause              6118
;  :final-checks            323
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.36
;  :minimized-lits          213
;  :mk-bool-var             11770
;  :mk-clause               6342
;  :num-allocs              8201102
;  :num-checks              424
;  :propagations            6729
;  :quant-instantiations    1831
;  :rlimit-count            379009)
; [eval] -1
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26078
;  :arith-add-rows          982
;  :arith-assert-diseq      1849
;  :arith-assert-lower      3715
;  :arith-assert-upper      2431
;  :arith-bound-prop        208
;  :arith-conflicts         66
;  :arith-eq-adapter        2073
;  :arith-fixed-eqs         1270
;  :arith-offset-eqs        421
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               754
;  :datatype-accessor-ax    895
;  :datatype-constructor-ax 4019
;  :datatype-occurs-check   1674
;  :datatype-splits         2860
;  :decisions               4471
;  :del-clause              6351
;  :final-checks            336
;  :interface-eqs           39
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.48
;  :minimized-lits          215
;  :mk-bool-var             12254
;  :mk-clause               6575
;  :num-allocs              8477785
;  :num-checks              425
;  :propagations            7083
;  :quant-instantiations    1928
;  :rlimit-count            386637
;  :time                    0.00)
(push) ; 11
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26637
;  :arith-add-rows          1002
;  :arith-assert-diseq      1893
;  :arith-assert-lower      3793
;  :arith-assert-upper      2492
;  :arith-bound-prop        208
;  :arith-conflicts         66
;  :arith-eq-adapter        2121
;  :arith-fixed-eqs         1299
;  :arith-offset-eqs        434
;  :arith-pivots            592
;  :binary-propagations     11
;  :conflicts               756
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4111
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4549
;  :del-clause              6461
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          215
;  :mk-bool-var             12492
;  :mk-clause               6685
;  :num-allocs              9313762
;  :num-checks              426
;  :propagations            7257
;  :quant-instantiations    1977
;  :rlimit-count            390740
;  :time                    0.00)
; [then-branch: 120 | First:(Second:($t@65@01))[1] == -1 | live]
; [else-branch: 120 | First:(Second:($t@65@01))[1] != -1 | live]
(push) ; 11
; [then-branch: 120 | First:(Second:($t@65@01))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26641
;  :arith-add-rows          1002
;  :arith-assert-diseq      1894
;  :arith-assert-lower      3793
;  :arith-assert-upper      2492
;  :arith-bound-prop        208
;  :arith-conflicts         66
;  :arith-eq-adapter        2121
;  :arith-fixed-eqs         1299
;  :arith-offset-eqs        434
;  :arith-pivots            592
;  :binary-propagations     11
;  :conflicts               756
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4111
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4549
;  :del-clause              6461
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          215
;  :mk-bool-var             12492
;  :mk-clause               6685
;  :num-allocs              9313762
;  :num-checks              427
;  :propagations            7259
;  :quant-instantiations    1977
;  :rlimit-count            390863)
; [eval] -1
(pop) ; 11
(push) ; 11
; [else-branch: 120 | First:(Second:($t@65@01))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    (- 0 1))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
          0)
        (- 0 1)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27194
;  :arith-add-rows          1065
;  :arith-assert-diseq      1967
;  :arith-assert-lower      3908
;  :arith-assert-upper      2561
;  :arith-bound-prop        212
;  :arith-conflicts         69
;  :arith-eq-adapter        2177
;  :arith-fixed-eqs         1333
;  :arith-offset-eqs        455
;  :arith-pivots            613
;  :binary-propagations     11
;  :conflicts               781
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4159
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4643
;  :del-clause              6679
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          220
;  :mk-bool-var             12714
;  :mk-clause               6903
;  :num-allocs              9313762
;  :num-checks              428
;  :propagations            7570
;  :quant-instantiations    2058
;  :rlimit-count            396037
;  :time                    0.00)
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
          0)
        (- 0 1))))))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27194
;  :arith-add-rows          1065
;  :arith-assert-diseq      1967
;  :arith-assert-lower      3908
;  :arith-assert-upper      2561
;  :arith-bound-prop        212
;  :arith-conflicts         69
;  :arith-eq-adapter        2177
;  :arith-fixed-eqs         1333
;  :arith-offset-eqs        455
;  :arith-pivots            613
;  :binary-propagations     11
;  :conflicts               781
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4159
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4643
;  :del-clause              6679
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          220
;  :mk-bool-var             12714
;  :mk-clause               6904
;  :num-allocs              9313762
;  :num-checks              429
;  :propagations            7570
;  :quant-instantiations    2058
;  :rlimit-count            396407)
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27313
;  :arith-add-rows          1085
;  :arith-assert-diseq      1993
;  :arith-assert-lower      3959
;  :arith-assert-upper      2581
;  :arith-bound-prop        215
;  :arith-conflicts         70
;  :arith-eq-adapter        2195
;  :arith-fixed-eqs         1345
;  :arith-offset-eqs        457
;  :arith-pivots            616
;  :binary-propagations     11
;  :conflicts               799
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4165
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4666
;  :del-clause              6743
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          224
;  :mk-bool-var             12786
;  :mk-clause               6968
;  :num-allocs              9313762
;  :num-checks              430
;  :propagations            7675
;  :quant-instantiations    2082
;  :rlimit-count            397829)
; [then-branch: 121 | -1 <= First:(Second:(Second:(Second:($t@65@01))))[2] | dead]
; [else-branch: 121 | !(-1 <= First:(Second:(Second:(Second:($t@65@01))))[2]) | live]
(push) ; 9
; [else-branch: 121 | !(-1 <= First:(Second:(Second:(Second:($t@65@01))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27313
;  :arith-add-rows          1085
;  :arith-assert-diseq      1993
;  :arith-assert-lower      3959
;  :arith-assert-upper      2581
;  :arith-bound-prop        215
;  :arith-conflicts         70
;  :arith-eq-adapter        2195
;  :arith-fixed-eqs         1345
;  :arith-offset-eqs        457
;  :arith-pivots            616
;  :binary-propagations     11
;  :conflicts               799
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4165
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4666
;  :del-clause              6743
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          224
;  :mk-bool-var             12786
;  :mk-clause               6968
;  :num-allocs              9313762
;  :num-checks              431
;  :propagations            7675
;  :quant-instantiations    2082
;  :rlimit-count            397872)
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27432
;  :arith-add-rows          1105
;  :arith-assert-diseq      2019
;  :arith-assert-lower      4010
;  :arith-assert-upper      2601
;  :arith-bound-prop        218
;  :arith-conflicts         71
;  :arith-eq-adapter        2213
;  :arith-fixed-eqs         1357
;  :arith-offset-eqs        459
;  :arith-pivots            618
;  :binary-propagations     11
;  :conflicts               817
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4171
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4689
;  :del-clause              6807
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          228
;  :mk-bool-var             12858
;  :mk-clause               7032
;  :num-allocs              9313762
;  :num-checks              432
;  :propagations            7779
;  :quant-instantiations    2106
;  :rlimit-count            399283)
; [then-branch: 122 | -1 <= First:(Second:(Second:(Second:($t@65@01))))[2] | dead]
; [else-branch: 122 | !(-1 <= First:(Second:(Second:(Second:($t@65@01))))[2]) | live]
(push) ; 9
; [else-branch: 122 | !(-1 <= First:(Second:(Second:(Second:($t@65@01))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01)))))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27432
;  :arith-add-rows          1105
;  :arith-assert-diseq      2019
;  :arith-assert-lower      4010
;  :arith-assert-upper      2601
;  :arith-bound-prop        218
;  :arith-conflicts         71
;  :arith-eq-adapter        2213
;  :arith-fixed-eqs         1357
;  :arith-offset-eqs        459
;  :arith-pivots            618
;  :binary-propagations     11
;  :conflicts               818
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4171
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4689
;  :del-clause              6807
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          228
;  :mk-bool-var             12858
;  :mk-clause               7032
;  :num-allocs              9313762
;  :num-checks              433
;  :propagations            7779
;  :quant-instantiations    2106
;  :rlimit-count            399359)
(push) ; 8
; [then-branch: 123 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
; [else-branch: 123 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 123 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27436
;  :arith-add-rows          1105
;  :arith-assert-diseq      2019
;  :arith-assert-lower      4010
;  :arith-assert-upper      2601
;  :arith-bound-prop        218
;  :arith-conflicts         71
;  :arith-eq-adapter        2213
;  :arith-fixed-eqs         1357
;  :arith-offset-eqs        459
;  :arith-pivots            618
;  :binary-propagations     11
;  :conflicts               818
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 4171
;  :datatype-occurs-check   1731
;  :datatype-splits         2944
;  :decisions               4689
;  :del-clause              6807
;  :final-checks            342
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.38
;  :minimized-lits          228
;  :mk-bool-var             12860
;  :mk-clause               7032
;  :num-allocs              9313762
;  :num-checks              434
;  :propagations            7779
;  :quant-instantiations    2108
;  :rlimit-count            399648)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 123 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28677
;  :arith-add-rows          1142
;  :arith-assert-diseq      2110
;  :arith-assert-lower      4170
;  :arith-assert-upper      2661
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2282
;  :arith-fixed-eqs         1396
;  :arith-offset-eqs        481
;  :arith-pivots            630
;  :binary-propagations     11
;  :conflicts               839
;  :datatype-accessor-ax    992
;  :datatype-constructor-ax 4379
;  :datatype-occurs-check   1854
;  :datatype-splits         3139
;  :decisions               4884
;  :del-clause              7001
;  :final-checks            355
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.48
;  :minimized-lits          230
;  :mk-bool-var             13291
;  :mk-clause               7226
;  :num-allocs              9598694
;  :num-checks              435
;  :propagations            8119
;  :quant-instantiations    2193
;  :rlimit-count            407408
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29015
;  :arith-add-rows          1157
;  :arith-assert-diseq      2136
;  :arith-assert-lower      4216
;  :arith-assert-upper      2696
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2312
;  :arith-fixed-eqs         1412
;  :arith-offset-eqs        488
;  :arith-pivots            640
;  :binary-propagations     11
;  :conflicts               840
;  :datatype-accessor-ax    1005
;  :datatype-constructor-ax 4435
;  :datatype-occurs-check   1892
;  :datatype-splits         3188
;  :decisions               4932
;  :del-clause              7064
;  :final-checks            359
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          230
;  :mk-bool-var             13440
;  :mk-clause               7289
;  :num-allocs              10458422
;  :num-checks              436
;  :propagations            8211
;  :quant-instantiations    2220
;  :rlimit-count            410608
;  :time                    0.00)
; [then-branch: 124 | First:(Second:($t@65@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
; [else-branch: 124 | !(First:(Second:($t@65@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 124 | First:(Second:($t@65@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 10
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29028
;  :arith-add-rows          1157
;  :arith-assert-diseq      2138
;  :arith-assert-lower      4220
;  :arith-assert-upper      2700
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2315
;  :arith-fixed-eqs         1412
;  :arith-offset-eqs        488
;  :arith-pivots            640
;  :binary-propagations     11
;  :conflicts               841
;  :datatype-accessor-ax    1005
;  :datatype-constructor-ax 4435
;  :datatype-occurs-check   1892
;  :datatype-splits         3188
;  :decisions               4932
;  :del-clause              7064
;  :final-checks            359
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          230
;  :mk-bool-var             13454
;  :mk-clause               7298
;  :num-allocs              10458422
;  :num-checks              437
;  :propagations            8218
;  :quant-instantiations    2226
;  :rlimit-count            411070)
(push) ; 10
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29028
;  :arith-add-rows          1157
;  :arith-assert-diseq      2138
;  :arith-assert-lower      4220
;  :arith-assert-upper      2700
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2315
;  :arith-fixed-eqs         1412
;  :arith-offset-eqs        488
;  :arith-pivots            640
;  :binary-propagations     11
;  :conflicts               842
;  :datatype-accessor-ax    1005
;  :datatype-constructor-ax 4435
;  :datatype-occurs-check   1892
;  :datatype-splits         3188
;  :decisions               4932
;  :del-clause              7064
;  :final-checks            359
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          230
;  :mk-bool-var             13454
;  :mk-clause               7298
;  :num-allocs              10458422
;  :num-checks              438
;  :propagations            8218
;  :quant-instantiations    2226
;  :rlimit-count            411118)
(pop) ; 9
(push) ; 9
; [else-branch: 124 | !(First:(Second:($t@65@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(assert (not (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29045
;  :arith-add-rows          1157
;  :arith-assert-diseq      2142
;  :arith-assert-lower      4221
;  :arith-assert-upper      2705
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2319
;  :arith-fixed-eqs         1412
;  :arith-offset-eqs        488
;  :arith-pivots            640
;  :binary-propagations     11
;  :conflicts               843
;  :datatype-accessor-ax    1005
;  :datatype-constructor-ax 4435
;  :datatype-occurs-check   1892
;  :datatype-splits         3188
;  :decisions               4932
;  :del-clause              7086
;  :final-checks            359
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          230
;  :mk-bool-var             13472
;  :mk-clause               7311
;  :num-allocs              10458422
;  :num-checks              439
;  :propagations            8246
;  :quant-instantiations    2233
;  :rlimit-count            411824)
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@65@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@65@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) diz@17@01 globals@18@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 7
(push) ; 7
; [else-branch: 69 | min_advance__39@59@01 != -1]
(assert (not (= min_advance__39@59@01 (- 0 1))))
(pop) ; 7
; [eval] !(min_advance__39 == -1)
; [eval] min_advance__39 == -1
; [eval] -1
(set-option :timeout 10)
(push) ; 7
(assert (not (= min_advance__39@59@01 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29338
;  :arith-add-rows          1172
;  :arith-assert-diseq      2175
;  :arith-assert-lower      4262
;  :arith-assert-upper      2744
;  :arith-bound-prop        239
;  :arith-conflicts         74
;  :arith-eq-adapter        2339
;  :arith-fixed-eqs         1425
;  :arith-offset-eqs        491
;  :arith-pivots            657
;  :binary-propagations     11
;  :conflicts               854
;  :datatype-accessor-ax    1012
;  :datatype-constructor-ax 4490
;  :datatype-occurs-check   1912
;  :datatype-splits         3219
;  :decisions               5002
;  :del-clause              7255
;  :final-checks            364
;  :interface-eqs           45
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          233
;  :mk-bool-var             13577
;  :mk-clause               7395
;  :num-allocs              10458422
;  :num-checks              440
;  :propagations            8334
;  :quant-instantiations    2237
;  :rlimit-count            414615
;  :time                    0.00)
(push) ; 7
(assert (not (not (= min_advance__39@59@01 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29628
;  :arith-add-rows          1183
;  :arith-assert-diseq      2201
;  :arith-assert-lower      4296
;  :arith-assert-upper      2774
;  :arith-bound-prop        246
;  :arith-conflicts         75
;  :arith-eq-adapter        2359
;  :arith-fixed-eqs         1438
;  :arith-offset-eqs        494
;  :arith-pivots            666
;  :binary-propagations     11
;  :conflicts               862
;  :datatype-accessor-ax    1019
;  :datatype-constructor-ax 4545
;  :datatype-occurs-check   1932
;  :datatype-splits         3250
;  :decisions               5065
;  :del-clause              7317
;  :final-checks            369
;  :interface-eqs           46
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          234
;  :mk-bool-var             13681
;  :mk-clause               7457
;  :num-allocs              10458422
;  :num-checks              441
;  :propagations            8391
;  :quant-instantiations    2241
;  :rlimit-count            416921
;  :time                    0.00)
; [then-branch: 125 | min_advance__39@59@01 != -1 | live]
; [else-branch: 125 | min_advance__39@59@01 == -1 | live]
(push) ; 7
; [then-branch: 125 | min_advance__39@59@01 != -1]
(assert (not (= min_advance__39@59@01 (- 0 1))))
; [exec]
; __flatten_39__38 := Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39))
; [eval] Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39))
; [eval] (diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39)
; [eval] diz.Main_event_state[0] < -1
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29629
;  :arith-add-rows          1183
;  :arith-assert-diseq      2203
;  :arith-assert-lower      4296
;  :arith-assert-upper      2774
;  :arith-bound-prop        246
;  :arith-conflicts         75
;  :arith-eq-adapter        2360
;  :arith-fixed-eqs         1438
;  :arith-offset-eqs        494
;  :arith-pivots            666
;  :binary-propagations     11
;  :conflicts               862
;  :datatype-accessor-ax    1019
;  :datatype-constructor-ax 4545
;  :datatype-occurs-check   1932
;  :datatype-splits         3250
;  :decisions               5065
;  :del-clause              7317
;  :final-checks            369
;  :interface-eqs           46
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          234
;  :mk-bool-var             13685
;  :mk-clause               7466
;  :num-allocs              10458422
;  :num-checks              442
;  :propagations            8391
;  :quant-instantiations    2241
;  :rlimit-count            417011)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29917
;  :arith-add-rows          1196
;  :arith-assert-diseq      2223
;  :arith-assert-lower      4320
;  :arith-assert-upper      2817
;  :arith-bound-prop        259
;  :arith-conflicts         75
;  :arith-eq-adapter        2377
;  :arith-fixed-eqs         1450
;  :arith-offset-eqs        501
;  :arith-pivots            676
;  :binary-propagations     11
;  :conflicts               870
;  :datatype-accessor-ax    1026
;  :datatype-constructor-ax 4600
;  :datatype-occurs-check   1952
;  :datatype-splits         3281
;  :decisions               5125
;  :del-clause              7374
;  :final-checks            374
;  :interface-eqs           47
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          235
;  :mk-bool-var             13780
;  :mk-clause               7523
;  :num-allocs              10458422
;  :num-checks              443
;  :propagations            8447
;  :quant-instantiations    2245
;  :rlimit-count            419403
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30201
;  :arith-add-rows          1211
;  :arith-assert-diseq      2244
;  :arith-assert-lower      4355
;  :arith-assert-upper      2846
;  :arith-bound-prop        275
;  :arith-conflicts         75
;  :arith-eq-adapter        2394
;  :arith-fixed-eqs         1463
;  :arith-offset-eqs        504
;  :arith-pivots            688
;  :binary-propagations     11
;  :conflicts               877
;  :datatype-accessor-ax    1033
;  :datatype-constructor-ax 4655
;  :datatype-occurs-check   1972
;  :datatype-splits         3312
;  :decisions               5185
;  :del-clause              7433
;  :final-checks            379
;  :interface-eqs           48
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          236
;  :mk-bool-var             13875
;  :mk-clause               7582
;  :num-allocs              10458422
;  :num-checks              444
;  :propagations            8495
;  :quant-instantiations    2249
;  :rlimit-count            421827
;  :time                    0.00)
; [then-branch: 126 | First:(Second:(Second:(Second:($t@57@01))))[0] < -1 | live]
; [else-branch: 126 | !(First:(Second:(Second:(Second:($t@57@01))))[0] < -1) | live]
(push) ; 9
; [then-branch: 126 | First:(Second:(Second:(Second:($t@57@01))))[0] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    0)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 126 | !(First:(Second:(Second:(Second:($t@57@01))))[0] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] - min_advance__39
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30201
;  :arith-add-rows          1211
;  :arith-assert-diseq      2244
;  :arith-assert-lower      4360
;  :arith-assert-upper      2846
;  :arith-bound-prop        275
;  :arith-conflicts         75
;  :arith-eq-adapter        2394
;  :arith-fixed-eqs         1463
;  :arith-offset-eqs        504
;  :arith-pivots            688
;  :binary-propagations     11
;  :conflicts               877
;  :datatype-accessor-ax    1033
;  :datatype-constructor-ax 4655
;  :datatype-occurs-check   1972
;  :datatype-splits         3312
;  :decisions               5185
;  :del-clause              7433
;  :final-checks            379
;  :interface-eqs           48
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          236
;  :mk-bool-var             13875
;  :mk-clause               7582
;  :num-allocs              10458422
;  :num-checks              445
;  :propagations            8500
;  :quant-instantiations    2249
;  :rlimit-count            421995)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39)
; [eval] diz.Main_event_state[1] < -1
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30201
;  :arith-add-rows          1211
;  :arith-assert-diseq      2244
;  :arith-assert-lower      4360
;  :arith-assert-upper      2846
;  :arith-bound-prop        275
;  :arith-conflicts         75
;  :arith-eq-adapter        2394
;  :arith-fixed-eqs         1463
;  :arith-offset-eqs        504
;  :arith-pivots            688
;  :binary-propagations     11
;  :conflicts               877
;  :datatype-accessor-ax    1033
;  :datatype-constructor-ax 4655
;  :datatype-occurs-check   1972
;  :datatype-splits         3312
;  :decisions               5185
;  :del-clause              7433
;  :final-checks            379
;  :interface-eqs           48
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          236
;  :mk-bool-var             13875
;  :mk-clause               7582
;  :num-allocs              10458422
;  :num-checks              446
;  :propagations            8500
;  :quant-instantiations    2249
;  :rlimit-count            422010)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30510
;  :arith-add-rows          1233
;  :arith-assert-diseq      2267
;  :arith-assert-lower      4403
;  :arith-assert-upper      2893
;  :arith-bound-prop        287
;  :arith-conflicts         78
;  :arith-eq-adapter        2413
;  :arith-fixed-eqs         1480
;  :arith-offset-eqs        508
;  :arith-pivots            704
;  :binary-propagations     11
;  :conflicts               887
;  :datatype-accessor-ax    1040
;  :datatype-constructor-ax 4712
;  :datatype-occurs-check   1992
;  :datatype-splits         3344
;  :decisions               5248
;  :del-clause              7482
;  :final-checks            383
;  :interface-eqs           48
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          238
;  :mk-bool-var             13976
;  :mk-clause               7631
;  :num-allocs              10458422
;  :num-checks              447
;  :propagations            8592
;  :quant-instantiations    2254
;  :rlimit-count            424754
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30795
;  :arith-add-rows          1252
;  :arith-assert-diseq      2288
;  :arith-assert-lower      4442
;  :arith-assert-upper      2922
;  :arith-bound-prop        302
;  :arith-conflicts         78
;  :arith-eq-adapter        2430
;  :arith-fixed-eqs         1493
;  :arith-offset-eqs        511
;  :arith-pivots            720
;  :binary-propagations     11
;  :conflicts               894
;  :datatype-accessor-ax    1047
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2012
;  :datatype-splits         3375
;  :decisions               5310
;  :del-clause              7538
;  :final-checks            388
;  :interface-eqs           49
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          239
;  :mk-bool-var             14071
;  :mk-clause               7687
;  :num-allocs              10458422
;  :num-checks              448
;  :propagations            8643
;  :quant-instantiations    2258
;  :rlimit-count            427290
;  :time                    0.00)
; [then-branch: 127 | First:(Second:(Second:(Second:($t@57@01))))[1] < -1 | live]
; [else-branch: 127 | !(First:(Second:(Second:(Second:($t@57@01))))[1] < -1) | live]
(push) ; 9
; [then-branch: 127 | First:(Second:(Second:(Second:($t@57@01))))[1] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    1)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 127 | !(First:(Second:(Second:(Second:($t@57@01))))[1] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] - min_advance__39
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30795
;  :arith-add-rows          1252
;  :arith-assert-diseq      2288
;  :arith-assert-lower      4444
;  :arith-assert-upper      2922
;  :arith-bound-prop        302
;  :arith-conflicts         78
;  :arith-eq-adapter        2430
;  :arith-fixed-eqs         1493
;  :arith-offset-eqs        511
;  :arith-pivots            720
;  :binary-propagations     11
;  :conflicts               894
;  :datatype-accessor-ax    1047
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2012
;  :datatype-splits         3375
;  :decisions               5310
;  :del-clause              7538
;  :final-checks            388
;  :interface-eqs           49
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          239
;  :mk-bool-var             14071
;  :mk-clause               7687
;  :num-allocs              10458422
;  :num-checks              449
;  :propagations            8645
;  :quant-instantiations    2258
;  :rlimit-count            427453)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39)
; [eval] diz.Main_event_state[2] < -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30795
;  :arith-add-rows          1252
;  :arith-assert-diseq      2288
;  :arith-assert-lower      4444
;  :arith-assert-upper      2922
;  :arith-bound-prop        302
;  :arith-conflicts         78
;  :arith-eq-adapter        2430
;  :arith-fixed-eqs         1493
;  :arith-offset-eqs        511
;  :arith-pivots            720
;  :binary-propagations     11
;  :conflicts               894
;  :datatype-accessor-ax    1047
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2012
;  :datatype-splits         3375
;  :decisions               5310
;  :del-clause              7538
;  :final-checks            388
;  :interface-eqs           49
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          239
;  :mk-bool-var             14071
;  :mk-clause               7687
;  :num-allocs              10458422
;  :num-checks              450
;  :propagations            8645
;  :quant-instantiations    2258
;  :rlimit-count            427468)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31077
;  :arith-add-rows          1258
;  :arith-assert-diseq      2306
;  :arith-assert-lower      4474
;  :arith-assert-upper      2947
;  :arith-bound-prop        310
;  :arith-conflicts         78
;  :arith-eq-adapter        2447
;  :arith-fixed-eqs         1506
;  :arith-offset-eqs        514
;  :arith-pivots            728
;  :binary-propagations     11
;  :conflicts               900
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4822
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5370
;  :del-clause              7588
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14165
;  :mk-clause               7737
;  :num-allocs              10458422
;  :num-checks              451
;  :propagations            8688
;  :quant-instantiations    2262
;  :rlimit-count            429673
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2)
  (- 0 1))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31156
;  :arith-add-rows          1275
;  :arith-assert-diseq      2338
;  :arith-assert-lower      4509
;  :arith-assert-upper      2973
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2473
;  :arith-fixed-eqs         1509
;  :arith-offset-eqs        514
;  :arith-pivots            736
;  :binary-propagations     11
;  :conflicts               916
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7673
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14239
;  :mk-clause               7822
;  :num-allocs              10458422
;  :num-checks              452
;  :propagations            8759
;  :quant-instantiations    2271
;  :rlimit-count            430768)
; [then-branch: 128 | First:(Second:(Second:(Second:($t@57@01))))[2] < -1 | live]
; [else-branch: 128 | !(First:(Second:(Second:(Second:($t@57@01))))[2] < -1) | dead]
(push) ; 9
; [then-branch: 128 | First:(Second:(Second:(Second:($t@57@01))))[2] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
              0)
            (- 0 1))
          (- 0 3)
          (-
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
              0)
            min_advance__39@59@01)))
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
              1)
            (- 0 1))
          (- 0 3)
          (-
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
              1)
            min_advance__39@59@01))))
      (Seq_singleton (- 0 3))))
  3))
(declare-const __flatten_39__38@71@01 Seq<Int>)
(assert (Seq_equal
  __flatten_39__38@71@01
  (Seq_append
    (Seq_append
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            0)
          (- 0 1))
        (- 0 3)
        (-
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            0)
          min_advance__39@59@01)))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            1)
          (- 0 1))
        (- 0 3)
        (-
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
            1)
          min_advance__39@59@01))))
    (Seq_singleton (- 0 3)))))
; [exec]
; __flatten_38__37 := __flatten_39__38
; [exec]
; diz.Main_event_state := __flatten_38__37
; [exec]
; Main_wakeup_after_wait_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(set-option :timeout 0)
(push) ; 8
(assert (not (= (Seq_length __flatten_39__38@71@01) 3)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31165
;  :arith-add-rows          1279
;  :arith-assert-diseq      2338
;  :arith-assert-lower      4513
;  :arith-assert-upper      2976
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2478
;  :arith-fixed-eqs         1511
;  :arith-offset-eqs        515
;  :arith-pivots            738
;  :binary-propagations     11
;  :conflicts               917
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7673
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14272
;  :mk-clause               7847
;  :num-allocs              10458422
;  :num-checks              453
;  :propagations            8766
;  :quant-instantiations    2275
;  :rlimit-count            431615)
(assert (= (Seq_length __flatten_39__38@71@01) 3))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@72@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 129 | 0 <= i@72@01 | live]
; [else-branch: 129 | !(0 <= i@72@01) | live]
(push) ; 10
; [then-branch: 129 | 0 <= i@72@01]
(assert (<= 0 i@72@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 129 | !(0 <= i@72@01)]
(assert (not (<= 0 i@72@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 130 | i@72@01 < |First:(Second:($t@57@01))| && 0 <= i@72@01 | live]
; [else-branch: 130 | !(i@72@01 < |First:(Second:($t@57@01))| && 0 <= i@72@01) | live]
(push) ; 10
; [then-branch: 130 | i@72@01 < |First:(Second:($t@57@01))| && 0 <= i@72@01]
(assert (and
  (<
    i@72@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
  (<= 0 i@72@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@72@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31166
;  :arith-add-rows          1279
;  :arith-assert-diseq      2338
;  :arith-assert-lower      4515
;  :arith-assert-upper      2978
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2479
;  :arith-fixed-eqs         1511
;  :arith-offset-eqs        515
;  :arith-pivots            738
;  :binary-propagations     11
;  :conflicts               917
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7673
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14277
;  :mk-clause               7847
;  :num-allocs              10458422
;  :num-checks              454
;  :propagations            8766
;  :quant-instantiations    2275
;  :rlimit-count            431802)
; [eval] -1
(push) ; 11
; [then-branch: 131 | First:(Second:($t@57@01))[i@72@01] == -1 | live]
; [else-branch: 131 | First:(Second:($t@57@01))[i@72@01] != -1 | live]
(push) ; 12
; [then-branch: 131 | First:(Second:($t@57@01))[i@72@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@72@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 131 | First:(Second:($t@57@01))[i@72@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      i@72@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@72@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31170
;  :arith-add-rows          1279
;  :arith-assert-diseq      2340
;  :arith-assert-lower      4522
;  :arith-assert-upper      2981
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2482
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        515
;  :arith-pivots            739
;  :binary-propagations     11
;  :conflicts               917
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7673
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14292
;  :mk-clause               7864
;  :num-allocs              10458422
;  :num-checks              455
;  :propagations            8773
;  :quant-instantiations    2278
;  :rlimit-count            432110)
(push) ; 13
; [then-branch: 132 | 0 <= First:(Second:($t@57@01))[i@72@01] | live]
; [else-branch: 132 | !(0 <= First:(Second:($t@57@01))[i@72@01]) | live]
(push) ; 14
; [then-branch: 132 | 0 <= First:(Second:($t@57@01))[i@72@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@72@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@72@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31170
;  :arith-add-rows          1279
;  :arith-assert-diseq      2340
;  :arith-assert-lower      4522
;  :arith-assert-upper      2981
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2482
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        515
;  :arith-pivots            739
;  :binary-propagations     11
;  :conflicts               917
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7673
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14292
;  :mk-clause               7864
;  :num-allocs              10458422
;  :num-checks              456
;  :propagations            8773
;  :quant-instantiations    2278
;  :rlimit-count            432204)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 132 | !(0 <= First:(Second:($t@57@01))[i@72@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      i@72@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 130 | !(i@72@01 < |First:(Second:($t@57@01))| && 0 <= i@72@01)]
(assert (not
  (and
    (<
      i@72@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
    (<= 0 i@72@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@72@01 Int)) (!
  (implies
    (and
      (<
        i@72@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
      (<= 0 i@72@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          i@72@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@72@01)
          (Seq_length __flatten_39__38@71@01))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@72@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@72@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31170
;  :arith-add-rows          1279
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4523
;  :arith-assert-upper      2982
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2484
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               918
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7715
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14306
;  :mk-clause               7889
;  :num-allocs              10458422
;  :num-checks              457
;  :propagations            8775
;  :quant-instantiations    2281
;  :rlimit-count            432695)
(assert (forall ((i@72@01 Int)) (!
  (implies
    (and
      (<
        i@72@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
      (<= 0 i@72@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          i@72@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@72@01)
          (Seq_length __flatten_39__38@71@01))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@72@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@72@01))
  :qid |prog.l<no position>|)))
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 ($Snap.combine ($Snap.first $t@73@01) ($Snap.second $t@73@01))))
(assert (=
  ($Snap.second $t@73@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@73@01))
    ($Snap.second ($Snap.second $t@73@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@73@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@73@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@73@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@73@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@74@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 133 | 0 <= i@74@01 | live]
; [else-branch: 133 | !(0 <= i@74@01) | live]
(push) ; 10
; [then-branch: 133 | 0 <= i@74@01]
(assert (<= 0 i@74@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 133 | !(0 <= i@74@01)]
(assert (not (<= 0 i@74@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 134 | i@74@01 < |First:(Second:($t@73@01))| && 0 <= i@74@01 | live]
; [else-branch: 134 | !(i@74@01 < |First:(Second:($t@73@01))| && 0 <= i@74@01) | live]
(push) ; 10
; [then-branch: 134 | i@74@01 < |First:(Second:($t@73@01))| && 0 <= i@74@01]
(assert (and
  (<
    i@74@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))
  (<= 0 i@74@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@74@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31207
;  :arith-add-rows          1279
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4528
;  :arith-assert-upper      2985
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2486
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               918
;  :datatype-accessor-ax    1060
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7715
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14328
;  :mk-clause               7889
;  :num-allocs              10458422
;  :num-checks              458
;  :propagations            8775
;  :quant-instantiations    2287
;  :rlimit-count            434135)
; [eval] -1
(push) ; 11
; [then-branch: 135 | First:(Second:($t@73@01))[i@74@01] == -1 | live]
; [else-branch: 135 | First:(Second:($t@73@01))[i@74@01] != -1 | live]
(push) ; 12
; [then-branch: 135 | First:(Second:($t@73@01))[i@74@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
    i@74@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 135 | First:(Second:($t@73@01))[i@74@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
      i@74@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@74@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31207
;  :arith-add-rows          1279
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4528
;  :arith-assert-upper      2985
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2486
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               918
;  :datatype-accessor-ax    1060
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7715
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14329
;  :mk-clause               7889
;  :num-allocs              10458422
;  :num-checks              459
;  :propagations            8775
;  :quant-instantiations    2287
;  :rlimit-count            434286)
(push) ; 13
; [then-branch: 136 | 0 <= First:(Second:($t@73@01))[i@74@01] | live]
; [else-branch: 136 | !(0 <= First:(Second:($t@73@01))[i@74@01]) | live]
(push) ; 14
; [then-branch: 136 | 0 <= First:(Second:($t@73@01))[i@74@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
    i@74@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@74@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31207
;  :arith-add-rows          1279
;  :arith-assert-diseq      2342
;  :arith-assert-lower      4531
;  :arith-assert-upper      2985
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2487
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               918
;  :datatype-accessor-ax    1060
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7715
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14332
;  :mk-clause               7890
;  :num-allocs              10458422
;  :num-checks              460
;  :propagations            8775
;  :quant-instantiations    2287
;  :rlimit-count            434390)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 136 | !(0 <= First:(Second:($t@73@01))[i@74@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
      i@74@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 134 | !(i@74@01 < |First:(Second:($t@73@01))| && 0 <= i@74@01)]
(assert (not
  (and
    (<
      i@74@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))
    (<= 0 i@74@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@74@01 Int)) (!
  (implies
    (and
      (<
        i@74@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))
      (<= 0 i@74@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
          i@74@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
            i@74@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
            i@74@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
    i@74@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
  __flatten_39__38@71@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31227
;  :arith-add-rows          1279
;  :arith-assert-diseq      2342
;  :arith-assert-lower      4532
;  :arith-assert-upper      2986
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2489
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               918
;  :datatype-accessor-ax    1062
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7716
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14355
;  :mk-clause               7906
;  :num-allocs              10458422
;  :num-checks              461
;  :propagations            8781
;  :quant-instantiations    2289
;  :rlimit-count            435423)
(push) ; 8
; [then-branch: 137 | 0 <= First:(Second:($t@57@01))[0] | live]
; [else-branch: 137 | !(0 <= First:(Second:($t@57@01))[0]) | live]
(push) ; 9
; [then-branch: 137 | 0 <= First:(Second:($t@57@01))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31227
;  :arith-add-rows          1279
;  :arith-assert-diseq      2342
;  :arith-assert-lower      4532
;  :arith-assert-upper      2986
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2489
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               918
;  :datatype-accessor-ax    1062
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7716
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14355
;  :mk-clause               7906
;  :num-allocs              10458422
;  :num-checks              462
;  :propagations            8781
;  :quant-instantiations    2289
;  :rlimit-count            435523)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31227
;  :arith-add-rows          1279
;  :arith-assert-diseq      2342
;  :arith-assert-lower      4532
;  :arith-assert-upper      2986
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2489
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               918
;  :datatype-accessor-ax    1062
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7716
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14355
;  :mk-clause               7906
;  :num-allocs              10458422
;  :num-checks              463
;  :propagations            8781
;  :quant-instantiations    2289
;  :rlimit-count            435532)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (Seq_length __flatten_39__38@71@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31227
;  :arith-add-rows          1279
;  :arith-assert-diseq      2342
;  :arith-assert-lower      4532
;  :arith-assert-upper      2986
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2489
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               919
;  :datatype-accessor-ax    1062
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7716
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14355
;  :mk-clause               7906
;  :num-allocs              10458422
;  :num-checks              464
;  :propagations            8781
;  :quant-instantiations    2289
;  :rlimit-count            435620)
(push) ; 10
; [then-branch: 138 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 | live]
; [else-branch: 138 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] != 0 | live]
(push) ; 11
; [then-branch: 138 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@71@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 138 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@71@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31228
;  :arith-add-rows          1280
;  :arith-assert-diseq      2342
;  :arith-assert-lower      4532
;  :arith-assert-upper      2986
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2489
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               919
;  :datatype-accessor-ax    1062
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7716
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14360
;  :mk-clause               7911
;  :num-allocs              10458422
;  :num-checks              465
;  :propagations            8781
;  :quant-instantiations    2290
;  :rlimit-count            435835)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31228
;  :arith-add-rows          1280
;  :arith-assert-diseq      2342
;  :arith-assert-lower      4532
;  :arith-assert-upper      2986
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2489
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               919
;  :datatype-accessor-ax    1062
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7716
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14360
;  :mk-clause               7911
;  :num-allocs              10458422
;  :num-checks              466
;  :propagations            8781
;  :quant-instantiations    2290
;  :rlimit-count            435844)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (Seq_length __flatten_39__38@71@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31228
;  :arith-add-rows          1280
;  :arith-assert-diseq      2342
;  :arith-assert-lower      4532
;  :arith-assert-upper      2986
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2489
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        515
;  :arith-pivots            740
;  :binary-propagations     11
;  :conflicts               920
;  :datatype-accessor-ax    1062
;  :datatype-constructor-ax 4828
;  :datatype-occurs-check   2032
;  :datatype-splits         3406
;  :decisions               5390
;  :del-clause              7716
;  :final-checks            393
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          240
;  :mk-bool-var             14360
;  :mk-clause               7911
;  :num-allocs              10458422
;  :num-checks              467
;  :propagations            8781
;  :quant-instantiations    2290
;  :rlimit-count            435932)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 137 | !(0 <= First:(Second:($t@57@01))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31801
;  :arith-add-rows          1323
;  :arith-assert-diseq      2384
;  :arith-assert-lower      4627
;  :arith-assert-upper      3054
;  :arith-bound-prop        332
;  :arith-conflicts         83
;  :arith-eq-adapter        2548
;  :arith-fixed-eqs         1554
;  :arith-offset-eqs        529
;  :arith-pivots            767
;  :binary-propagations     11
;  :conflicts               944
;  :datatype-accessor-ax    1072
;  :datatype-constructor-ax 4912
;  :datatype-occurs-check   2062
;  :datatype-splits         3448
;  :decisions               5496
;  :del-clause              7950
;  :final-checks            398
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          254
;  :mk-bool-var             14677
;  :mk-clause               8140
;  :num-allocs              10458422
;  :num-checks              468
;  :propagations            8964
;  :quant-instantiations    2353
;  :rlimit-count            441168
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32633
;  :arith-add-rows          1373
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               963
;  :datatype-accessor-ax    1097
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8232
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15074
;  :mk-clause               8422
;  :num-allocs              10458422
;  :num-checks              469
;  :propagations            9188
;  :quant-instantiations    2413
;  :rlimit-count            447232
;  :time                    0.00)
; [then-branch: 139 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0] | live]
; [else-branch: 139 | !(__flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0]) | live]
(push) ; 9
; [then-branch: 139 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32633
;  :arith-add-rows          1373
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               963
;  :datatype-accessor-ax    1097
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8232
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15076
;  :mk-clause               8423
;  :num-allocs              10458422
;  :num-checks              470
;  :propagations            9188
;  :quant-instantiations    2413
;  :rlimit-count            447400)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 139 | !(__flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1) ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32639
;  :arith-add-rows          1373
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               963
;  :datatype-accessor-ax    1098
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8233
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15082
;  :mk-clause               8427
;  :num-allocs              10458422
;  :num-checks              471
;  :propagations            9188
;  :quant-instantiations    2413
;  :rlimit-count            447883)
(push) ; 8
; [then-branch: 140 | 0 <= First:(Second:($t@57@01))[1] | live]
; [else-branch: 140 | !(0 <= First:(Second:($t@57@01))[1]) | live]
(push) ; 9
; [then-branch: 140 | 0 <= First:(Second:($t@57@01))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32639
;  :arith-add-rows          1373
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               963
;  :datatype-accessor-ax    1098
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8233
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15082
;  :mk-clause               8427
;  :num-allocs              10458422
;  :num-checks              472
;  :propagations            9188
;  :quant-instantiations    2413
;  :rlimit-count            447983)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32639
;  :arith-add-rows          1373
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               963
;  :datatype-accessor-ax    1098
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8233
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15082
;  :mk-clause               8427
;  :num-allocs              10458422
;  :num-checks              473
;  :propagations            9188
;  :quant-instantiations    2413
;  :rlimit-count            447992)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (Seq_length __flatten_39__38@71@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32639
;  :arith-add-rows          1373
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               964
;  :datatype-accessor-ax    1098
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8233
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15082
;  :mk-clause               8427
;  :num-allocs              10458422
;  :num-checks              474
;  :propagations            9188
;  :quant-instantiations    2413
;  :rlimit-count            448080)
(push) ; 10
; [then-branch: 141 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0 | live]
; [else-branch: 141 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] != 0 | live]
(push) ; 11
; [then-branch: 141 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@71@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 141 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@71@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32640
;  :arith-add-rows          1374
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               964
;  :datatype-accessor-ax    1098
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8233
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15087
;  :mk-clause               8432
;  :num-allocs              10458422
;  :num-checks              475
;  :propagations            9188
;  :quant-instantiations    2414
;  :rlimit-count            448293)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32640
;  :arith-add-rows          1374
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               964
;  :datatype-accessor-ax    1098
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8233
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15087
;  :mk-clause               8432
;  :num-allocs              10458422
;  :num-checks              476
;  :propagations            9188
;  :quant-instantiations    2414
;  :rlimit-count            448302)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (Seq_length __flatten_39__38@71@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32640
;  :arith-add-rows          1374
;  :arith-assert-diseq      2446
;  :arith-assert-lower      4760
;  :arith-assert-upper      3122
;  :arith-bound-prop        355
;  :arith-conflicts         84
;  :arith-eq-adapter        2622
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        557
;  :arith-pivots            787
;  :binary-propagations     11
;  :conflicts               965
;  :datatype-accessor-ax    1098
;  :datatype-constructor-ax 5056
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5654
;  :del-clause              8233
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          259
;  :mk-bool-var             15087
;  :mk-clause               8432
;  :num-allocs              10458422
;  :num-checks              477
;  :propagations            9188
;  :quant-instantiations    2414
;  :rlimit-count            448390)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 140 | !(0 <= First:(Second:($t@57@01))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32829
;  :arith-add-rows          1412
;  :arith-assert-diseq      2490
;  :arith-assert-lower      4837
;  :arith-assert-upper      3162
;  :arith-bound-prop        372
;  :arith-conflicts         86
;  :arith-eq-adapter        2664
;  :arith-fixed-eqs         1615
;  :arith-offset-eqs        570
;  :arith-pivots            797
;  :binary-propagations     11
;  :conflicts               989
;  :datatype-accessor-ax    1098
;  :datatype-constructor-ax 5062
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5695
;  :del-clause              8493
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          267
;  :mk-bool-var             15346
;  :mk-clause               8687
;  :num-allocs              10458422
;  :num-checks              478
;  :propagations            9357
;  :quant-instantiations    2465
;  :rlimit-count            451038
;  :time                    0.00)
; [then-branch: 142 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1] | dead]
; [else-branch: 142 | !(__flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1]) | live]
(push) ; 9
; [else-branch: 142 | !(__flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32835
;  :arith-add-rows          1412
;  :arith-assert-diseq      2490
;  :arith-assert-lower      4837
;  :arith-assert-upper      3162
;  :arith-bound-prop        372
;  :arith-conflicts         86
;  :arith-eq-adapter        2664
;  :arith-fixed-eqs         1615
;  :arith-offset-eqs        570
;  :arith-pivots            797
;  :binary-propagations     11
;  :conflicts               989
;  :datatype-accessor-ax    1099
;  :datatype-constructor-ax 5062
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5695
;  :del-clause              8493
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          267
;  :mk-bool-var             15348
;  :mk-clause               8687
;  :num-allocs              10458422
;  :num-checks              479
;  :propagations            9357
;  :quant-instantiations    2465
;  :rlimit-count            451304)
(push) ; 8
; [then-branch: 143 | 0 <= First:(Second:($t@57@01))[0] | live]
; [else-branch: 143 | !(0 <= First:(Second:($t@57@01))[0]) | live]
(push) ; 9
; [then-branch: 143 | 0 <= First:(Second:($t@57@01))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32835
;  :arith-add-rows          1412
;  :arith-assert-diseq      2490
;  :arith-assert-lower      4837
;  :arith-assert-upper      3162
;  :arith-bound-prop        372
;  :arith-conflicts         86
;  :arith-eq-adapter        2664
;  :arith-fixed-eqs         1615
;  :arith-offset-eqs        570
;  :arith-pivots            797
;  :binary-propagations     11
;  :conflicts               989
;  :datatype-accessor-ax    1099
;  :datatype-constructor-ax 5062
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5695
;  :del-clause              8493
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          267
;  :mk-bool-var             15348
;  :mk-clause               8687
;  :num-allocs              10458422
;  :num-checks              480
;  :propagations            9357
;  :quant-instantiations    2465
;  :rlimit-count            451404)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32835
;  :arith-add-rows          1412
;  :arith-assert-diseq      2490
;  :arith-assert-lower      4837
;  :arith-assert-upper      3162
;  :arith-bound-prop        372
;  :arith-conflicts         86
;  :arith-eq-adapter        2664
;  :arith-fixed-eqs         1615
;  :arith-offset-eqs        570
;  :arith-pivots            797
;  :binary-propagations     11
;  :conflicts               989
;  :datatype-accessor-ax    1099
;  :datatype-constructor-ax 5062
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5695
;  :del-clause              8493
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          267
;  :mk-bool-var             15348
;  :mk-clause               8687
;  :num-allocs              10458422
;  :num-checks              481
;  :propagations            9357
;  :quant-instantiations    2465
;  :rlimit-count            451413)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (Seq_length __flatten_39__38@71@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32835
;  :arith-add-rows          1412
;  :arith-assert-diseq      2490
;  :arith-assert-lower      4837
;  :arith-assert-upper      3162
;  :arith-bound-prop        372
;  :arith-conflicts         86
;  :arith-eq-adapter        2664
;  :arith-fixed-eqs         1615
;  :arith-offset-eqs        570
;  :arith-pivots            797
;  :binary-propagations     11
;  :conflicts               990
;  :datatype-accessor-ax    1099
;  :datatype-constructor-ax 5062
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5695
;  :del-clause              8493
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          267
;  :mk-bool-var             15348
;  :mk-clause               8687
;  :num-allocs              10458422
;  :num-checks              482
;  :propagations            9357
;  :quant-instantiations    2465
;  :rlimit-count            451501)
(push) ; 10
; [then-branch: 144 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 | live]
; [else-branch: 144 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] != 0 | live]
(push) ; 11
; [then-branch: 144 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@71@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 144 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@71@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32836
;  :arith-add-rows          1414
;  :arith-assert-diseq      2490
;  :arith-assert-lower      4837
;  :arith-assert-upper      3162
;  :arith-bound-prop        372
;  :arith-conflicts         86
;  :arith-eq-adapter        2664
;  :arith-fixed-eqs         1615
;  :arith-offset-eqs        570
;  :arith-pivots            797
;  :binary-propagations     11
;  :conflicts               990
;  :datatype-accessor-ax    1099
;  :datatype-constructor-ax 5062
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5695
;  :del-clause              8493
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          267
;  :mk-bool-var             15352
;  :mk-clause               8692
;  :num-allocs              10458422
;  :num-checks              483
;  :propagations            9357
;  :quant-instantiations    2466
;  :rlimit-count            451687)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32836
;  :arith-add-rows          1414
;  :arith-assert-diseq      2490
;  :arith-assert-lower      4837
;  :arith-assert-upper      3162
;  :arith-bound-prop        372
;  :arith-conflicts         86
;  :arith-eq-adapter        2664
;  :arith-fixed-eqs         1615
;  :arith-offset-eqs        570
;  :arith-pivots            797
;  :binary-propagations     11
;  :conflicts               990
;  :datatype-accessor-ax    1099
;  :datatype-constructor-ax 5062
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5695
;  :del-clause              8493
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          267
;  :mk-bool-var             15352
;  :mk-clause               8692
;  :num-allocs              10458422
;  :num-checks              484
;  :propagations            9357
;  :quant-instantiations    2466
;  :rlimit-count            451696)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (Seq_length __flatten_39__38@71@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32836
;  :arith-add-rows          1414
;  :arith-assert-diseq      2490
;  :arith-assert-lower      4837
;  :arith-assert-upper      3162
;  :arith-bound-prop        372
;  :arith-conflicts         86
;  :arith-eq-adapter        2664
;  :arith-fixed-eqs         1615
;  :arith-offset-eqs        570
;  :arith-pivots            797
;  :binary-propagations     11
;  :conflicts               991
;  :datatype-accessor-ax    1099
;  :datatype-constructor-ax 5062
;  :datatype-occurs-check   2126
;  :datatype-splits         3557
;  :decisions               5695
;  :del-clause              8493
;  :final-checks            409
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          267
;  :mk-bool-var             15352
;  :mk-clause               8692
;  :num-allocs              10458422
;  :num-checks              485
;  :propagations            9357
;  :quant-instantiations    2466
;  :rlimit-count            451784)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 143 | !(0 <= First:(Second:($t@57@01))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               33681
;  :arith-add-rows          1461
;  :arith-assert-diseq      2554
;  :arith-assert-lower      4977
;  :arith-assert-upper      3233
;  :arith-bound-prop        396
;  :arith-conflicts         87
;  :arith-eq-adapter        2739
;  :arith-fixed-eqs         1660
;  :arith-offset-eqs        599
;  :arith-pivots            818
;  :binary-propagations     11
;  :conflicts               1010
;  :datatype-accessor-ax    1124
;  :datatype-constructor-ax 5206
;  :datatype-occurs-check   2190
;  :datatype-splits         3666
;  :decisions               5854
;  :del-clause              8790
;  :final-checks            420
;  :interface-eqs           56
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          274
;  :mk-bool-var             15747
;  :mk-clause               8984
;  :num-allocs              10458422
;  :num-checks              486
;  :propagations            9584
;  :quant-instantiations    2528
;  :rlimit-count            457829
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34263
;  :arith-add-rows          1520
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9024
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16063
;  :mk-clause               9218
;  :num-allocs              10458422
;  :num-checks              487
;  :propagations            9787
;  :quant-instantiations    2593
;  :rlimit-count            463296
;  :time                    0.00)
; [then-branch: 145 | !(__flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0]) | live]
; [else-branch: 145 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0] | live]
(push) ; 9
; [then-branch: 145 | !(__flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34264
;  :arith-add-rows          1522
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9024
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16067
;  :mk-clause               9223
;  :num-allocs              10458422
;  :num-checks              488
;  :propagations            9789
;  :quant-instantiations    2594
;  :rlimit-count            463512)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34264
;  :arith-add-rows          1522
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9024
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16067
;  :mk-clause               9223
;  :num-allocs              10458422
;  :num-checks              489
;  :propagations            9789
;  :quant-instantiations    2594
;  :rlimit-count            463527)
(pop) ; 9
(push) ; 9
; [else-branch: 145 | __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[0]] == -1 && 0 <= First:(Second:($t@57@01))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_39__38@71@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
              0))
          0)
        (=
          (Seq_index
            __flatten_39__38@71@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@73@01))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34271
;  :arith-add-rows          1522
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9029
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16070
;  :mk-clause               9226
;  :num-allocs              10458422
;  :num-checks              490
;  :propagations            9789
;  :quant-instantiations    2594
;  :rlimit-count            463915)
(push) ; 8
; [then-branch: 146 | 0 <= First:(Second:($t@57@01))[1] | live]
; [else-branch: 146 | !(0 <= First:(Second:($t@57@01))[1]) | live]
(push) ; 9
; [then-branch: 146 | 0 <= First:(Second:($t@57@01))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34271
;  :arith-add-rows          1522
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9029
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16070
;  :mk-clause               9226
;  :num-allocs              10458422
;  :num-checks              491
;  :propagations            9789
;  :quant-instantiations    2594
;  :rlimit-count            464015)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34271
;  :arith-add-rows          1522
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9029
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16070
;  :mk-clause               9226
;  :num-allocs              10458422
;  :num-checks              492
;  :propagations            9789
;  :quant-instantiations    2594
;  :rlimit-count            464024)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (Seq_length __flatten_39__38@71@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34271
;  :arith-add-rows          1522
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1037
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9029
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16070
;  :mk-clause               9226
;  :num-allocs              10458422
;  :num-checks              493
;  :propagations            9789
;  :quant-instantiations    2594
;  :rlimit-count            464112)
(push) ; 10
; [then-branch: 147 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0 | live]
; [else-branch: 147 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] != 0 | live]
(push) ; 11
; [then-branch: 147 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@71@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 147 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@71@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34272
;  :arith-add-rows          1523
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1037
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9029
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16075
;  :mk-clause               9231
;  :num-allocs              10458422
;  :num-checks              494
;  :propagations            9789
;  :quant-instantiations    2595
;  :rlimit-count            464297)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34272
;  :arith-add-rows          1523
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1037
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9029
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16075
;  :mk-clause               9231
;  :num-allocs              10458422
;  :num-checks              495
;  :propagations            9789
;  :quant-instantiations    2595
;  :rlimit-count            464306)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (Seq_length __flatten_39__38@71@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34272
;  :arith-add-rows          1523
;  :arith-assert-diseq      2599
;  :arith-assert-lower      5075
;  :arith-assert-upper      3307
;  :arith-bound-prop        414
;  :arith-conflicts         90
;  :arith-eq-adapter        2798
;  :arith-fixed-eqs         1701
;  :arith-offset-eqs        614
;  :arith-pivots            844
;  :binary-propagations     11
;  :conflicts               1038
;  :datatype-accessor-ax    1134
;  :datatype-constructor-ax 5287
;  :datatype-occurs-check   2220
;  :datatype-splits         3707
;  :decisions               5962
;  :del-clause              9029
;  :final-checks            426
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          288
;  :mk-bool-var             16075
;  :mk-clause               9231
;  :num-allocs              10458422
;  :num-checks              496
;  :propagations            9789
;  :quant-instantiations    2595
;  :rlimit-count            464394)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 146 | !(0 <= First:(Second:($t@57@01))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@71@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35274
;  :arith-add-rows          1583
;  :arith-assert-diseq      2675
;  :arith-assert-lower      5249
;  :arith-assert-upper      3391
;  :arith-bound-prop        431
;  :arith-conflicts         92
;  :arith-eq-adapter        2894
;  :arith-fixed-eqs         1760
;  :arith-offset-eqs        649
;  :arith-pivots            873
;  :binary-propagations     11
;  :conflicts               1060
;  :datatype-accessor-ax    1165
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   2288
;  :datatype-splits         3824
;  :decisions               6143
;  :del-clause              9379
;  :final-checks            436
;  :interface-eqs           59
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          294
;  :mk-bool-var             16575
;  :mk-clause               9576
;  :num-allocs              10458422
;  :num-checks              497
;  :propagations            10060
;  :quant-instantiations    2670
;  :rlimit-count            471635
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35472
;  :arith-add-rows          1623
;  :arith-assert-diseq      2722
;  :arith-assert-lower      5335
;  :arith-assert-upper      3437
;  :arith-bound-prop        448
;  :arith-conflicts         94
;  :arith-eq-adapter        2942
;  :arith-fixed-eqs         1777
;  :arith-offset-eqs        662
;  :arith-pivots            882
;  :binary-propagations     11
;  :conflicts               1084
;  :datatype-accessor-ax    1165
;  :datatype-constructor-ax 5459
;  :datatype-occurs-check   2288
;  :datatype-splits         3824
;  :decisions               6184
;  :del-clause              9646
;  :final-checks            436
;  :interface-eqs           59
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          302
;  :mk-bool-var             16855
;  :mk-clause               9843
;  :num-allocs              10458422
;  :num-checks              498
;  :propagations            10241
;  :quant-instantiations    2724
;  :rlimit-count            474341
;  :time                    0.00)
; [then-branch: 148 | !(__flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1]) | live]
; [else-branch: 148 | __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1] | dead]
(push) ; 9
; [then-branch: 148 | !(__flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == 0 || __flatten_39__38@71@01[First:(Second:($t@57@01))[1]] == -1 && 0 <= First:(Second:($t@57@01))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@71@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35473
;  :arith-add-rows          1624
;  :arith-assert-diseq      2722
;  :arith-assert-lower      5335
;  :arith-assert-upper      3437
;  :arith-bound-prop        448
;  :arith-conflicts         94
;  :arith-eq-adapter        2942
;  :arith-fixed-eqs         1777
;  :arith-offset-eqs        662
;  :arith-pivots            882
;  :binary-propagations     11
;  :conflicts               1084
;  :datatype-accessor-ax    1165
;  :datatype-constructor-ax 5459
;  :datatype-occurs-check   2288
;  :datatype-splits         3824
;  :decisions               6184
;  :del-clause              9646
;  :final-checks            436
;  :interface-eqs           59
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          302
;  :mk-bool-var             16862
;  :mk-clause               9851
;  :num-allocs              10458422
;  :num-checks              499
;  :propagations            10243
;  :quant-instantiations    2725
;  :rlimit-count            474578)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35473
;  :arith-add-rows          1624
;  :arith-assert-diseq      2722
;  :arith-assert-lower      5335
;  :arith-assert-upper      3437
;  :arith-bound-prop        448
;  :arith-conflicts         94
;  :arith-eq-adapter        2942
;  :arith-fixed-eqs         1777
;  :arith-offset-eqs        662
;  :arith-pivots            882
;  :binary-propagations     11
;  :conflicts               1084
;  :datatype-accessor-ax    1165
;  :datatype-constructor-ax 5459
;  :datatype-occurs-check   2288
;  :datatype-splits         3824
;  :decisions               6184
;  :del-clause              9646
;  :final-checks            436
;  :interface-eqs           59
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          302
;  :mk-bool-var             16862
;  :mk-clause               9851
;  :num-allocs              10458422
;  :num-checks              500
;  :propagations            10243
;  :quant-instantiations    2725
;  :rlimit-count            474593)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_39__38@71@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
              1))
          0)
        (=
          (Seq_index
            __flatten_39__38@71@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
              1))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_all_events_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@75@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 149 | 0 <= i@75@01 | live]
; [else-branch: 149 | !(0 <= i@75@01) | live]
(push) ; 10
; [then-branch: 149 | 0 <= i@75@01]
(assert (<= 0 i@75@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 149 | !(0 <= i@75@01)]
(assert (not (<= 0 i@75@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 150 | i@75@01 < |First:(Second:($t@73@01))| && 0 <= i@75@01 | live]
; [else-branch: 150 | !(i@75@01 < |First:(Second:($t@73@01))| && 0 <= i@75@01) | live]
(push) ; 10
; [then-branch: 150 | i@75@01 < |First:(Second:($t@73@01))| && 0 <= i@75@01]
(assert (and
  (<
    i@75@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))
  (<= 0 i@75@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@75@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36525
;  :arith-add-rows          1678
;  :arith-assert-diseq      2821
;  :arith-assert-lower      5560
;  :arith-assert-upper      3538
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3061
;  :arith-fixed-eqs         1841
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1109
;  :datatype-accessor-ax    1196
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10096
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17472
;  :mk-clause               10336
;  :num-allocs              10458422
;  :num-checks              502
;  :propagations            10614
;  :quant-instantiations    2831
;  :rlimit-count            482371)
; [eval] -1
(push) ; 11
; [then-branch: 151 | First:(Second:($t@73@01))[i@75@01] == -1 | live]
; [else-branch: 151 | First:(Second:($t@73@01))[i@75@01] != -1 | live]
(push) ; 12
; [then-branch: 151 | First:(Second:($t@73@01))[i@75@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
    i@75@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 151 | First:(Second:($t@73@01))[i@75@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
      i@75@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@75@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36525
;  :arith-add-rows          1678
;  :arith-assert-diseq      2822
;  :arith-assert-lower      5563
;  :arith-assert-upper      3539
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3062
;  :arith-fixed-eqs         1841
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1109
;  :datatype-accessor-ax    1196
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10096
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17478
;  :mk-clause               10340
;  :num-allocs              10458422
;  :num-checks              503
;  :propagations            10616
;  :quant-instantiations    2832
;  :rlimit-count            482579)
(push) ; 13
; [then-branch: 152 | 0 <= First:(Second:($t@73@01))[i@75@01] | live]
; [else-branch: 152 | !(0 <= First:(Second:($t@73@01))[i@75@01]) | live]
(push) ; 14
; [then-branch: 152 | 0 <= First:(Second:($t@73@01))[i@75@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
    i@75@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@75@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36525
;  :arith-add-rows          1678
;  :arith-assert-diseq      2822
;  :arith-assert-lower      5563
;  :arith-assert-upper      3539
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3062
;  :arith-fixed-eqs         1841
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1109
;  :datatype-accessor-ax    1196
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10096
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17478
;  :mk-clause               10340
;  :num-allocs              10458422
;  :num-checks              504
;  :propagations            10616
;  :quant-instantiations    2832
;  :rlimit-count            482673)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 152 | !(0 <= First:(Second:($t@73@01))[i@75@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
      i@75@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 150 | !(i@75@01 < |First:(Second:($t@73@01))| && 0 <= i@75@01)]
(assert (not
  (and
    (<
      i@75@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))
    (<= 0 i@75@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@75@01 Int)) (!
  (implies
    (and
      (<
        i@75@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))
      (<= 0 i@75@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
          i@75@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
            i@75@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
            i@75@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
    i@75@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36525
;  :arith-add-rows          1678
;  :arith-assert-diseq      2823
;  :arith-assert-lower      5564
;  :arith-assert-upper      3540
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3063
;  :arith-fixed-eqs         1841
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1110
;  :datatype-accessor-ax    1196
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10112
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17486
;  :mk-clause               10352
;  :num-allocs              10458422
;  :num-checks              505
;  :propagations            10618
;  :quant-instantiations    2833
;  :rlimit-count            483095)
(assert (forall ((i@75@01 Int)) (!
  (implies
    (and
      (<
        i@75@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))
      (<= 0 i@75@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
          i@75@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
            i@75@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
            i@75@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))
    i@75@01))
  :qid |prog.l<no position>|)))
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 ($Snap.combine ($Snap.first $t@76@01) ($Snap.second $t@76@01))))
(assert (=
  ($Snap.second $t@76@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@76@01))
    ($Snap.second ($Snap.second $t@76@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@76@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@76@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@76@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@76@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@77@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 153 | 0 <= i@77@01 | live]
; [else-branch: 153 | !(0 <= i@77@01) | live]
(push) ; 10
; [then-branch: 153 | 0 <= i@77@01]
(assert (<= 0 i@77@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 153 | !(0 <= i@77@01)]
(assert (not (<= 0 i@77@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 154 | i@77@01 < |First:(Second:($t@76@01))| && 0 <= i@77@01 | live]
; [else-branch: 154 | !(i@77@01 < |First:(Second:($t@76@01))| && 0 <= i@77@01) | live]
(push) ; 10
; [then-branch: 154 | i@77@01 < |First:(Second:($t@76@01))| && 0 <= i@77@01]
(assert (and
  (<
    i@77@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))
  (<= 0 i@77@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@77@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36562
;  :arith-add-rows          1678
;  :arith-assert-diseq      2823
;  :arith-assert-lower      5569
;  :arith-assert-upper      3543
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3065
;  :arith-fixed-eqs         1841
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1110
;  :datatype-accessor-ax    1202
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10112
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17508
;  :mk-clause               10352
;  :num-allocs              10458422
;  :num-checks              506
;  :propagations            10618
;  :quant-instantiations    2837
;  :rlimit-count            484483)
; [eval] -1
(push) ; 11
; [then-branch: 155 | First:(Second:($t@76@01))[i@77@01] == -1 | live]
; [else-branch: 155 | First:(Second:($t@76@01))[i@77@01] != -1 | live]
(push) ; 12
; [then-branch: 155 | First:(Second:($t@76@01))[i@77@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    i@77@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 155 | First:(Second:($t@76@01))[i@77@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      i@77@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@77@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36562
;  :arith-add-rows          1678
;  :arith-assert-diseq      2823
;  :arith-assert-lower      5569
;  :arith-assert-upper      3543
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3065
;  :arith-fixed-eqs         1841
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1110
;  :datatype-accessor-ax    1202
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10112
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17509
;  :mk-clause               10352
;  :num-allocs              10458422
;  :num-checks              507
;  :propagations            10618
;  :quant-instantiations    2837
;  :rlimit-count            484634)
(push) ; 13
; [then-branch: 156 | 0 <= First:(Second:($t@76@01))[i@77@01] | live]
; [else-branch: 156 | !(0 <= First:(Second:($t@76@01))[i@77@01]) | live]
(push) ; 14
; [then-branch: 156 | 0 <= First:(Second:($t@76@01))[i@77@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    i@77@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@77@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36562
;  :arith-add-rows          1678
;  :arith-assert-diseq      2824
;  :arith-assert-lower      5572
;  :arith-assert-upper      3543
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3066
;  :arith-fixed-eqs         1841
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1110
;  :datatype-accessor-ax    1202
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10112
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17512
;  :mk-clause               10353
;  :num-allocs              10458422
;  :num-checks              508
;  :propagations            10618
;  :quant-instantiations    2837
;  :rlimit-count            484737)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 156 | !(0 <= First:(Second:($t@76@01))[i@77@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      i@77@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 154 | !(i@77@01 < |First:(Second:($t@76@01))| && 0 <= i@77@01)]
(assert (not
  (and
    (<
      i@77@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))
    (<= 0 i@77@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@77@01 Int)) (!
  (implies
    (and
      (<
        i@77@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))
      (<= 0 i@77@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
          i@77@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
            i@77@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
            i@77@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    i@77@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@73@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36580
;  :arith-add-rows          1678
;  :arith-assert-diseq      2824
;  :arith-assert-lower      5573
;  :arith-assert-upper      3544
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3067
;  :arith-fixed-eqs         1842
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1110
;  :datatype-accessor-ax    1204
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10113
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17532
;  :mk-clause               10364
;  :num-allocs              10458422
;  :num-checks              509
;  :propagations            10622
;  :quant-instantiations    2839
;  :rlimit-count            485753)
(push) ; 8
; [then-branch: 157 | First:(Second:(Second:(Second:($t@73@01))))[0] == 0 | live]
; [else-branch: 157 | First:(Second:(Second:(Second:($t@73@01))))[0] != 0 | live]
(push) ; 9
; [then-branch: 157 | First:(Second:(Second:(Second:($t@73@01))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 157 | First:(Second:(Second:(Second:($t@73@01))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36584
;  :arith-add-rows          1679
;  :arith-assert-diseq      2824
;  :arith-assert-lower      5573
;  :arith-assert-upper      3544
;  :arith-bound-prop        464
;  :arith-conflicts         96
;  :arith-eq-adapter        3067
;  :arith-fixed-eqs         1843
;  :arith-offset-eqs        700
;  :arith-pivots            904
;  :binary-propagations     11
;  :conflicts               1110
;  :datatype-accessor-ax    1204
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2356
;  :datatype-splits         3940
;  :decisions               6378
;  :del-clause              10113
;  :final-checks            447
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.39
;  :minimized-lits          317
;  :mk-bool-var             17538
;  :mk-clause               10371
;  :num-allocs              10458422
;  :num-checks              510
;  :propagations            10623
;  :quant-instantiations    2841
;  :rlimit-count            486013)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37185
;  :arith-add-rows          1713
;  :arith-assert-diseq      2862
;  :arith-assert-lower      5652
;  :arith-assert-upper      3587
;  :arith-bound-prop        468
;  :arith-conflicts         99
;  :arith-eq-adapter        3102
;  :arith-fixed-eqs         1874
;  :arith-offset-eqs        705
;  :arith-pivots            917
;  :binary-propagations     11
;  :conflicts               1125
;  :datatype-accessor-ax    1227
;  :datatype-constructor-ax 5724
;  :datatype-occurs-check   2403
;  :datatype-splits         3993
;  :decisions               6481
;  :del-clause              10286
;  :final-checks            453
;  :interface-eqs           63
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          322
;  :mk-bool-var             17768
;  :mk-clause               10537
;  :num-allocs              10784321
;  :num-checks              511
;  :propagations            10784
;  :quant-instantiations    2883
;  :rlimit-count            490558
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37590
;  :arith-add-rows          1729
;  :arith-assert-diseq      2888
;  :arith-assert-lower      5703
;  :arith-assert-upper      3615
;  :arith-bound-prop        472
;  :arith-conflicts         99
;  :arith-eq-adapter        3127
;  :arith-fixed-eqs         1891
;  :arith-offset-eqs        710
;  :arith-pivots            927
;  :binary-propagations     11
;  :conflicts               1127
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5806
;  :datatype-occurs-check   2443
;  :datatype-splits         4042
;  :decisions               6558
;  :del-clause              10391
;  :final-checks            458
;  :interface-eqs           64
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          322
;  :mk-bool-var             17909
;  :mk-clause               10642
;  :num-allocs              11438534
;  :num-checks              512
;  :propagations            10873
;  :quant-instantiations    2898
;  :rlimit-count            493645
;  :time                    0.00)
; [then-branch: 158 | First:(Second:(Second:(Second:($t@73@01))))[0] == 0 || First:(Second:(Second:(Second:($t@73@01))))[0] == -1 | live]
; [else-branch: 158 | !(First:(Second:(Second:(Second:($t@73@01))))[0] == 0 || First:(Second:(Second:(Second:($t@73@01))))[0] == -1) | live]
(push) ; 9
; [then-branch: 158 | First:(Second:(Second:(Second:($t@73@01))))[0] == 0 || First:(Second:(Second:(Second:($t@73@01))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37593
;  :arith-add-rows          1729
;  :arith-assert-diseq      2888
;  :arith-assert-lower      5703
;  :arith-assert-upper      3615
;  :arith-bound-prop        472
;  :arith-conflicts         99
;  :arith-eq-adapter        3127
;  :arith-fixed-eqs         1891
;  :arith-offset-eqs        710
;  :arith-pivots            927
;  :binary-propagations     11
;  :conflicts               1127
;  :datatype-accessor-ax    1244
;  :datatype-constructor-ax 5806
;  :datatype-occurs-check   2443
;  :datatype-splits         4042
;  :decisions               6558
;  :del-clause              10391
;  :final-checks            458
;  :interface-eqs           64
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          322
;  :mk-bool-var             17911
;  :mk-clause               10643
;  :num-allocs              11438534
;  :num-checks              513
;  :propagations            10873
;  :quant-instantiations    2898
;  :rlimit-count            493797)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 158 | !(First:(Second:(Second:(Second:($t@73@01))))[0] == 0 || First:(Second:(Second:(Second:($t@73@01))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37602
;  :arith-add-rows          1729
;  :arith-assert-diseq      2888
;  :arith-assert-lower      5703
;  :arith-assert-upper      3615
;  :arith-bound-prop        472
;  :arith-conflicts         99
;  :arith-eq-adapter        3127
;  :arith-fixed-eqs         1891
;  :arith-offset-eqs        710
;  :arith-pivots            927
;  :binary-propagations     11
;  :conflicts               1127
;  :datatype-accessor-ax    1245
;  :datatype-constructor-ax 5806
;  :datatype-occurs-check   2443
;  :datatype-splits         4042
;  :decisions               6558
;  :del-clause              10392
;  :final-checks            458
;  :interface-eqs           64
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          322
;  :mk-bool-var             17917
;  :mk-clause               10647
;  :num-allocs              11438534
;  :num-checks              514
;  :propagations            10873
;  :quant-instantiations    2898
;  :rlimit-count            494283)
(push) ; 8
; [then-branch: 159 | First:(Second:(Second:(Second:($t@73@01))))[1] == 0 | live]
; [else-branch: 159 | First:(Second:(Second:(Second:($t@73@01))))[1] != 0 | live]
(push) ; 9
; [then-branch: 159 | First:(Second:(Second:(Second:($t@73@01))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 159 | First:(Second:(Second:(Second:($t@73@01))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37604
;  :arith-add-rows          1730
;  :arith-assert-diseq      2888
;  :arith-assert-lower      5703
;  :arith-assert-upper      3615
;  :arith-bound-prop        472
;  :arith-conflicts         99
;  :arith-eq-adapter        3127
;  :arith-fixed-eqs         1892
;  :arith-offset-eqs        710
;  :arith-pivots            927
;  :binary-propagations     11
;  :conflicts               1127
;  :datatype-accessor-ax    1245
;  :datatype-constructor-ax 5806
;  :datatype-occurs-check   2443
;  :datatype-splits         4042
;  :decisions               6558
;  :del-clause              10392
;  :final-checks            458
;  :interface-eqs           64
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          322
;  :mk-bool-var             17922
;  :mk-clause               10651
;  :num-allocs              11438534
;  :num-checks              515
;  :propagations            10873
;  :quant-instantiations    2899
;  :rlimit-count            494501)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38032
;  :arith-add-rows          1741
;  :arith-assert-diseq      2914
;  :arith-assert-lower      5760
;  :arith-assert-upper      3644
;  :arith-bound-prop        472
;  :arith-conflicts         100
;  :arith-eq-adapter        3152
;  :arith-fixed-eqs         1914
;  :arith-offset-eqs        719
;  :arith-pivots            935
;  :binary-propagations     11
;  :conflicts               1132
;  :datatype-accessor-ax    1262
;  :datatype-constructor-ax 5888
;  :datatype-occurs-check   2483
;  :datatype-splits         4091
;  :decisions               6641
;  :del-clause              10506
;  :final-checks            463
;  :interface-eqs           65
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          325
;  :mk-bool-var             18080
;  :mk-clause               10761
;  :num-allocs              12097518
;  :num-checks              516
;  :propagations            10976
;  :quant-instantiations    2920
;  :rlimit-count            497721
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38806
;  :arith-add-rows          1756
;  :arith-assert-diseq      2962
;  :arith-assert-lower      5861
;  :arith-assert-upper      3692
;  :arith-bound-prop        480
;  :arith-conflicts         101
;  :arith-eq-adapter        3199
;  :arith-fixed-eqs         1952
;  :arith-offset-eqs        737
;  :arith-pivots            947
;  :binary-propagations     11
;  :conflicts               1144
;  :datatype-accessor-ax    1299
;  :datatype-constructor-ax 6034
;  :datatype-occurs-check   2556
;  :datatype-splits         4193
;  :decisions               6768
;  :del-clause              10718
;  :final-checks            471
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          330
;  :mk-bool-var             18390
;  :mk-clause               10973
;  :num-allocs              12761194
;  :num-checks              517
;  :propagations            11160
;  :quant-instantiations    2962
;  :rlimit-count            502429
;  :time                    0.00)
; [then-branch: 160 | First:(Second:(Second:(Second:($t@73@01))))[1] == 0 || First:(Second:(Second:(Second:($t@73@01))))[1] == -1 | live]
; [else-branch: 160 | !(First:(Second:(Second:(Second:($t@73@01))))[1] == 0 || First:(Second:(Second:(Second:($t@73@01))))[1] == -1) | live]
(push) ; 9
; [then-branch: 160 | First:(Second:(Second:(Second:($t@73@01))))[1] == 0 || First:(Second:(Second:(Second:($t@73@01))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38806
;  :arith-add-rows          1756
;  :arith-assert-diseq      2962
;  :arith-assert-lower      5861
;  :arith-assert-upper      3692
;  :arith-bound-prop        480
;  :arith-conflicts         101
;  :arith-eq-adapter        3199
;  :arith-fixed-eqs         1952
;  :arith-offset-eqs        737
;  :arith-pivots            947
;  :binary-propagations     11
;  :conflicts               1144
;  :datatype-accessor-ax    1299
;  :datatype-constructor-ax 6034
;  :datatype-occurs-check   2556
;  :datatype-splits         4193
;  :decisions               6768
;  :del-clause              10718
;  :final-checks            471
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          330
;  :mk-bool-var             18392
;  :mk-clause               10974
;  :num-allocs              12761194
;  :num-checks              518
;  :propagations            11160
;  :quant-instantiations    2962
;  :rlimit-count            502578)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 160 | !(First:(Second:(Second:(Second:($t@73@01))))[1] == 0 || First:(Second:(Second:(Second:($t@73@01))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38812
;  :arith-add-rows          1756
;  :arith-assert-diseq      2962
;  :arith-assert-lower      5861
;  :arith-assert-upper      3692
;  :arith-bound-prop        480
;  :arith-conflicts         101
;  :arith-eq-adapter        3199
;  :arith-fixed-eqs         1952
;  :arith-offset-eqs        737
;  :arith-pivots            947
;  :binary-propagations     11
;  :conflicts               1144
;  :datatype-accessor-ax    1300
;  :datatype-constructor-ax 6034
;  :datatype-occurs-check   2556
;  :datatype-splits         4193
;  :decisions               6768
;  :del-clause              10719
;  :final-checks            471
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          330
;  :mk-bool-var             18398
;  :mk-clause               10978
;  :num-allocs              12761194
;  :num-checks              519
;  :propagations            11160
;  :quant-instantiations    2962
;  :rlimit-count            503067)
(push) ; 8
; [then-branch: 161 | First:(Second:(Second:(Second:($t@73@01))))[2] == 0 | live]
; [else-branch: 161 | First:(Second:(Second:(Second:($t@73@01))))[2] != 0 | live]
(push) ; 9
; [then-branch: 161 | First:(Second:(Second:(Second:($t@73@01))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
    2)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 161 | First:(Second:(Second:(Second:($t@73@01))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38816
;  :arith-add-rows          1756
;  :arith-assert-diseq      2962
;  :arith-assert-lower      5861
;  :arith-assert-upper      3693
;  :arith-bound-prop        480
;  :arith-conflicts         101
;  :arith-eq-adapter        3199
;  :arith-fixed-eqs         1952
;  :arith-offset-eqs        737
;  :arith-pivots            947
;  :binary-propagations     11
;  :conflicts               1144
;  :datatype-accessor-ax    1300
;  :datatype-constructor-ax 6034
;  :datatype-occurs-check   2556
;  :datatype-splits         4193
;  :decisions               6768
;  :del-clause              10719
;  :final-checks            471
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          330
;  :mk-bool-var             18400
;  :mk-clause               10978
;  :num-allocs              12761194
;  :num-checks              520
;  :propagations            11160
;  :quant-instantiations    2964
;  :rlimit-count            503295)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        2)
      (- 0 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38857
;  :arith-add-rows          1756
;  :arith-assert-diseq      2966
;  :arith-assert-lower      5863
;  :arith-assert-upper      3698
;  :arith-bound-prop        481
;  :arith-conflicts         102
;  :arith-eq-adapter        3204
;  :arith-fixed-eqs         1952
;  :arith-offset-eqs        737
;  :arith-pivots            947
;  :binary-propagations     11
;  :conflicts               1154
;  :datatype-accessor-ax    1300
;  :datatype-constructor-ax 6040
;  :datatype-occurs-check   2556
;  :datatype-splits         4193
;  :decisions               6777
;  :del-clause              10751
;  :final-checks            471
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.41
;  :minimized-lits          330
;  :mk-bool-var             18429
;  :mk-clause               11010
;  :num-allocs              13095047
;  :num-checks              521
;  :propagations            11182
;  :quant-instantiations    2967
;  :rlimit-count            503744)
; [then-branch: 162 | First:(Second:(Second:(Second:($t@73@01))))[2] == 0 || First:(Second:(Second:(Second:($t@73@01))))[2] == -1 | dead]
; [else-branch: 162 | !(First:(Second:(Second:(Second:($t@73@01))))[2] == 0 || First:(Second:(Second:(Second:($t@73@01))))[2] == -1) | live]
(push) ; 9
; [else-branch: 162 | !(First:(Second:(Second:(Second:($t@73@01))))[2] == 0 || First:(Second:(Second:(Second:($t@73@01))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        2)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) != 0 && old(diz.Main_event_state[0]) != -1 ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] old(diz.Main_event_state[0]) != 0 && old(diz.Main_event_state[0]) != -1
; [eval] old(diz.Main_event_state[0]) != 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38863
;  :arith-add-rows          1756
;  :arith-assert-diseq      2966
;  :arith-assert-lower      5863
;  :arith-assert-upper      3698
;  :arith-bound-prop        481
;  :arith-conflicts         102
;  :arith-eq-adapter        3204
;  :arith-fixed-eqs         1952
;  :arith-offset-eqs        737
;  :arith-pivots            947
;  :binary-propagations     11
;  :conflicts               1154
;  :datatype-accessor-ax    1301
;  :datatype-constructor-ax 6040
;  :datatype-occurs-check   2556
;  :datatype-splits         4193
;  :decisions               6777
;  :del-clause              10751
;  :final-checks            471
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.41
;  :minimized-lits          330
;  :mk-bool-var             18431
;  :mk-clause               11010
;  :num-allocs              13095047
;  :num-checks              522
;  :propagations            11182
;  :quant-instantiations    2967
;  :rlimit-count            504018)
(push) ; 8
; [then-branch: 163 | First:(Second:(Second:(Second:($t@73@01))))[0] != 0 | live]
; [else-branch: 163 | First:(Second:(Second:(Second:($t@73@01))))[0] == 0 | live]
(push) ; 9
; [then-branch: 163 | First:(Second:(Second:(Second:($t@73@01))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) != -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38865
;  :arith-add-rows          1757
;  :arith-assert-diseq      2966
;  :arith-assert-lower      5863
;  :arith-assert-upper      3698
;  :arith-bound-prop        481
;  :arith-conflicts         102
;  :arith-eq-adapter        3204
;  :arith-fixed-eqs         1953
;  :arith-offset-eqs        737
;  :arith-pivots            947
;  :binary-propagations     11
;  :conflicts               1154
;  :datatype-accessor-ax    1301
;  :datatype-constructor-ax 6040
;  :datatype-occurs-check   2556
;  :datatype-splits         4193
;  :decisions               6777
;  :del-clause              10751
;  :final-checks            471
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.41
;  :minimized-lits          330
;  :mk-bool-var             18436
;  :mk-clause               11017
;  :num-allocs              13095047
;  :num-checks              523
;  :propagations            11183
;  :quant-instantiations    2969
;  :rlimit-count            504240)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 163 | First:(Second:(Second:(Second:($t@73@01))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
    0)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          0)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39505
;  :arith-add-rows          1769
;  :arith-assert-diseq      3005
;  :arith-assert-lower      5945
;  :arith-assert-upper      3735
;  :arith-bound-prop        485
;  :arith-conflicts         103
;  :arith-eq-adapter        3241
;  :arith-fixed-eqs         1983
;  :arith-offset-eqs        750
;  :arith-pivots            957
;  :binary-propagations     11
;  :conflicts               1161
;  :datatype-accessor-ax    1331
;  :datatype-constructor-ax 6164
;  :datatype-occurs-check   2622
;  :datatype-splits         4291
;  :decisions               6892
;  :del-clause              10905
;  :final-checks            479
;  :interface-eqs           68
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.51
;  :minimized-lits          333
;  :mk-bool-var             18671
;  :mk-clause               11164
;  :num-allocs              13431254
;  :num-checks              524
;  :propagations            11334
;  :quant-instantiations    2995
;  :rlimit-count            508321
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40339
;  :arith-add-rows          1808
;  :arith-assert-diseq      3056
;  :arith-assert-lower      6043
;  :arith-assert-upper      3784
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3289
;  :arith-fixed-eqs         2023
;  :arith-offset-eqs        765
;  :arith-pivots            974
;  :binary-propagations     11
;  :conflicts               1178
;  :datatype-accessor-ax    1368
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2695
;  :datatype-splits         4393
;  :decisions               7031
;  :del-clause              11133
;  :final-checks            488
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          338
;  :mk-bool-var             18996
;  :mk-clause               11392
;  :num-allocs              14106868
;  :num-checks              525
;  :propagations            11547
;  :quant-instantiations    3043
;  :rlimit-count            513863
;  :time                    0.00)
; [then-branch: 164 | First:(Second:(Second:(Second:($t@73@01))))[0] != -1 && First:(Second:(Second:(Second:($t@73@01))))[0] != 0 | live]
; [else-branch: 164 | !(First:(Second:(Second:(Second:($t@73@01))))[0] != -1 && First:(Second:(Second:(Second:($t@73@01))))[0] != 0) | live]
(push) ; 9
; [then-branch: 164 | First:(Second:(Second:(Second:($t@73@01))))[0] != -1 && First:(Second:(Second:(Second:($t@73@01))))[0] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        0)
      0))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40348
;  :arith-add-rows          1809
;  :arith-assert-diseq      3058
;  :arith-assert-lower      6050
;  :arith-assert-upper      3788
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3293
;  :arith-fixed-eqs         2025
;  :arith-offset-eqs        765
;  :arith-pivots            974
;  :binary-propagations     11
;  :conflicts               1178
;  :datatype-accessor-ax    1368
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2695
;  :datatype-splits         4393
;  :decisions               7031
;  :del-clause              11133
;  :final-checks            488
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          338
;  :mk-bool-var             19017
;  :mk-clause               11415
;  :num-allocs              14106868
;  :num-checks              526
;  :propagations            11559
;  :quant-instantiations    3048
;  :rlimit-count            514139)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40348
;  :arith-add-rows          1809
;  :arith-assert-diseq      3058
;  :arith-assert-lower      6050
;  :arith-assert-upper      3788
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3293
;  :arith-fixed-eqs         2025
;  :arith-offset-eqs        765
;  :arith-pivots            974
;  :binary-propagations     11
;  :conflicts               1178
;  :datatype-accessor-ax    1368
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2695
;  :datatype-splits         4393
;  :decisions               7031
;  :del-clause              11133
;  :final-checks            488
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          338
;  :mk-bool-var             19017
;  :mk-clause               11415
;  :num-allocs              14106868
;  :num-checks              527
;  :propagations            11559
;  :quant-instantiations    3048
;  :rlimit-count            514154)
(pop) ; 9
(push) ; 9
; [else-branch: 164 | !(First:(Second:(Second:(Second:($t@73@01))))[0] != -1 && First:(Second:(Second:(Second:($t@73@01))))[0] != 0)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          0)
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          0)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) != 0 && old(diz.Main_event_state[1]) != -1 ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] old(diz.Main_event_state[1]) != 0 && old(diz.Main_event_state[1]) != -1
; [eval] old(diz.Main_event_state[1]) != 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40354
;  :arith-add-rows          1809
;  :arith-assert-diseq      3058
;  :arith-assert-lower      6050
;  :arith-assert-upper      3788
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3293
;  :arith-fixed-eqs         2025
;  :arith-offset-eqs        765
;  :arith-pivots            974
;  :binary-propagations     11
;  :conflicts               1178
;  :datatype-accessor-ax    1369
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2695
;  :datatype-splits         4393
;  :decisions               7031
;  :del-clause              11156
;  :final-checks            488
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          338
;  :mk-bool-var             19020
;  :mk-clause               11416
;  :num-allocs              14106868
;  :num-checks              528
;  :propagations            11559
;  :quant-instantiations    3048
;  :rlimit-count            514649)
(push) ; 8
; [then-branch: 165 | First:(Second:(Second:(Second:($t@73@01))))[1] != 0 | live]
; [else-branch: 165 | First:(Second:(Second:(Second:($t@73@01))))[1] == 0 | live]
(push) ; 9
; [then-branch: 165 | First:(Second:(Second:(Second:($t@73@01))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) != -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40356
;  :arith-add-rows          1810
;  :arith-assert-diseq      3058
;  :arith-assert-lower      6050
;  :arith-assert-upper      3788
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3293
;  :arith-fixed-eqs         2026
;  :arith-offset-eqs        765
;  :arith-pivots            974
;  :binary-propagations     11
;  :conflicts               1178
;  :datatype-accessor-ax    1369
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2695
;  :datatype-splits         4393
;  :decisions               7031
;  :del-clause              11156
;  :final-checks            488
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          338
;  :mk-bool-var             19024
;  :mk-clause               11420
;  :num-allocs              14106868
;  :num-checks              529
;  :propagations            11559
;  :quant-instantiations    3049
;  :rlimit-count            514801)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 165 | First:(Second:(Second:(Second:($t@73@01))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
    1)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          1)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41146
;  :arith-add-rows          1830
;  :arith-assert-diseq      3106
;  :arith-assert-lower      6151
;  :arith-assert-upper      3836
;  :arith-bound-prop        501
;  :arith-conflicts         107
;  :arith-eq-adapter        3340
;  :arith-fixed-eqs         2064
;  :arith-offset-eqs        783
;  :arith-pivots            988
;  :binary-propagations     11
;  :conflicts               1190
;  :datatype-accessor-ax    1406
;  :datatype-constructor-ax 6456
;  :datatype-occurs-check   2768
;  :datatype-splits         4495
;  :decisions               7158
;  :del-clause              11373
;  :final-checks            496
;  :interface-eqs           71
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.42
;  :minimized-lits          343
;  :mk-bool-var             19332
;  :mk-clause               11633
;  :num-allocs              14446774
;  :num-checks              530
;  :propagations            11747
;  :quant-instantiations    3091
;  :rlimit-count            519704
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41592
;  :arith-add-rows          1839
;  :arith-assert-diseq      3132
;  :arith-assert-lower      6208
;  :arith-assert-upper      3865
;  :arith-bound-prop        501
;  :arith-conflicts         108
;  :arith-eq-adapter        3365
;  :arith-fixed-eqs         2086
;  :arith-offset-eqs        792
;  :arith-pivots            996
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1424
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2808
;  :datatype-splits         4546
;  :decisions               7244
;  :del-clause              11484
;  :final-checks            501
;  :interface-eqs           72
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          348
;  :mk-bool-var             19494
;  :mk-clause               11744
;  :num-allocs              14790990
;  :num-checks              531
;  :propagations            11854
;  :quant-instantiations    3112
;  :rlimit-count            522995
;  :time                    0.00)
; [then-branch: 166 | First:(Second:(Second:(Second:($t@73@01))))[1] != -1 && First:(Second:(Second:(Second:($t@73@01))))[1] != 0 | live]
; [else-branch: 166 | !(First:(Second:(Second:(Second:($t@73@01))))[1] != -1 && First:(Second:(Second:(Second:($t@73@01))))[1] != 0) | live]
(push) ; 9
; [then-branch: 166 | First:(Second:(Second:(Second:($t@73@01))))[1] != -1 && First:(Second:(Second:(Second:($t@73@01))))[1] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        1)
      0))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41594
;  :arith-add-rows          1840
;  :arith-assert-diseq      3132
;  :arith-assert-lower      6208
;  :arith-assert-upper      3865
;  :arith-bound-prop        501
;  :arith-conflicts         108
;  :arith-eq-adapter        3365
;  :arith-fixed-eqs         2087
;  :arith-offset-eqs        792
;  :arith-pivots            996
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1424
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2808
;  :datatype-splits         4546
;  :decisions               7244
;  :del-clause              11484
;  :final-checks            501
;  :interface-eqs           72
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          348
;  :mk-bool-var             19498
;  :mk-clause               11748
;  :num-allocs              14790990
;  :num-checks              532
;  :propagations            11855
;  :quant-instantiations    3113
;  :rlimit-count            523190)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41594
;  :arith-add-rows          1840
;  :arith-assert-diseq      3132
;  :arith-assert-lower      6208
;  :arith-assert-upper      3865
;  :arith-bound-prop        501
;  :arith-conflicts         108
;  :arith-eq-adapter        3365
;  :arith-fixed-eqs         2087
;  :arith-offset-eqs        792
;  :arith-pivots            996
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1424
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2808
;  :datatype-splits         4546
;  :decisions               7244
;  :del-clause              11484
;  :final-checks            501
;  :interface-eqs           72
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          348
;  :mk-bool-var             19498
;  :mk-clause               11748
;  :num-allocs              14790990
;  :num-checks              533
;  :propagations            11855
;  :quant-instantiations    3113
;  :rlimit-count            523205)
(pop) ; 9
(push) ; 9
; [else-branch: 166 | !(First:(Second:(Second:(Second:($t@73@01))))[1] != -1 && First:(Second:(Second:(Second:($t@73@01))))[1] != 0)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          1)
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          1)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) != 0 && old(diz.Main_event_state[2]) != -1 ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] old(diz.Main_event_state[2]) != 0 && old(diz.Main_event_state[2]) != -1
; [eval] old(diz.Main_event_state[2]) != 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41603
;  :arith-add-rows          1840
;  :arith-assert-diseq      3132
;  :arith-assert-lower      6208
;  :arith-assert-upper      3865
;  :arith-bound-prop        501
;  :arith-conflicts         108
;  :arith-eq-adapter        3365
;  :arith-fixed-eqs         2087
;  :arith-offset-eqs        792
;  :arith-pivots            996
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1424
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2808
;  :datatype-splits         4546
;  :decisions               7244
;  :del-clause              11488
;  :final-checks            501
;  :interface-eqs           72
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          348
;  :mk-bool-var             19500
;  :mk-clause               11749
;  :num-allocs              14790990
;  :num-checks              534
;  :propagations            11855
;  :quant-instantiations    3113
;  :rlimit-count            523619)
(push) ; 8
; [then-branch: 167 | First:(Second:(Second:(Second:($t@73@01))))[2] != 0 | live]
; [else-branch: 167 | First:(Second:(Second:(Second:($t@73@01))))[2] == 0 | live]
(push) ; 9
; [then-branch: 167 | First:(Second:(Second:(Second:($t@73@01))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) != -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41607
;  :arith-add-rows          1840
;  :arith-assert-diseq      3132
;  :arith-assert-lower      6208
;  :arith-assert-upper      3866
;  :arith-bound-prop        501
;  :arith-conflicts         108
;  :arith-eq-adapter        3365
;  :arith-fixed-eqs         2087
;  :arith-offset-eqs        792
;  :arith-pivots            996
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1424
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2808
;  :datatype-splits         4546
;  :decisions               7244
;  :del-clause              11488
;  :final-checks            501
;  :interface-eqs           72
;  :max-generation          4
;  :max-memory              5.52
;  :memory                  5.52
;  :minimized-lits          348
;  :mk-bool-var             19502
;  :mk-clause               11749
;  :num-allocs              14790990
;  :num-checks              535
;  :propagations            11855
;  :quant-instantiations    3115
;  :rlimit-count            523811)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 167 | First:(Second:(Second:(Second:($t@73@01))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
    2)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          2)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42051
;  :arith-add-rows          1849
;  :arith-assert-diseq      3160
;  :arith-assert-lower      6269
;  :arith-assert-upper      3896
;  :arith-bound-prop        501
;  :arith-conflicts         109
;  :arith-eq-adapter        3391
;  :arith-fixed-eqs         2109
;  :arith-offset-eqs        801
;  :arith-pivots            1004
;  :binary-propagations     11
;  :conflicts               1203
;  :datatype-accessor-ax    1442
;  :datatype-constructor-ax 6625
;  :datatype-occurs-check   2848
;  :datatype-splits         4596
;  :decisions               7330
;  :del-clause              11602
;  :final-checks            506
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.53
;  :minimized-lits          353
;  :mk-bool-var             19669
;  :mk-clause               11863
;  :num-allocs              15482672
;  :num-checks              536
;  :propagations            11968
;  :quant-instantiations    3138
;  :rlimit-count            527221
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        2)
      0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42092
;  :arith-add-rows          1849
;  :arith-assert-diseq      3164
;  :arith-assert-lower      6271
;  :arith-assert-upper      3901
;  :arith-bound-prop        502
;  :arith-conflicts         110
;  :arith-eq-adapter        3396
;  :arith-fixed-eqs         2109
;  :arith-offset-eqs        801
;  :arith-pivots            1004
;  :binary-propagations     11
;  :conflicts               1213
;  :datatype-accessor-ax    1442
;  :datatype-constructor-ax 6631
;  :datatype-occurs-check   2848
;  :datatype-splits         4596
;  :decisions               7339
;  :del-clause              11634
;  :final-checks            506
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          353
;  :mk-bool-var             19698
;  :mk-clause               11895
;  :num-allocs              15829774
;  :num-checks              537
;  :propagations            11990
;  :quant-instantiations    3141
;  :rlimit-count            527683)
; [then-branch: 168 | First:(Second:(Second:(Second:($t@73@01))))[2] != -1 && First:(Second:(Second:(Second:($t@73@01))))[2] != 0 | live]
; [else-branch: 168 | !(First:(Second:(Second:(Second:($t@73@01))))[2] != -1 && First:(Second:(Second:(Second:($t@73@01))))[2] != 0) | dead]
(push) ; 9
; [then-branch: 168 | First:(Second:(Second:(Second:($t@73@01))))[2] != -1 && First:(Second:(Second:(Second:($t@73@01))))[2] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
        2)
      0))))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42096
;  :arith-add-rows          1849
;  :arith-assert-diseq      3164
;  :arith-assert-lower      6271
;  :arith-assert-upper      3902
;  :arith-bound-prop        502
;  :arith-conflicts         110
;  :arith-eq-adapter        3396
;  :arith-fixed-eqs         2109
;  :arith-offset-eqs        801
;  :arith-pivots            1004
;  :binary-propagations     11
;  :conflicts               1213
;  :datatype-accessor-ax    1442
;  :datatype-constructor-ax 6631
;  :datatype-occurs-check   2848
;  :datatype-splits         4596
;  :decisions               7339
;  :del-clause              11634
;  :final-checks            506
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          353
;  :mk-bool-var             19701
;  :mk-clause               11895
;  :num-allocs              15829774
;  :num-checks              538
;  :propagations            11990
;  :quant-instantiations    3143
;  :rlimit-count            527925)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42096
;  :arith-add-rows          1849
;  :arith-assert-diseq      3164
;  :arith-assert-lower      6271
;  :arith-assert-upper      3902
;  :arith-bound-prop        502
;  :arith-conflicts         110
;  :arith-eq-adapter        3396
;  :arith-fixed-eqs         2109
;  :arith-offset-eqs        801
;  :arith-pivots            1004
;  :binary-propagations     11
;  :conflicts               1213
;  :datatype-accessor-ax    1442
;  :datatype-constructor-ax 6631
;  :datatype-occurs-check   2848
;  :datatype-splits         4596
;  :decisions               7339
;  :del-clause              11634
;  :final-checks            506
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          353
;  :mk-bool-var             19701
;  :mk-clause               11895
;  :num-allocs              15829774
;  :num-checks              539
;  :propagations            11990
;  :quant-instantiations    3143
;  :rlimit-count            527940)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
          2)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@73@01)))))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@78@01 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 169 | 0 <= i@78@01 | live]
; [else-branch: 169 | !(0 <= i@78@01) | live]
(push) ; 10
; [then-branch: 169 | 0 <= i@78@01]
(assert (<= 0 i@78@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 169 | !(0 <= i@78@01)]
(assert (not (<= 0 i@78@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 170 | i@78@01 < |First:(Second:($t@76@01))| && 0 <= i@78@01 | live]
; [else-branch: 170 | !(i@78@01 < |First:(Second:($t@76@01))| && 0 <= i@78@01) | live]
(push) ; 10
; [then-branch: 170 | i@78@01 < |First:(Second:($t@76@01))| && 0 <= i@78@01]
(assert (and
  (<
    i@78@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))
  (<= 0 i@78@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@78@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42542
;  :arith-add-rows          1858
;  :arith-assert-diseq      3190
;  :arith-assert-lower      6329
;  :arith-assert-upper      3933
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3421
;  :arith-fixed-eqs         2132
;  :arith-offset-eqs        810
;  :arith-pivots            1012
;  :binary-propagations     11
;  :conflicts               1219
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11779
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19868
;  :mk-clause               12006
;  :num-allocs              15829774
;  :num-checks              541
;  :propagations            12103
;  :quant-instantiations    3166
;  :rlimit-count            531502)
; [eval] -1
(push) ; 11
; [then-branch: 171 | First:(Second:($t@76@01))[i@78@01] == -1 | live]
; [else-branch: 171 | First:(Second:($t@76@01))[i@78@01] != -1 | live]
(push) ; 12
; [then-branch: 171 | First:(Second:($t@76@01))[i@78@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    i@78@01)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 171 | First:(Second:($t@76@01))[i@78@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      i@78@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@78@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3192
;  :arith-assert-lower      6336
;  :arith-assert-upper      3936
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3424
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1013
;  :binary-propagations     11
;  :conflicts               1219
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11779
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19883
;  :mk-clause               12023
;  :num-allocs              15829774
;  :num-checks              542
;  :propagations            12110
;  :quant-instantiations    3169
;  :rlimit-count            531810)
(push) ; 13
; [then-branch: 172 | 0 <= First:(Second:($t@76@01))[i@78@01] | live]
; [else-branch: 172 | !(0 <= First:(Second:($t@76@01))[i@78@01]) | live]
(push) ; 14
; [then-branch: 172 | 0 <= First:(Second:($t@76@01))[i@78@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    i@78@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@78@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3192
;  :arith-assert-lower      6336
;  :arith-assert-upper      3936
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3424
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1013
;  :binary-propagations     11
;  :conflicts               1219
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11779
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19883
;  :mk-clause               12023
;  :num-allocs              15829774
;  :num-checks              543
;  :propagations            12110
;  :quant-instantiations    3169
;  :rlimit-count            531904)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 172 | !(0 <= First:(Second:($t@76@01))[i@78@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      i@78@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 170 | !(i@78@01 < |First:(Second:($t@76@01))| && 0 <= i@78@01)]
(assert (not
  (and
    (<
      i@78@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))
    (<= 0 i@78@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@78@01 Int)) (!
  (implies
    (and
      (<
        i@78@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))
      (<= 0 i@78@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
          i@78@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
            i@78@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
            i@78@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    i@78@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3193
;  :arith-assert-lower      6337
;  :arith-assert-upper      3937
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3425
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1220
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19895
;  :mk-clause               12041
;  :num-allocs              15829774
;  :num-checks              544
;  :propagations            12112
;  :quant-instantiations    3172
;  :rlimit-count            532395)
(assert (forall ((i@78@01 Int)) (!
  (implies
    (and
      (<
        i@78@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))
      (<= 0 i@78@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
          i@78@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
            i@78@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
            i@78@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    i@78@01))
  :qid |prog.l<no position>|)))
(declare-const $k@79@01 $Perm)
(assert ($Perm.isReadVar $k@79@01 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@79@01 $Perm.No) (< $Perm.No $k@79@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3194
;  :arith-assert-lower      6339
;  :arith-assert-upper      3938
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3426
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1221
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19900
;  :mk-clause               12043
;  :num-allocs              15829774
;  :num-checks              545
;  :propagations            12113
;  :quant-instantiations    3172
;  :rlimit-count            532920)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@49@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3194
;  :arith-assert-lower      6339
;  :arith-assert-upper      3938
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3426
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1221
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19900
;  :mk-clause               12043
;  :num-allocs              15829774
;  :num-checks              546
;  :propagations            12113
;  :quant-instantiations    3172
;  :rlimit-count            532931)
(assert (< $k@79@01 $k@49@01))
(assert (<= $Perm.No (- $k@49@01 $k@79@01)))
(assert (<= (- $k@49@01 $k@79@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@49@01 $k@79@01)) (not (= diz@17@01 $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 8
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3194
;  :arith-assert-lower      6341
;  :arith-assert-upper      3939
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3426
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1222
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19903
;  :mk-clause               12043
;  :num-allocs              15829774
;  :num-checks              547
;  :propagations            12113
;  :quant-instantiations    3172
;  :rlimit-count            533139)
(declare-const $k@80@01 $Perm)
(assert ($Perm.isReadVar $k@80@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@80@01 $Perm.No) (< $Perm.No $k@80@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3195
;  :arith-assert-lower      6343
;  :arith-assert-upper      3940
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3427
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1223
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19907
;  :mk-clause               12045
;  :num-allocs              15829774
;  :num-checks              548
;  :propagations            12114
;  :quant-instantiations    3172
;  :rlimit-count            533338)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@50@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3195
;  :arith-assert-lower      6343
;  :arith-assert-upper      3940
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3427
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1223
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19907
;  :mk-clause               12045
;  :num-allocs              15829774
;  :num-checks              549
;  :propagations            12114
;  :quant-instantiations    3172
;  :rlimit-count            533349)
(assert (< $k@80@01 $k@50@01))
(assert (<= $Perm.No (- $k@50@01 $k@80@01)))
(assert (<= (- $k@50@01 $k@80@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@50@01 $k@80@01)) (not (= diz@17@01 $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 8
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3195
;  :arith-assert-lower      6345
;  :arith-assert-upper      3941
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3427
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1224
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19910
;  :mk-clause               12045
;  :num-allocs              15829774
;  :num-checks              550
;  :propagations            12114
;  :quant-instantiations    3172
;  :rlimit-count            533557)
(push) ; 8
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3195
;  :arith-assert-lower      6345
;  :arith-assert-upper      3941
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3427
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1225
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19910
;  :mk-clause               12045
;  :num-allocs              15829774
;  :num-checks              551
;  :propagations            12114
;  :quant-instantiations    3172
;  :rlimit-count            533605)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3195
;  :arith-assert-lower      6345
;  :arith-assert-upper      3941
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3427
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1225
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19910
;  :mk-clause               12045
;  :num-allocs              15829774
;  :num-checks              552
;  :propagations            12114
;  :quant-instantiations    3172
;  :rlimit-count            533618)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3195
;  :arith-assert-lower      6345
;  :arith-assert-upper      3941
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3427
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1226
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19910
;  :mk-clause               12045
;  :num-allocs              15829774
;  :num-checks              553
;  :propagations            12114
;  :quant-instantiations    3172
;  :rlimit-count            533666)
(declare-const $k@81@01 $Perm)
(assert ($Perm.isReadVar $k@81@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@81@01 $Perm.No) (< $Perm.No $k@81@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3196
;  :arith-assert-lower      6347
;  :arith-assert-upper      3942
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1227
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19914
;  :mk-clause               12047
;  :num-allocs              15829774
;  :num-checks              554
;  :propagations            12115
;  :quant-instantiations    3172
;  :rlimit-count            533864)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@51@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3196
;  :arith-assert-lower      6347
;  :arith-assert-upper      3942
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1014
;  :binary-propagations     11
;  :conflicts               1227
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19914
;  :mk-clause               12047
;  :num-allocs              15829774
;  :num-checks              555
;  :propagations            12115
;  :quant-instantiations    3172
;  :rlimit-count            533875)
(assert (< $k@81@01 $k@51@01))
(assert (<= $Perm.No (- $k@51@01 $k@81@01)))
(assert (<= (- $k@51@01 $k@81@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@51@01 $k@81@01)) (not (= diz@17@01 $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3196
;  :arith-assert-lower      6349
;  :arith-assert-upper      3943
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1015
;  :binary-propagations     11
;  :conflicts               1228
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19917
;  :mk-clause               12047
;  :num-allocs              15829774
;  :num-checks              556
;  :propagations            12115
;  :quant-instantiations    3172
;  :rlimit-count            534089)
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3196
;  :arith-assert-lower      6349
;  :arith-assert-upper      3943
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1015
;  :binary-propagations     11
;  :conflicts               1229
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19917
;  :mk-clause               12047
;  :num-allocs              15829774
;  :num-checks              557
;  :propagations            12115
;  :quant-instantiations    3172
;  :rlimit-count            534137)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3196
;  :arith-assert-lower      6349
;  :arith-assert-upper      3943
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1015
;  :binary-propagations     11
;  :conflicts               1229
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19917
;  :mk-clause               12047
;  :num-allocs              15829774
;  :num-checks              558
;  :propagations            12115
;  :quant-instantiations    3172
;  :rlimit-count            534150)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3196
;  :arith-assert-lower      6349
;  :arith-assert-upper      3943
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1015
;  :binary-propagations     11
;  :conflicts               1230
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19917
;  :mk-clause               12047
;  :num-allocs              15829774
;  :num-checks              559
;  :propagations            12115
;  :quant-instantiations    3172
;  :rlimit-count            534198)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42546
;  :arith-add-rows          1858
;  :arith-assert-diseq      3196
;  :arith-assert-lower      6349
;  :arith-assert-upper      3943
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2133
;  :arith-offset-eqs        810
;  :arith-pivots            1015
;  :binary-propagations     11
;  :conflicts               1230
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19917
;  :mk-clause               12047
;  :num-allocs              15829774
;  :num-checks              560
;  :propagations            12115
;  :quant-instantiations    3172
;  :rlimit-count            534213)
; [eval] -1
(push) ; 8
; [then-branch: 173 | First:(Second:($t@76@01))[0] == -1 | live]
; [else-branch: 173 | First:(Second:($t@76@01))[0] != -1 | live]
(push) ; 9
; [then-branch: 173 | First:(Second:($t@76@01))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    0)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 173 | First:(Second:($t@76@01))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42557
;  :arith-add-rows          1861
;  :arith-assert-diseq      3198
;  :arith-assert-lower      6357
;  :arith-assert-upper      3947
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3432
;  :arith-fixed-eqs         2136
;  :arith-offset-eqs        810
;  :arith-pivots            1017
;  :binary-propagations     11
;  :conflicts               1230
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11814
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19939
;  :mk-clause               12063
;  :num-allocs              15829774
;  :num-checks              561
;  :propagations            12127
;  :quant-instantiations    3178
;  :rlimit-count            534651)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42560
;  :arith-add-rows          1862
;  :arith-assert-diseq      3198
;  :arith-assert-lower      6357
;  :arith-assert-upper      3947
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3432
;  :arith-fixed-eqs         2136
;  :arith-offset-eqs        810
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1231
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11838
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19947
;  :mk-clause               12071
;  :num-allocs              15829774
;  :num-checks              562
;  :propagations            12135
;  :quant-instantiations    3182
;  :rlimit-count            534934)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      0)
    0)))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42563
;  :arith-add-rows          1862
;  :arith-assert-diseq      3198
;  :arith-assert-lower      6357
;  :arith-assert-upper      3947
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3432
;  :arith-fixed-eqs         2136
;  :arith-offset-eqs        810
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1231
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11838
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19949
;  :mk-clause               12072
;  :num-allocs              15829774
;  :num-checks              563
;  :propagations            12135
;  :quant-instantiations    3182
;  :rlimit-count            535053)
; [eval] -1
(push) ; 8
; [then-branch: 174 | First:(Second:($t@76@01))[1] == -1 | live]
; [else-branch: 174 | First:(Second:($t@76@01))[1] != -1 | live]
(push) ; 9
; [then-branch: 174 | First:(Second:($t@76@01))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
    1)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 174 | First:(Second:($t@76@01))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42567
;  :arith-add-rows          1862
;  :arith-assert-diseq      3200
;  :arith-assert-lower      6364
;  :arith-assert-upper      3950
;  :arith-bound-prop        502
;  :arith-conflicts         111
;  :arith-eq-adapter        3435
;  :arith-fixed-eqs         2137
;  :arith-offset-eqs        810
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1231
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7423
;  :del-clause              11838
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19964
;  :mk-clause               12089
;  :num-allocs              15829774
;  :num-checks              564
;  :propagations            12142
;  :quant-instantiations    3186
;  :rlimit-count            535347)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      1)
    2))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42607
;  :arith-add-rows          1862
;  :arith-assert-diseq      3207
;  :arith-assert-lower      6373
;  :arith-assert-upper      3960
;  :arith-bound-prop        503
;  :arith-conflicts         112
;  :arith-eq-adapter        3440
;  :arith-fixed-eqs         2138
;  :arith-offset-eqs        810
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1241
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6721
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7432
;  :del-clause              11878
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19993
;  :mk-clause               12112
;  :num-allocs              15829774
;  :num-checks              565
;  :propagations            12171
;  :quant-instantiations    3190
;  :rlimit-count            535849)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      1)
    2)))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42608
;  :arith-add-rows          1862
;  :arith-assert-diseq      3207
;  :arith-assert-lower      6373
;  :arith-assert-upper      3960
;  :arith-bound-prop        503
;  :arith-conflicts         112
;  :arith-eq-adapter        3440
;  :arith-fixed-eqs         2138
;  :arith-offset-eqs        810
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1241
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6721
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7432
;  :del-clause              11878
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             19995
;  :mk-clause               12113
;  :num-allocs              15829774
;  :num-checks              566
;  :propagations            12171
;  :quant-instantiations    3190
;  :rlimit-count            535966)
; [eval] -1
(push) ; 8
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      0)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42698
;  :arith-add-rows          1864
;  :arith-assert-diseq      3224
;  :arith-assert-lower      6407
;  :arith-assert-upper      3978
;  :arith-bound-prop        503
;  :arith-conflicts         112
;  :arith-eq-adapter        3451
;  :arith-fixed-eqs         2143
;  :arith-offset-eqs        813
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1259
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6727
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7450
;  :del-clause              11932
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20044
;  :mk-clause               12167
;  :num-allocs              15829774
;  :num-checks              567
;  :propagations            12245
;  :quant-instantiations    3210
;  :rlimit-count            537137)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42698
;  :arith-add-rows          1864
;  :arith-assert-diseq      3224
;  :arith-assert-lower      6407
;  :arith-assert-upper      3978
;  :arith-bound-prop        503
;  :arith-conflicts         112
;  :arith-eq-adapter        3451
;  :arith-fixed-eqs         2143
;  :arith-offset-eqs        813
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1259
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6727
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7450
;  :del-clause              11932
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20045
;  :mk-clause               12167
;  :num-allocs              15829774
;  :num-checks              568
;  :propagations            12245
;  :quant-instantiations    3210
;  :rlimit-count            537274)
(push) ; 8
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42789
;  :arith-add-rows          1866
;  :arith-assert-diseq      3241
;  :arith-assert-lower      6441
;  :arith-assert-upper      3996
;  :arith-bound-prop        503
;  :arith-conflicts         112
;  :arith-eq-adapter        3462
;  :arith-fixed-eqs         2148
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1277
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6733
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7468
;  :del-clause              11986
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20094
;  :mk-clause               12221
;  :num-allocs              15829774
;  :num-checks              569
;  :propagations            12318
;  :quant-instantiations    3230
;  :rlimit-count            538439)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      0)
    0)))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42789
;  :arith-add-rows          1866
;  :arith-assert-diseq      3241
;  :arith-assert-lower      6441
;  :arith-assert-upper      3996
;  :arith-bound-prop        503
;  :arith-conflicts         112
;  :arith-eq-adapter        3462
;  :arith-fixed-eqs         2148
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1277
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6733
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7468
;  :del-clause              11986
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20095
;  :mk-clause               12221
;  :num-allocs              15829774
;  :num-checks              570
;  :propagations            12318
;  :quant-instantiations    3230
;  :rlimit-count            538569)
; [eval] -1
(push) ; 8
(assert (not (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
    2)
  (- 0 1))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42857
;  :arith-add-rows          1866
;  :arith-assert-diseq      3255
;  :arith-assert-lower      6458
;  :arith-assert-upper      4014
;  :arith-bound-prop        504
;  :arith-conflicts         113
;  :arith-eq-adapter        3476
;  :arith-fixed-eqs         2150
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1288
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7478
;  :del-clause              12038
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20153
;  :mk-clause               12273
;  :num-allocs              15829774
;  :num-checks              571
;  :propagations            12364
;  :quant-instantiations    3242
;  :rlimit-count            539276)
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
    2)
  (- 0 1)))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42857
;  :arith-add-rows          1866
;  :arith-assert-diseq      3255
;  :arith-assert-lower      6458
;  :arith-assert-upper      4015
;  :arith-bound-prop        504
;  :arith-conflicts         113
;  :arith-eq-adapter        3476
;  :arith-fixed-eqs         2150
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1289
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7478
;  :del-clause              12038
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20154
;  :mk-clause               12273
;  :num-allocs              15829774
;  :num-checks              572
;  :propagations            12364
;  :quant-instantiations    3242
;  :rlimit-count            539428)
(push) ; 8
; [then-branch: 175 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
; [else-branch: 175 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 175 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 175 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42861
;  :arith-add-rows          1866
;  :arith-assert-diseq      3255
;  :arith-assert-lower      6458
;  :arith-assert-upper      4015
;  :arith-bound-prop        504
;  :arith-conflicts         113
;  :arith-eq-adapter        3476
;  :arith-fixed-eqs         2150
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1289
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7478
;  :del-clause              12038
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20156
;  :mk-clause               12273
;  :num-allocs              15829774
;  :num-checks              573
;  :propagations            12364
;  :quant-instantiations    3244
;  :rlimit-count            539765)
; [eval] -1
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      1)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42870
;  :arith-add-rows          1867
;  :arith-assert-diseq      3259
;  :arith-assert-lower      6459
;  :arith-assert-upper      4018
;  :arith-bound-prop        504
;  :arith-conflicts         114
;  :arith-eq-adapter        3476
;  :arith-fixed-eqs         2150
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1291
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7479
;  :del-clause              12042
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20160
;  :mk-clause               12277
;  :num-allocs              15829774
;  :num-checks              574
;  :propagations            12380
;  :quant-instantiations    3245
;  :rlimit-count            539982)
; [then-branch: 176 | First:(Second:($t@76@01))[1] == -1 | dead]
; [else-branch: 176 | First:(Second:($t@76@01))[1] != -1 | live]
(push) ; 11
; [else-branch: 176 | First:(Second:($t@76@01))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
      1)
    (- 0 1))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42870
;  :arith-add-rows          1867
;  :arith-assert-diseq      3259
;  :arith-assert-lower      6459
;  :arith-assert-upper      4018
;  :arith-bound-prop        504
;  :arith-conflicts         114
;  :arith-eq-adapter        3476
;  :arith-fixed-eqs         2150
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1291
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7479
;  :del-clause              12042
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20160
;  :mk-clause               12277
;  :num-allocs              15829774
;  :num-checks              575
;  :propagations            12380
;  :quant-instantiations    3245
;  :rlimit-count            540021)
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42914
;  :arith-add-rows          1867
;  :arith-assert-diseq      3263
;  :arith-assert-lower      6462
;  :arith-assert-upper      4023
;  :arith-bound-prop        505
;  :arith-conflicts         115
;  :arith-eq-adapter        3480
;  :arith-fixed-eqs         2151
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1301
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6745
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7488
;  :del-clause              12065
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20185
;  :mk-clause               12300
;  :num-allocs              15829774
;  :num-checks              576
;  :propagations            12402
;  :quant-instantiations    3249
;  :rlimit-count            540471)
; [then-branch: 177 | -1 <= First:(Second:(Second:(Second:($t@76@01))))[2] | dead]
; [else-branch: 177 | !(-1 <= First:(Second:(Second:(Second:($t@76@01))))[2]) | live]
(push) ; 9
; [else-branch: 177 | !(-1 <= First:(Second:(Second:(Second:($t@76@01))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42914
;  :arith-add-rows          1867
;  :arith-assert-diseq      3263
;  :arith-assert-lower      6462
;  :arith-assert-upper      4023
;  :arith-bound-prop        505
;  :arith-conflicts         115
;  :arith-eq-adapter        3480
;  :arith-fixed-eqs         2151
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1301
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6745
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7488
;  :del-clause              12065
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20185
;  :mk-clause               12300
;  :num-allocs              15829774
;  :num-checks              577
;  :propagations            12402
;  :quant-instantiations    3249
;  :rlimit-count            540514)
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42958
;  :arith-add-rows          1867
;  :arith-assert-diseq      3267
;  :arith-assert-lower      6465
;  :arith-assert-upper      4028
;  :arith-bound-prop        506
;  :arith-conflicts         116
;  :arith-eq-adapter        3484
;  :arith-fixed-eqs         2152
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1311
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7497
;  :del-clause              12088
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20210
;  :mk-clause               12323
;  :num-allocs              15829774
;  :num-checks              578
;  :propagations            12424
;  :quant-instantiations    3253
;  :rlimit-count            540963)
; [then-branch: 178 | -1 <= First:(Second:(Second:(Second:($t@76@01))))[2] | dead]
; [else-branch: 178 | !(-1 <= First:(Second:(Second:(Second:($t@76@01))))[2]) | live]
(push) ; 9
; [else-branch: 178 | !(-1 <= First:(Second:(Second:(Second:($t@76@01))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 8
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42958
;  :arith-add-rows          1867
;  :arith-assert-diseq      3267
;  :arith-assert-lower      6465
;  :arith-assert-upper      4028
;  :arith-bound-prop        506
;  :arith-conflicts         116
;  :arith-eq-adapter        3484
;  :arith-fixed-eqs         2152
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1312
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7497
;  :del-clause              12088
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20210
;  :mk-clause               12323
;  :num-allocs              15829774
;  :num-checks              579
;  :propagations            12424
;  :quant-instantiations    3253
;  :rlimit-count            541039)
(push) ; 8
; [then-branch: 179 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
; [else-branch: 179 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 179 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42962
;  :arith-add-rows          1867
;  :arith-assert-diseq      3267
;  :arith-assert-lower      6465
;  :arith-assert-upper      4028
;  :arith-bound-prop        506
;  :arith-conflicts         116
;  :arith-eq-adapter        3484
;  :arith-fixed-eqs         2152
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1312
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7497
;  :del-clause              12088
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20212
;  :mk-clause               12323
;  :num-allocs              15829774
;  :num-checks              580
;  :propagations            12424
;  :quant-instantiations    3255
;  :rlimit-count            541328)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 179 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42975
;  :arith-add-rows          1868
;  :arith-assert-diseq      3271
;  :arith-assert-lower      6466
;  :arith-assert-upper      4031
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3484
;  :arith-fixed-eqs         2152
;  :arith-offset-eqs        816
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1314
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7498
;  :del-clause              12092
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20218
;  :mk-clause               12327
;  :num-allocs              15829774
;  :num-checks              581
;  :propagations            12440
;  :quant-instantiations    3258
;  :rlimit-count            541851)
; [then-branch: 180 | First:(Second:($t@76@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | dead]
; [else-branch: 180 | !(First:(Second:($t@76@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
(push) ; 9
; [else-branch: 180 | !(First:(Second:($t@76@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@76@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@76@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) diz@17@01 globals@18@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 7
(push) ; 7
; [else-branch: 125 | min_advance__39@59@01 == -1]
(assert (= min_advance__39@59@01 (- 0 1)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 68 | !(First:(Second:($t@57@01))[1] != -1 && First:(Second:($t@57@01))[0] != -1)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0)
        (- 0 1))))))
(pop) ; 6
; [eval] !(diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1)
; [eval] diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42975
;  :arith-add-rows          1874
;  :arith-assert-diseq      3271
;  :arith-assert-lower      6466
;  :arith-assert-upper      4031
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3484
;  :arith-fixed-eqs         2152
;  :arith-offset-eqs        816
;  :arith-pivots            1032
;  :binary-propagations     11
;  :conflicts               1314
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7498
;  :del-clause              12289
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20218
;  :mk-clause               12327
;  :num-allocs              15829774
;  :num-checks              582
;  :propagations            12440
;  :quant-instantiations    3258
;  :rlimit-count            542227)
; [eval] -1
(push) ; 6
; [then-branch: 181 | First:(Second:($t@57@01))[0] != -1 | live]
; [else-branch: 181 | First:(Second:($t@57@01))[0] == -1 | live]
(push) ; 7
; [then-branch: 181 | First:(Second:($t@57@01))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42979
;  :arith-add-rows          1874
;  :arith-assert-diseq      3273
;  :arith-assert-lower      6473
;  :arith-assert-upper      4034
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3487
;  :arith-fixed-eqs         2153
;  :arith-offset-eqs        816
;  :arith-pivots            1032
;  :binary-propagations     11
;  :conflicts               1314
;  :datatype-accessor-ax    1460
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2888
;  :datatype-splits         4646
;  :decisions               7498
;  :del-clause              12289
;  :final-checks            511
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20233
;  :mk-clause               12344
;  :num-allocs              15829774
;  :num-checks              583
;  :propagations            12447
;  :quant-instantiations    3261
;  :rlimit-count            542466)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 181 | First:(Second:($t@57@01))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (- 0 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43133
;  :arith-add-rows          1874
;  :arith-assert-diseq      3275
;  :arith-assert-lower      6479
;  :arith-assert-upper      4044
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3493
;  :arith-fixed-eqs         2158
;  :arith-offset-eqs        817
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1314
;  :datatype-accessor-ax    1463
;  :datatype-constructor-ax 6779
;  :datatype-occurs-check   2902
;  :datatype-splits         4668
;  :decisions               7530
;  :del-clause              12322
;  :final-checks            515
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          358
;  :mk-bool-var             20271
;  :mk-clause               12360
;  :num-allocs              15829774
;  :num-checks              584
;  :propagations            12466
;  :quant-instantiations    3262
;  :rlimit-count            543887)
(push) ; 6
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0)
        (- 0 1)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43415
;  :arith-add-rows          1879
;  :arith-assert-diseq      3286
;  :arith-assert-lower      6509
;  :arith-assert-upper      4070
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3514
;  :arith-fixed-eqs         2171
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1320
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12395
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20386
;  :mk-clause               12433
;  :num-allocs              15829774
;  :num-checks              585
;  :propagations            12509
;  :quant-instantiations    3272
;  :rlimit-count            546255
;  :time                    0.00)
; [then-branch: 182 | !(First:(Second:($t@57@01))[1] != -1 && First:(Second:($t@57@01))[0] != -1) | live]
; [else-branch: 182 | First:(Second:($t@57@01))[1] != -1 && First:(Second:($t@57@01))[0] != -1 | live]
(push) ; 6
; [then-branch: 182 | !(First:(Second:($t@57@01))[1] != -1 && First:(Second:($t@57@01))[0] != -1)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0)
        (- 0 1))))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@82@01 Int)
(push) ; 7
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 8
; [then-branch: 183 | 0 <= i@82@01 | live]
; [else-branch: 183 | !(0 <= i@82@01) | live]
(push) ; 9
; [then-branch: 183 | 0 <= i@82@01]
(assert (<= 0 i@82@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 183 | !(0 <= i@82@01)]
(assert (not (<= 0 i@82@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 184 | i@82@01 < |First:(Second:($t@57@01))| && 0 <= i@82@01 | live]
; [else-branch: 184 | !(i@82@01 < |First:(Second:($t@57@01))| && 0 <= i@82@01) | live]
(push) ; 9
; [then-branch: 184 | i@82@01 < |First:(Second:($t@57@01))| && 0 <= i@82@01]
(assert (and
  (<
    i@82@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
  (<= 0 i@82@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@82@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43417
;  :arith-add-rows          1879
;  :arith-assert-diseq      3286
;  :arith-assert-lower      6510
;  :arith-assert-upper      4071
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3514
;  :arith-fixed-eqs         2171
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1320
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12395
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20390
;  :mk-clause               12434
;  :num-allocs              15829774
;  :num-checks              586
;  :propagations            12509
;  :quant-instantiations    3272
;  :rlimit-count            546539)
; [eval] -1
(push) ; 10
; [then-branch: 185 | First:(Second:($t@57@01))[i@82@01] == -1 | live]
; [else-branch: 185 | First:(Second:($t@57@01))[i@82@01] != -1 | live]
(push) ; 11
; [then-branch: 185 | First:(Second:($t@57@01))[i@82@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@82@01)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 185 | First:(Second:($t@57@01))[i@82@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      i@82@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 12
(assert (not (>= i@82@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3288
;  :arith-assert-lower      6517
;  :arith-assert-upper      4074
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3517
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1320
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12395
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20405
;  :mk-clause               12451
;  :num-allocs              15829774
;  :num-checks              587
;  :propagations            12516
;  :quant-instantiations    3275
;  :rlimit-count            546842)
(push) ; 12
; [then-branch: 186 | 0 <= First:(Second:($t@57@01))[i@82@01] | live]
; [else-branch: 186 | !(0 <= First:(Second:($t@57@01))[i@82@01]) | live]
(push) ; 13
; [then-branch: 186 | 0 <= First:(Second:($t@57@01))[i@82@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@82@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@82@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3288
;  :arith-assert-lower      6517
;  :arith-assert-upper      4074
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3517
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1320
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12395
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20405
;  :mk-clause               12451
;  :num-allocs              15829774
;  :num-checks              588
;  :propagations            12516
;  :quant-instantiations    3275
;  :rlimit-count            546936)
; [eval] |diz.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 186 | !(0 <= First:(Second:($t@57@01))[i@82@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      i@82@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 184 | !(i@82@01 < |First:(Second:($t@57@01))| && 0 <= i@82@01)]
(assert (not
  (and
    (<
      i@82@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
    (<= 0 i@82@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i@82@01 Int)) (!
  (implies
    (and
      (<
        i@82@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
      (<= 0 i@82@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          i@82@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@82@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@82@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@82@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3290
;  :arith-assert-lower      6518
;  :arith-assert-upper      4075
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3518
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1321
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20417
;  :mk-clause               12471
;  :num-allocs              15829774
;  :num-checks              589
;  :propagations            12518
;  :quant-instantiations    3278
;  :rlimit-count            547424)
(assert (forall ((i@82@01 Int)) (!
  (implies
    (and
      (<
        i@82@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))
      (<= 0 i@82@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          i@82@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@82@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
            i@82@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    i@82@01))
  :qid |prog.l<no position>|)))
(declare-const $k@83@01 $Perm)
(assert ($Perm.isReadVar $k@83@01 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@83@01 $Perm.No) (< $Perm.No $k@83@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3291
;  :arith-assert-lower      6520
;  :arith-assert-upper      4076
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3519
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1322
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20422
;  :mk-clause               12473
;  :num-allocs              15829774
;  :num-checks              590
;  :propagations            12519
;  :quant-instantiations    3278
;  :rlimit-count            547949)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@49@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3291
;  :arith-assert-lower      6520
;  :arith-assert-upper      4076
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3519
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1322
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20422
;  :mk-clause               12473
;  :num-allocs              15829774
;  :num-checks              591
;  :propagations            12519
;  :quant-instantiations    3278
;  :rlimit-count            547960)
(assert (< $k@83@01 $k@49@01))
(assert (<= $Perm.No (- $k@49@01 $k@83@01)))
(assert (<= (- $k@49@01 $k@83@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@49@01 $k@83@01)) (not (= diz@17@01 $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 7
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3291
;  :arith-assert-lower      6522
;  :arith-assert-upper      4077
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3519
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1323
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20425
;  :mk-clause               12473
;  :num-allocs              15829774
;  :num-checks              592
;  :propagations            12519
;  :quant-instantiations    3278
;  :rlimit-count            548168)
(declare-const $k@84@01 $Perm)
(assert ($Perm.isReadVar $k@84@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@84@01 $Perm.No) (< $Perm.No $k@84@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3292
;  :arith-assert-lower      6524
;  :arith-assert-upper      4078
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3520
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1324
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20429
;  :mk-clause               12475
;  :num-allocs              15829774
;  :num-checks              593
;  :propagations            12520
;  :quant-instantiations    3278
;  :rlimit-count            548367)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@50@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3292
;  :arith-assert-lower      6524
;  :arith-assert-upper      4078
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3520
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1324
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20429
;  :mk-clause               12475
;  :num-allocs              15829774
;  :num-checks              594
;  :propagations            12520
;  :quant-instantiations    3278
;  :rlimit-count            548378)
(assert (< $k@84@01 $k@50@01))
(assert (<= $Perm.No (- $k@50@01 $k@84@01)))
(assert (<= (- $k@50@01 $k@84@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@50@01 $k@84@01)) (not (= diz@17@01 $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 7
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3292
;  :arith-assert-lower      6526
;  :arith-assert-upper      4079
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3520
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1325
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20432
;  :mk-clause               12475
;  :num-allocs              15829774
;  :num-checks              595
;  :propagations            12520
;  :quant-instantiations    3278
;  :rlimit-count            548586)
(push) ; 7
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3292
;  :arith-assert-lower      6526
;  :arith-assert-upper      4079
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3520
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1326
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20432
;  :mk-clause               12475
;  :num-allocs              15829774
;  :num-checks              596
;  :propagations            12520
;  :quant-instantiations    3278
;  :rlimit-count            548634)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3292
;  :arith-assert-lower      6526
;  :arith-assert-upper      4079
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3520
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1326
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20432
;  :mk-clause               12475
;  :num-allocs              15829774
;  :num-checks              597
;  :propagations            12520
;  :quant-instantiations    3278
;  :rlimit-count            548647)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3292
;  :arith-assert-lower      6526
;  :arith-assert-upper      4079
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3520
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1327
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20432
;  :mk-clause               12475
;  :num-allocs              15829774
;  :num-checks              598
;  :propagations            12520
;  :quant-instantiations    3278
;  :rlimit-count            548695)
(declare-const $k@85@01 $Perm)
(assert ($Perm.isReadVar $k@85@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@85@01 $Perm.No) (< $Perm.No $k@85@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3293
;  :arith-assert-lower      6528
;  :arith-assert-upper      4080
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1328
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20436
;  :mk-clause               12477
;  :num-allocs              15829774
;  :num-checks              599
;  :propagations            12521
;  :quant-instantiations    3278
;  :rlimit-count            548894)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@51@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3293
;  :arith-assert-lower      6528
;  :arith-assert-upper      4080
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1328
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20436
;  :mk-clause               12477
;  :num-allocs              15829774
;  :num-checks              600
;  :propagations            12521
;  :quant-instantiations    3278
;  :rlimit-count            548905)
(assert (< $k@85@01 $k@51@01))
(assert (<= $Perm.No (- $k@51@01 $k@85@01)))
(assert (<= (- $k@51@01 $k@85@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@51@01 $k@85@01)) (not (= diz@17@01 $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 7
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3293
;  :arith-assert-lower      6530
;  :arith-assert-upper      4081
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1329
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20439
;  :mk-clause               12477
;  :num-allocs              15829774
;  :num-checks              601
;  :propagations            12521
;  :quant-instantiations    3278
;  :rlimit-count            549113)
(push) ; 7
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3293
;  :arith-assert-lower      6530
;  :arith-assert-upper      4081
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1330
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20439
;  :mk-clause               12477
;  :num-allocs              15829774
;  :num-checks              602
;  :propagations            12521
;  :quant-instantiations    3278
;  :rlimit-count            549161)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3293
;  :arith-assert-lower      6530
;  :arith-assert-upper      4081
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1330
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20439
;  :mk-clause               12477
;  :num-allocs              15829774
;  :num-checks              603
;  :propagations            12521
;  :quant-instantiations    3278
;  :rlimit-count            549174)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3293
;  :arith-assert-lower      6530
;  :arith-assert-upper      4081
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1331
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20439
;  :mk-clause               12477
;  :num-allocs              15829774
;  :num-checks              604
;  :propagations            12521
;  :quant-instantiations    3278
;  :rlimit-count            549222)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43421
;  :arith-add-rows          1879
;  :arith-assert-diseq      3293
;  :arith-assert-lower      6530
;  :arith-assert-upper      4081
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2172
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1331
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20439
;  :mk-clause               12477
;  :num-allocs              15829774
;  :num-checks              605
;  :propagations            12521
;  :quant-instantiations    3278
;  :rlimit-count            549237)
; [eval] -1
(push) ; 7
; [then-branch: 187 | First:(Second:($t@57@01))[0] == -1 | live]
; [else-branch: 187 | First:(Second:($t@57@01))[0] != -1 | live]
(push) ; 8
; [then-branch: 187 | First:(Second:($t@57@01))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    0)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 187 | First:(Second:($t@57@01))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43426
;  :arith-add-rows          1879
;  :arith-assert-diseq      3295
;  :arith-assert-lower      6537
;  :arith-assert-upper      4084
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3524
;  :arith-fixed-eqs         2173
;  :arith-offset-eqs        820
;  :arith-pivots            1044
;  :binary-propagations     11
;  :conflicts               1331
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7587
;  :del-clause              12432
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20453
;  :mk-clause               12494
;  :num-allocs              15829774
;  :num-checks              606
;  :propagations            12529
;  :quant-instantiations    3282
;  :rlimit-count            549532)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43466
;  :arith-add-rows          1879
;  :arith-assert-diseq      3301
;  :arith-assert-lower      6545
;  :arith-assert-upper      4091
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3531
;  :arith-fixed-eqs         2174
;  :arith-offset-eqs        820
;  :arith-pivots            1047
;  :binary-propagations     11
;  :conflicts               1341
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6840
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7596
;  :del-clause              12474
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20476
;  :mk-clause               12519
;  :num-allocs              15829774
;  :num-checks              607
;  :propagations            12547
;  :quant-instantiations    3288
;  :rlimit-count            550080)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      0)
    0)))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43466
;  :arith-add-rows          1879
;  :arith-assert-diseq      3301
;  :arith-assert-lower      6545
;  :arith-assert-upper      4091
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3531
;  :arith-fixed-eqs         2174
;  :arith-offset-eqs        820
;  :arith-pivots            1047
;  :binary-propagations     11
;  :conflicts               1341
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6840
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7596
;  :del-clause              12474
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20477
;  :mk-clause               12520
;  :num-allocs              15829774
;  :num-checks              608
;  :propagations            12547
;  :quant-instantiations    3288
;  :rlimit-count            550196)
; [eval] -1
(push) ; 7
; [then-branch: 188 | First:(Second:($t@57@01))[1] == -1 | live]
; [else-branch: 188 | First:(Second:($t@57@01))[1] != -1 | live]
(push) ; 8
; [then-branch: 188 | First:(Second:($t@57@01))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 188 | First:(Second:($t@57@01))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43471
;  :arith-add-rows          1879
;  :arith-assert-diseq      3303
;  :arith-assert-lower      6552
;  :arith-assert-upper      4094
;  :arith-bound-prop        506
;  :arith-conflicts         117
;  :arith-eq-adapter        3534
;  :arith-fixed-eqs         2175
;  :arith-offset-eqs        820
;  :arith-pivots            1048
;  :binary-propagations     11
;  :conflicts               1341
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6840
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7596
;  :del-clause              12474
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20491
;  :mk-clause               12537
;  :num-allocs              15829774
;  :num-checks              609
;  :propagations            12555
;  :quant-instantiations    3292
;  :rlimit-count            550498)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    2))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43529
;  :arith-add-rows          1880
;  :arith-assert-diseq      3313
;  :arith-assert-lower      6562
;  :arith-assert-upper      4107
;  :arith-bound-prop        506
;  :arith-conflicts         118
;  :arith-eq-adapter        3547
;  :arith-fixed-eqs         2176
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1352
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7606
;  :del-clause              12542
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20531
;  :mk-clause               12588
;  :num-allocs              15829774
;  :num-checks              610
;  :propagations            12590
;  :quant-instantiations    3301
;  :rlimit-count            551162)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    2)))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43529
;  :arith-add-rows          1880
;  :arith-assert-diseq      3313
;  :arith-assert-lower      6562
;  :arith-assert-upper      4107
;  :arith-bound-prop        506
;  :arith-conflicts         118
;  :arith-eq-adapter        3547
;  :arith-fixed-eqs         2176
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1352
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7606
;  :del-clause              12542
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20532
;  :mk-clause               12589
;  :num-allocs              15829774
;  :num-checks              611
;  :propagations            12590
;  :quant-instantiations    3301
;  :rlimit-count            551278)
; [eval] -1
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43530
;  :arith-add-rows          1880
;  :arith-assert-diseq      3313
;  :arith-assert-lower      6562
;  :arith-assert-upper      4107
;  :arith-bound-prop        506
;  :arith-conflicts         118
;  :arith-eq-adapter        3547
;  :arith-fixed-eqs         2176
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1353
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7606
;  :del-clause              12542
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20533
;  :mk-clause               12589
;  :num-allocs              15829774
;  :num-checks              612
;  :propagations            12590
;  :quant-instantiations    3301
;  :rlimit-count            551392)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43531
;  :arith-add-rows          1880
;  :arith-assert-diseq      3313
;  :arith-assert-lower      6562
;  :arith-assert-upper      4107
;  :arith-bound-prop        506
;  :arith-conflicts         118
;  :arith-eq-adapter        3547
;  :arith-fixed-eqs         2176
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1353
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7606
;  :del-clause              12542
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20534
;  :mk-clause               12589
;  :num-allocs              15829774
;  :num-checks              613
;  :propagations            12590
;  :quant-instantiations    3301
;  :rlimit-count            551529)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43532
;  :arith-add-rows          1880
;  :arith-assert-diseq      3313
;  :arith-assert-lower      6562
;  :arith-assert-upper      4107
;  :arith-bound-prop        506
;  :arith-conflicts         118
;  :arith-eq-adapter        3547
;  :arith-fixed-eqs         2176
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1354
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7606
;  :del-clause              12542
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20535
;  :mk-clause               12589
;  :num-allocs              15829774
;  :num-checks              614
;  :propagations            12590
;  :quant-instantiations    3301
;  :rlimit-count            551637)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      0)
    0)))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43533
;  :arith-add-rows          1880
;  :arith-assert-diseq      3313
;  :arith-assert-lower      6562
;  :arith-assert-upper      4107
;  :arith-bound-prop        506
;  :arith-conflicts         118
;  :arith-eq-adapter        3547
;  :arith-fixed-eqs         2176
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1354
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7606
;  :del-clause              12542
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20536
;  :mk-clause               12589
;  :num-allocs              15829774
;  :num-checks              615
;  :propagations            12590
;  :quant-instantiations    3301
;  :rlimit-count            551768)
; [eval] -1
(push) ; 7
(assert (not (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2)
  (- 0 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43584
;  :arith-add-rows          1880
;  :arith-assert-diseq      3323
;  :arith-assert-lower      6566
;  :arith-assert-upper      4123
;  :arith-bound-prop        506
;  :arith-conflicts         120
;  :arith-eq-adapter        3562
;  :arith-fixed-eqs         2177
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1365
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6852
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7616
;  :del-clause              12585
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20576
;  :mk-clause               12632
;  :num-allocs              15829774
;  :num-checks              616
;  :propagations            12618
;  :quant-instantiations    3301
;  :rlimit-count            552185)
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2)
  (- 0 1)))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43584
;  :arith-add-rows          1880
;  :arith-assert-diseq      3323
;  :arith-assert-lower      6566
;  :arith-assert-upper      4124
;  :arith-bound-prop        506
;  :arith-conflicts         120
;  :arith-eq-adapter        3562
;  :arith-fixed-eqs         2177
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1366
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6852
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7616
;  :del-clause              12585
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20577
;  :mk-clause               12632
;  :num-allocs              15829774
;  :num-checks              617
;  :propagations            12618
;  :quant-instantiations    3301
;  :rlimit-count            552337)
(push) ; 7
; [then-branch: 189 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
; [else-branch: 189 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 189 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 189 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43588
;  :arith-add-rows          1880
;  :arith-assert-diseq      3323
;  :arith-assert-lower      6566
;  :arith-assert-upper      4124
;  :arith-bound-prop        506
;  :arith-conflicts         120
;  :arith-eq-adapter        3562
;  :arith-fixed-eqs         2177
;  :arith-offset-eqs        820
;  :arith-pivots            1051
;  :binary-propagations     11
;  :conflicts               1366
;  :datatype-accessor-ax    1470
;  :datatype-constructor-ax 6852
;  :datatype-occurs-check   2922
;  :datatype-splits         4699
;  :decisions               7616
;  :del-clause              12585
;  :final-checks            520
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          359
;  :mk-bool-var             20579
;  :mk-clause               12632
;  :num-allocs              15829774
;  :num-checks              618
;  :propagations            12618
;  :quant-instantiations    3303
;  :rlimit-count            552674)
; [eval] -1
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44009
;  :arith-add-rows          1882
;  :arith-assert-diseq      3339
;  :arith-assert-lower      6601
;  :arith-assert-upper      4163
;  :arith-bound-prop        506
;  :arith-conflicts         121
;  :arith-eq-adapter        3594
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        820
;  :arith-pivots            1058
;  :binary-propagations     11
;  :conflicts               1375
;  :datatype-accessor-ax    1489
;  :datatype-constructor-ax 6940
;  :datatype-occurs-check   2952
;  :datatype-splits         4767
;  :decisions               7701
;  :del-clause              12662
;  :final-checks            528
;  :interface-eqs           78
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          360
;  :mk-bool-var             20760
;  :mk-clause               12709
;  :num-allocs              15829774
;  :num-checks              619
;  :propagations            12678
;  :quant-instantiations    3319
;  :rlimit-count            555559
;  :time                    0.00)
(push) ; 10
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44358
;  :arith-add-rows          1884
;  :arith-assert-diseq      3348
;  :arith-assert-lower      6629
;  :arith-assert-upper      4193
;  :arith-bound-prop        506
;  :arith-conflicts         121
;  :arith-eq-adapter        3615
;  :arith-fixed-eqs         2204
;  :arith-offset-eqs        822
;  :arith-pivots            1065
;  :binary-propagations     11
;  :conflicts               1380
;  :datatype-accessor-ax    1501
;  :datatype-constructor-ax 7015
;  :datatype-occurs-check   2977
;  :datatype-splits         4817
;  :decisions               7774
;  :del-clause              12735
;  :final-checks            534
;  :interface-eqs           79
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          360
;  :mk-bool-var             20889
;  :mk-clause               12782
;  :num-allocs              15829774
;  :num-checks              620
;  :propagations            12728
;  :quant-instantiations    3327
;  :rlimit-count            558016
;  :time                    0.00)
; [then-branch: 190 | First:(Second:($t@57@01))[1] == -1 | live]
; [else-branch: 190 | First:(Second:($t@57@01))[1] != -1 | live]
(push) ; 10
; [then-branch: 190 | First:(Second:($t@57@01))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44360
;  :arith-add-rows          1884
;  :arith-assert-diseq      3348
;  :arith-assert-lower      6629
;  :arith-assert-upper      4193
;  :arith-bound-prop        506
;  :arith-conflicts         121
;  :arith-eq-adapter        3615
;  :arith-fixed-eqs         2204
;  :arith-offset-eqs        822
;  :arith-pivots            1065
;  :binary-propagations     11
;  :conflicts               1380
;  :datatype-accessor-ax    1501
;  :datatype-constructor-ax 7015
;  :datatype-occurs-check   2977
;  :datatype-splits         4817
;  :decisions               7774
;  :del-clause              12735
;  :final-checks            534
;  :interface-eqs           79
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          360
;  :mk-bool-var             20889
;  :mk-clause               12782
;  :num-allocs              15829774
;  :num-checks              621
;  :propagations            12728
;  :quant-instantiations    3327
;  :rlimit-count            558127)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 190 | First:(Second:($t@57@01))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    (- 0 1))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0)
        (- 0 1)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44408
;  :arith-add-rows          1884
;  :arith-assert-diseq      3354
;  :arith-assert-lower      6629
;  :arith-assert-upper      4197
;  :arith-bound-prop        506
;  :arith-conflicts         121
;  :arith-eq-adapter        3620
;  :arith-fixed-eqs         2204
;  :arith-offset-eqs        822
;  :arith-pivots            1065
;  :binary-propagations     11
;  :conflicts               1390
;  :datatype-accessor-ax    1501
;  :datatype-constructor-ax 7021
;  :datatype-occurs-check   2977
;  :datatype-splits         4817
;  :decisions               7783
;  :del-clause              12750
;  :final-checks            534
;  :interface-eqs           79
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          360
;  :mk-bool-var             20904
;  :mk-clause               12797
;  :num-allocs              15829774
;  :num-checks              622
;  :propagations            12739
;  :quant-instantiations    3333
;  :rlimit-count            558854)
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
          0)
        (- 0 1))))))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44408
;  :arith-add-rows          1884
;  :arith-assert-diseq      3354
;  :arith-assert-lower      6629
;  :arith-assert-upper      4197
;  :arith-bound-prop        506
;  :arith-conflicts         121
;  :arith-eq-adapter        3620
;  :arith-fixed-eqs         2204
;  :arith-offset-eqs        822
;  :arith-pivots            1065
;  :binary-propagations     11
;  :conflicts               1390
;  :datatype-accessor-ax    1501
;  :datatype-constructor-ax 7021
;  :datatype-occurs-check   2977
;  :datatype-splits         4817
;  :decisions               7783
;  :del-clause              12750
;  :final-checks            534
;  :interface-eqs           79
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          360
;  :mk-bool-var             20904
;  :mk-clause               12798
;  :num-allocs              15829774
;  :num-checks              623
;  :propagations            12739
;  :quant-instantiations    3333
;  :rlimit-count            559224)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44984
;  :arith-add-rows          1885
;  :arith-assert-diseq      3367
;  :arith-assert-lower      6659
;  :arith-assert-upper      4235
;  :arith-bound-prop        506
;  :arith-conflicts         124
;  :arith-eq-adapter        3650
;  :arith-fixed-eqs         2219
;  :arith-offset-eqs        822
;  :arith-pivots            1070
;  :binary-propagations     11
;  :conflicts               1404
;  :datatype-accessor-ax    1530
;  :datatype-constructor-ax 7144
;  :datatype-occurs-check   3027
;  :datatype-splits         4933
;  :decisions               7896
;  :del-clause              12821
;  :final-checks            547
;  :interface-eqs           82
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21133
;  :mk-clause               12869
;  :num-allocs              15829774
;  :num-checks              624
;  :propagations            12799
;  :quant-instantiations    3340
;  :rlimit-count            562602
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45142
;  :arith-add-rows          1887
;  :arith-assert-diseq      3369
;  :arith-assert-lower      6666
;  :arith-assert-upper      4247
;  :arith-bound-prop        506
;  :arith-conflicts         124
;  :arith-eq-adapter        3657
;  :arith-fixed-eqs         2225
;  :arith-offset-eqs        823
;  :arith-pivots            1075
;  :binary-propagations     11
;  :conflicts               1404
;  :datatype-accessor-ax    1533
;  :datatype-constructor-ax 7173
;  :datatype-occurs-check   3041
;  :datatype-splits         4956
;  :decisions               7927
;  :del-clause              12834
;  :final-checks            550
;  :interface-eqs           82
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21174
;  :mk-clause               12882
;  :num-allocs              15829774
;  :num-checks              625
;  :propagations            12817
;  :quant-instantiations    3341
;  :rlimit-count            564032)
; [then-branch: 191 | -1 <= First:(Second:(Second:(Second:($t@57@01))))[2] | live]
; [else-branch: 191 | !(-1 <= First:(Second:(Second:(Second:($t@57@01))))[2]) | live]
(push) ; 8
; [then-branch: 191 | -1 <= First:(Second:(Second:(Second:($t@57@01))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45143
;  :arith-add-rows          1887
;  :arith-assert-diseq      3369
;  :arith-assert-lower      6667
;  :arith-assert-upper      4247
;  :arith-bound-prop        506
;  :arith-conflicts         124
;  :arith-eq-adapter        3657
;  :arith-fixed-eqs         2226
;  :arith-offset-eqs        823
;  :arith-pivots            1075
;  :binary-propagations     11
;  :conflicts               1404
;  :datatype-accessor-ax    1533
;  :datatype-constructor-ax 7173
;  :datatype-occurs-check   3041
;  :datatype-splits         4956
;  :decisions               7927
;  :del-clause              12834
;  :final-checks            550
;  :interface-eqs           82
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21175
;  :mk-clause               12882
;  :num-allocs              15829774
;  :num-checks              626
;  :propagations            12817
;  :quant-instantiations    3341
;  :rlimit-count            564160)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 191 | !(-1 <= First:(Second:(Second:(Second:($t@57@01))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)
      (- 0 1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45184
;  :arith-add-rows          1888
;  :arith-assert-diseq      3374
;  :arith-assert-lower      6672
;  :arith-assert-upper      4253
;  :arith-bound-prop        506
;  :arith-conflicts         125
;  :arith-eq-adapter        3662
;  :arith-fixed-eqs         2229
;  :arith-offset-eqs        823
;  :arith-pivots            1076
;  :binary-propagations     11
;  :conflicts               1414
;  :datatype-accessor-ax    1533
;  :datatype-constructor-ax 7179
;  :datatype-occurs-check   3041
;  :datatype-splits         4956
;  :decisions               7936
;  :del-clause              12840
;  :final-checks            550
;  :interface-eqs           82
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21188
;  :mk-clause               12888
;  :num-allocs              15829774
;  :num-checks              627
;  :propagations            12829
;  :quant-instantiations    3344
;  :rlimit-count            564664)
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)
      (- 0 1)))))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45184
;  :arith-add-rows          1888
;  :arith-assert-diseq      3374
;  :arith-assert-lower      6672
;  :arith-assert-upper      4253
;  :arith-bound-prop        506
;  :arith-conflicts         125
;  :arith-eq-adapter        3662
;  :arith-fixed-eqs         2229
;  :arith-offset-eqs        823
;  :arith-pivots            1076
;  :binary-propagations     11
;  :conflicts               1414
;  :datatype-accessor-ax    1533
;  :datatype-constructor-ax 7179
;  :datatype-occurs-check   3041
;  :datatype-splits         4956
;  :decisions               7936
;  :del-clause              12840
;  :final-checks            550
;  :interface-eqs           82
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21189
;  :mk-clause               12889
;  :num-allocs              15829774
;  :num-checks              628
;  :propagations            12829
;  :quant-instantiations    3344
;  :rlimit-count            564856)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45750
;  :arith-add-rows          1888
;  :arith-assert-diseq      3386
;  :arith-assert-lower      6697
;  :arith-assert-upper      4291
;  :arith-bound-prop        506
;  :arith-conflicts         128
;  :arith-eq-adapter        3688
;  :arith-fixed-eqs         2244
;  :arith-offset-eqs        823
;  :arith-pivots            1076
;  :binary-propagations     11
;  :conflicts               1429
;  :datatype-accessor-ax    1562
;  :datatype-constructor-ax 7302
;  :datatype-occurs-check   3091
;  :datatype-splits         5072
;  :decisions               8048
;  :del-clause              12903
;  :final-checks            563
;  :interface-eqs           85
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21410
;  :mk-clause               12952
;  :num-allocs              15829774
;  :num-checks              629
;  :propagations            12888
;  :quant-instantiations    3351
;  :rlimit-count            568150
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45908
;  :arith-add-rows          1890
;  :arith-assert-diseq      3388
;  :arith-assert-lower      6704
;  :arith-assert-upper      4303
;  :arith-bound-prop        506
;  :arith-conflicts         128
;  :arith-eq-adapter        3695
;  :arith-fixed-eqs         2250
;  :arith-offset-eqs        824
;  :arith-pivots            1081
;  :binary-propagations     11
;  :conflicts               1429
;  :datatype-accessor-ax    1565
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3105
;  :datatype-splits         5095
;  :decisions               8079
;  :del-clause              12916
;  :final-checks            566
;  :interface-eqs           85
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21450
;  :mk-clause               12965
;  :num-allocs              15829774
;  :num-checks              630
;  :propagations            12906
;  :quant-instantiations    3352
;  :rlimit-count            569578)
; [then-branch: 192 | -1 <= First:(Second:(Second:(Second:($t@57@01))))[2] | live]
; [else-branch: 192 | !(-1 <= First:(Second:(Second:(Second:($t@57@01))))[2]) | live]
(push) ; 8
; [then-branch: 192 | -1 <= First:(Second:(Second:(Second:($t@57@01))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45915
;  :arith-add-rows          1890
;  :arith-assert-diseq      3389
;  :arith-assert-lower      6709
;  :arith-assert-upper      4307
;  :arith-bound-prop        506
;  :arith-conflicts         128
;  :arith-eq-adapter        3698
;  :arith-fixed-eqs         2251
;  :arith-offset-eqs        824
;  :arith-pivots            1081
;  :binary-propagations     11
;  :conflicts               1430
;  :datatype-accessor-ax    1565
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3105
;  :datatype-splits         5095
;  :decisions               8079
;  :del-clause              12916
;  :final-checks            566
;  :interface-eqs           85
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21462
;  :mk-clause               12974
;  :num-allocs              15829774
;  :num-checks              631
;  :propagations            12912
;  :quant-instantiations    3356
;  :rlimit-count            569888)
(push) ; 9
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45915
;  :arith-add-rows          1890
;  :arith-assert-diseq      3389
;  :arith-assert-lower      6709
;  :arith-assert-upper      4307
;  :arith-bound-prop        506
;  :arith-conflicts         128
;  :arith-eq-adapter        3698
;  :arith-fixed-eqs         2251
;  :arith-offset-eqs        824
;  :arith-pivots            1081
;  :binary-propagations     11
;  :conflicts               1431
;  :datatype-accessor-ax    1565
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3105
;  :datatype-splits         5095
;  :decisions               8079
;  :del-clause              12916
;  :final-checks            566
;  :interface-eqs           85
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21462
;  :mk-clause               12974
;  :num-allocs              15829774
;  :num-checks              632
;  :propagations            12912
;  :quant-instantiations    3356
;  :rlimit-count            569936)
(pop) ; 8
(push) ; 8
; [else-branch: 192 | !(-1 <= First:(Second:(Second:(Second:($t@57@01))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45926
;  :arith-add-rows          1890
;  :arith-assert-diseq      3392
;  :arith-assert-lower      6713
;  :arith-assert-upper      4316
;  :arith-bound-prop        506
;  :arith-conflicts         129
;  :arith-eq-adapter        3702
;  :arith-fixed-eqs         2253
;  :arith-offset-eqs        824
;  :arith-pivots            1081
;  :binary-propagations     11
;  :conflicts               1432
;  :datatype-accessor-ax    1565
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3105
;  :datatype-splits         5095
;  :decisions               8079
;  :del-clause              12937
;  :final-checks            566
;  :interface-eqs           85
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21478
;  :mk-clause               12986
;  :num-allocs              15829774
;  :num-checks              633
;  :propagations            12924
;  :quant-instantiations    3361
;  :rlimit-count            570484)
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45926
;  :arith-add-rows          1890
;  :arith-assert-diseq      3392
;  :arith-assert-lower      6713
;  :arith-assert-upper      4316
;  :arith-bound-prop        506
;  :arith-conflicts         129
;  :arith-eq-adapter        3702
;  :arith-fixed-eqs         2253
;  :arith-offset-eqs        824
;  :arith-pivots            1081
;  :binary-propagations     11
;  :conflicts               1433
;  :datatype-accessor-ax    1565
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3105
;  :datatype-splits         5095
;  :decisions               8079
;  :del-clause              12937
;  :final-checks            566
;  :interface-eqs           85
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21478
;  :mk-clause               12987
;  :num-allocs              15829774
;  :num-checks              634
;  :propagations            12924
;  :quant-instantiations    3361
;  :rlimit-count            570859)
(push) ; 7
; [then-branch: 193 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
; [else-branch: 193 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 193 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45930
;  :arith-add-rows          1890
;  :arith-assert-diseq      3392
;  :arith-assert-lower      6713
;  :arith-assert-upper      4316
;  :arith-bound-prop        506
;  :arith-conflicts         129
;  :arith-eq-adapter        3702
;  :arith-fixed-eqs         2253
;  :arith-offset-eqs        824
;  :arith-pivots            1081
;  :binary-propagations     11
;  :conflicts               1433
;  :datatype-accessor-ax    1565
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3105
;  :datatype-splits         5095
;  :decisions               8079
;  :del-clause              12937
;  :final-checks            566
;  :interface-eqs           85
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21480
;  :mk-clause               12987
;  :num-allocs              15829774
;  :num-checks              635
;  :propagations            12924
;  :quant-instantiations    3363
;  :rlimit-count            571148)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 193 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46350
;  :arith-add-rows          1892
;  :arith-assert-diseq      3405
;  :arith-assert-lower      6740
;  :arith-assert-upper      4351
;  :arith-bound-prop        507
;  :arith-conflicts         130
;  :arith-eq-adapter        3729
;  :arith-fixed-eqs         2265
;  :arith-offset-eqs        824
;  :arith-pivots            1088
;  :binary-propagations     11
;  :conflicts               1442
;  :datatype-accessor-ax    1584
;  :datatype-constructor-ax 7419
;  :datatype-occurs-check   3135
;  :datatype-splits         5163
;  :decisions               8164
;  :del-clause              13004
;  :final-checks            574
;  :interface-eqs           87
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21649
;  :mk-clause               13054
;  :num-allocs              15829774
;  :num-checks              636
;  :propagations            12981
;  :quant-instantiations    3377
;  :rlimit-count            574281
;  :time                    0.00)
(push) ; 8
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46508
;  :arith-add-rows          1894
;  :arith-assert-diseq      3407
;  :arith-assert-lower      6747
;  :arith-assert-upper      4363
;  :arith-bound-prop        507
;  :arith-conflicts         130
;  :arith-eq-adapter        3736
;  :arith-fixed-eqs         2271
;  :arith-offset-eqs        825
;  :arith-pivots            1093
;  :binary-propagations     11
;  :conflicts               1442
;  :datatype-accessor-ax    1587
;  :datatype-constructor-ax 7448
;  :datatype-occurs-check   3149
;  :datatype-splits         5186
;  :decisions               8195
;  :del-clause              13018
;  :final-checks            577
;  :interface-eqs           87
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21689
;  :mk-clause               13068
;  :num-allocs              15829774
;  :num-checks              637
;  :propagations            13000
;  :quant-instantiations    3378
;  :rlimit-count            575906
;  :time                    0.00)
; [then-branch: 194 | First:(Second:($t@57@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))) | live]
; [else-branch: 194 | !(First:(Second:($t@57@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 194 | First:(Second:($t@57@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46518
;  :arith-add-rows          1894
;  :arith-assert-diseq      3408
;  :arith-assert-lower      6751
;  :arith-assert-upper      4367
;  :arith-bound-prop        507
;  :arith-conflicts         130
;  :arith-eq-adapter        3739
;  :arith-fixed-eqs         2271
;  :arith-offset-eqs        825
;  :arith-pivots            1093
;  :binary-propagations     11
;  :conflicts               1443
;  :datatype-accessor-ax    1587
;  :datatype-constructor-ax 7448
;  :datatype-occurs-check   3149
;  :datatype-splits         5186
;  :decisions               8195
;  :del-clause              13018
;  :final-checks            577
;  :interface-eqs           87
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21703
;  :mk-clause               13077
;  :num-allocs              15829774
;  :num-checks              638
;  :propagations            13005
;  :quant-instantiations    3384
;  :rlimit-count            576438)
(push) ; 9
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46518
;  :arith-add-rows          1894
;  :arith-assert-diseq      3408
;  :arith-assert-lower      6751
;  :arith-assert-upper      4367
;  :arith-bound-prop        507
;  :arith-conflicts         130
;  :arith-eq-adapter        3739
;  :arith-fixed-eqs         2271
;  :arith-offset-eqs        825
;  :arith-pivots            1093
;  :binary-propagations     11
;  :conflicts               1444
;  :datatype-accessor-ax    1587
;  :datatype-constructor-ax 7448
;  :datatype-occurs-check   3149
;  :datatype-splits         5186
;  :decisions               8195
;  :del-clause              13018
;  :final-checks            577
;  :interface-eqs           87
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21703
;  :mk-clause               13077
;  :num-allocs              15829774
;  :num-checks              639
;  :propagations            13005
;  :quant-instantiations    3384
;  :rlimit-count            576486)
(pop) ; 8
(push) ; 8
; [else-branch: 194 | !(First:(Second:($t@57@01))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@47@01))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46526
;  :arith-add-rows          1894
;  :arith-assert-diseq      3411
;  :arith-assert-lower      6751
;  :arith-assert-upper      4372
;  :arith-bound-prop        507
;  :arith-conflicts         130
;  :arith-eq-adapter        3741
;  :arith-fixed-eqs         2271
;  :arith-offset-eqs        825
;  :arith-pivots            1093
;  :binary-propagations     11
;  :conflicts               1445
;  :datatype-accessor-ax    1587
;  :datatype-constructor-ax 7448
;  :datatype-occurs-check   3149
;  :datatype-splits         5186
;  :decisions               8195
;  :del-clause              13047
;  :final-checks            577
;  :interface-eqs           87
;  :max-generation          4
;  :max-memory              5.53
;  :memory                  5.43
;  :minimized-lits          361
;  :mk-bool-var             21718
;  :mk-clause               13097
;  :num-allocs              15829774
;  :num-checks              640
;  :propagations            13016
;  :quant-instantiations    3392
;  :rlimit-count            577178)
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@57@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) diz@17@01 globals@18@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 6
(push) ; 6
; [else-branch: 182 | First:(Second:($t@57@01))[1] != -1 && First:(Second:($t@57@01))[0] != -1]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@57@01)))
        0)
      (- 0 1)))))
(pop) ; 6
(pop) ; 5
; [eval] !true
; [then-branch: 195 | False | dead]
; [else-branch: 195 | True | live]
(push) ; 5
; [else-branch: 195 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
