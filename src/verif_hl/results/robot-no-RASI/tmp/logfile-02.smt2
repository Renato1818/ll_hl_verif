(get-info :version)
; (:version "4.8.6")
; Started: 2024-06-21 14:46:57
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Sensor<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Controller<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Sensor_m: Ref]
(declare-fun $FVF.domain_Sensor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Sensor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Sensor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Sensor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Sensor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Sensor_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Controller_m: Ref]
(declare-fun $FVF.domain_Controller_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Controller_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Controller_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Controller_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Controller_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Controller_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Sensor_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Sensor_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Controller_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Controller_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Sensor<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Controller<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Sensor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Controller<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Sensor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Sensor_m vs) ($FVF.domain_Sensor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Sensor_m vs))
            (= ($FVF.lookup_Sensor_m vs x) ($FVF.lookup_Sensor_m ws x)))
          :pattern (($FVF.lookup_Sensor_m vs x) ($FVF.lookup_Sensor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Sensor_m pm r))
    :pattern ($FVF.perm_Sensor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Sensor_m f r) true)
    :pattern ($FVF.loc_Sensor_m f r))))
; /field_value_functions_axioms.smt2 [Controller_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Controller_m vs) ($FVF.domain_Controller_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Controller_m vs))
            (= ($FVF.lookup_Controller_m vs x) ($FVF.lookup_Controller_m ws x)))
          :pattern (($FVF.lookup_Controller_m vs x) ($FVF.lookup_Controller_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Controller_m pm r))
    :pattern ($FVF.perm_Controller_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Controller_m f r) true)
    :pattern ($FVF.loc_Controller_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@0@00 vals@1@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (let ((result@2@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))) (implies
    (and (not (= diz@0@00 $Ref.null)) (= (Seq_length vals@1@00) 3))
    (and
      (and
        (and
          (or
            (< (Seq_index vals@1@00 0) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 0)))
          (or
            (< (Seq_index vals@1@00 1) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 1))))
        (or
          (< (Seq_index vals@1@00 2) (- 0 1))
          (<= result@2@00 (Seq_index vals@1@00 2))))
      (and
        (implies
          (and
            (and
              (< (Seq_index vals@1@00 0) (- 0 1))
              (< (Seq_index vals@1@00 1) (- 0 1)))
            (< (Seq_index vals@1@00 2) (- 0 1)))
          (= result@2@00 0))
        (implies
          (or
            (or
              (<= (- 0 1) (Seq_index vals@1@00 0))
              (<= (- 0 1) (Seq_index vals@1@00 1)))
            (<= (- 0 1) (Seq_index vals@1@00 2)))
          (or
            (or
              (and
                (<= (- 0 1) (Seq_index vals@1@00 0))
                (= result@2@00 (Seq_index vals@1@00 0)))
              (and
                (<= (- 0 1) (Seq_index vals@1@00 1))
                (= result@2@00 (Seq_index vals@1@00 1))))
            (and
              (<= (- 0 1) (Seq_index vals@1@00 2))
              (= result@2@00 (Seq_index vals@1@00 2)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00)
    (instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@3@00 u@4@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (let ((result@5@00 (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))) (=
    result@5@00
    (or (= t@3@00 u@4@00) (= (directSuperclass<TYPE> t@3@00) u@4@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (= (new_frac%limited s@$ x@6@00) (new_frac s@$ x@6@00))
  :pattern ((new_frac s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (new_frac%stateless x@6@00)
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (let ((result@7@00 (new_frac%limited s@$ x@6@00))) (implies
    (and (< $Perm.No x@6@00) (<= x@6@00 $Perm.Write))
    (= (frac_val<Perm> result@7@00) x@6@00)))
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@8@00) (new_zfrac s@$ x@8@00))
  :pattern ((new_zfrac s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (new_zfrac%stateless x@8@00)
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (let ((result@9@00 (new_zfrac%limited s@$ x@8@00))) (implies
    (and (<= $Perm.No x@8@00) (<= x@8@00 $Perm.Write))
    (= (zfrac_val<Perm> result@9@00) x@8@00)))
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Sensor_run_EncodedGlobalVariables ----------
(declare-const diz@0@02 $Ref)
(declare-const globals@1@02 $Ref)
(declare-const diz@2@02 $Ref)
(declare-const globals@3@02 $Ref)
(push) ; 1
(declare-const $t@4@02 $Snap)
(assert (= $t@4@02 ($Snap.combine ($Snap.first $t@4@02) ($Snap.second $t@4@02))))
(assert (= ($Snap.first $t@4@02) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@2@02 $Ref.null)))
(assert (=
  ($Snap.second $t@4@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@4@02))
    ($Snap.second ($Snap.second $t@4@02)))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            16
;  :arith-assert-lower   1
;  :arith-assert-upper   1
;  :arith-eq-adapter     1
;  :binary-propagations  11
;  :datatype-accessor-ax 3
;  :max-generation       1
;  :max-memory           3.96
;  :memory               3.71
;  :mk-bool-var          251
;  :mk-clause            1
;  :num-allocs           3288951
;  :num-checks           1
;  :propagations         11
;  :quant-instantiations 1
;  :rlimit-count         110123)
(assert (=
  ($Snap.second ($Snap.second $t@4@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@4@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@4@02))) $Snap.unit))
; [eval] diz.Sensor_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@4@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))
(declare-const $k@5@02 $Perm)
(assert ($Perm.isReadVar $k@5@02 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@5@02 $Perm.No) (< $Perm.No $k@5@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            28
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   2
;  :arith-eq-adapter     2
;  :binary-propagations  11
;  :conflicts            1
;  :datatype-accessor-ax 5
;  :max-generation       1
;  :max-memory           3.96
;  :memory               3.80
;  :mk-bool-var          260
;  :mk-clause            3
;  :num-allocs           3404491
;  :num-checks           2
;  :propagations         12
;  :quant-instantiations 2
;  :rlimit-count         110695)
(assert (<= $Perm.No $k@5@02))
(assert (<= $k@5@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@5@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_sensor == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@5@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            34
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  11
;  :conflicts            2
;  :datatype-accessor-ax 6
;  :max-generation       1
;  :max-memory           3.96
;  :memory               3.80
;  :mk-bool-var          263
;  :mk-clause            3
;  :num-allocs           3404491
;  :num-checks           3
;  :propagations         12
;  :quant-instantiations 2
;  :rlimit-count         110968)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))
  diz@2@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            41
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  11
;  :conflicts            2
;  :datatype-accessor-ax 7
;  :max-generation       1
;  :max-memory           3.96
;  :memory               3.80
;  :mk-bool-var          266
;  :mk-clause            3
;  :num-allocs           3404491
;  :num-checks           4
;  :propagations         12
;  :quant-instantiations 3
;  :rlimit-count         111219)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))
  $Snap.unit))
; [eval] !diz.Sensor_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@6@02 $Snap)
(assert (= $t@6@02 ($Snap.combine ($Snap.first $t@6@02) ($Snap.second $t@6@02))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               59
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     11
;  :conflicts               2
;  :datatype-accessor-ax    8
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   2
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            2
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             274
;  :mk-clause               3
;  :num-allocs              3404491
;  :num-checks              6
;  :propagations            12
;  :quant-instantiations    5
;  :rlimit-count            111868)
(assert (=
  ($Snap.second $t@6@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@02))
    ($Snap.second ($Snap.second $t@6@02)))))
(assert (= ($Snap.first ($Snap.second $t@6@02)) $Snap.unit))
; [eval] diz.Sensor_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@6@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@6@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@02))))))
(declare-const $k@7@02 $Perm)
(assert ($Perm.isReadVar $k@7@02 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@7@02 $Perm.No) (< $Perm.No $k@7@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               71
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               3
;  :datatype-accessor-ax    10
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   2
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            2
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             283
;  :mk-clause               5
;  :num-allocs              3404491
;  :num-checks              7
;  :propagations            13
;  :quant-instantiations    6
;  :rlimit-count            112429)
(assert (<= $Perm.No $k@7@02))
(assert (<= $k@7@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@7@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@6@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@6@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@02)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@02)))) $Snap.unit))
; [eval] diz.Sensor_m.Main_sensor == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@7@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               77
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    11
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   2
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            2
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             286
;  :mk-clause               5
;  :num-allocs              3404491
;  :num-checks              8
;  :propagations            13
;  :quant-instantiations    6
;  :rlimit-count            112692
;  :time                    0.01)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@6@02))))
  diz@2@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@02))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               85
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    12
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   2
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            2
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.80
;  :mk-bool-var             289
;  :mk-clause               5
;  :num-allocs              3404491
;  :num-checks              9
;  :propagations            13
;  :quant-instantiations    7
;  :rlimit-count            112932)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@02)))))
  $Snap.unit))
; [eval] !diz.Sensor_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@02))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_1__2: Ref
(declare-const __flatten_1__2@8@02 $Ref)
; [exec]
; var __flatten_2__3: Seq[Int]
(declare-const __flatten_2__3@9@02 Seq<Int>)
; [exec]
; var __flatten_3__4: Ref
(declare-const __flatten_3__4@10@02 $Ref)
; [exec]
; var __flatten_4__5: Ref
(declare-const __flatten_4__5@11@02 $Ref)
; [exec]
; var __flatten_5__6: Seq[Int]
(declare-const __flatten_5__6@12@02 Seq<Int>)
; [exec]
; var __flatten_6__7: Ref
(declare-const __flatten_6__7@13@02 $Ref)
; [exec]
; var __flatten_7__8: Int
(declare-const __flatten_7__8@14@02 Int)
; [exec]
; var __flatten_9__9: Ref
(declare-const __flatten_9__9@15@02 $Ref)
; [exec]
; var __flatten_10__10: Ref
(declare-const __flatten_10__10@16@02 $Ref)
; [exec]
; var __flatten_11__11: Seq[Int]
(declare-const __flatten_11__11@17@02 Seq<Int>)
; [exec]
; var __flatten_12__12: Ref
(declare-const __flatten_12__12@18@02 $Ref)
; [exec]
; var __flatten_13__13: Ref
(declare-const __flatten_13__13@19@02 $Ref)
; [exec]
; var __flatten_14__14: Seq[Int]
(declare-const __flatten_14__14@20@02 Seq<Int>)
; [exec]
; var __flatten_15__15: Ref
(declare-const __flatten_15__15@21@02 $Ref)
; [exec]
; var __flatten_16__16: Ref
(declare-const __flatten_16__16@22@02 $Ref)
; [exec]
; var __flatten_17__17: Seq[Int]
(declare-const __flatten_17__17@23@02 Seq<Int>)
; [exec]
; var __flatten_18__18: Ref
(declare-const __flatten_18__18@24@02 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Sensor_m, globals), write)
(declare-const $t@25@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Sensor_m, globals), write)
(assert (= $t@25@02 ($Snap.combine ($Snap.first $t@25@02) ($Snap.second $t@25@02))))
(assert (= ($Snap.first $t@25@02) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@25@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@25@02))
    ($Snap.second ($Snap.second $t@25@02)))))
(assert (= ($Snap.first ($Snap.second $t@25@02)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@25@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@25@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@25@02))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@25@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@26@02 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@26@02 | live]
; [else-branch: 0 | !(0 <= i@26@02) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@26@02]
(assert (<= 0 i@26@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@26@02)]
(assert (not (<= 0 i@26@02)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@26@02 < |First:(Second:(Second:(Second:($t@25@02))))| && 0 <= i@26@02 | live]
; [else-branch: 1 | !(i@26@02 < |First:(Second:(Second:(Second:($t@25@02))))| && 0 <= i@26@02) | live]
(push) ; 5
; [then-branch: 1 | i@26@02 < |First:(Second:(Second:(Second:($t@25@02))))| && 0 <= i@26@02]
(assert (and
  (<
    i@26@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
  (<= 0 i@26@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@26@02 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               143
;  :arith-assert-diseq      4
;  :arith-assert-lower      12
;  :arith-assert-upper      8
;  :arith-eq-adapter        7
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             321
;  :mk-clause               11
;  :num-allocs              3523009
;  :num-checks              11
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            114611)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@25@02))))[i@26@02] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@25@02))))[i@26@02] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@25@02))))[i@26@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    i@26@02)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@25@02))))[i@26@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      i@26@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@26@02 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               143
;  :arith-assert-diseq      4
;  :arith-assert-lower      12
;  :arith-assert-upper      8
;  :arith-eq-adapter        7
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             322
;  :mk-clause               11
;  :num-allocs              3523009
;  :num-checks              12
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            114786)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@25@02))))[i@26@02] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@25@02))))[i@26@02]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@25@02))))[i@26@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    i@26@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@26@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               143
;  :arith-assert-diseq      5
;  :arith-assert-lower      15
;  :arith-assert-upper      8
;  :arith-eq-adapter        8
;  :binary-propagations     11
;  :conflicts               4
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             325
;  :mk-clause               12
;  :num-allocs              3523009
;  :num-checks              13
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            114910)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@25@02))))[i@26@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      i@26@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@26@02 < |First:(Second:(Second:(Second:($t@25@02))))| && 0 <= i@26@02)]
(assert (not
  (and
    (<
      i@26@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    (<= 0 i@26@02))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@26@02 Int)) (!
  (implies
    (and
      (<
        i@26@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      (<= 0 i@26@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
          i@26@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
            i@26@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
            i@26@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    i@26@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))
(declare-const $k@27@02 $Perm)
(assert ($Perm.isReadVar $k@27@02 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@27@02 $Perm.No) (< $Perm.No $k@27@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               154
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      9
;  :arith-eq-adapter        9
;  :binary-propagations     11
;  :conflicts               5
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             333
;  :mk-clause               14
;  :num-allocs              3523009
;  :num-checks              14
;  :propagations            16
;  :quant-instantiations    13
;  :rlimit-count            115861)
(assert (<= $Perm.No $k@27@02))
(assert (<= $k@27@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@27@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
  $Snap.unit))
; [eval] 0 < diz.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@27@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               160
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     11
;  :conflicts               6
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             336
;  :mk-clause               14
;  :num-allocs              3523009
;  :num-checks              15
;  :propagations            16
;  :quant-instantiations    13
;  :rlimit-count            116194)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
(declare-const $k@28@02 $Perm)
(assert ($Perm.isReadVar $k@28@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@28@02 $Perm.No) (< $Perm.No $k@28@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               166
;  :arith-assert-diseq      7
;  :arith-assert-lower      20
;  :arith-assert-upper      11
;  :arith-eq-adapter        10
;  :binary-propagations     11
;  :conflicts               7
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             343
;  :mk-clause               16
;  :num-allocs              3523009
;  :num-checks              16
;  :propagations            17
;  :quant-instantiations    14
;  :rlimit-count            116705)
(declare-const $t@29@02 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@5@02)
    (=
      $t@29@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))
  (implies
    (< $Perm.No $k@28@02)
    (=
      $t@29@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))
(assert (<= $Perm.No (+ $k@5@02 $k@28@02)))
(assert (<= (+ $k@5@02 $k@28@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@5@02 $k@28@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))
  $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               176
;  :arith-assert-diseq      7
;  :arith-assert-lower      21
;  :arith-assert-upper      13
;  :arith-conflicts         1
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               8
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             351
;  :mk-clause               16
;  :num-allocs              3523009
;  :num-checks              17
;  :propagations            17
;  :quant-instantiations    15
;  :rlimit-count            117310)
(assert (not (= $t@29@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               182
;  :arith-assert-diseq      7
;  :arith-assert-lower      21
;  :arith-assert-upper      14
;  :arith-conflicts         2
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               9
;  :datatype-accessor-ax    26
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             354
;  :mk-clause               16
;  :num-allocs              3523009
;  :num-checks              18
;  :propagations            17
;  :quant-instantiations    15
;  :rlimit-count            117646)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               187
;  :arith-assert-diseq      7
;  :arith-assert-lower      21
;  :arith-assert-upper      15
;  :arith-conflicts         3
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               10
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             356
;  :mk-clause               16
;  :num-allocs              3523009
;  :num-checks              19
;  :propagations            17
;  :quant-instantiations    15
;  :rlimit-count            117947)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               187
;  :arith-assert-diseq      7
;  :arith-assert-lower      21
;  :arith-assert-upper      15
;  :arith-conflicts         3
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               10
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             356
;  :mk-clause               16
;  :num-allocs              3523009
;  :num-checks              20
;  :propagations            17
;  :quant-instantiations    15
;  :rlimit-count            117960)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@2@02 $t@29@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               187
;  :arith-assert-diseq      7
;  :arith-assert-lower      21
;  :arith-assert-upper      15
;  :arith-conflicts         3
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               11
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             357
;  :mk-clause               16
;  :num-allocs              3523009
;  :num-checks              21
;  :propagations            17
;  :quant-instantiations    15
;  :rlimit-count            118020)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))
(declare-const $k@30@02 $Perm)
(assert ($Perm.isReadVar $k@30@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@30@02 $Perm.No) (< $Perm.No $k@30@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               195
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      16
;  :arith-conflicts         3
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               12
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             364
;  :mk-clause               18
;  :num-allocs              3523009
;  :num-checks              22
;  :propagations            18
;  :quant-instantiations    16
;  :rlimit-count            118552)
(assert (<= $Perm.No $k@30@02))
(assert (<= $k@30@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@30@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               201
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      17
;  :arith-conflicts         3
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               13
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             367
;  :mk-clause               18
;  :num-allocs              3523009
;  :num-checks              23
;  :propagations            18
;  :quant-instantiations    16
;  :rlimit-count            118945)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               207
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      17
;  :arith-conflicts         3
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               14
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             370
;  :mk-clause               18
;  :num-allocs              3523009
;  :num-checks              24
;  :propagations            18
;  :quant-instantiations    17
;  :rlimit-count            119367)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               212
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      17
;  :arith-conflicts         3
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             371
;  :mk-clause               18
;  :num-allocs              3523009
;  :num-checks              25
;  :propagations            18
;  :quant-instantiations    17
;  :rlimit-count            119694)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               212
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      17
;  :arith-conflicts         3
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             371
;  :mk-clause               18
;  :num-allocs              3523009
;  :num-checks              26
;  :propagations            18
;  :quant-instantiations    17
;  :rlimit-count            119707)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               218
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      17
;  :arith-conflicts         3
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             373
;  :mk-clause               18
;  :num-allocs              3645006
;  :num-checks              27
;  :propagations            18
;  :quant-instantiations    17
;  :rlimit-count            120043)
; [eval] -1
(push) ; 3
; [then-branch: 4 | First:(Second:(Second:(Second:($t@25@02))))[0] == -1 | live]
; [else-branch: 4 | First:(Second:(Second:(Second:($t@25@02))))[0] != -1 | live]
(push) ; 4
; [then-branch: 4 | First:(Second:(Second:(Second:($t@25@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    0)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 4 | First:(Second:(Second:(Second:($t@25@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               218
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             379
;  :mk-clause               22
;  :num-allocs              3645006
;  :num-checks              28
;  :propagations            20
;  :quant-instantiations    18
;  :rlimit-count            120281)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               224
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              9
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             383
;  :mk-clause               23
;  :num-allocs              3645006
;  :num-checks              29
;  :propagations            20
;  :quant-instantiations    18
;  :rlimit-count            120718)
; [eval] -1
(push) ; 3
; [then-branch: 5 | First:(Second:(Second:(Second:($t@25@02))))[1] == -1 | live]
; [else-branch: 5 | First:(Second:(Second:(Second:($t@25@02))))[1] != -1 | live]
(push) ; 4
; [then-branch: 5 | First:(Second:(Second:(Second:($t@25@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    1)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | First:(Second:(Second:(Second:($t@25@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               224
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              9
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             389
;  :mk-clause               27
;  :num-allocs              3645006
;  :num-checks              30
;  :propagations            22
;  :quant-instantiations    19
;  :rlimit-count            120956)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               230
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              13
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             393
;  :mk-clause               28
;  :num-allocs              3645006
;  :num-checks              31
;  :propagations            22
;  :quant-instantiations    19
;  :rlimit-count            121403)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               236
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              13
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             396
;  :mk-clause               28
;  :num-allocs              3645006
;  :num-checks              32
;  :propagations            22
;  :quant-instantiations    19
;  :rlimit-count            121863)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              13
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             399
;  :mk-clause               28
;  :num-allocs              3645006
;  :num-checks              33
;  :propagations            22
;  :quant-instantiations    19
;  :rlimit-count            122318)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               248
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      20
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               16
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              13
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             402
;  :mk-clause               28
;  :num-allocs              3645006
;  :num-checks              34
;  :propagations            22
;  :quant-instantiations    19
;  :rlimit-count            122808)
(push) ; 3
; [then-branch: 6 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))) | live]
; [else-branch: 6 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))) | live]
(push) ; 4
; [then-branch: 6 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
(pop) ; 4
(push) ; 4
; [else-branch: 6 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               252
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      20
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               16
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   3
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              13
;  :final-checks            3
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             405
;  :mk-clause               28
;  :num-allocs              3645006
;  :num-checks              35
;  :propagations            22
;  :quant-instantiations    21
;  :rlimit-count            123165)
; [eval] -1
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               327
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      20
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               18
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   11
;  :datatype-splits         22
;  :decisions               28
;  :del-clause              15
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             431
;  :mk-clause               30
;  :num-allocs              3645006
;  :num-checks              36
;  :propagations            23
;  :quant-instantiations    21
;  :rlimit-count            123993)
(push) ; 6
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               402
;  :arith-assert-diseq      10
;  :arith-assert-lower      31
;  :arith-assert-upper      22
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               20
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   19
;  :datatype-splits         41
;  :decisions               50
;  :del-clause              21
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             462
;  :mk-clause               36
;  :num-allocs              3645006
;  :num-checks              37
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            124862
;  :time                    0.00)
; [then-branch: 7 | First:(Second:(Second:(Second:($t@25@02))))[1] == -1 | live]
; [else-branch: 7 | First:(Second:(Second:(Second:($t@25@02))))[1] != -1 | live]
(push) ; 6
; [then-branch: 7 | First:(Second:(Second:(Second:($t@25@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               403
;  :arith-assert-diseq      10
;  :arith-assert-lower      31
;  :arith-assert-upper      22
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               20
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   19
;  :datatype-splits         41
;  :decisions               50
;  :del-clause              21
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             462
;  :mk-clause               36
;  :num-allocs              3645006
;  :num-checks              38
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            124987)
; [eval] -1
(pop) ; 6
(push) ; 6
; [else-branch: 7 | First:(Second:(Second:(Second:($t@25@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      1)
    (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               409
;  :arith-assert-diseq      10
;  :arith-assert-lower      31
;  :arith-assert-upper      22
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               20
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   19
;  :datatype-splits         41
;  :decisions               50
;  :del-clause              21
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             465
;  :mk-clause               37
;  :num-allocs              3645006
;  :num-checks              39
;  :propagations            27
;  :quant-instantiations    22
;  :rlimit-count            125580)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               457
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      22
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               21
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 65
;  :datatype-occurs-check   25
;  :datatype-splits         50
;  :decisions               64
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             479
;  :mk-clause               38
;  :num-allocs              3645006
;  :num-checks              40
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            126313)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               504
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      23
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               22
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 78
;  :datatype-occurs-check   31
;  :datatype-splits         59
;  :decisions               78
;  :del-clause              23
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             493
;  :mk-clause               39
;  :num-allocs              3645006
;  :num-checks              41
;  :propagations            29
;  :quant-instantiations    24
;  :rlimit-count            127051)
; [then-branch: 8 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))[2] | live]
; [else-branch: 8 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))[2]) | live]
(push) ; 4
; [then-branch: 8 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      23
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               22
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 78
;  :datatype-occurs-check   31
;  :datatype-splits         59
;  :decisions               78
;  :del-clause              23
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             494
;  :mk-clause               39
;  :num-allocs              3645006
;  :num-checks              42
;  :propagations            29
;  :quant-instantiations    24
;  :rlimit-count            127199)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               511
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      23
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               22
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 78
;  :datatype-occurs-check   31
;  :datatype-splits         59
;  :decisions               78
;  :del-clause              23
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             497
;  :mk-clause               40
;  :num-allocs              3645006
;  :num-checks              43
;  :propagations            29
;  :quant-instantiations    24
;  :rlimit-count            127792)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               559
;  :arith-assert-diseq      10
;  :arith-assert-lower      35
;  :arith-assert-upper      25
;  :arith-conflicts         3
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               23
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   37
;  :datatype-splits         69
;  :decisions               92
;  :del-clause              28
;  :final-checks            20
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             514
;  :mk-clause               45
;  :num-allocs              3645006
;  :num-checks              44
;  :propagations            33
;  :quant-instantiations    25
;  :rlimit-count            128553)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               606
;  :arith-assert-diseq      10
;  :arith-assert-lower      35
;  :arith-assert-upper      26
;  :arith-conflicts         3
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               24
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 105
;  :datatype-occurs-check   43
;  :datatype-splits         78
;  :decisions               106
;  :del-clause              29
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             527
;  :mk-clause               46
;  :num-allocs              3645006
;  :num-checks              45
;  :propagations            34
;  :quant-instantiations    26
;  :rlimit-count            129290)
; [then-branch: 9 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))[2] | live]
; [else-branch: 9 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))[2]) | live]
(push) ; 4
; [then-branch: 9 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 5
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               608
;  :arith-assert-diseq      10
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         4
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               25
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 105
;  :datatype-occurs-check   43
;  :datatype-splits         78
;  :decisions               106
;  :del-clause              29
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             532
;  :mk-clause               49
;  :num-allocs              3645006
;  :num-checks              46
;  :propagations            38
;  :quant-instantiations    27
;  :rlimit-count            129526)
(push) ; 5
(assert (not (< $Perm.No $k@27@02)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               608
;  :arith-assert-diseq      10
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         4
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               26
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 105
;  :datatype-occurs-check   43
;  :datatype-splits         78
;  :decisions               106
;  :del-clause              29
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             532
;  :mk-clause               49
;  :num-allocs              3645006
;  :num-checks              47
;  :propagations            38
;  :quant-instantiations    27
;  :rlimit-count            129574)
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 3
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               609
;  :arith-assert-diseq      10
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         4
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               27
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 105
;  :datatype-occurs-check   43
;  :datatype-splits         78
;  :decisions               106
;  :del-clause              32
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             534
;  :mk-clause               50
;  :num-allocs              3645006
;  :num-checks              48
;  :propagations            38
;  :quant-instantiations    27
;  :rlimit-count            130165)
(push) ; 3
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))) | live]
; [else-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))) | live]
(push) ; 4
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               613
;  :arith-assert-diseq      10
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         4
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               27
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 105
;  :datatype-occurs-check   43
;  :datatype-splits         78
;  :decisions               106
;  :del-clause              32
;  :final-checks            23
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             536
;  :mk-clause               50
;  :num-allocs              3645006
;  :num-checks              49
;  :propagations            38
;  :quant-instantiations    29
;  :rlimit-count            130454)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      10
;  :arith-assert-lower      40
;  :arith-assert-upper      35
;  :arith-conflicts         4
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               29
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   51
;  :datatype-splits         95
;  :decisions               127
;  :del-clause              40
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             570
;  :mk-clause               58
;  :num-allocs              3775202
;  :num-checks              50
;  :propagations            43
;  :quant-instantiations    32
;  :rlimit-count            131626)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               743
;  :arith-assert-diseq      10
;  :arith-assert-lower      41
;  :arith-assert-upper      37
;  :arith-conflicts         4
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 139
;  :datatype-occurs-check   57
;  :datatype-splits         103
;  :decisions               140
;  :del-clause              43
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             584
;  :mk-clause               61
;  :num-allocs              3775202
;  :num-checks              51
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            132532)
; [then-branch: 11 | First:(Second:(Second:(Second:($t@25@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))) | live]
; [else-branch: 11 | !(First:(Second:(Second:(Second:($t@25@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))) | live]
(push) ; 4
; [then-branch: 11 | First:(Second:(Second:(Second:($t@25@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 5
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               749
;  :arith-assert-diseq      10
;  :arith-assert-lower      42
;  :arith-assert-upper      40
;  :arith-conflicts         5
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               31
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 139
;  :datatype-occurs-check   57
;  :datatype-splits         103
;  :decisions               140
;  :del-clause              43
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             591
;  :mk-clause               64
;  :num-allocs              3775202
;  :num-checks              52
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            132964)
(push) ; 5
(assert (not (< $Perm.No $k@27@02)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               749
;  :arith-assert-diseq      10
;  :arith-assert-lower      42
;  :arith-assert-upper      40
;  :arith-conflicts         5
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               32
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 139
;  :datatype-occurs-check   57
;  :datatype-splits         103
;  :decisions               140
;  :del-clause              43
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             591
;  :mk-clause               64
;  :num-allocs              3775202
;  :num-checks              53
;  :propagations            49
;  :quant-instantiations    36
;  :rlimit-count            133012)
(pop) ; 4
(push) ; 4
; [else-branch: 11 | !(First:(Second:(Second:(Second:($t@25@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@25@02 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02))) globals@3@02))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Sensor_m, globals), write)
(declare-const $t@31@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_1__2 := diz.Sensor_m
(declare-const __flatten_1__2@32@02 $Ref)
(assert (=
  __flatten_1__2@32@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))))
; [exec]
; __flatten_3__4 := diz.Sensor_m
(declare-const __flatten_3__4@33@02 $Ref)
(assert (=
  __flatten_3__4@33@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))))
; [exec]
; __flatten_2__3 := __flatten_3__4.Main_process_state[0 := 0]
; [eval] __flatten_3__4.Main_process_state[0 := 0]
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
  __flatten_3__4@33@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               843
;  :arith-assert-diseq      10
;  :arith-assert-lower      44
;  :arith-assert-upper      44
;  :arith-conflicts         5
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         14
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             618
;  :mk-clause               68
;  :num-allocs              3775202
;  :num-checks              56
;  :propagations            54
;  :quant-instantiations    38
;  :rlimit-count            134844)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               843
;  :arith-assert-diseq      10
;  :arith-assert-lower      44
;  :arith-assert-upper      44
;  :arith-conflicts         5
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         14
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             618
;  :mk-clause               68
;  :num-allocs              3775202
;  :num-checks              57
;  :propagations            54
;  :quant-instantiations    38
;  :rlimit-count            134859)
(declare-const __flatten_2__3@34@02 Seq<Int>)
(assert (Seq_equal
  __flatten_2__3@34@02
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    0
    0)))
; [exec]
; __flatten_1__2.Main_process_state := __flatten_2__3
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
  __flatten_1__2@32@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               854
;  :arith-add-rows          2
;  :arith-assert-diseq      11
;  :arith-assert-lower      48
;  :arith-assert-upper      46
;  :arith-conflicts         5
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         16
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             641
;  :mk-clause               86
;  :num-allocs              3775202
;  :num-checks              58
;  :propagations            62
;  :quant-instantiations    43
;  :rlimit-count            135319)
(assert (not (= __flatten_1__2@32@02 $Ref.null)))
; [exec]
; __flatten_4__5 := diz.Sensor_m
(declare-const __flatten_4__5@35@02 $Ref)
(assert (=
  __flatten_4__5@35@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))))
; [exec]
; __flatten_6__7 := diz.Sensor_m
(declare-const __flatten_6__7@36@02 $Ref)
(assert (=
  __flatten_6__7@36@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))))
; [exec]
; __flatten_5__6 := __flatten_6__7.Main_event_state[0 := 2]
; [eval] __flatten_6__7.Main_event_state[0 := 2]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
  __flatten_6__7@36@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               857
;  :arith-add-rows          2
;  :arith-assert-diseq      11
;  :arith-assert-lower      48
;  :arith-assert-upper      46
;  :arith-conflicts         5
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         16
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             644
;  :mk-clause               86
;  :num-allocs              3775202
;  :num-checks              59
;  :propagations            62
;  :quant-instantiations    43
;  :rlimit-count            135446)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               857
;  :arith-add-rows          2
;  :arith-assert-diseq      11
;  :arith-assert-lower      48
;  :arith-assert-upper      46
;  :arith-conflicts         5
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         16
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             644
;  :mk-clause               86
;  :num-allocs              3775202
;  :num-checks              60
;  :propagations            62
;  :quant-instantiations    43
;  :rlimit-count            135461)
(declare-const __flatten_5__6@37@02 Seq<Int>)
(assert (Seq_equal
  __flatten_5__6@37@02
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    0
    2)))
; [exec]
; __flatten_4__5.Main_event_state := __flatten_5__6
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
  __flatten_4__5@35@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               867
;  :arith-add-rows          4
;  :arith-assert-diseq      12
;  :arith-assert-lower      52
;  :arith-assert-upper      48
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             666
;  :mk-clause               104
;  :num-allocs              3775202
;  :num-checks              61
;  :propagations            70
;  :quant-instantiations    48
;  :rlimit-count            135949)
(assert (not (= __flatten_4__5@35@02 $Ref.null)))
; [exec]
; diz.Sensor_init := true
(declare-const __flatten_7__8@38@02 Int)
(declare-const __flatten_9__9@39@02 $Ref)
(declare-const __flatten_10__10@40@02 $Ref)
(declare-const __flatten_12__12@41@02 $Ref)
(declare-const __flatten_11__11@42@02 Seq<Int>)
(declare-const __flatten_13__13@43@02 $Ref)
(declare-const __flatten_15__15@44@02 $Ref)
(declare-const __flatten_14__14@45@02 Seq<Int>)
(declare-const __flatten_16__16@46@02 $Ref)
(declare-const __flatten_18__18@47@02 $Ref)
(declare-const __flatten_17__17@48@02 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@49@02 $Snap)
(assert (= $t@49@02 ($Snap.combine ($Snap.first $t@49@02) ($Snap.second $t@49@02))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               872
;  :arith-add-rows          4
;  :arith-assert-diseq      12
;  :arith-assert-lower      52
;  :arith-assert-upper      48
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             667
;  :mk-clause               104
;  :num-allocs              3775202
;  :num-checks              62
;  :propagations            70
;  :quant-instantiations    48
;  :rlimit-count            136082)
(assert (=
  ($Snap.second $t@49@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@49@02))
    ($Snap.second ($Snap.second $t@49@02)))))
(assert (= ($Snap.first ($Snap.second $t@49@02)) $Snap.unit))
; [eval] diz.Sensor_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@49@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@49@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@49@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
  $Snap.unit))
; [eval] |diz.Sensor_m.Main_process_state| == 2
; [eval] |diz.Sensor_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
  $Snap.unit))
; [eval] |diz.Sensor_m.Main_event_state| == 3
; [eval] |diz.Sensor_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
  $Snap.unit))
; [eval] (forall i__19: Int :: { diz.Sensor_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|)
(declare-const i__19@50@02 Int)
(push) ; 4
; [eval] 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state|
; [eval] 0 <= i__19
(push) ; 5
; [then-branch: 12 | 0 <= i__19@50@02 | live]
; [else-branch: 12 | !(0 <= i__19@50@02) | live]
(push) ; 6
; [then-branch: 12 | 0 <= i__19@50@02]
(assert (<= 0 i__19@50@02))
; [eval] i__19 < |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 12 | !(0 <= i__19@50@02)]
(assert (not (<= 0 i__19@50@02)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 13 | i__19@50@02 < |First:(Second:(Second:(Second:($t@49@02))))| && 0 <= i__19@50@02 | live]
; [else-branch: 13 | !(i__19@50@02 < |First:(Second:(Second:(Second:($t@49@02))))| && 0 <= i__19@50@02) | live]
(push) ; 6
; [then-branch: 13 | i__19@50@02 < |First:(Second:(Second:(Second:($t@49@02))))| && 0 <= i__19@50@02]
(assert (and
  (<
    i__19@50@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
  (<= 0 i__19@50@02)))
; [eval] diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__19] == -1
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 7
(assert (not (>= i__19@50@02 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-add-rows          4
;  :arith-assert-diseq      12
;  :arith-assert-lower      57
;  :arith-assert-upper      51
;  :arith-conflicts         5
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             692
;  :mk-clause               104
;  :num-allocs              3775202
;  :num-checks              63
;  :propagations            70
;  :quant-instantiations    53
;  :rlimit-count            137360)
; [eval] -1
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:($t@49@02))))[i__19@50@02] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@49@02))))[i__19@50@02] != -1 | live]
(push) ; 8
; [then-branch: 14 | First:(Second:(Second:(Second:($t@49@02))))[i__19@50@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    i__19@50@02)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 14 | First:(Second:(Second:(Second:($t@49@02))))[i__19@50@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      i__19@50@02)
    (- 0 1))))
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__19]
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 9
(assert (not (>= i__19@50@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-add-rows          4
;  :arith-assert-diseq      12
;  :arith-assert-lower      57
;  :arith-assert-upper      51
;  :arith-conflicts         5
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             693
;  :mk-clause               104
;  :num-allocs              3775202
;  :num-checks              64
;  :propagations            70
;  :quant-instantiations    53
;  :rlimit-count            137535)
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@49@02))))[i__19@50@02] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@49@02))))[i__19@50@02]) | live]
(push) ; 10
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@49@02))))[i__19@50@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    i__19@50@02)))
; [eval] diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 11
(assert (not (>= i__19@50@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-add-rows          4
;  :arith-assert-diseq      13
;  :arith-assert-lower      60
;  :arith-assert-upper      51
;  :arith-conflicts         5
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              60
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             696
;  :mk-clause               105
;  :num-allocs              3775202
;  :num-checks              65
;  :propagations            70
;  :quant-instantiations    53
;  :rlimit-count            137658)
; [eval] |diz.Sensor_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@49@02))))[i__19@50@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      i__19@50@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 13 | !(i__19@50@02 < |First:(Second:(Second:(Second:($t@49@02))))| && 0 <= i__19@50@02)]
(assert (not
  (and
    (<
      i__19@50@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    (<= 0 i__19@50@02))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__19@50@02 Int)) (!
  (implies
    (and
      (<
        i__19@50@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      (<= 0 i__19@50@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
          i__19@50@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
            i__19@50@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
            i__19@50@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    i__19@50@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
(declare-const $k@51@02 $Perm)
(assert ($Perm.isReadVar $k@51@02 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@51@02 $Perm.No) (< $Perm.No $k@51@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               921
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      62
;  :arith-assert-upper      52
;  :arith-conflicts         5
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               34
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             702
;  :mk-clause               107
;  :num-allocs              3775202
;  :num-checks              66
;  :propagations            71
;  :quant-instantiations    53
;  :rlimit-count            138426)
(assert (<= $Perm.No $k@51@02))
(assert (<= $k@51@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@51@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))
  $Snap.unit))
; [eval] 0 < diz.Sensor_m.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               927
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      62
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               35
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             705
;  :mk-clause               107
;  :num-allocs              3775202
;  :num-checks              67
;  :propagations            71
;  :quant-instantiations    53
;  :rlimit-count            138749)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
(declare-const $k@52@02 $Perm)
(assert ($Perm.isReadVar $k@52@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@52@02 $Perm.No) (< $Perm.No $k@52@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               933
;  :arith-add-rows          4
;  :arith-assert-diseq      15
;  :arith-assert-lower      65
;  :arith-assert-upper      54
;  :arith-conflicts         5
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               36
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             712
;  :mk-clause               109
;  :num-allocs              3775202
;  :num-checks              68
;  :propagations            72
;  :quant-instantiations    54
;  :rlimit-count            139246)
(assert (<= $Perm.No $k@52@02))
(assert (<= $k@52@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@52@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_sensor != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               939
;  :arith-add-rows          4
;  :arith-assert-diseq      15
;  :arith-assert-lower      65
;  :arith-assert-upper      55
;  :arith-conflicts         5
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               37
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             715
;  :mk-clause               109
;  :num-allocs              3775202
;  :num-checks              69
;  :propagations            72
;  :quant-instantiations    54
;  :rlimit-count            139589)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               945
;  :arith-add-rows          4
;  :arith-assert-diseq      15
;  :arith-assert-lower      65
;  :arith-assert-upper      55
;  :arith-conflicts         5
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               38
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             718
;  :mk-clause               109
;  :num-allocs              3775202
;  :num-checks              70
;  :propagations            72
;  :quant-instantiations    55
;  :rlimit-count            139963)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               950
;  :arith-add-rows          4
;  :arith-assert-diseq      15
;  :arith-assert-lower      65
;  :arith-assert-upper      55
;  :arith-conflicts         5
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               39
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             719
;  :mk-clause               109
;  :num-allocs              3911416
;  :num-checks              71
;  :propagations            72
;  :quant-instantiations    55
;  :rlimit-count            140240)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               950
;  :arith-add-rows          4
;  :arith-assert-diseq      15
;  :arith-assert-lower      65
;  :arith-assert-upper      55
;  :arith-conflicts         5
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               39
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             719
;  :mk-clause               109
;  :num-allocs              3911416
;  :num-checks              72
;  :propagations            72
;  :quant-instantiations    55
;  :rlimit-count            140253)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))
(declare-const $k@53@02 $Perm)
(assert ($Perm.isReadVar $k@53@02 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@53@02 $Perm.No) (< $Perm.No $k@53@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               955
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      67
;  :arith-assert-upper      56
;  :arith-conflicts         5
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             724
;  :mk-clause               111
;  :num-allocs              3911416
;  :num-checks              73
;  :propagations            73
;  :quant-instantiations    55
;  :rlimit-count            140683)
(assert (<= $Perm.No $k@53@02))
(assert (<= $k@53@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@53@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_controller != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               961
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      67
;  :arith-assert-upper      57
;  :arith-conflicts         5
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               41
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             727
;  :mk-clause               111
;  :num-allocs              3911416
;  :num-checks              74
;  :propagations            73
;  :quant-instantiations    55
;  :rlimit-count            141066)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               967
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      67
;  :arith-assert-upper      57
;  :arith-conflicts         5
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             730
;  :mk-clause               111
;  :num-allocs              3911416
;  :num-checks              75
;  :propagations            73
;  :quant-instantiations    56
;  :rlimit-count            141484)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               972
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      67
;  :arith-assert-upper      57
;  :arith-conflicts         5
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             731
;  :mk-clause               111
;  :num-allocs              3911416
;  :num-checks              76
;  :propagations            73
;  :quant-instantiations    56
;  :rlimit-count            141801)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               972
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      67
;  :arith-assert-upper      57
;  :arith-conflicts         5
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             731
;  :mk-clause               111
;  :num-allocs              3911416
;  :num-checks              77
;  :propagations            73
;  :quant-instantiations    56
;  :rlimit-count            141814)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_process_state[0] == -1 || diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0] == -1
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               978
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      67
;  :arith-assert-upper      57
;  :arith-conflicts         5
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             733
;  :mk-clause               111
;  :num-allocs              3911416
;  :num-checks              78
;  :propagations            73
;  :quant-instantiations    56
;  :rlimit-count            142140)
; [eval] -1
(push) ; 4
; [then-branch: 16 | First:(Second:(Second:(Second:($t@49@02))))[0] == -1 | live]
; [else-branch: 16 | First:(Second:(Second:(Second:($t@49@02))))[0] != -1 | live]
(push) ; 5
; [then-branch: 16 | First:(Second:(Second:(Second:($t@49@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    0)
  (- 0 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | First:(Second:(Second:(Second:($t@49@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      0)
    (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               978
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      70
;  :arith-assert-upper      58
;  :arith-conflicts         5
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              61
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             739
;  :mk-clause               115
;  :num-allocs              3911416
;  :num-checks              79
;  :propagations            75
;  :quant-instantiations    57
;  :rlimit-count            142372)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 || diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 4
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               984
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      70
;  :arith-assert-upper      58
;  :arith-conflicts         5
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              65
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             743
;  :mk-clause               116
;  :num-allocs              3911416
;  :num-checks              80
;  :propagations            75
;  :quant-instantiations    57
;  :rlimit-count            142799)
; [eval] -1
(push) ; 4
; [then-branch: 17 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1 | live]
; [else-branch: 17 | First:(Second:(Second:(Second:($t@49@02))))[1] != -1 | live]
(push) ; 5
; [then-branch: 17 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    1)
  (- 0 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | First:(Second:(Second:(Second:($t@49@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               984
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      73
;  :arith-assert-upper      59
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              65
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             749
;  :mk-clause               120
;  :num-allocs              3911416
;  :num-checks              81
;  :propagations            77
;  :quant-instantiations    58
;  :rlimit-count            143031)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_event_state[0] != -1
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               990
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      73
;  :arith-assert-upper      59
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              69
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             753
;  :mk-clause               121
;  :num-allocs              3911416
;  :num-checks              82
;  :propagations            77
;  :quant-instantiations    58
;  :rlimit-count            143468)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_event_state[0] != 0
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               996
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      73
;  :arith-assert-upper      59
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              69
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             756
;  :mk-clause               121
;  :num-allocs              3911416
;  :num-checks              83
;  :propagations            77
;  :quant-instantiations    58
;  :rlimit-count            143918)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_event_state[2] <= -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1002
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      73
;  :arith-assert-upper      59
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              69
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             759
;  :mk-clause               121
;  :num-allocs              3911416
;  :num-checks              84
;  :propagations            77
;  :quant-instantiations    58
;  :rlimit-count            144363)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Sensor_m.Main_controller.Controller_init || (diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1)
; [eval] !diz.Sensor_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1008
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      73
;  :arith-assert-upper      60
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               44
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              69
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             762
;  :mk-clause               121
;  :num-allocs              3911416
;  :num-checks              85
;  :propagations            77
;  :quant-instantiations    58
;  :rlimit-count            144842)
(push) ; 4
; [then-branch: 18 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))) | live]
; [else-branch: 18 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))) | live]
(push) ; 5
; [then-branch: 18 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1012
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      73
;  :arith-assert-upper      60
;  :arith-conflicts         5
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               44
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 162
;  :datatype-occurs-check   69
;  :datatype-splits         119
;  :decisions               165
;  :del-clause              69
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :mk-bool-var             765
;  :mk-clause               121
;  :num-allocs              3911416
;  :num-checks              86
;  :propagations            77
;  :quant-instantiations    60
;  :rlimit-count            145185)
; [eval] -1
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      79
;  :arith-assert-upper      68
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         24
;  :arith-pivots            12
;  :binary-propagations     11
;  :conflicts               46
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 214
;  :datatype-occurs-check   81
;  :datatype-splits         160
;  :decisions               218
;  :del-clause              77
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :mk-bool-var             827
;  :mk-clause               129
;  :num-allocs              4050291
;  :num-checks              87
;  :propagations            84
;  :quant-instantiations    62
;  :rlimit-count            146728)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1456
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      88
;  :arith-assert-upper      79
;  :arith-conflicts         5
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         31
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               50
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 277
;  :datatype-occurs-check   96
;  :datatype-splits         205
;  :decisions               279
;  :del-clause              92
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :mk-bool-var             910
;  :mk-clause               144
;  :num-allocs              4050291
;  :num-checks              88
;  :propagations            95
;  :quant-instantiations    65
;  :rlimit-count            148464)
; [then-branch: 19 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1 | live]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@49@02))))[1] != -1 | live]
(push) ; 7
; [then-branch: 19 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    1)
  (- 0 1)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1457
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      88
;  :arith-assert-upper      79
;  :arith-conflicts         5
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         31
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               50
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 277
;  :datatype-occurs-check   96
;  :datatype-splits         205
;  :decisions               279
;  :del-clause              92
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :mk-bool-var             910
;  :mk-clause               144
;  :num-allocs              4050291
;  :num-checks              89
;  :propagations            95
;  :quant-instantiations    65
;  :rlimit-count            148589)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 19 | First:(Second:(Second:(Second:($t@49@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1463
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      88
;  :arith-assert-upper      79
;  :arith-conflicts         5
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         31
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               50
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 277
;  :datatype-occurs-check   96
;  :datatype-splits         205
;  :decisions               279
;  :del-clause              92
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :mk-bool-var             913
;  :mk-clause               145
;  :num-allocs              4050291
;  :num-checks              90
;  :propagations            95
;  :quant-instantiations    65
;  :rlimit-count            149172)
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1815
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      97
;  :arith-assert-upper      90
;  :arith-conflicts         6
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         40
;  :arith-pivots            24
;  :binary-propagations     11
;  :conflicts               54
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 354
;  :datatype-occurs-check   120
;  :datatype-splits         270
;  :decisions               359
;  :del-clause              107
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1020
;  :mk-clause               160
;  :num-allocs              4192741
;  :num-checks              91
;  :propagations            107
;  :quant-instantiations    71
;  :rlimit-count            151351
;  :time                    0.00)
(push) ; 5
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1958
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      101
;  :arith-assert-upper      96
;  :arith-conflicts         6
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         44
;  :arith-pivots            28
;  :binary-propagations     11
;  :conflicts               55
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 386
;  :datatype-occurs-check   129
;  :datatype-splits         291
;  :decisions               393
;  :del-clause              112
;  :final-checks            56
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1055
;  :mk-clause               165
;  :num-allocs              4192741
;  :num-checks              92
;  :propagations            111
;  :quant-instantiations    73
;  :rlimit-count            152594)
; [then-branch: 20 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2] | live]
; [else-branch: 20 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2]) | live]
(push) ; 5
; [then-branch: 20 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1959
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      102
;  :arith-assert-upper      96
;  :arith-conflicts         6
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         45
;  :arith-pivots            28
;  :binary-propagations     11
;  :conflicts               55
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 386
;  :datatype-occurs-check   129
;  :datatype-splits         291
;  :decisions               393
;  :del-clause              112
;  :final-checks            56
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1056
;  :mk-clause               165
;  :num-allocs              4192741
;  :num-checks              93
;  :propagations            111
;  :quant-instantiations    73
;  :rlimit-count            152742)
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch: 20 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 4
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1965
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      102
;  :arith-assert-upper      96
;  :arith-conflicts         6
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         45
;  :arith-pivots            28
;  :binary-propagations     11
;  :conflicts               55
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 386
;  :datatype-occurs-check   129
;  :datatype-splits         291
;  :decisions               393
;  :del-clause              112
;  :final-checks            56
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1059
;  :mk-clause               166
;  :num-allocs              4192741
;  :num-checks              94
;  :propagations            111
;  :quant-instantiations    73
;  :rlimit-count            153325)
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2264
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      111
;  :arith-assert-upper      107
;  :arith-conflicts         7
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         53
;  :arith-pivots            32
;  :binary-propagations     11
;  :conflicts               60
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 457
;  :datatype-occurs-check   151
;  :datatype-splits         343
;  :decisions               460
;  :del-clause              128
;  :final-checks            62
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1152
;  :mk-clause               182
;  :num-allocs              4192741
;  :num-checks              95
;  :propagations            123
;  :quant-instantiations    76
;  :rlimit-count            155227
;  :time                    0.00)
(push) ; 5
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2408
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      115
;  :arith-assert-upper      113
;  :arith-conflicts         7
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         57
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               61
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 489
;  :datatype-occurs-check   160
;  :datatype-splits         364
;  :decisions               494
;  :del-clause              133
;  :final-checks            65
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1186
;  :mk-clause               187
;  :num-allocs              4192741
;  :num-checks              96
;  :propagations            127
;  :quant-instantiations    78
;  :rlimit-count            156470)
; [then-branch: 21 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2] | live]
; [else-branch: 21 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2]) | live]
(push) ; 5
; [then-branch: 21 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2)))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 6
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2410
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      117
;  :arith-assert-upper      115
;  :arith-conflicts         7
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         58
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               62
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 489
;  :datatype-occurs-check   160
;  :datatype-splits         364
;  :decisions               494
;  :del-clause              133
;  :final-checks            65
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1190
;  :mk-clause               190
;  :num-allocs              4192741
;  :num-checks              97
;  :propagations            131
;  :quant-instantiations    79
;  :rlimit-count            156692)
(push) ; 6
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2410
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      117
;  :arith-assert-upper      115
;  :arith-conflicts         7
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         58
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               63
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 489
;  :datatype-occurs-check   160
;  :datatype-splits         364
;  :decisions               494
;  :del-clause              133
;  :final-checks            65
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1190
;  :mk-clause               190
;  :num-allocs              4192741
;  :num-checks              98
;  :propagations            131
;  :quant-instantiations    79
;  :rlimit-count            156740)
(pop) ; 5
(push) ; 5
; [else-branch: 21 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1
(push) ; 4
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2416
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      117
;  :arith-assert-upper      115
;  :arith-conflicts         7
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         58
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               64
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 489
;  :datatype-occurs-check   160
;  :datatype-splits         364
;  :decisions               494
;  :del-clause              136
;  :final-checks            65
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1193
;  :mk-clause               191
;  :num-allocs              4192741
;  :num-checks              99
;  :propagations            131
;  :quant-instantiations    79
;  :rlimit-count            157422)
(push) ; 4
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))) | live]
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))) | live]
(push) ; 5
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2420
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      117
;  :arith-assert-upper      115
;  :arith-conflicts         7
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         58
;  :arith-pivots            36
;  :binary-propagations     11
;  :conflicts               64
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 489
;  :datatype-occurs-check   160
;  :datatype-splits         364
;  :decisions               494
;  :del-clause              136
;  :final-checks            65
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1195
;  :mk-clause               191
;  :num-allocs              4192741
;  :num-checks              100
;  :propagations            131
;  :quant-instantiations    81
;  :rlimit-count            157695)
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2677
;  :arith-add-rows          17
;  :arith-assert-diseq      19
;  :arith-assert-lower      127
;  :arith-assert-upper      130
;  :arith-bound-prop        1
;  :arith-conflicts         7
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         69
;  :arith-pivots            46
;  :binary-propagations     11
;  :conflicts               68
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   175
;  :datatype-splits         409
;  :decisions               555
;  :del-clause              154
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1287
;  :mk-clause               209
;  :num-allocs              4192741
;  :num-checks              101
;  :propagations            144
;  :quant-instantiations    86
;  :rlimit-count            159929
;  :time                    0.00)
(push) ; 5
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2832
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      132
;  :arith-assert-upper      137
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               69
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              162
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1326
;  :mk-clause               217
;  :num-allocs              4192741
;  :num-checks              102
;  :propagations            149
;  :quant-instantiations    88
;  :rlimit-count            161422
;  :time                    0.00)
; [then-branch: 23 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))) | live]
; [else-branch: 23 | !(First:(Second:(Second:(Second:($t@49@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))) | live]
(push) ; 5
; [then-branch: 23 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 6
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2838
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      133
;  :arith-assert-upper      139
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               70
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              162
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1332
;  :mk-clause               220
;  :num-allocs              4192741
;  :num-checks              103
;  :propagations            153
;  :quant-instantiations    91
;  :rlimit-count            161830)
(push) ; 6
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2838
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      133
;  :arith-assert-upper      139
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               71
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              162
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1332
;  :mk-clause               220
;  :num-allocs              4192741
;  :num-checks              104
;  :propagations            153
;  :quant-instantiations    91
;  :rlimit-count            161878)
(pop) ; 5
(push) ; 5
; [else-branch: 23 | !(First:(Second:(Second:(Second:($t@49@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_sensor == diz
(push) ; 4
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2844
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      133
;  :arith-assert-upper      139
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               72
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              165
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1334
;  :mk-clause               221
;  :num-allocs              4192741
;  :num-checks              105
;  :propagations            153
;  :quant-instantiations    91
;  :rlimit-count            162604)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
  diz@2@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2852
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      133
;  :arith-assert-upper      139
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               72
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              165
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1336
;  :mk-clause               221
;  :num-allocs              4192741
;  :num-checks              106
;  :propagations            153
;  :quant-instantiations    91
;  :rlimit-count            163048)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2860
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      133
;  :arith-assert-upper      139
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               72
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              177
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1342
;  :mk-clause               221
;  :num-allocs              4192741
;  :num-checks              107
;  :propagations            153
;  :quant-instantiations    94
;  :rlimit-count            163599)
; [eval] diz.Sensor_m != null
; [eval] |diz.Sensor_m.Main_process_state| == 2
; [eval] |diz.Sensor_m.Main_process_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_2__3@34@02) 2)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2860
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      133
;  :arith-assert-upper      139
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               73
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              177
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1345
;  :mk-clause               221
;  :num-allocs              4192741
;  :num-checks              108
;  :propagations            153
;  :quant-instantiations    94
;  :rlimit-count            163673)
(assert (= (Seq_length __flatten_2__3@34@02) 2))
; [eval] |diz.Sensor_m.Main_event_state| == 3
; [eval] |diz.Sensor_m.Main_event_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_5__6@37@02) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2861
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      134
;  :arith-assert-upper      140
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               74
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              177
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1351
;  :mk-clause               221
;  :num-allocs              4192741
;  :num-checks              109
;  :propagations            153
;  :quant-instantiations    94
;  :rlimit-count            163798)
(assert (= (Seq_length __flatten_5__6@37@02) 3))
; [eval] (forall i__19: Int :: { diz.Sensor_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|)
(declare-const i__19@54@02 Int)
(push) ; 4
; [eval] 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state|
; [eval] 0 <= i__19
(push) ; 5
; [then-branch: 24 | 0 <= i__19@54@02 | live]
; [else-branch: 24 | !(0 <= i__19@54@02) | live]
(push) ; 6
; [then-branch: 24 | 0 <= i__19@54@02]
(assert (<= 0 i__19@54@02))
; [eval] i__19 < |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 24 | !(0 <= i__19@54@02)]
(assert (not (<= 0 i__19@54@02)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 25 | i__19@54@02 < |__flatten_2__3@34@02| && 0 <= i__19@54@02 | live]
; [else-branch: 25 | !(i__19@54@02 < |__flatten_2__3@34@02| && 0 <= i__19@54@02) | live]
(push) ; 6
; [then-branch: 25 | i__19@54@02 < |__flatten_2__3@34@02| && 0 <= i__19@54@02]
(assert (and (< i__19@54@02 (Seq_length __flatten_2__3@34@02)) (<= 0 i__19@54@02)))
; [eval] diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__19] == -1
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 7
(assert (not (>= i__19@54@02 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2862
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      136
;  :arith-assert-upper      142
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               74
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              177
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1356
;  :mk-clause               221
;  :num-allocs              4192741
;  :num-checks              110
;  :propagations            153
;  :quant-instantiations    94
;  :rlimit-count            163985)
; [eval] -1
(push) ; 7
; [then-branch: 26 | __flatten_2__3@34@02[i__19@54@02] == -1 | live]
; [else-branch: 26 | __flatten_2__3@34@02[i__19@54@02] != -1 | live]
(push) ; 8
; [then-branch: 26 | __flatten_2__3@34@02[i__19@54@02] == -1]
(assert (= (Seq_index __flatten_2__3@34@02 i__19@54@02) (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 26 | __flatten_2__3@34@02[i__19@54@02] != -1]
(assert (not (= (Seq_index __flatten_2__3@34@02 i__19@54@02) (- 0 1))))
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__19]
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 9
(assert (not (>= i__19@54@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2863
;  :arith-add-rows          22
;  :arith-assert-diseq      19
;  :arith-assert-lower      136
;  :arith-assert-upper      142
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               74
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              177
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1363
;  :mk-clause               229
;  :num-allocs              4192741
;  :num-checks              111
;  :propagations            153
;  :quant-instantiations    95
;  :rlimit-count            164148)
(push) ; 9
; [then-branch: 27 | 0 <= __flatten_2__3@34@02[i__19@54@02] | live]
; [else-branch: 27 | !(0 <= __flatten_2__3@34@02[i__19@54@02]) | live]
(push) ; 10
; [then-branch: 27 | 0 <= __flatten_2__3@34@02[i__19@54@02]]
(assert (<= 0 (Seq_index __flatten_2__3@34@02 i__19@54@02)))
; [eval] diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 11
(assert (not (>= i__19@54@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2863
;  :arith-add-rows          22
;  :arith-assert-diseq      20
;  :arith-assert-lower      139
;  :arith-assert-upper      142
;  :arith-bound-prop        2
;  :arith-conflicts         7
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         75
;  :arith-pivots            52
;  :binary-propagations     11
;  :conflicts               74
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 584
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               589
;  :del-clause              177
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1366
;  :mk-clause               230
;  :num-allocs              4192741
;  :num-checks              112
;  :propagations            153
;  :quant-instantiations    95
;  :rlimit-count            164221)
; [eval] |diz.Sensor_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 27 | !(0 <= __flatten_2__3@34@02[i__19@54@02])]
(assert (not (<= 0 (Seq_index __flatten_2__3@34@02 i__19@54@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 25 | !(i__19@54@02 < |__flatten_2__3@34@02| && 0 <= i__19@54@02)]
(assert (not (and (< i__19@54@02 (Seq_length __flatten_2__3@34@02)) (<= 0 i__19@54@02))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((i__19@54@02 Int)) (!
  (implies
    (and (< i__19@54@02 (Seq_length __flatten_2__3@34@02)) (<= 0 i__19@54@02))
    (or
      (= (Seq_index __flatten_2__3@34@02 i__19@54@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_2__3@34@02 i__19@54@02)
          (Seq_length __flatten_5__6@37@02))
        (<= 0 (Seq_index __flatten_2__3@34@02 i__19@54@02)))))
  :pattern ((Seq_index __flatten_2__3@34@02 i__19@54@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2906
;  :arith-add-rows          24
;  :arith-assert-diseq      27
;  :arith-assert-lower      154
;  :arith-assert-upper      151
;  :arith-bound-prop        7
;  :arith-conflicts         8
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               81
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              276
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1441
;  :mk-clause               320
;  :num-allocs              4192741
;  :num-checks              113
;  :propagations            181
;  :quant-instantiations    100
;  :rlimit-count            164999)
(assert (forall ((i__19@54@02 Int)) (!
  (implies
    (and (< i__19@54@02 (Seq_length __flatten_2__3@34@02)) (<= 0 i__19@54@02))
    (or
      (= (Seq_index __flatten_2__3@34@02 i__19@54@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_2__3@34@02 i__19@54@02)
          (Seq_length __flatten_5__6@37@02))
        (<= 0 (Seq_index __flatten_2__3@34@02 i__19@54@02)))))
  :pattern ((Seq_index __flatten_2__3@34@02 i__19@54@02))
  :qid |prog.l<no position>|)))
(declare-const $k@55@02 $Perm)
(assert ($Perm.isReadVar $k@55@02 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@55@02 $Perm.No) (< $Perm.No $k@55@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2906
;  :arith-add-rows          24
;  :arith-assert-diseq      28
;  :arith-assert-lower      156
;  :arith-assert-upper      152
;  :arith-bound-prop        7
;  :arith-conflicts         8
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              276
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1446
;  :mk-clause               322
;  :num-allocs              4192741
;  :num-checks              114
;  :propagations            182
;  :quant-instantiations    100
;  :rlimit-count            165469)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@27@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2906
;  :arith-add-rows          24
;  :arith-assert-diseq      28
;  :arith-assert-lower      156
;  :arith-assert-upper      152
;  :arith-bound-prop        7
;  :arith-conflicts         8
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         79
;  :arith-pivots            56
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              276
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1446
;  :mk-clause               322
;  :num-allocs              4192741
;  :num-checks              115
;  :propagations            182
;  :quant-instantiations    100
;  :rlimit-count            165480)
(assert (< $k@55@02 $k@27@02))
(assert (<= $Perm.No (- $k@27@02 $k@55@02)))
(assert (<= (- $k@27@02 $k@55@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@27@02 $k@55@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
      $Ref.null))))
; [eval] 0 < diz.Sensor_m.Main_MIN_DIST
(push) ; 4
(assert (not (< $Perm.No $k@27@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2906
;  :arith-add-rows          24
;  :arith-assert-diseq      28
;  :arith-assert-lower      158
;  :arith-assert-upper      153
;  :arith-bound-prop        7
;  :arith-conflicts         8
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         79
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               83
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              276
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1449
;  :mk-clause               322
;  :num-allocs              4192741
;  :num-checks              116
;  :propagations            182
;  :quant-instantiations    100
;  :rlimit-count            165694)
(declare-const $k@56@02 $Perm)
(assert ($Perm.isReadVar $k@56@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@56@02 $Perm.No) (< $Perm.No $k@56@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2906
;  :arith-add-rows          24
;  :arith-assert-diseq      29
;  :arith-assert-lower      160
;  :arith-assert-upper      154
;  :arith-bound-prop        7
;  :arith-conflicts         8
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         79
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              276
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1453
;  :mk-clause               324
;  :num-allocs              4192741
;  :num-checks              117
;  :propagations            183
;  :quant-instantiations    100
;  :rlimit-count            165892)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@5@02 $k@28@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2907
;  :arith-add-rows          24
;  :arith-assert-diseq      29
;  :arith-assert-lower      160
;  :arith-assert-upper      155
;  :arith-bound-prop        7
;  :arith-conflicts         9
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         79
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               85
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              278
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1455
;  :mk-clause               326
;  :num-allocs              4192741
;  :num-checks              118
;  :propagations            184
;  :quant-instantiations    100
;  :rlimit-count            165954)
(assert (< $k@56@02 (+ $k@5@02 $k@28@02)))
(assert (<= $Perm.No (- (+ $k@5@02 $k@28@02) $k@56@02)))
(assert (<= (- (+ $k@5@02 $k@28@02) $k@56@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@5@02 $k@28@02) $k@56@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
      $Ref.null))))
; [eval] diz.Sensor_m.Main_sensor != null
(push) ; 4
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2907
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      162
;  :arith-assert-upper      157
;  :arith-bound-prop        7
;  :arith-conflicts         10
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         80
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              278
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1459
;  :mk-clause               326
;  :num-allocs              4192741
;  :num-checks              119
;  :propagations            184
;  :quant-instantiations    100
;  :rlimit-count            166186)
(push) ; 4
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2907
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      162
;  :arith-assert-upper      158
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         81
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               87
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              278
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1460
;  :mk-clause               326
;  :num-allocs              4192741
;  :num-checks              120
;  :propagations            184
;  :quant-instantiations    100
;  :rlimit-count            166249)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2907
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      162
;  :arith-assert-upper      158
;  :arith-bound-prop        7
;  :arith-conflicts         11
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         81
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               87
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              278
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1460
;  :mk-clause               326
;  :num-allocs              4192741
;  :num-checks              121
;  :propagations            184
;  :quant-instantiations    100
;  :rlimit-count            166262)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2907
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      162
;  :arith-assert-upper      159
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         82
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              278
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1461
;  :mk-clause               326
;  :num-allocs              4192741
;  :num-checks              122
;  :propagations            184
;  :quant-instantiations    100
;  :rlimit-count            166325)
(push) ; 4
(assert (not (= diz@2@02 $t@29@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2907
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      162
;  :arith-assert-upper      159
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         82
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               89
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 587
;  :datatype-occurs-check   184
;  :datatype-splits         430
;  :decisions               596
;  :del-clause              278
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1462
;  :mk-clause               326
;  :num-allocs              4192741
;  :num-checks              123
;  :propagations            184
;  :quant-instantiations    100
;  :rlimit-count            166385)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2951
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      163
;  :arith-assert-upper      161
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         83
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               89
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1472
;  :mk-clause               327
;  :num-allocs              4192741
;  :num-checks              124
;  :propagations            187
;  :quant-instantiations    101
;  :rlimit-count            167005)
(declare-const $k@57@02 $Perm)
(assert ($Perm.isReadVar $k@57@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@57@02 $Perm.No) (< $Perm.No $k@57@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2951
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      165
;  :arith-assert-upper      162
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         83
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1476
;  :mk-clause               329
;  :num-allocs              4192741
;  :num-checks              125
;  :propagations            188
;  :quant-instantiations    101
;  :rlimit-count            167204)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@30@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2951
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      165
;  :arith-assert-upper      162
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         83
;  :arith-pivots            57
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1476
;  :mk-clause               329
;  :num-allocs              4192741
;  :num-checks              126
;  :propagations            188
;  :quant-instantiations    101
;  :rlimit-count            167215)
(assert (< $k@57@02 $k@30@02))
(assert (<= $Perm.No (- $k@30@02 $k@57@02)))
(assert (<= (- $k@30@02 $k@57@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@30@02 $k@57@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
      $Ref.null))))
; [eval] diz.Sensor_m.Main_controller != null
(push) ; 4
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2951
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      167
;  :arith-assert-upper      163
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         83
;  :arith-pivots            58
;  :binary-propagations     11
;  :conflicts               91
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1479
;  :mk-clause               329
;  :num-allocs              4192741
;  :num-checks              127
;  :propagations            188
;  :quant-instantiations    101
;  :rlimit-count            167429)
(push) ; 4
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2951
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      167
;  :arith-assert-upper      163
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         83
;  :arith-pivots            58
;  :binary-propagations     11
;  :conflicts               92
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1479
;  :mk-clause               329
;  :num-allocs              4192741
;  :num-checks              128
;  :propagations            188
;  :quant-instantiations    101
;  :rlimit-count            167477)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2951
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      167
;  :arith-assert-upper      163
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         83
;  :arith-pivots            58
;  :binary-propagations     11
;  :conflicts               92
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1479
;  :mk-clause               329
;  :num-allocs              4192741
;  :num-checks              129
;  :propagations            188
;  :quant-instantiations    101
;  :rlimit-count            167490)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2951
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      167
;  :arith-assert-upper      163
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         83
;  :arith-pivots            58
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1479
;  :mk-clause               329
;  :num-allocs              4192741
;  :num-checks              130
;  :propagations            188
;  :quant-instantiations    101
;  :rlimit-count            167538)
; [eval] diz.Sensor_m.Main_process_state[0] == -1 || diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0] == -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 4
(assert (not (< 0 (Seq_length __flatten_2__3@34@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2951
;  :arith-add-rows          25
;  :arith-assert-diseq      30
;  :arith-assert-lower      167
;  :arith-assert-upper      163
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         83
;  :arith-pivots            58
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1479
;  :mk-clause               329
;  :num-allocs              4192741
;  :num-checks              131
;  :propagations            188
;  :quant-instantiations    101
;  :rlimit-count            167553)
; [eval] -1
(push) ; 4
; [then-branch: 28 | __flatten_2__3@34@02[0] == -1 | live]
; [else-branch: 28 | __flatten_2__3@34@02[0] != -1 | live]
(push) ; 5
; [then-branch: 28 | __flatten_2__3@34@02[0] == -1]
(assert (= (Seq_index __flatten_2__3@34@02 0) (- 0 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 28 | __flatten_2__3@34@02[0] != -1]
(assert (not (= (Seq_index __flatten_2__3@34@02 0) (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 6
(assert (not (< 0 (Seq_length __flatten_2__3@34@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2954
;  :arith-add-rows          25
;  :arith-assert-diseq      31
;  :arith-assert-lower      170
;  :arith-assert-upper      165
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         83
;  :arith-pivots            58
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              279
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1488
;  :mk-clause               333
;  :num-allocs              4192741
;  :num-checks              132
;  :propagations            190
;  :quant-instantiations    103
;  :rlimit-count            167774)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (or
  (= (Seq_index __flatten_2__3@34@02 0) (- 0 1))
  (= (Seq_index __flatten_2__3@34@02 0) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2956
;  :arith-add-rows          25
;  :arith-assert-diseq      31
;  :arith-assert-lower      170
;  :arith-assert-upper      165
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         83
;  :arith-pivots            58
;  :binary-propagations     11
;  :conflicts               94
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              287
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1494
;  :mk-clause               337
;  :num-allocs              4192741
;  :num-checks              133
;  :propagations            192
;  :quant-instantiations    105
;  :rlimit-count            167965)
(assert (or
  (= (Seq_index __flatten_2__3@34@02 0) (- 0 1))
  (= (Seq_index __flatten_2__3@34@02 0) 0)))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 || diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 4
(assert (not (< 1 (Seq_length __flatten_2__3@34@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2956
;  :arith-add-rows          25
;  :arith-assert-diseq      31
;  :arith-assert-lower      170
;  :arith-assert-upper      165
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         83
;  :arith-pivots            58
;  :binary-propagations     11
;  :conflicts               94
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              287
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1496
;  :mk-clause               338
;  :num-allocs              4192741
;  :num-checks              134
;  :propagations            192
;  :quant-instantiations    105
;  :rlimit-count            168051)
; [eval] -1
(push) ; 4
; [then-branch: 29 | __flatten_2__3@34@02[1] == -1 | live]
; [else-branch: 29 | __flatten_2__3@34@02[1] != -1 | live]
(push) ; 5
; [then-branch: 29 | __flatten_2__3@34@02[1] == -1]
(assert (= (Seq_index __flatten_2__3@34@02 1) (- 0 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | __flatten_2__3@34@02[1] != -1]
(assert (not (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 6
(assert (not (< 1 (Seq_length __flatten_2__3@34@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2964
;  :arith-add-rows          25
;  :arith-assert-diseq      35
;  :arith-assert-lower      179
;  :arith-assert-upper      169
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         84
;  :arith-pivots            59
;  :binary-propagations     11
;  :conflicts               94
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              287
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1517
;  :mk-clause               350
;  :num-allocs              4192741
;  :num-checks              135
;  :propagations            199
;  :quant-instantiations    108
;  :rlimit-count            168343)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (or
  (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
  (= (Seq_index __flatten_2__3@34@02 1) 2))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2968
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      180
;  :arith-assert-upper      170
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         84
;  :arith-pivots            60
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              309
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1532
;  :mk-clause               360
;  :num-allocs              4192741
;  :num-checks              136
;  :propagations            202
;  :quant-instantiations    111
;  :rlimit-count            168573)
(assert (or
  (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
  (= (Seq_index __flatten_2__3@34@02 1) 2)))
; [eval] diz.Sensor_m.Main_event_state[0] != -1
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 4
(assert (not (< 0 (Seq_length __flatten_5__6@37@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2968
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      180
;  :arith-assert-upper      170
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         84
;  :arith-pivots            60
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              309
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1534
;  :mk-clause               361
;  :num-allocs              4192741
;  :num-checks              137
;  :propagations            202
;  :quant-instantiations    111
;  :rlimit-count            168659)
; [eval] -1
(push) ; 4
(assert (not (not (= (Seq_index __flatten_5__6@37@02 0) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2971
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      180
;  :arith-assert-upper      170
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         84
;  :arith-pivots            60
;  :binary-propagations     11
;  :conflicts               96
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              309
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1536
;  :mk-clause               361
;  :num-allocs              4192741
;  :num-checks              138
;  :propagations            202
;  :quant-instantiations    112
;  :rlimit-count            168777)
(assert (not (= (Seq_index __flatten_5__6@37@02 0) (- 0 1))))
; [eval] diz.Sensor_m.Main_event_state[0] != 0
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 4
(assert (not (< 0 (Seq_length __flatten_5__6@37@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2973
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      180
;  :arith-assert-upper      170
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         84
;  :arith-pivots            60
;  :binary-propagations     11
;  :conflicts               96
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              309
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1538
;  :mk-clause               361
;  :num-allocs              4192741
;  :num-checks              139
;  :propagations            202
;  :quant-instantiations    113
;  :rlimit-count            168877)
(push) ; 4
(assert (not (not (= (Seq_index __flatten_5__6@37@02 0) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2974
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      180
;  :arith-assert-upper      170
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         84
;  :arith-pivots            60
;  :binary-propagations     11
;  :conflicts               97
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              309
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1539
;  :mk-clause               361
;  :num-allocs              4192741
;  :num-checks              140
;  :propagations            202
;  :quant-instantiations    113
;  :rlimit-count            168935)
(assert (not (= (Seq_index __flatten_5__6@37@02 0) 0)))
; [eval] diz.Sensor_m.Main_event_state[2] <= -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 4
(assert (not (< 2 (Seq_length __flatten_5__6@37@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2975
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      180
;  :arith-assert-upper      170
;  :arith-bound-prop        7
;  :arith-conflicts         12
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         84
;  :arith-pivots            60
;  :binary-propagations     11
;  :conflicts               97
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              309
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1540
;  :mk-clause               361
;  :num-allocs              4192741
;  :num-checks              141
;  :propagations            202
;  :quant-instantiations    113
;  :rlimit-count            169016)
; [eval] -1
(push) ; 4
(assert (not (<= (Seq_index __flatten_5__6@37@02 2) (- 0 1))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2978
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      182
;  :arith-assert-upper      171
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         85
;  :arith-pivots            62
;  :binary-propagations     11
;  :conflicts               98
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              312
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1547
;  :mk-clause               364
;  :num-allocs              4192741
;  :num-checks              142
;  :propagations            203
;  :quant-instantiations    114
;  :rlimit-count            169173)
(assert (<= (Seq_index __flatten_5__6@37@02 2) (- 0 1)))
; [eval] !diz.Sensor_m.Main_controller.Controller_init || (diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1)
; [eval] !diz.Sensor_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2982
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      183
;  :arith-assert-upper      173
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         86
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               99
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              312
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1554
;  :mk-clause               366
;  :num-allocs              4192741
;  :num-checks              143
;  :propagations            204
;  :quant-instantiations    115
;  :rlimit-count            169308)
(push) ; 4
; [then-branch: 30 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))) | live]
; [else-branch: 30 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))) | live]
(push) ; 5
; [then-branch: 30 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
(pop) ; 5
(push) ; 5
; [else-branch: 30 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (< 1 (Seq_length __flatten_2__3@34@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2986
;  :arith-add-rows          25
;  :arith-assert-diseq      37
;  :arith-assert-lower      183
;  :arith-assert-upper      173
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         86
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               99
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 598
;  :datatype-occurs-check   190
;  :datatype-splits         438
;  :decisions               608
;  :del-clause              312
;  :final-checks            76
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :mk-bool-var             1556
;  :mk-clause               366
;  :num-allocs              4192741
;  :num-checks              144
;  :propagations            204
;  :quant-instantiations    117
;  :rlimit-count            169645)
; [eval] -1
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (Seq_index __flatten_2__3@34@02 1) (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3084
;  :arith-add-rows          25
;  :arith-assert-diseq      39
;  :arith-assert-lower      188
;  :arith-assert-upper      177
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         86
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 623
;  :datatype-occurs-check   196
;  :datatype-splits         451
;  :decisions               629
;  :del-clause              324
;  :final-checks            79
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          1
;  :mk-bool-var             1596
;  :mk-clause               378
;  :num-allocs              4192741
;  :num-checks              145
;  :propagations            216
;  :quant-instantiations    122
;  :rlimit-count            170702
;  :time                    0.00)
(push) ; 7
(assert (not (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3178
;  :arith-add-rows          25
;  :arith-assert-diseq      42
;  :arith-assert-lower      199
;  :arith-assert-upper      189
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         88
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 644
;  :datatype-occurs-check   204
;  :datatype-splits         468
;  :decisions               650
;  :del-clause              347
;  :final-checks            83
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          1
;  :mk-bool-var             1646
;  :mk-clause               401
;  :num-allocs              4192741
;  :num-checks              146
;  :propagations            233
;  :quant-instantiations    130
;  :rlimit-count            171828
;  :time                    0.00)
; [then-branch: 31 | __flatten_2__3@34@02[1] == -1 | live]
; [else-branch: 31 | __flatten_2__3@34@02[1] != -1 | live]
(push) ; 7
; [then-branch: 31 | __flatten_2__3@34@02[1] == -1]
(assert (= (Seq_index __flatten_2__3@34@02 1) (- 0 1)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (< 0 (Seq_length __flatten_2__3@34@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3187
;  :arith-add-rows          25
;  :arith-assert-diseq      42
;  :arith-assert-lower      201
;  :arith-assert-upper      191
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         88
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               105
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 644
;  :datatype-occurs-check   204
;  :datatype-splits         468
;  :decisions               650
;  :del-clause              347
;  :final-checks            83
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          1
;  :mk-bool-var             1654
;  :mk-clause               406
;  :num-allocs              4192741
;  :num-checks              147
;  :propagations            239
;  :quant-instantiations    133
;  :rlimit-count            171997)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 31 | __flatten_2__3@34@02[1] != -1]
(assert (not (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
  (implies
    (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
    (not (= (Seq_index __flatten_2__3@34@02 0) (- 0 1)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3195
;  :arith-add-rows          25
;  :arith-assert-diseq      42
;  :arith-assert-lower      201
;  :arith-assert-upper      191
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         88
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               106
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 644
;  :datatype-occurs-check   204
;  :datatype-splits         468
;  :decisions               650
;  :del-clause              354
;  :final-checks            83
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          1
;  :mk-bool-var             1659
;  :mk-clause               408
;  :num-allocs              4192741
;  :num-checks              148
;  :propagations            240
;  :quant-instantiations    136
;  :rlimit-count            172448)
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
  (implies
    (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
    (not (= (Seq_index __flatten_2__3@34@02 0) (- 0 1))))))
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 4
(assert (not (< 2 (Seq_length __flatten_5__6@37@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3195
;  :arith-add-rows          25
;  :arith-assert-diseq      42
;  :arith-assert-lower      201
;  :arith-assert-upper      191
;  :arith-bound-prop        7
;  :arith-conflicts         13
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         88
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               106
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 644
;  :datatype-occurs-check   204
;  :datatype-splits         468
;  :decisions               650
;  :del-clause              354
;  :final-checks            83
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          1
;  :mk-bool-var             1659
;  :mk-clause               409
;  :num-allocs              4192741
;  :num-checks              149
;  :propagations            240
;  :quant-instantiations    136
;  :rlimit-count            172788)
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3267
;  :arith-add-rows          25
;  :arith-assert-diseq      45
;  :arith-assert-lower      206
;  :arith-assert-upper      197
;  :arith-bound-prop        8
;  :arith-conflicts         13
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         90
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               109
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 660
;  :datatype-occurs-check   210
;  :datatype-splits         479
;  :decisions               667
;  :del-clause              366
;  :final-checks            86
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          2
;  :mk-bool-var             1695
;  :mk-clause               421
;  :num-allocs              4192741
;  :num-checks              150
;  :propagations            250
;  :quant-instantiations    141
;  :rlimit-count            173769
;  :time                    0.00)
(push) ; 5
(assert (not (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3325
;  :arith-add-rows          25
;  :arith-assert-diseq      45
;  :arith-assert-lower      208
;  :arith-assert-upper      202
;  :arith-bound-prop        9
;  :arith-conflicts         13
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         91
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               110
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 671
;  :datatype-occurs-check   216
;  :datatype-splits         487
;  :decisions               681
;  :del-clause              374
;  :final-checks            89
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          2
;  :mk-bool-var             1715
;  :mk-clause               429
;  :num-allocs              4192741
;  :num-checks              151
;  :propagations            256
;  :quant-instantiations    146
;  :rlimit-count            174661)
; [then-branch: 32 | -1 <= __flatten_5__6@37@02[2] | live]
; [else-branch: 32 | !(-1 <= __flatten_5__6@37@02[2]) | live]
(push) ; 5
; [then-branch: 32 | -1 <= __flatten_5__6@37@02[2]]
(assert (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (< 0 (Seq_length __flatten_2__3@34@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3331
;  :arith-add-rows          25
;  :arith-assert-diseq      47
;  :arith-assert-lower      211
;  :arith-assert-upper      204
;  :arith-bound-prop        10
;  :arith-conflicts         13
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         93
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               110
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 671
;  :datatype-occurs-check   216
;  :datatype-splits         487
;  :decisions               681
;  :del-clause              374
;  :final-checks            89
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          2
;  :mk-bool-var             1724
;  :mk-clause               437
;  :num-allocs              4192741
;  :num-checks              152
;  :propagations            261
;  :quant-instantiations    148
;  :rlimit-count            174816)
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch: 32 | !(-1 <= __flatten_5__6@37@02[2])]
(assert (not (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (implies
  (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2))
  (not (= (Seq_index __flatten_2__3@34@02 0) (- 0 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3337
;  :arith-add-rows          25
;  :arith-assert-diseq      47
;  :arith-assert-lower      212
;  :arith-assert-upper      204
;  :arith-bound-prop        11
;  :arith-conflicts         13
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         95
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               111
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 671
;  :datatype-occurs-check   216
;  :datatype-splits         487
;  :decisions               681
;  :del-clause              383
;  :final-checks            89
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          2
;  :mk-bool-var             1726
;  :mk-clause               438
;  :num-allocs              4192741
;  :num-checks              153
;  :propagations            264
;  :quant-instantiations    149
;  :rlimit-count            174993)
(assert (implies
  (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2))
  (not (= (Seq_index __flatten_2__3@34@02 0) (- 0 1)))))
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 4
(assert (not (< 2 (Seq_length __flatten_5__6@37@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3337
;  :arith-add-rows          25
;  :arith-assert-diseq      47
;  :arith-assert-lower      212
;  :arith-assert-upper      204
;  :arith-bound-prop        11
;  :arith-conflicts         13
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         95
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               111
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 671
;  :datatype-occurs-check   216
;  :datatype-splits         487
;  :decisions               681
;  :del-clause              383
;  :final-checks            89
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          2
;  :mk-bool-var             1727
;  :mk-clause               439
;  :num-allocs              4192741
;  :num-checks              154
;  :propagations            264
;  :quant-instantiations    149
;  :rlimit-count            175127)
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3407
;  :arith-add-rows          25
;  :arith-assert-diseq      50
;  :arith-assert-lower      217
;  :arith-assert-upper      210
;  :arith-bound-prop        12
;  :arith-conflicts         13
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         97
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               113
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 687
;  :datatype-occurs-check   222
;  :datatype-splits         498
;  :decisions               697
;  :del-clause              395
;  :final-checks            92
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          3
;  :mk-bool-var             1762
;  :mk-clause               451
;  :num-allocs              4192741
;  :num-checks              155
;  :propagations            275
;  :quant-instantiations    154
;  :rlimit-count            176072
;  :time                    0.00)
(push) ; 5
(assert (not (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3465
;  :arith-add-rows          25
;  :arith-assert-diseq      50
;  :arith-assert-lower      219
;  :arith-assert-upper      215
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         98
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               114
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 698
;  :datatype-occurs-check   228
;  :datatype-splits         506
;  :decisions               711
;  :del-clause              403
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          3
;  :mk-bool-var             1781
;  :mk-clause               459
;  :num-allocs              4192741
;  :num-checks              156
;  :propagations            281
;  :quant-instantiations    159
;  :rlimit-count            176961
;  :time                    0.00)
; [then-branch: 33 | -1 <= __flatten_5__6@37@02[2] | live]
; [else-branch: 33 | !(-1 <= __flatten_5__6@37@02[2]) | live]
(push) ; 5
; [then-branch: 33 | -1 <= __flatten_5__6@37@02[2]]
(assert (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2)))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 6
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3475
;  :arith-add-rows          25
;  :arith-assert-diseq      52
;  :arith-assert-lower      223
;  :arith-assert-upper      220
;  :arith-bound-prop        14
;  :arith-conflicts         14
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         101
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               115
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 698
;  :datatype-occurs-check   228
;  :datatype-splits         506
;  :decisions               711
;  :del-clause              403
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          3
;  :mk-bool-var             1795
;  :mk-clause               470
;  :num-allocs              4192741
;  :num-checks              157
;  :propagations            290
;  :quant-instantiations    163
;  :rlimit-count            177191)
(push) ; 6
(assert (not (< $Perm.No $k@27@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3475
;  :arith-add-rows          25
;  :arith-assert-diseq      52
;  :arith-assert-lower      223
;  :arith-assert-upper      220
;  :arith-bound-prop        14
;  :arith-conflicts         14
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         101
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               116
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 698
;  :datatype-occurs-check   228
;  :datatype-splits         506
;  :decisions               711
;  :del-clause              403
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          3
;  :mk-bool-var             1795
;  :mk-clause               470
;  :num-allocs              4192741
;  :num-checks              158
;  :propagations            290
;  :quant-instantiations    163
;  :rlimit-count            177239)
(pop) ; 5
(push) ; 5
; [else-branch: 33 | !(-1 <= __flatten_5__6@37@02[2])]
(assert (not (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (implies
  (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3476
;  :arith-add-rows          25
;  :arith-assert-diseq      52
;  :arith-assert-lower      224
;  :arith-assert-upper      222
;  :arith-bound-prop        14
;  :arith-conflicts         15
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         102
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               117
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 698
;  :datatype-occurs-check   228
;  :datatype-splits         506
;  :decisions               711
;  :del-clause              414
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          3
;  :mk-bool-var             1795
;  :mk-clause               470
;  :num-allocs              4192741
;  :num-checks              159
;  :propagations            293
;  :quant-instantiations    163
;  :rlimit-count            177548)
(assert (implies
  (<= (- 0 1) (Seq_index __flatten_5__6@37@02 2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@30@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3476
;  :arith-add-rows          25
;  :arith-assert-diseq      52
;  :arith-assert-lower      224
;  :arith-assert-upper      222
;  :arith-bound-prop        14
;  :arith-conflicts         15
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         102
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               118
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 698
;  :datatype-occurs-check   228
;  :datatype-splits         506
;  :decisions               711
;  :del-clause              414
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          3
;  :mk-bool-var             1795
;  :mk-clause               471
;  :num-allocs              4192741
;  :num-checks              160
;  :propagations            293
;  :quant-instantiations    163
;  :rlimit-count            177877)
(push) ; 4
; [then-branch: 34 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))) | live]
; [else-branch: 34 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))) | live]
(push) ; 5
; [then-branch: 34 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (< 1 (Seq_length __flatten_2__3@34@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3480
;  :arith-add-rows          25
;  :arith-assert-diseq      52
;  :arith-assert-lower      224
;  :arith-assert-upper      222
;  :arith-bound-prop        14
;  :arith-conflicts         15
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         102
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               118
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 698
;  :datatype-occurs-check   228
;  :datatype-splits         506
;  :decisions               711
;  :del-clause              414
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          3
;  :mk-bool-var             1797
;  :mk-clause               471
;  :num-allocs              4192741
;  :num-checks              161
;  :propagations            293
;  :quant-instantiations    165
;  :rlimit-count            178166)
; [eval] -1
(pop) ; 5
(push) ; 5
; [else-branch: 34 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (and
    (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3580
;  :arith-add-rows          25
;  :arith-assert-diseq      54
;  :arith-assert-lower      229
;  :arith-assert-upper      226
;  :arith-bound-prop        14
;  :arith-conflicts         15
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         102
;  :arith-pivots            63
;  :binary-propagations     11
;  :conflicts               121
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 723
;  :datatype-occurs-check   234
;  :datatype-splits         519
;  :decisions               731
;  :del-clause              426
;  :final-checks            98
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          4
;  :mk-bool-var             1839
;  :mk-clause               483
;  :num-allocs              4192741
;  :num-checks              162
;  :propagations            306
;  :quant-instantiations    172
;  :rlimit-count            179484
;  :time                    0.00)
(push) ; 5
(assert (not (and
  (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3638
;  :arith-add-rows          25
;  :arith-assert-diseq      54
;  :arith-assert-lower      231
;  :arith-assert-upper      231
;  :arith-bound-prop        15
;  :arith-conflicts         15
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         103
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               122
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 734
;  :datatype-occurs-check   240
;  :datatype-splits         527
;  :decisions               745
;  :del-clause              435
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          4
;  :mk-bool-var             1858
;  :mk-clause               492
;  :num-allocs              4192741
;  :num-checks              163
;  :propagations            313
;  :quant-instantiations    177
;  :rlimit-count            180592
;  :time                    0.00)
; [then-branch: 35 | __flatten_2__3@34@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))) | live]
; [else-branch: 35 | !(__flatten_2__3@34@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))) | live]
(push) ; 5
; [then-branch: 35 | __flatten_2__3@34@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02)))))))))))))))))))]
(assert (and
  (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))))))))))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 6
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3655
;  :arith-add-rows          25
;  :arith-assert-diseq      54
;  :arith-assert-lower      234
;  :arith-assert-upper      236
;  :arith-bound-prop        15
;  :arith-conflicts         16
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         104
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               123
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 734
;  :datatype-occurs-check   240
;  :datatype-splits         527
;  :decisions               745
;  :del-clause              435
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          4
;  :mk-bool-var             1874
;  :mk-clause               500
;  :num-allocs              4192741
;  :num-checks              164
;  :propagations            323
;  :quant-instantiations    184
;  :rlimit-count            181082)
(push) ; 6
(assert (not (< $Perm.No $k@27@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3655
;  :arith-add-rows          25
;  :arith-assert-diseq      54
;  :arith-assert-lower      234
;  :arith-assert-upper      236
;  :arith-bound-prop        15
;  :arith-conflicts         16
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         104
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               124
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 734
;  :datatype-occurs-check   240
;  :datatype-splits         527
;  :decisions               745
;  :del-clause              435
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          4
;  :mk-bool-var             1874
;  :mk-clause               500
;  :num-allocs              4192741
;  :num-checks              165
;  :propagations            323
;  :quant-instantiations    184
;  :rlimit-count            181130)
(pop) ; 5
(push) ; 5
; [else-branch: 35 | !(__flatten_2__3@34@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@25@02))))))))))))))))))))]
(assert (not
  (and
    (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (implies
  (and
    (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          25
;  :arith-assert-diseq      54
;  :arith-assert-lower      234
;  :arith-assert-upper      239
;  :arith-bound-prop        15
;  :arith-conflicts         16
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         104
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               125
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 734
;  :datatype-occurs-check   240
;  :datatype-splits         527
;  :decisions               745
;  :del-clause              453
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          4
;  :mk-bool-var             1886
;  :mk-clause               510
;  :num-allocs              4192741
;  :num-checks              166
;  :propagations            334
;  :quant-instantiations    190
;  :rlimit-count            181759)
(assert (implies
  (and
    (= (Seq_index __flatten_2__3@34@02 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))))
; [eval] diz.Sensor_m.Main_sensor == diz
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ $k@5@02 $k@28@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          25
;  :arith-assert-diseq      54
;  :arith-assert-lower      234
;  :arith-assert-upper      240
;  :arith-bound-prop        15
;  :arith-conflicts         17
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         105
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               126
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 734
;  :datatype-occurs-check   240
;  :datatype-splits         527
;  :decisions               745
;  :del-clause              453
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          4
;  :mk-bool-var             1887
;  :mk-clause               511
;  :num-allocs              4192741
;  :num-checks              167
;  :propagations            334
;  :quant-instantiations    190
;  :rlimit-count            182185)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@29@02 diz@2@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          25
;  :arith-assert-diseq      54
;  :arith-assert-lower      234
;  :arith-assert-upper      240
;  :arith-bound-prop        15
;  :arith-conflicts         17
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         105
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               127
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 734
;  :datatype-occurs-check   240
;  :datatype-splits         527
;  :decisions               745
;  :del-clause              453
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          4
;  :mk-bool-var             1887
;  :mk-clause               511
;  :num-allocs              4192741
;  :num-checks              168
;  :propagations            334
;  :quant-instantiations    190
;  :rlimit-count            182241)
(assert (= $t@29@02 diz@2@02))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          25
;  :arith-assert-diseq      54
;  :arith-assert-lower      234
;  :arith-assert-upper      240
;  :arith-bound-prop        15
;  :arith-conflicts         17
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         105
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               127
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 734
;  :datatype-occurs-check   240
;  :datatype-splits         527
;  :decisions               745
;  :del-clause              453
;  :final-checks            101
;  :max-generation          2
;  :max-memory              4.39
;  :memory                  4.39
;  :minimized-lits          4
;  :mk-bool-var             1887
;  :mk-clause               511
;  :num-allocs              4192741
;  :num-checks              169
;  :propagations            334
;  :quant-instantiations    190
;  :rlimit-count            182289)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@51@02 $Perm.Write))
(assert ($Perm.isReadVar $k@52@02 $Perm.Write))
(assert ($Perm.isReadVar $k@53@02 $Perm.Write))
(assert (= $t@49@02 ($Snap.combine ($Snap.first $t@49@02) ($Snap.second $t@49@02))))
(assert (=
  ($Snap.second $t@49@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@49@02))
    ($Snap.second ($Snap.second $t@49@02)))))
(assert (= ($Snap.first ($Snap.second $t@49@02)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@49@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@49@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@49@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
  $Snap.unit))
(assert (forall ((i__19@50@02 Int)) (!
  (implies
    (and
      (<
        i__19@50@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      (<= 0 i__19@50@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
          i__19@50@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
            i__19@50@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
            i__19@50@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    i__19@50@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
(assert (<= $Perm.No $k@51@02))
(assert (<= $k@51@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@51@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))
  $Snap.unit))
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
(assert (<= $Perm.No $k@52@02))
(assert (<= $k@52@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@52@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))
(assert (<= $Perm.No $k@53@02))
(assert (<= $k@53@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@53@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))
  $Snap.unit))
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
  $Snap.unit))
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
  $Snap.unit))
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))
  $Snap.unit))
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))
  diz@2@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4285
;  :arith-add-rows          45
;  :arith-assert-diseq      57
;  :arith-assert-lower      264
;  :arith-assert-upper      283
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               130
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              497
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2139
;  :mk-clause               565
;  :num-allocs              4362152
;  :num-checks              172
;  :propagations            381
;  :quant-instantiations    220
;  :rlimit-count            191712
;  :time                    0.00)
; [then-branch: 36 | True | live]
; [else-branch: 36 | False | dead]
(push) ; 5
; [then-branch: 36 | True]
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@58@02 $Snap)
(assert (= $t@58@02 ($Snap.combine ($Snap.first $t@58@02) ($Snap.second $t@58@02))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4290
;  :arith-add-rows          45
;  :arith-assert-diseq      57
;  :arith-assert-lower      264
;  :arith-assert-upper      283
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               130
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              497
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2140
;  :mk-clause               565
;  :num-allocs              4362152
;  :num-checks              173
;  :propagations            381
;  :quant-instantiations    220
;  :rlimit-count            191830)
(assert (=
  ($Snap.second $t@58@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@02))
    ($Snap.second ($Snap.second $t@58@02)))))
(assert (= ($Snap.first ($Snap.second $t@58@02)) $Snap.unit))
; [eval] diz.Sensor_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@58@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@58@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
  $Snap.unit))
; [eval] |diz.Sensor_m.Main_process_state| == 2
; [eval] |diz.Sensor_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
  $Snap.unit))
; [eval] |diz.Sensor_m.Main_event_state| == 3
; [eval] |diz.Sensor_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
  $Snap.unit))
; [eval] (forall i__20: Int :: { diz.Sensor_m.Main_process_state[i__20] } 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|)
(declare-const i__20@59@02 Int)
(push) ; 7
; [eval] 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state|
; [eval] 0 <= i__20
(push) ; 8
; [then-branch: 37 | 0 <= i__20@59@02 | live]
; [else-branch: 37 | !(0 <= i__20@59@02) | live]
(push) ; 9
; [then-branch: 37 | 0 <= i__20@59@02]
(assert (<= 0 i__20@59@02))
; [eval] i__20 < |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 37 | !(0 <= i__20@59@02)]
(assert (not (<= 0 i__20@59@02)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 38 | i__20@59@02 < |First:(Second:(Second:(Second:($t@58@02))))| && 0 <= i__20@59@02 | live]
; [else-branch: 38 | !(i__20@59@02 < |First:(Second:(Second:(Second:($t@58@02))))| && 0 <= i__20@59@02) | live]
(push) ; 9
; [then-branch: 38 | i__20@59@02 < |First:(Second:(Second:(Second:($t@58@02))))| && 0 <= i__20@59@02]
(assert (and
  (<
    i__20@59@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
  (<= 0 i__20@59@02)))
; [eval] diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__20] == -1
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 10
(assert (not (>= i__20@59@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4334
;  :arith-add-rows          45
;  :arith-assert-diseq      57
;  :arith-assert-lower      269
;  :arith-assert-upper      286
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               130
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              497
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2165
;  :mk-clause               565
;  :num-allocs              4362152
;  :num-checks              174
;  :propagations            381
;  :quant-instantiations    225
;  :rlimit-count            193108)
; [eval] -1
(push) ; 10
; [then-branch: 39 | First:(Second:(Second:(Second:($t@58@02))))[i__20@59@02] == -1 | live]
; [else-branch: 39 | First:(Second:(Second:(Second:($t@58@02))))[i__20@59@02] != -1 | live]
(push) ; 11
; [then-branch: 39 | First:(Second:(Second:(Second:($t@58@02))))[i__20@59@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    i__20@59@02)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 39 | First:(Second:(Second:(Second:($t@58@02))))[i__20@59@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      i__20@59@02)
    (- 0 1))))
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__20]
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 12
(assert (not (>= i__20@59@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4334
;  :arith-add-rows          45
;  :arith-assert-diseq      57
;  :arith-assert-lower      269
;  :arith-assert-upper      286
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               130
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              497
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2166
;  :mk-clause               565
;  :num-allocs              4362152
;  :num-checks              175
;  :propagations            381
;  :quant-instantiations    225
;  :rlimit-count            193283)
(push) ; 12
; [then-branch: 40 | 0 <= First:(Second:(Second:(Second:($t@58@02))))[i__20@59@02] | live]
; [else-branch: 40 | !(0 <= First:(Second:(Second:(Second:($t@58@02))))[i__20@59@02]) | live]
(push) ; 13
; [then-branch: 40 | 0 <= First:(Second:(Second:(Second:($t@58@02))))[i__20@59@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    i__20@59@02)))
; [eval] diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 14
(assert (not (>= i__20@59@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4334
;  :arith-add-rows          45
;  :arith-assert-diseq      58
;  :arith-assert-lower      272
;  :arith-assert-upper      286
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               130
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              497
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2169
;  :mk-clause               566
;  :num-allocs              4362152
;  :num-checks              176
;  :propagations            381
;  :quant-instantiations    225
;  :rlimit-count            193406)
; [eval] |diz.Sensor_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 40 | !(0 <= First:(Second:(Second:(Second:($t@58@02))))[i__20@59@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      i__20@59@02))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 38 | !(i__20@59@02 < |First:(Second:(Second:(Second:($t@58@02))))| && 0 <= i__20@59@02)]
(assert (not
  (and
    (<
      i__20@59@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    (<= 0 i__20@59@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__20@59@02 Int)) (!
  (implies
    (and
      (<
        i__20@59@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      (<= 0 i__20@59@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          i__20@59@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
            i__20@59@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
            i__20@59@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    i__20@59@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
(declare-const $k@60@02 $Perm)
(assert ($Perm.isReadVar $k@60@02 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@60@02 $Perm.No) (< $Perm.No $k@60@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4339
;  :arith-add-rows          45
;  :arith-assert-diseq      59
;  :arith-assert-lower      274
;  :arith-assert-upper      287
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               131
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2175
;  :mk-clause               568
;  :num-allocs              4362152
;  :num-checks              177
;  :propagations            382
;  :quant-instantiations    225
;  :rlimit-count            194174)
(assert (<= $Perm.No $k@60@02))
(assert (<= $k@60@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@60@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))
  $Snap.unit))
; [eval] 0 < diz.Sensor_m.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4345
;  :arith-add-rows          45
;  :arith-assert-diseq      59
;  :arith-assert-lower      274
;  :arith-assert-upper      288
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               132
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2178
;  :mk-clause               568
;  :num-allocs              4362152
;  :num-checks              178
;  :propagations            382
;  :quant-instantiations    225
;  :rlimit-count            194497)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
(declare-const $k@61@02 $Perm)
(assert ($Perm.isReadVar $k@61@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@61@02 $Perm.No) (< $Perm.No $k@61@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4351
;  :arith-add-rows          45
;  :arith-assert-diseq      60
;  :arith-assert-lower      277
;  :arith-assert-upper      289
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2185
;  :mk-clause               570
;  :num-allocs              4362152
;  :num-checks              179
;  :propagations            383
;  :quant-instantiations    226
;  :rlimit-count            194995)
(assert (<= $Perm.No $k@61@02))
(assert (<= $k@61@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@61@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_sensor != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4357
;  :arith-add-rows          45
;  :arith-assert-diseq      60
;  :arith-assert-lower      277
;  :arith-assert-upper      290
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               134
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2188
;  :mk-clause               570
;  :num-allocs              4362152
;  :num-checks              180
;  :propagations            383
;  :quant-instantiations    226
;  :rlimit-count            195338)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4363
;  :arith-add-rows          45
;  :arith-assert-diseq      60
;  :arith-assert-lower      277
;  :arith-assert-upper      290
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               135
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2191
;  :mk-clause               570
;  :num-allocs              4362152
;  :num-checks              181
;  :propagations            383
;  :quant-instantiations    227
;  :rlimit-count            195712)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4368
;  :arith-add-rows          45
;  :arith-assert-diseq      60
;  :arith-assert-lower      277
;  :arith-assert-upper      290
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               136
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2192
;  :mk-clause               570
;  :num-allocs              4362152
;  :num-checks              182
;  :propagations            383
;  :quant-instantiations    227
;  :rlimit-count            195989)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4368
;  :arith-add-rows          45
;  :arith-assert-diseq      60
;  :arith-assert-lower      277
;  :arith-assert-upper      290
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               136
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2192
;  :mk-clause               570
;  :num-allocs              4362152
;  :num-checks              183
;  :propagations            383
;  :quant-instantiations    227
;  :rlimit-count            196002)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))
(declare-const $k@62@02 $Perm)
(assert ($Perm.isReadVar $k@62@02 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@62@02 $Perm.No) (< $Perm.No $k@62@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4373
;  :arith-add-rows          45
;  :arith-assert-diseq      61
;  :arith-assert-lower      279
;  :arith-assert-upper      291
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               137
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2197
;  :mk-clause               572
;  :num-allocs              4362152
;  :num-checks              184
;  :propagations            384
;  :quant-instantiations    227
;  :rlimit-count            196432)
(assert (<= $Perm.No $k@62@02))
(assert (<= $k@62@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@62@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_controller != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4379
;  :arith-add-rows          45
;  :arith-assert-diseq      61
;  :arith-assert-lower      279
;  :arith-assert-upper      292
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               138
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2200
;  :mk-clause               572
;  :num-allocs              4362152
;  :num-checks              185
;  :propagations            384
;  :quant-instantiations    227
;  :rlimit-count            196815)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4385
;  :arith-add-rows          45
;  :arith-assert-diseq      61
;  :arith-assert-lower      279
;  :arith-assert-upper      292
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               139
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2203
;  :mk-clause               572
;  :num-allocs              4362152
;  :num-checks              186
;  :propagations            384
;  :quant-instantiations    228
;  :rlimit-count            197233)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4390
;  :arith-add-rows          45
;  :arith-assert-diseq      61
;  :arith-assert-lower      279
;  :arith-assert-upper      292
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2204
;  :mk-clause               572
;  :num-allocs              4362152
;  :num-checks              187
;  :propagations            384
;  :quant-instantiations    228
;  :rlimit-count            197550)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4390
;  :arith-add-rows          45
;  :arith-assert-diseq      61
;  :arith-assert-lower      279
;  :arith-assert-upper      292
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2204
;  :mk-clause               572
;  :num-allocs              4362152
;  :num-checks              188
;  :propagations            384
;  :quant-instantiations    228
;  :rlimit-count            197563)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_process_state[0] == -1 || diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0] == -1
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4396
;  :arith-add-rows          45
;  :arith-assert-diseq      61
;  :arith-assert-lower      279
;  :arith-assert-upper      292
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2206
;  :mk-clause               572
;  :num-allocs              4362152
;  :num-checks              189
;  :propagations            384
;  :quant-instantiations    228
;  :rlimit-count            197889)
; [eval] -1
(push) ; 7
; [then-branch: 41 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1 | live]
; [else-branch: 41 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 | live]
(push) ; 8
; [then-branch: 41 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    0)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 41 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4396
;  :arith-add-rows          45
;  :arith-assert-diseq      62
;  :arith-assert-lower      282
;  :arith-assert-upper      293
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              498
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2212
;  :mk-clause               576
;  :num-allocs              4362152
;  :num-checks              190
;  :propagations            386
;  :quant-instantiations    229
;  :rlimit-count            198121)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 || diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4402
;  :arith-add-rows          45
;  :arith-assert-diseq      62
;  :arith-assert-lower      282
;  :arith-assert-upper      293
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              502
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2216
;  :mk-clause               577
;  :num-allocs              4362152
;  :num-checks              191
;  :propagations            386
;  :quant-instantiations    229
;  :rlimit-count            198548)
; [eval] -1
(push) ; 7
; [then-branch: 42 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1 | live]
; [else-branch: 42 | First:(Second:(Second:(Second:($t@58@02))))[1] != -1 | live]
(push) ; 8
; [then-branch: 42 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    1)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 42 | First:(Second:(Second:(Second:($t@58@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4402
;  :arith-add-rows          45
;  :arith-assert-diseq      63
;  :arith-assert-lower      285
;  :arith-assert-upper      294
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              502
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2222
;  :mk-clause               581
;  :num-allocs              4362152
;  :num-checks              192
;  :propagations            388
;  :quant-instantiations    230
;  :rlimit-count            198780)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_event_state[0] != -1
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4408
;  :arith-add-rows          45
;  :arith-assert-diseq      63
;  :arith-assert-lower      285
;  :arith-assert-upper      294
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              506
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2226
;  :mk-clause               582
;  :num-allocs              4362152
;  :num-checks              193
;  :propagations            388
;  :quant-instantiations    230
;  :rlimit-count            199217)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_event_state[0] != 0
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4414
;  :arith-add-rows          45
;  :arith-assert-diseq      63
;  :arith-assert-lower      285
;  :arith-assert-upper      294
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              506
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2229
;  :mk-clause               582
;  :num-allocs              4362152
;  :num-checks              194
;  :propagations            388
;  :quant-instantiations    230
;  :rlimit-count            199667)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_event_state[2] <= -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4420
;  :arith-add-rows          45
;  :arith-assert-diseq      63
;  :arith-assert-lower      285
;  :arith-assert-upper      294
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               140
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              506
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2232
;  :mk-clause               582
;  :num-allocs              4362152
;  :num-checks              195
;  :propagations            388
;  :quant-instantiations    230
;  :rlimit-count            200112)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Sensor_m.Main_controller.Controller_init || (diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1)
; [eval] !diz.Sensor_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4426
;  :arith-add-rows          45
;  :arith-assert-diseq      63
;  :arith-assert-lower      285
;  :arith-assert-upper      295
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               141
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              506
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2235
;  :mk-clause               582
;  :num-allocs              4362152
;  :num-checks              196
;  :propagations            388
;  :quant-instantiations    230
;  :rlimit-count            200591)
(push) ; 7
; [then-branch: 43 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
; [else-branch: 43 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
(push) ; 8
; [then-branch: 43 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 43 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4429
;  :arith-add-rows          45
;  :arith-assert-diseq      63
;  :arith-assert-lower      285
;  :arith-assert-upper      295
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         125
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               141
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 827
;  :datatype-occurs-check   270
;  :datatype-splits         604
;  :decisions               848
;  :del-clause              506
;  :final-checks            111
;  :max-generation          2
;  :max-memory              4.49
;  :memory                  4.49
;  :minimized-lits          4
;  :mk-bool-var             2237
;  :mk-clause               582
;  :num-allocs              4362152
;  :num-checks              197
;  :propagations            388
;  :quant-instantiations    231
;  :rlimit-count            200916)
; [eval] -1
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4649
;  :arith-add-rows          49
;  :arith-assert-diseq      63
;  :arith-assert-lower      294
;  :arith-assert-upper      307
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         136
;  :arith-pivots            86
;  :binary-propagations     11
;  :conflicts               142
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 879
;  :datatype-occurs-check   282
;  :datatype-splits         638
;  :decisions               902
;  :del-clause              518
;  :final-checks            114
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          4
;  :mk-bool-var             2298
;  :mk-clause               594
;  :num-allocs              4538517
;  :num-checks              198
;  :propagations            399
;  :quant-instantiations    234
;  :rlimit-count            202757
;  :time                    0.00)
(push) ; 10
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4935
;  :arith-add-rows          53
;  :arith-assert-diseq      63
;  :arith-assert-lower      308
;  :arith-assert-upper      324
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         151
;  :arith-pivots            92
;  :binary-propagations     11
;  :conflicts               145
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 949
;  :datatype-occurs-check   298
;  :datatype-splits         676
;  :decisions               972
;  :del-clause              539
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          4
;  :mk-bool-var             2383
;  :mk-clause               615
;  :num-allocs              4716664
;  :num-checks              199
;  :propagations            414
;  :quant-instantiations    238
;  :rlimit-count            204931
;  :time                    0.00)
; [then-branch: 44 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1 | live]
; [else-branch: 44 | First:(Second:(Second:(Second:($t@58@02))))[1] != -1 | live]
(push) ; 10
; [then-branch: 44 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    1)
  (- 0 1)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4937
;  :arith-add-rows          53
;  :arith-assert-diseq      63
;  :arith-assert-lower      308
;  :arith-assert-upper      324
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         151
;  :arith-pivots            92
;  :binary-propagations     11
;  :conflicts               145
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 949
;  :datatype-occurs-check   298
;  :datatype-splits         676
;  :decisions               972
;  :del-clause              539
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          4
;  :mk-bool-var             2383
;  :mk-clause               615
;  :num-allocs              4716664
;  :num-checks              200
;  :propagations            414
;  :quant-instantiations    238
;  :rlimit-count            205062)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 44 | First:(Second:(Second:(Second:($t@58@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4943
;  :arith-add-rows          53
;  :arith-assert-diseq      63
;  :arith-assert-lower      308
;  :arith-assert-upper      324
;  :arith-bound-prop        17
;  :arith-conflicts         17
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         151
;  :arith-pivots            92
;  :binary-propagations     11
;  :conflicts               145
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 949
;  :datatype-occurs-check   298
;  :datatype-splits         676
;  :decisions               972
;  :del-clause              539
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          4
;  :mk-bool-var             2386
;  :mk-clause               616
;  :num-allocs              4716664
;  :num-checks              201
;  :propagations            414
;  :quant-instantiations    238
;  :rlimit-count            205645)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5522
;  :arith-add-rows          60
;  :arith-assert-diseq      65
;  :arith-assert-lower      328
;  :arith-assert-upper      350
;  :arith-bound-prop        17
;  :arith-conflicts         18
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         175
;  :arith-pivots            100
;  :binary-propagations     11
;  :conflicts               149
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 1072
;  :datatype-occurs-check   330
;  :datatype-splits         780
;  :decisions               1101
;  :del-clause              571
;  :final-checks            126
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.58
;  :minimized-lits          4
;  :mk-bool-var             2572
;  :mk-clause               648
;  :num-allocs              4896060
;  :num-checks              202
;  :propagations            444
;  :quant-instantiations    250
;  :rlimit-count            209181
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5758
;  :arith-add-rows          64
;  :arith-assert-diseq      65
;  :arith-assert-lower      337
;  :arith-assert-upper      363
;  :arith-bound-prop        17
;  :arith-conflicts         18
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         186
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               150
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1124
;  :datatype-occurs-check   342
;  :datatype-splits         814
;  :decisions               1156
;  :del-clause              583
;  :final-checks            129
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.58
;  :minimized-lits          4
;  :mk-bool-var             2635
;  :mk-clause               660
;  :num-allocs              4896060
;  :num-checks              203
;  :propagations            456
;  :quant-instantiations    254
;  :rlimit-count            211095
;  :time                    0.00)
; [then-branch: 45 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2] | live]
; [else-branch: 45 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2]) | live]
(push) ; 8
; [then-branch: 45 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5759
;  :arith-add-rows          64
;  :arith-assert-diseq      65
;  :arith-assert-lower      338
;  :arith-assert-upper      363
;  :arith-bound-prop        17
;  :arith-conflicts         18
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         187
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               150
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1124
;  :datatype-occurs-check   342
;  :datatype-splits         814
;  :decisions               1156
;  :del-clause              583
;  :final-checks            129
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.58
;  :minimized-lits          4
;  :mk-bool-var             2636
;  :mk-clause               660
;  :num-allocs              4896060
;  :num-checks              204
;  :propagations            456
;  :quant-instantiations    254
;  :rlimit-count            211243)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 45 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5765
;  :arith-add-rows          64
;  :arith-assert-diseq      65
;  :arith-assert-lower      338
;  :arith-assert-upper      363
;  :arith-bound-prop        17
;  :arith-conflicts         18
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         187
;  :arith-pivots            106
;  :binary-propagations     11
;  :conflicts               150
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1124
;  :datatype-occurs-check   342
;  :datatype-splits         814
;  :decisions               1156
;  :del-clause              583
;  :final-checks            129
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.58
;  :minimized-lits          4
;  :mk-bool-var             2639
;  :mk-clause               661
;  :num-allocs              4896060
;  :num-checks              205
;  :propagations            456
;  :quant-instantiations    254
;  :rlimit-count            211826)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6654
;  :arith-add-rows          72
;  :arith-assert-diseq      67
;  :arith-assert-lower      367
;  :arith-assert-upper      400
;  :arith-bound-prop        17
;  :arith-conflicts         20
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         221
;  :arith-offset-eqs        1
;  :arith-pivots            116
;  :binary-propagations     11
;  :conflicts               159
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 1327
;  :datatype-occurs-check   406
;  :datatype-splits         982
;  :decisions               1346
;  :del-clause              632
;  :final-checks            140
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             2926
;  :mk-clause               710
;  :num-allocs              5080052
;  :num-checks              206
;  :propagations            504
;  :quant-instantiations    265
;  :rlimit-count            216579
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6891
;  :arith-add-rows          76
;  :arith-assert-diseq      67
;  :arith-assert-lower      376
;  :arith-assert-upper      413
;  :arith-bound-prop        17
;  :arith-conflicts         20
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         232
;  :arith-offset-eqs        1
;  :arith-pivots            122
;  :binary-propagations     11
;  :conflicts               160
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1379
;  :datatype-occurs-check   418
;  :datatype-splits         1016
;  :decisions               1401
;  :del-clause              644
;  :final-checks            143
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             2988
;  :mk-clause               722
;  :num-allocs              5080052
;  :num-checks              207
;  :propagations            516
;  :quant-instantiations    269
;  :rlimit-count            218493
;  :time                    0.00)
; [then-branch: 46 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2] | live]
; [else-branch: 46 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2]) | live]
(push) ; 8
; [then-branch: 46 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2)))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6894
;  :arith-add-rows          76
;  :arith-assert-diseq      67
;  :arith-assert-lower      378
;  :arith-assert-upper      415
;  :arith-bound-prop        17
;  :arith-conflicts         20
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         233
;  :arith-offset-eqs        1
;  :arith-pivots            122
;  :binary-propagations     11
;  :conflicts               161
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1379
;  :datatype-occurs-check   418
;  :datatype-splits         1016
;  :decisions               1401
;  :del-clause              644
;  :final-checks            143
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             2992
;  :mk-clause               725
;  :num-allocs              5080052
;  :num-checks              208
;  :propagations            520
;  :quant-instantiations    270
;  :rlimit-count            218716)
(push) ; 9
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6894
;  :arith-add-rows          76
;  :arith-assert-diseq      67
;  :arith-assert-lower      378
;  :arith-assert-upper      415
;  :arith-bound-prop        17
;  :arith-conflicts         20
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         233
;  :arith-offset-eqs        1
;  :arith-pivots            122
;  :binary-propagations     11
;  :conflicts               162
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1379
;  :datatype-occurs-check   418
;  :datatype-splits         1016
;  :decisions               1401
;  :del-clause              644
;  :final-checks            143
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             2992
;  :mk-clause               725
;  :num-allocs              5080052
;  :num-checks              209
;  :propagations            520
;  :quant-instantiations    270
;  :rlimit-count            218764)
(pop) ; 8
(push) ; 8
; [else-branch: 46 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1
(push) ; 7
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6900
;  :arith-add-rows          76
;  :arith-assert-diseq      67
;  :arith-assert-lower      378
;  :arith-assert-upper      415
;  :arith-bound-prop        17
;  :arith-conflicts         20
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         233
;  :arith-offset-eqs        1
;  :arith-pivots            122
;  :binary-propagations     11
;  :conflicts               163
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1379
;  :datatype-occurs-check   418
;  :datatype-splits         1016
;  :decisions               1401
;  :del-clause              647
;  :final-checks            143
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             2995
;  :mk-clause               726
;  :num-allocs              5080052
;  :num-checks              210
;  :propagations            520
;  :quant-instantiations    270
;  :rlimit-count            219446)
(push) ; 7
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
; [else-branch: 47 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6903
;  :arith-add-rows          76
;  :arith-assert-diseq      67
;  :arith-assert-lower      378
;  :arith-assert-upper      415
;  :arith-bound-prop        17
;  :arith-conflicts         20
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         233
;  :arith-offset-eqs        1
;  :arith-pivots            122
;  :binary-propagations     11
;  :conflicts               163
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1379
;  :datatype-occurs-check   418
;  :datatype-splits         1016
;  :decisions               1401
;  :del-clause              647
;  :final-checks            143
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             2996
;  :mk-clause               726
;  :num-allocs              5080052
;  :num-checks              211
;  :propagations            520
;  :quant-instantiations    271
;  :rlimit-count            219701)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 47 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7200
;  :arith-add-rows          87
;  :arith-assert-diseq      67
;  :arith-assert-lower      392
;  :arith-assert-upper      434
;  :arith-bound-prop        18
;  :arith-conflicts         20
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         250
;  :arith-offset-eqs        2
;  :arith-pivots            130
;  :binary-propagations     11
;  :conflicts               166
;  :datatype-accessor-ax    283
;  :datatype-constructor-ax 1449
;  :datatype-occurs-check   434
;  :datatype-splits         1054
;  :decisions               1471
;  :del-clause              670
;  :final-checks            147
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3086
;  :mk-clause               749
;  :num-allocs              5080052
;  :num-checks              212
;  :propagations            536
;  :quant-instantiations    276
;  :rlimit-count            222226
;  :time                    0.00)
(push) ; 8
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7449
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      402
;  :arith-assert-upper      448
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    287
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              685
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3153
;  :mk-clause               764
;  :num-allocs              5080052
;  :num-checks              213
;  :propagations            549
;  :quant-instantiations    280
;  :rlimit-count            224403
;  :time                    0.00)
; [then-branch: 48 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
; [else-branch: 48 | !(First:(Second:(Second:(Second:($t@58@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 48 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7456
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      450
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               168
;  :datatype-accessor-ax    287
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              685
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3158
;  :mk-clause               767
;  :num-allocs              5080052
;  :num-checks              214
;  :propagations            553
;  :quant-instantiations    282
;  :rlimit-count            224801)
(push) ; 9
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7456
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      450
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               169
;  :datatype-accessor-ax    287
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              685
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3158
;  :mk-clause               767
;  :num-allocs              5080052
;  :num-checks              215
;  :propagations            553
;  :quant-instantiations    282
;  :rlimit-count            224849)
(pop) ; 8
(push) ; 8
; [else-branch: 48 | !(First:(Second:(Second:(Second:($t@58@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Sensor_m.Main_sensor == diz
(push) ; 7
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7462
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      450
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              688
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3160
;  :mk-clause               768
;  :num-allocs              5080052
;  :num-checks              216
;  :propagations            553
;  :quant-instantiations    282
;  :rlimit-count            225575)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  diz@2@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7470
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      450
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              688
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3162
;  :mk-clause               768
;  :num-allocs              5080052
;  :num-checks              217
;  :propagations            553
;  :quant-instantiations    282
;  :rlimit-count            226019)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] diz.Sensor_m.Main_process_state[0] != -1 || diz.Sensor_m.Main_event_state[0] != -2
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7488
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      450
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              688
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3167
;  :mk-clause               768
;  :num-allocs              5080052
;  :num-checks              218
;  :propagations            553
;  :quant-instantiations    284
;  :rlimit-count            226561)
; [eval] -1
(push) ; 8
; [then-branch: 49 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 | live]
; [else-branch: 49 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1 | live]
(push) ; 9
; [then-branch: 49 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 49 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    0)
  (- 0 1)))
; [eval] diz.Sensor_m.Main_event_state[0] != -2
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7490
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      451
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              688
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3167
;  :mk-clause               768
;  :num-allocs              5080052
;  :num-checks              219
;  :propagations            554
;  :quant-instantiations    284
;  :rlimit-count            226727)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !(diz.Sensor_m.Main_process_state[0] != -1 || diz.Sensor_m.Main_event_state[0] != -2)
; [eval] diz.Sensor_m.Main_process_state[0] != -1 || diz.Sensor_m.Main_event_state[0] != -2
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7490
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      451
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              688
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3167
;  :mk-clause               768
;  :num-allocs              5080052
;  :num-checks              220
;  :propagations            554
;  :quant-instantiations    284
;  :rlimit-count            226747)
; [eval] -1
(push) ; 8
; [then-branch: 50 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1 | live]
(push) ; 9
; [then-branch: 50 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 50 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    0)
  (- 0 1)))
; [eval] diz.Sensor_m.Main_event_state[0] != -2
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      452
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              688
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3167
;  :mk-clause               768
;  :num-allocs              5080052
;  :num-checks              221
;  :propagations            555
;  :quant-instantiations    284
;  :rlimit-count            226913)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      403
;  :arith-assert-upper      452
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              700
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3167
;  :mk-clause               768
;  :num-allocs              5080052
;  :num-checks              222
;  :propagations            555
;  :quant-instantiations    284
;  :rlimit-count            226931)
; [eval] diz.Sensor_m != null
; [eval] |diz.Sensor_m.Main_process_state| == 2
; [eval] |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_event_state| == 3
; [eval] |diz.Sensor_m.Main_event_state|
; [eval] (forall i__20: Int :: { diz.Sensor_m.Main_process_state[i__20] } 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|)
(declare-const i__20@63@02 Int)
(push) ; 7
; [eval] 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state|
; [eval] 0 <= i__20
(push) ; 8
; [then-branch: 51 | 0 <= i__20@63@02 | live]
; [else-branch: 51 | !(0 <= i__20@63@02) | live]
(push) ; 9
; [then-branch: 51 | 0 <= i__20@63@02]
(assert (<= 0 i__20@63@02))
; [eval] i__20 < |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 51 | !(0 <= i__20@63@02)]
(assert (not (<= 0 i__20@63@02)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 52 | i__20@63@02 < |First:(Second:(Second:(Second:($t@49@02))))| && 0 <= i__20@63@02 | live]
; [else-branch: 52 | !(i__20@63@02 < |First:(Second:(Second:(Second:($t@49@02))))| && 0 <= i__20@63@02) | live]
(push) ; 9
; [then-branch: 52 | i__20@63@02 < |First:(Second:(Second:(Second:($t@49@02))))| && 0 <= i__20@63@02]
(assert (and
  (<
    i__20@63@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
  (<= 0 i__20@63@02)))
; [eval] diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__20] == -1
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 10
(assert (not (>= i__20@63@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      67
;  :arith-assert-lower      404
;  :arith-assert-upper      453
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              700
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3169
;  :mk-clause               768
;  :num-allocs              5080052
;  :num-checks              223
;  :propagations            555
;  :quant-instantiations    284
;  :rlimit-count            227067)
; [eval] -1
(push) ; 10
; [then-branch: 53 | First:(Second:(Second:(Second:($t@49@02))))[i__20@63@02] == -1 | live]
; [else-branch: 53 | First:(Second:(Second:(Second:($t@49@02))))[i__20@63@02] != -1 | live]
(push) ; 11
; [then-branch: 53 | First:(Second:(Second:(Second:($t@49@02))))[i__20@63@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    i__20@63@02)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 53 | First:(Second:(Second:(Second:($t@49@02))))[i__20@63@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      i__20@63@02)
    (- 0 1))))
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__20]
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 12
(assert (not (>= i__20@63@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      68
;  :arith-assert-lower      407
;  :arith-assert-upper      454
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              700
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3175
;  :mk-clause               772
;  :num-allocs              5080052
;  :num-checks              224
;  :propagations            557
;  :quant-instantiations    285
;  :rlimit-count            227299)
(push) ; 12
; [then-branch: 54 | 0 <= First:(Second:(Second:(Second:($t@49@02))))[i__20@63@02] | live]
; [else-branch: 54 | !(0 <= First:(Second:(Second:(Second:($t@49@02))))[i__20@63@02]) | live]
(push) ; 13
; [then-branch: 54 | 0 <= First:(Second:(Second:(Second:($t@49@02))))[i__20@63@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    i__20@63@02)))
; [eval] diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 14
(assert (not (>= i__20@63@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      68
;  :arith-assert-lower      407
;  :arith-assert-upper      454
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               170
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              700
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3175
;  :mk-clause               772
;  :num-allocs              5080052
;  :num-checks              225
;  :propagations            557
;  :quant-instantiations    285
;  :rlimit-count            227413)
; [eval] |diz.Sensor_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 54 | !(0 <= First:(Second:(Second:(Second:($t@49@02))))[i__20@63@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      i__20@63@02))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 52 | !(i__20@63@02 < |First:(Second:(Second:(Second:($t@49@02))))| && 0 <= i__20@63@02)]
(assert (not
  (and
    (<
      i__20@63@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    (<= 0 i__20@63@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i__20@63@02 Int)) (!
  (implies
    (and
      (<
        i__20@63@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      (<= 0 i__20@63@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
          i__20@63@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
            i__20@63@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
            i__20@63@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    i__20@63@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      69
;  :arith-assert-lower      408
;  :arith-assert-upper      455
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               171
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3183
;  :mk-clause               784
;  :num-allocs              5080052
;  :num-checks              226
;  :propagations            559
;  :quant-instantiations    286
;  :rlimit-count            227859)
(assert (forall ((i__20@63@02 Int)) (!
  (implies
    (and
      (<
        i__20@63@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      (<= 0 i__20@63@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
          i__20@63@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
            i__20@63@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
            i__20@63@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    i__20@63@02))
  :qid |prog.l<no position>|)))
(declare-const $k@64@02 $Perm)
(assert ($Perm.isReadVar $k@64@02 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@64@02 $Perm.No) (< $Perm.No $k@64@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      70
;  :arith-assert-lower      410
;  :arith-assert-upper      456
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               172
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3188
;  :mk-clause               786
;  :num-allocs              5080052
;  :num-checks              227
;  :propagations            560
;  :quant-instantiations    286
;  :rlimit-count            228419)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@51@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      70
;  :arith-assert-lower      410
;  :arith-assert-upper      456
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            138
;  :binary-propagations     11
;  :conflicts               172
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3188
;  :mk-clause               786
;  :num-allocs              5080052
;  :num-checks              228
;  :propagations            560
;  :quant-instantiations    286
;  :rlimit-count            228430)
(assert (< $k@64@02 $k@51@02))
(assert (<= $Perm.No (- $k@51@02 $k@64@02)))
(assert (<= (- $k@51@02 $k@64@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@51@02 $k@64@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
; [eval] 0 < diz.Sensor_m.Main_MIN_DIST
(push) ; 7
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      70
;  :arith-assert-lower      412
;  :arith-assert-upper      457
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            139
;  :binary-propagations     11
;  :conflicts               173
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3191
;  :mk-clause               786
;  :num-allocs              5080052
;  :num-checks              229
;  :propagations            560
;  :quant-instantiations    286
;  :rlimit-count            228644)
(declare-const $k@65@02 $Perm)
(assert ($Perm.isReadVar $k@65@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@65@02 $Perm.No) (< $Perm.No $k@65@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      71
;  :arith-assert-lower      414
;  :arith-assert-upper      458
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            139
;  :binary-propagations     11
;  :conflicts               174
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3195
;  :mk-clause               788
;  :num-allocs              5080052
;  :num-checks              230
;  :propagations            561
;  :quant-instantiations    286
;  :rlimit-count            228843)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@52@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      71
;  :arith-assert-lower      414
;  :arith-assert-upper      458
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            139
;  :binary-propagations     11
;  :conflicts               174
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3195
;  :mk-clause               788
;  :num-allocs              5080052
;  :num-checks              231
;  :propagations            561
;  :quant-instantiations    286
;  :rlimit-count            228854)
(assert (< $k@65@02 $k@52@02))
(assert (<= $Perm.No (- $k@52@02 $k@65@02)))
(assert (<= (- $k@52@02 $k@65@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@52@02 $k@65@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
; [eval] diz.Sensor_m.Main_sensor != null
(push) ; 7
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      71
;  :arith-assert-lower      416
;  :arith-assert-upper      459
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            140
;  :binary-propagations     11
;  :conflicts               175
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3198
;  :mk-clause               788
;  :num-allocs              5080052
;  :num-checks              232
;  :propagations            561
;  :quant-instantiations    286
;  :rlimit-count            229068)
(push) ; 7
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      71
;  :arith-assert-lower      416
;  :arith-assert-upper      459
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            140
;  :binary-propagations     11
;  :conflicts               176
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3198
;  :mk-clause               788
;  :num-allocs              5080052
;  :num-checks              233
;  :propagations            561
;  :quant-instantiations    286
;  :rlimit-count            229116)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      71
;  :arith-assert-lower      416
;  :arith-assert-upper      459
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            140
;  :binary-propagations     11
;  :conflicts               176
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3198
;  :mk-clause               788
;  :num-allocs              5080052
;  :num-checks              234
;  :propagations            561
;  :quant-instantiations    286
;  :rlimit-count            229129)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7492
;  :arith-add-rows          98
;  :arith-assert-diseq      71
;  :arith-assert-lower      416
;  :arith-assert-upper      459
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        3
;  :arith-pivots            140
;  :binary-propagations     11
;  :conflicts               177
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1501
;  :datatype-occurs-check   446
;  :datatype-splits         1088
;  :decisions               1526
;  :del-clause              716
;  :final-checks            150
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3198
;  :mk-clause               788
;  :num-allocs              5080052
;  :num-checks              235
;  :propagations            561
;  :quant-instantiations    286
;  :rlimit-count            229177)
(push) ; 7
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7603
;  :arith-add-rows          100
;  :arith-assert-diseq      71
;  :arith-assert-lower      420
;  :arith-assert-upper      466
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            142
;  :binary-propagations     11
;  :conflicts               177
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3232
;  :mk-clause               794
;  :num-allocs              5080052
;  :num-checks              236
;  :propagations            571
;  :quant-instantiations    289
;  :rlimit-count            230311
;  :time                    0.00)
(declare-const $k@66@02 $Perm)
(assert ($Perm.isReadVar $k@66@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@66@02 $Perm.No) (< $Perm.No $k@66@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7603
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      422
;  :arith-assert-upper      467
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            142
;  :binary-propagations     11
;  :conflicts               178
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3236
;  :mk-clause               796
;  :num-allocs              5080052
;  :num-checks              237
;  :propagations            572
;  :quant-instantiations    289
;  :rlimit-count            230510)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@53@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7603
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      422
;  :arith-assert-upper      467
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            142
;  :binary-propagations     11
;  :conflicts               178
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3236
;  :mk-clause               796
;  :num-allocs              5080052
;  :num-checks              238
;  :propagations            572
;  :quant-instantiations    289
;  :rlimit-count            230521)
(assert (< $k@66@02 $k@53@02))
(assert (<= $Perm.No (- $k@53@02 $k@66@02)))
(assert (<= (- $k@53@02 $k@66@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@53@02 $k@66@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)) $Ref.null))))
; [eval] diz.Sensor_m.Main_controller != null
(push) ; 7
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7603
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      424
;  :arith-assert-upper      468
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               179
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3239
;  :mk-clause               796
;  :num-allocs              5080052
;  :num-checks              239
;  :propagations            572
;  :quant-instantiations    289
;  :rlimit-count            230735)
(push) ; 7
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7603
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      424
;  :arith-assert-upper      468
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               180
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3239
;  :mk-clause               796
;  :num-allocs              5080052
;  :num-checks              240
;  :propagations            572
;  :quant-instantiations    289
;  :rlimit-count            230783)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7603
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      424
;  :arith-assert-upper      468
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               180
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3239
;  :mk-clause               796
;  :num-allocs              5080052
;  :num-checks              241
;  :propagations            572
;  :quant-instantiations    289
;  :rlimit-count            230796)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7603
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      424
;  :arith-assert-upper      468
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3239
;  :mk-clause               796
;  :num-allocs              5080052
;  :num-checks              242
;  :propagations            572
;  :quant-instantiations    289
;  :rlimit-count            230844)
; [eval] diz.Sensor_m.Main_process_state[0] == -1 || diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0] == -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7603
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      424
;  :arith-assert-upper      468
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3239
;  :mk-clause               796
;  :num-allocs              5080052
;  :num-checks              243
;  :propagations            572
;  :quant-instantiations    289
;  :rlimit-count            230859)
; [eval] -1
(push) ; 7
; [then-branch: 55 | First:(Second:(Second:(Second:($t@49@02))))[0] == -1 | live]
; [else-branch: 55 | First:(Second:(Second:(Second:($t@49@02))))[0] != -1 | live]
(push) ; 8
; [then-branch: 55 | First:(Second:(Second:(Second:($t@49@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    0)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 55 | First:(Second:(Second:(Second:($t@49@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      0)
    (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7605
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      425
;  :arith-assert-upper      470
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              722
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3243
;  :mk-clause               799
;  :num-allocs              5080052
;  :num-checks              244
;  :propagations            575
;  :quant-instantiations    291
;  :rlimit-count            231091)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] diz.Sensor_m.Main_process_state[1] == -1 || diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7605
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      425
;  :arith-assert-upper      470
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              725
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3243
;  :mk-clause               799
;  :num-allocs              5080052
;  :num-checks              245
;  :propagations            575
;  :quant-instantiations    291
;  :rlimit-count            231106)
; [eval] -1
(push) ; 7
; [then-branch: 56 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1 | live]
; [else-branch: 56 | First:(Second:(Second:(Second:($t@49@02))))[1] != -1 | live]
(push) ; 8
; [then-branch: 56 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    1)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 56 | First:(Second:(Second:(Second:($t@49@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7607
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      427
;  :arith-assert-upper      472
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              725
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3248
;  :mk-clause               802
;  :num-allocs              5080052
;  :num-checks              246
;  :propagations            578
;  :quant-instantiations    293
;  :rlimit-count            231341)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] diz.Sensor_m.Main_event_state[0] != -1
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7607
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      427
;  :arith-assert-upper      472
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              728
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3248
;  :mk-clause               802
;  :num-allocs              5080052
;  :num-checks              247
;  :propagations            578
;  :quant-instantiations    293
;  :rlimit-count            231356)
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[0] != 0
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7607
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      427
;  :arith-assert-upper      472
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              728
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3248
;  :mk-clause               802
;  :num-allocs              5080052
;  :num-checks              248
;  :propagations            578
;  :quant-instantiations    293
;  :rlimit-count            231371)
; [eval] diz.Sensor_m.Main_event_state[2] <= -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7607
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      427
;  :arith-assert-upper      472
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              728
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3248
;  :mk-clause               802
;  :num-allocs              5080052
;  :num-checks              249
;  :propagations            578
;  :quant-instantiations    293
;  :rlimit-count            231386)
; [eval] -1
; [eval] !diz.Sensor_m.Main_controller.Controller_init || (diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1)
; [eval] !diz.Sensor_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7607
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      427
;  :arith-assert-upper      472
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               182
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              728
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3248
;  :mk-clause               802
;  :num-allocs              5080052
;  :num-checks              250
;  :propagations            578
;  :quant-instantiations    293
;  :rlimit-count            231434)
(push) ; 7
; [then-branch: 57 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))) | live]
; [else-branch: 57 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))) | live]
(push) ; 8
; [then-branch: 57 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 57 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7610
;  :arith-add-rows          100
;  :arith-assert-diseq      72
;  :arith-assert-lower      427
;  :arith-assert-upper      472
;  :arith-bound-prop        19
;  :arith-conflicts         20
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        3
;  :arith-pivots            143
;  :binary-propagations     11
;  :conflicts               182
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   455
;  :datatype-splits         1109
;  :decisions               1552
;  :del-clause              728
;  :final-checks            153
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          4
;  :mk-bool-var             3249
;  :mk-clause               802
;  :num-allocs              5080052
;  :num-checks              251
;  :propagations            578
;  :quant-instantiations    294
;  :rlimit-count            231735)
; [eval] -1
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7791
;  :arith-add-rows          108
;  :arith-assert-diseq      74
;  :arith-assert-lower      433
;  :arith-assert-upper      484
;  :arith-bound-prop        21
;  :arith-conflicts         20
;  :arith-eq-adapter        350
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        4
;  :arith-pivots            148
;  :binary-propagations     11
;  :conflicts               186
;  :datatype-accessor-ax    298
;  :datatype-constructor-ax 1569
;  :datatype-occurs-check   467
;  :datatype-splits         1135
;  :decisions               1595
;  :del-clause              751
;  :final-checks            158
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          5
;  :mk-bool-var             3320
;  :mk-clause               825
;  :num-allocs              5080052
;  :num-checks              252
;  :propagations            594
;  :quant-instantiations    299
;  :rlimit-count            233399
;  :time                    0.00)
(push) ; 10
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7942
;  :arith-add-rows          111
;  :arith-assert-diseq      74
;  :arith-assert-lower      440
;  :arith-assert-upper      494
;  :arith-bound-prop        21
;  :arith-conflicts         20
;  :arith-eq-adapter        356
;  :arith-fixed-eqs         282
;  :arith-offset-eqs        4
;  :arith-pivots            151
;  :binary-propagations     11
;  :conflicts               188
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1605
;  :datatype-occurs-check   479
;  :datatype-splits         1160
;  :decisions               1630
;  :del-clause              764
;  :final-checks            162
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          5
;  :mk-bool-var             3373
;  :mk-clause               838
;  :num-allocs              5080052
;  :num-checks              253
;  :propagations            606
;  :quant-instantiations    303
;  :rlimit-count            234870
;  :time                    0.00)
; [then-branch: 58 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@49@02))))[1] != -1 | live]
(push) ; 10
; [then-branch: 58 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
    1)
  (- 0 1)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7947
;  :arith-add-rows          112
;  :arith-assert-diseq      74
;  :arith-assert-lower      441
;  :arith-assert-upper      497
;  :arith-bound-prop        21
;  :arith-conflicts         20
;  :arith-eq-adapter        357
;  :arith-fixed-eqs         282
;  :arith-offset-eqs        4
;  :arith-pivots            152
;  :binary-propagations     11
;  :conflicts               188
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1605
;  :datatype-occurs-check   479
;  :datatype-splits         1160
;  :decisions               1630
;  :del-clause              764
;  :final-checks            162
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          5
;  :mk-bool-var             3378
;  :mk-clause               841
;  :num-allocs              5080052
;  :num-checks              254
;  :propagations            611
;  :quant-instantiations    306
;  :rlimit-count            235106)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 58 | First:(Second:(Second:(Second:($t@49@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7947
;  :arith-add-rows          112
;  :arith-assert-diseq      74
;  :arith-assert-lower      441
;  :arith-assert-upper      497
;  :arith-bound-prop        21
;  :arith-conflicts         20
;  :arith-eq-adapter        357
;  :arith-fixed-eqs         282
;  :arith-offset-eqs        4
;  :arith-pivots            152
;  :binary-propagations     11
;  :conflicts               188
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1605
;  :datatype-occurs-check   479
;  :datatype-splits         1160
;  :decisions               1630
;  :del-clause              767
;  :final-checks            162
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          5
;  :mk-bool-var             3378
;  :mk-clause               841
;  :num-allocs              5080052
;  :num-checks              255
;  :propagations            611
;  :quant-instantiations    306
;  :rlimit-count            235149)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8427
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      458
;  :arith-assert-upper      520
;  :arith-bound-prop        26
;  :arith-conflicts         21
;  :arith-eq-adapter        382
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        12
;  :arith-pivots            157
;  :binary-propagations     11
;  :conflicts               200
;  :datatype-accessor-ax    323
;  :datatype-constructor-ax 1723
;  :datatype-occurs-check   506
;  :datatype-splits         1246
;  :decisions               1744
;  :del-clause              827
;  :final-checks            173
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          8
;  :mk-bool-var             3572
;  :mk-clause               901
;  :num-allocs              5080052
;  :num-checks              256
;  :propagations            648
;  :quant-instantiations    315
;  :rlimit-count            238298
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8538
;  :arith-add-rows          134
;  :arith-assert-diseq      82
;  :arith-assert-lower      462
;  :arith-assert-upper      527
;  :arith-bound-prop        26
;  :arith-conflicts         21
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        12
;  :arith-pivots            159
;  :binary-propagations     11
;  :conflicts               200
;  :datatype-accessor-ax    326
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   515
;  :datatype-splits         1267
;  :decisions               1770
;  :del-clause              833
;  :final-checks            176
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          8
;  :mk-bool-var             3606
;  :mk-clause               907
;  :num-allocs              5080052
;  :num-checks              257
;  :propagations            657
;  :quant-instantiations    318
;  :rlimit-count            239559
;  :time                    0.00)
; [then-branch: 59 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2] | live]
; [else-branch: 59 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2]) | live]
(push) ; 8
; [then-branch: 59 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8542
;  :arith-add-rows          135
;  :arith-assert-diseq      82
;  :arith-assert-lower      464
;  :arith-assert-upper      530
;  :arith-bound-prop        26
;  :arith-conflicts         21
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         304
;  :arith-offset-eqs        12
;  :arith-pivots            160
;  :binary-propagations     11
;  :conflicts               200
;  :datatype-accessor-ax    326
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   515
;  :datatype-splits         1267
;  :decisions               1770
;  :del-clause              833
;  :final-checks            176
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          8
;  :mk-bool-var             3611
;  :mk-clause               910
;  :num-allocs              5080052
;  :num-checks              258
;  :propagations            662
;  :quant-instantiations    321
;  :rlimit-count            239812)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 59 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8542
;  :arith-add-rows          135
;  :arith-assert-diseq      82
;  :arith-assert-lower      464
;  :arith-assert-upper      530
;  :arith-bound-prop        26
;  :arith-conflicts         21
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         304
;  :arith-offset-eqs        12
;  :arith-pivots            160
;  :binary-propagations     11
;  :conflicts               200
;  :datatype-accessor-ax    326
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   515
;  :datatype-splits         1267
;  :decisions               1770
;  :del-clause              836
;  :final-checks            176
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          8
;  :mk-bool-var             3611
;  :mk-clause               910
;  :num-allocs              5080052
;  :num-checks              259
;  :propagations            662
;  :quant-instantiations    321
;  :rlimit-count            239859)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9022
;  :arith-add-rows          155
;  :arith-assert-diseq      90
;  :arith-assert-lower      481
;  :arith-assert-upper      553
;  :arith-bound-prop        31
;  :arith-conflicts         22
;  :arith-eq-adapter        412
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        20
;  :arith-pivots            165
;  :binary-propagations     11
;  :conflicts               212
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1865
;  :datatype-occurs-check   542
;  :datatype-splits         1353
;  :decisions               1884
;  :del-clause              896
;  :final-checks            187
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          11
;  :mk-bool-var             3805
;  :mk-clause               970
;  :num-allocs              5080052
;  :num-checks              260
;  :propagations            699
;  :quant-instantiations    330
;  :rlimit-count            243007
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9133
;  :arith-add-rows          157
;  :arith-assert-diseq      90
;  :arith-assert-lower      485
;  :arith-assert-upper      560
;  :arith-bound-prop        31
;  :arith-conflicts         22
;  :arith-eq-adapter        416
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        20
;  :arith-pivots            167
;  :binary-propagations     11
;  :conflicts               212
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1889
;  :datatype-occurs-check   551
;  :datatype-splits         1374
;  :decisions               1910
;  :del-clause              902
;  :final-checks            190
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          11
;  :mk-bool-var             3839
;  :mk-clause               976
;  :num-allocs              5080052
;  :num-checks              261
;  :propagations            708
;  :quant-instantiations    333
;  :rlimit-count            244268
;  :time                    0.00)
; [then-branch: 60 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2] | live]
; [else-branch: 60 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2]) | live]
(push) ; 8
; [then-branch: 60 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
    2)))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9137
;  :arith-add-rows          158
;  :arith-assert-diseq      90
;  :arith-assert-lower      487
;  :arith-assert-upper      563
;  :arith-bound-prop        31
;  :arith-conflicts         22
;  :arith-eq-adapter        417
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        20
;  :arith-pivots            168
;  :binary-propagations     11
;  :conflicts               213
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1889
;  :datatype-occurs-check   551
;  :datatype-splits         1374
;  :decisions               1910
;  :del-clause              902
;  :final-checks            190
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          11
;  :mk-bool-var             3844
;  :mk-clause               979
;  :num-allocs              5080052
;  :num-checks              262
;  :propagations            713
;  :quant-instantiations    336
;  :rlimit-count            244554)
(push) ; 9
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9137
;  :arith-add-rows          158
;  :arith-assert-diseq      90
;  :arith-assert-lower      487
;  :arith-assert-upper      563
;  :arith-bound-prop        31
;  :arith-conflicts         22
;  :arith-eq-adapter        417
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        20
;  :arith-pivots            168
;  :binary-propagations     11
;  :conflicts               214
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1889
;  :datatype-occurs-check   551
;  :datatype-splits         1374
;  :decisions               1910
;  :del-clause              902
;  :final-checks            190
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          11
;  :mk-bool-var             3844
;  :mk-clause               979
;  :num-allocs              5080052
;  :num-checks              263
;  :propagations            713
;  :quant-instantiations    336
;  :rlimit-count            244602)
(pop) ; 8
(push) ; 8
; [else-branch: 60 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1
(push) ; 7
(assert (not (< $Perm.No $k@53@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9137
;  :arith-add-rows          158
;  :arith-assert-diseq      90
;  :arith-assert-lower      487
;  :arith-assert-upper      563
;  :arith-bound-prop        31
;  :arith-conflicts         22
;  :arith-eq-adapter        417
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        20
;  :arith-pivots            168
;  :binary-propagations     11
;  :conflicts               215
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1889
;  :datatype-occurs-check   551
;  :datatype-splits         1374
;  :decisions               1910
;  :del-clause              905
;  :final-checks            190
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          11
;  :mk-bool-var             3844
;  :mk-clause               979
;  :num-allocs              5080052
;  :num-checks              264
;  :propagations            713
;  :quant-instantiations    336
;  :rlimit-count            244682)
(push) ; 7
; [then-branch: 61 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))) | live]
; [else-branch: 61 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 61 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9140
;  :arith-add-rows          158
;  :arith-assert-diseq      90
;  :arith-assert-lower      487
;  :arith-assert-upper      563
;  :arith-bound-prop        31
;  :arith-conflicts         22
;  :arith-eq-adapter        417
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        20
;  :arith-pivots            168
;  :binary-propagations     11
;  :conflicts               215
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1889
;  :datatype-occurs-check   551
;  :datatype-splits         1374
;  :decisions               1910
;  :del-clause              905
;  :final-checks            190
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          11
;  :mk-bool-var             3845
;  :mk-clause               979
;  :num-allocs              5080052
;  :num-checks              265
;  :propagations            713
;  :quant-instantiations    337
;  :rlimit-count            244937)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 61 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9324
;  :arith-add-rows          163
;  :arith-assert-diseq      92
;  :arith-assert-lower      493
;  :arith-assert-upper      575
;  :arith-bound-prop        33
;  :arith-conflicts         22
;  :arith-eq-adapter        428
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        21
;  :arith-pivots            172
;  :binary-propagations     11
;  :conflicts               219
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1933
;  :datatype-occurs-check   563
;  :datatype-splits         1400
;  :decisions               1953
;  :del-clause              928
;  :final-checks            195
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             3917
;  :mk-clause               1002
;  :num-allocs              5080052
;  :num-checks              266
;  :propagations            729
;  :quant-instantiations    343
;  :rlimit-count            246794
;  :time                    0.00)
(push) ; 8
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9435
;  :arith-add-rows          166
;  :arith-assert-diseq      92
;  :arith-assert-lower      497
;  :arith-assert-upper      582
;  :arith-bound-prop        33
;  :arith-conflicts         22
;  :arith-eq-adapter        432
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        21
;  :arith-pivots            175
;  :binary-propagations     11
;  :conflicts               219
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1957
;  :datatype-occurs-check   572
;  :datatype-splits         1421
;  :decisions               1979
;  :del-clause              935
;  :final-checks            198
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             3951
;  :mk-clause               1009
;  :num-allocs              5080052
;  :num-checks              267
;  :propagations            739
;  :quant-instantiations    346
;  :rlimit-count            248221)
; [then-branch: 62 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))) | live]
; [else-branch: 62 | !(First:(Second:(Second:(Second:($t@49@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 62 | First:(Second:(Second:(Second:($t@49@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))))))))))))))))))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9443
;  :arith-add-rows          167
;  :arith-assert-diseq      92
;  :arith-assert-lower      498
;  :arith-assert-upper      585
;  :arith-bound-prop        33
;  :arith-conflicts         22
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        21
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               220
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1957
;  :datatype-occurs-check   572
;  :datatype-splits         1421
;  :decisions               1979
;  :del-clause              935
;  :final-checks            198
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             3957
;  :mk-clause               1012
;  :num-allocs              5080052
;  :num-checks              268
;  :propagations            744
;  :quant-instantiations    350
;  :rlimit-count            248682)
(push) ; 9
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9443
;  :arith-add-rows          167
;  :arith-assert-diseq      92
;  :arith-assert-lower      498
;  :arith-assert-upper      585
;  :arith-bound-prop        33
;  :arith-conflicts         22
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        21
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               221
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1957
;  :datatype-occurs-check   572
;  :datatype-splits         1421
;  :decisions               1979
;  :del-clause              935
;  :final-checks            198
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             3957
;  :mk-clause               1012
;  :num-allocs              5080052
;  :num-checks              269
;  :propagations            744
;  :quant-instantiations    350
;  :rlimit-count            248730)
(pop) ; 8
(push) ; 8
; [else-branch: 62 | !(First:(Second:(Second:(Second:($t@49@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@49@02)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@02))))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] diz.Sensor_m.Main_sensor == diz
(push) ; 7
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9443
;  :arith-add-rows          167
;  :arith-assert-diseq      92
;  :arith-assert-lower      498
;  :arith-assert-upper      585
;  :arith-bound-prop        33
;  :arith-conflicts         22
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        21
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               222
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1957
;  :datatype-occurs-check   572
;  :datatype-splits         1421
;  :decisions               1979
;  :del-clause              938
;  :final-checks            198
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             3957
;  :mk-clause               1012
;  :num-allocs              5080052
;  :num-checks              270
;  :propagations            744
;  :quant-instantiations    350
;  :rlimit-count            248840)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9443
;  :arith-add-rows          167
;  :arith-assert-diseq      92
;  :arith-assert-lower      498
;  :arith-assert-upper      585
;  :arith-bound-prop        33
;  :arith-conflicts         22
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        21
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               222
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1957
;  :datatype-occurs-check   572
;  :datatype-splits         1421
;  :decisions               1979
;  :del-clause              938
;  :final-checks            198
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             3957
;  :mk-clause               1012
;  :num-allocs              5080052
;  :num-checks              271
;  :propagations            744
;  :quant-instantiations    350
;  :rlimit-count            248853)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@60@02 $Perm.Write))
(assert ($Perm.isReadVar $k@61@02 $Perm.Write))
(assert ($Perm.isReadVar $k@62@02 $Perm.Write))
(assert (= $t@58@02 ($Snap.combine ($Snap.first $t@58@02) ($Snap.second $t@58@02))))
(assert (=
  ($Snap.second $t@58@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@02))
    ($Snap.second ($Snap.second $t@58@02)))))
(assert (= ($Snap.first ($Snap.second $t@58@02)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@58@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@58@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
  $Snap.unit))
(assert (forall ((i__20@59@02 Int)) (!
  (implies
    (and
      (<
        i__20@59@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      (<= 0 i__20@59@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          i__20@59@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
            i__20@59@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
            i__20@59@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    i__20@59@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
(assert (<= $Perm.No $k@60@02))
(assert (<= $k@60@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@60@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))
  $Snap.unit))
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
(assert (<= $Perm.No $k@61@02))
(assert (<= $k@61@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@61@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))
(assert (<= $Perm.No $k@62@02))
(assert (<= $k@62@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@62@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))
  $Snap.unit))
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
  $Snap.unit))
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
  $Snap.unit))
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))
  $Snap.unit))
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  diz@2@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Sensor_m.Main_process_state[0] != -1 || diz.Sensor_m.Main_event_state[0] != -2
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10049
;  :arith-add-rows          205
;  :arith-assert-diseq      95
;  :arith-assert-lower      526
;  :arith-assert-upper      619
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        455
;  :arith-fixed-eqs         364
;  :arith-offset-eqs        26
;  :arith-pivots            196
;  :binary-propagations     11
;  :conflicts               223
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 2039
;  :datatype-occurs-check   594
;  :datatype-splits         1482
;  :decisions               2069
;  :del-clause              970
;  :final-checks            205
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4174
;  :mk-clause               1058
;  :num-allocs              5080052
;  :num-checks              274
;  :propagations            773
;  :quant-instantiations    368
;  :rlimit-count            257634)
; [eval] -1
(push) ; 8
; [then-branch: 63 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 | live]
; [else-branch: 63 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1 | live]
(push) ; 9
; [then-branch: 63 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 63 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    0)
  (- 0 1)))
; [eval] diz.Sensor_m.Main_event_state[0] != -2
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10051
;  :arith-add-rows          205
;  :arith-assert-diseq      95
;  :arith-assert-lower      526
;  :arith-assert-upper      620
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        455
;  :arith-fixed-eqs         364
;  :arith-offset-eqs        26
;  :arith-pivots            196
;  :binary-propagations     11
;  :conflicts               223
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 2039
;  :datatype-occurs-check   594
;  :datatype-splits         1482
;  :decisions               2069
;  :del-clause              970
;  :final-checks            205
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4174
;  :mk-clause               1058
;  :num-allocs              5080052
;  :num-checks              275
;  :propagations            774
;  :quant-instantiations    368
;  :rlimit-count            257800)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10235
;  :arith-add-rows          213
;  :arith-assert-diseq      95
;  :arith-assert-lower      533
;  :arith-assert-upper      631
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        462
;  :arith-fixed-eqs         376
;  :arith-offset-eqs        30
;  :arith-pivots            203
;  :binary-propagations     11
;  :conflicts               223
;  :datatype-accessor-ax    399
;  :datatype-constructor-ax 2072
;  :datatype-occurs-check   605
;  :datatype-splits         1512
;  :decisions               2107
;  :del-clause              982
;  :final-checks            209
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4225
;  :mk-clause               1070
;  :num-allocs              5080052
;  :num-checks              276
;  :propagations            793
;  :quant-instantiations    372
;  :rlimit-count            259636
;  :time                    0.00)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      95
;  :arith-assert-lower      540
;  :arith-assert-upper      642
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        469
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               223
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              993
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4276
;  :mk-clause               1081
;  :num-allocs              5080052
;  :num-checks              277
;  :propagations            811
;  :quant-instantiations    376
;  :rlimit-count            261350
;  :time                    0.00)
; [then-branch: 64 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[0] != -2 | live]
; [else-branch: 64 | !(First:(Second:(Second:(Second:($t@58@02))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[0] != -2) | live]
(push) ; 8
; [then-branch: 64 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
        0)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Sensor_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Sensor_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@67@02 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 65 | 0 <= i@67@02 | live]
; [else-branch: 65 | !(0 <= i@67@02) | live]
(push) ; 11
; [then-branch: 65 | 0 <= i@67@02]
(assert (<= 0 i@67@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 65 | !(0 <= i@67@02)]
(assert (not (<= 0 i@67@02)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 66 | i@67@02 < |First:(Second:(Second:(Second:($t@58@02))))| && 0 <= i@67@02 | live]
; [else-branch: 66 | !(i@67@02 < |First:(Second:(Second:(Second:($t@58@02))))| && 0 <= i@67@02) | live]
(push) ; 11
; [then-branch: 66 | i@67@02 < |First:(Second:(Second:(Second:($t@58@02))))| && 0 <= i@67@02]
(assert (and
  (<
    i@67@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
  (<= 0 i@67@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@67@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      95
;  :arith-assert-lower      541
;  :arith-assert-upper      643
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        469
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               223
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              993
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4279
;  :mk-clause               1082
;  :num-allocs              5080052
;  :num-checks              278
;  :propagations            811
;  :quant-instantiations    376
;  :rlimit-count            261704)
; [eval] -1
(push) ; 12
; [then-branch: 67 | First:(Second:(Second:(Second:($t@58@02))))[i@67@02] == -1 | live]
; [else-branch: 67 | First:(Second:(Second:(Second:($t@58@02))))[i@67@02] != -1 | live]
(push) ; 13
; [then-branch: 67 | First:(Second:(Second:(Second:($t@58@02))))[i@67@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    i@67@02)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 67 | First:(Second:(Second:(Second:($t@58@02))))[i@67@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      i@67@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@67@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      96
;  :arith-assert-lower      544
;  :arith-assert-upper      644
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        470
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               223
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              993
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4285
;  :mk-clause               1086
;  :num-allocs              5080052
;  :num-checks              279
;  :propagations            813
;  :quant-instantiations    377
;  :rlimit-count            261936)
(push) ; 14
; [then-branch: 68 | 0 <= First:(Second:(Second:(Second:($t@58@02))))[i@67@02] | live]
; [else-branch: 68 | !(0 <= First:(Second:(Second:(Second:($t@58@02))))[i@67@02]) | live]
(push) ; 15
; [then-branch: 68 | 0 <= First:(Second:(Second:(Second:($t@58@02))))[i@67@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    i@67@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@67@02 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      96
;  :arith-assert-lower      544
;  :arith-assert-upper      644
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        470
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               223
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              993
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4285
;  :mk-clause               1086
;  :num-allocs              5080052
;  :num-checks              280
;  :propagations            813
;  :quant-instantiations    377
;  :rlimit-count            262050)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 68 | !(0 <= First:(Second:(Second:(Second:($t@58@02))))[i@67@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      i@67@02))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 66 | !(i@67@02 < |First:(Second:(Second:(Second:($t@58@02))))| && 0 <= i@67@02)]
(assert (not
  (and
    (<
      i@67@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    (<= 0 i@67@02))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i@67@02 Int)) (!
  (implies
    (and
      (<
        i@67@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      (<= 0 i@67@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          i@67@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
            i@67@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
            i@67@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    i@67@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      98
;  :arith-assert-lower      545
;  :arith-assert-upper      645
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        471
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               224
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4293
;  :mk-clause               1100
;  :num-allocs              5080052
;  :num-checks              281
;  :propagations            815
;  :quant-instantiations    378
;  :rlimit-count            262496)
(assert (forall ((i@67@02 Int)) (!
  (implies
    (and
      (<
        i@67@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      (<= 0 i@67@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          i@67@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
            i@67@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
            i@67@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    i@67@02))
  :qid |prog.l<no position>|)))
(declare-const $k@68@02 $Perm)
(assert ($Perm.isReadVar $k@68@02 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@68@02 $Perm.No) (< $Perm.No $k@68@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      99
;  :arith-assert-lower      547
;  :arith-assert-upper      646
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        472
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               225
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4298
;  :mk-clause               1102
;  :num-allocs              5080052
;  :num-checks              282
;  :propagations            816
;  :quant-instantiations    378
;  :rlimit-count            263057)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@60@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      99
;  :arith-assert-lower      547
;  :arith-assert-upper      646
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        472
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               225
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4298
;  :mk-clause               1102
;  :num-allocs              5080052
;  :num-checks              283
;  :propagations            816
;  :quant-instantiations    378
;  :rlimit-count            263068)
(assert (< $k@68@02 $k@60@02))
(assert (<= $Perm.No (- $k@60@02 $k@68@02)))
(assert (<= (- $k@60@02 $k@68@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@60@02 $k@68@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      99
;  :arith-assert-lower      548
;  :arith-assert-upper      648
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        472
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               226
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4301
;  :mk-clause               1102
;  :num-allocs              5080052
;  :num-checks              284
;  :propagations            816
;  :quant-instantiations    378
;  :rlimit-count            263276)
(declare-const $k@69@02 $Perm)
(assert ($Perm.isReadVar $k@69@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@69@02 $Perm.No) (< $Perm.No $k@69@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      100
;  :arith-assert-lower      550
;  :arith-assert-upper      649
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        473
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               227
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4305
;  :mk-clause               1104
;  :num-allocs              5080052
;  :num-checks              285
;  :propagations            817
;  :quant-instantiations    378
;  :rlimit-count            263474)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@61@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      100
;  :arith-assert-lower      550
;  :arith-assert-upper      649
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        473
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            207
;  :binary-propagations     11
;  :conflicts               227
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4305
;  :mk-clause               1104
;  :num-allocs              5080052
;  :num-checks              286
;  :propagations            817
;  :quant-instantiations    378
;  :rlimit-count            263485)
(assert (< $k@69@02 $k@61@02))
(assert (<= $Perm.No (- $k@61@02 $k@69@02)))
(assert (<= (- $k@61@02 $k@69@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@61@02 $k@69@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 9
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      100
;  :arith-assert-lower      552
;  :arith-assert-upper      650
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        473
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            208
;  :binary-propagations     11
;  :conflicts               228
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4308
;  :mk-clause               1104
;  :num-allocs              5080052
;  :num-checks              287
;  :propagations            817
;  :quant-instantiations    378
;  :rlimit-count            263699)
(push) ; 9
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      100
;  :arith-assert-lower      552
;  :arith-assert-upper      650
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        473
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            208
;  :binary-propagations     11
;  :conflicts               229
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4308
;  :mk-clause               1104
;  :num-allocs              5080052
;  :num-checks              288
;  :propagations            817
;  :quant-instantiations    378
;  :rlimit-count            263747)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      100
;  :arith-assert-lower      552
;  :arith-assert-upper      650
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        473
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            208
;  :binary-propagations     11
;  :conflicts               229
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4308
;  :mk-clause               1104
;  :num-allocs              5080052
;  :num-checks              289
;  :propagations            817
;  :quant-instantiations    378
;  :rlimit-count            263760)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10424
;  :arith-add-rows          216
;  :arith-assert-diseq      100
;  :arith-assert-lower      552
;  :arith-assert-upper      650
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        473
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        38
;  :arith-pivots            208
;  :binary-propagations     11
;  :conflicts               230
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2105
;  :datatype-occurs-check   616
;  :datatype-splits         1542
;  :decisions               2144
;  :del-clause              1011
;  :final-checks            213
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.69
;  :memory                  4.69
;  :minimized-lits          12
;  :mk-bool-var             4308
;  :mk-clause               1104
;  :num-allocs              5080052
;  :num-checks              290
;  :propagations            817
;  :quant-instantiations    378
;  :rlimit-count            263808)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10612
;  :arith-add-rows          219
;  :arith-assert-diseq      100
;  :arith-assert-lower      559
;  :arith-assert-upper      661
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        480
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            212
;  :binary-propagations     11
;  :conflicts               230
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4358
;  :mk-clause               1115
;  :num-allocs              5296626
;  :num-checks              291
;  :propagations            836
;  :quant-instantiations    382
;  :rlimit-count            265366
;  :time                    0.00)
(declare-const $k@70@02 $Perm)
(assert ($Perm.isReadVar $k@70@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@70@02 $Perm.No) (< $Perm.No $k@70@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10612
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      561
;  :arith-assert-upper      662
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            212
;  :binary-propagations     11
;  :conflicts               231
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4362
;  :mk-clause               1117
;  :num-allocs              5296626
;  :num-checks              292
;  :propagations            837
;  :quant-instantiations    382
;  :rlimit-count            265565)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@62@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10612
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      561
;  :arith-assert-upper      662
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            212
;  :binary-propagations     11
;  :conflicts               231
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4362
;  :mk-clause               1117
;  :num-allocs              5296626
;  :num-checks              293
;  :propagations            837
;  :quant-instantiations    382
;  :rlimit-count            265576)
(assert (< $k@70@02 $k@62@02))
(assert (<= $Perm.No (- $k@62@02 $k@70@02)))
(assert (<= (- $k@62@02 $k@70@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@62@02 $k@70@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 9
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10612
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      563
;  :arith-assert-upper      663
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               232
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4365
;  :mk-clause               1117
;  :num-allocs              5296626
;  :num-checks              294
;  :propagations            837
;  :quant-instantiations    382
;  :rlimit-count            265790)
(push) ; 9
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10612
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      563
;  :arith-assert-upper      663
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               233
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4365
;  :mk-clause               1117
;  :num-allocs              5296626
;  :num-checks              295
;  :propagations            837
;  :quant-instantiations    382
;  :rlimit-count            265838)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10612
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      563
;  :arith-assert-upper      663
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               233
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4365
;  :mk-clause               1117
;  :num-allocs              5296626
;  :num-checks              296
;  :propagations            837
;  :quant-instantiations    382
;  :rlimit-count            265851)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10612
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      563
;  :arith-assert-upper      663
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4365
;  :mk-clause               1117
;  :num-allocs              5296626
;  :num-checks              297
;  :propagations            837
;  :quant-instantiations    382
;  :rlimit-count            265899)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10612
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      563
;  :arith-assert-upper      663
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        481
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4365
;  :mk-clause               1117
;  :num-allocs              5296626
;  :num-checks              298
;  :propagations            837
;  :quant-instantiations    382
;  :rlimit-count            265914)
; [eval] -1
(push) ; 9
; [then-branch: 69 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1 | live]
; [else-branch: 69 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 | live]
(push) ; 10
; [then-branch: 69 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    0)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 69 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10614
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      564
;  :arith-assert-upper      665
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        482
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1022
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4369
;  :mk-clause               1120
;  :num-allocs              5296626
;  :num-checks              299
;  :propagations            840
;  :quant-instantiations    384
;  :rlimit-count            266146)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10614
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      564
;  :arith-assert-upper      665
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        482
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1025
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4369
;  :mk-clause               1120
;  :num-allocs              5296626
;  :num-checks              300
;  :propagations            840
;  :quant-instantiations    384
;  :rlimit-count            266161)
; [eval] -1
(push) ; 9
; [then-branch: 70 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1 | live]
; [else-branch: 70 | First:(Second:(Second:(Second:($t@58@02))))[1] != -1 | live]
(push) ; 10
; [then-branch: 70 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    1)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 70 | First:(Second:(Second:(Second:($t@58@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10616
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      566
;  :arith-assert-upper      667
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        483
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1025
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4374
;  :mk-clause               1123
;  :num-allocs              5296626
;  :num-checks              301
;  :propagations            843
;  :quant-instantiations    386
;  :rlimit-count            266396)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10616
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      566
;  :arith-assert-upper      667
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        483
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1028
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4374
;  :mk-clause               1123
;  :num-allocs              5296626
;  :num-checks              302
;  :propagations            843
;  :quant-instantiations    386
;  :rlimit-count            266411)
; [eval] -1
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10616
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      566
;  :arith-assert-upper      667
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        483
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1028
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4374
;  :mk-clause               1123
;  :num-allocs              5296626
;  :num-checks              303
;  :propagations            843
;  :quant-instantiations    386
;  :rlimit-count            266426)
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10616
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      566
;  :arith-assert-upper      667
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        483
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               234
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1028
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4374
;  :mk-clause               1123
;  :num-allocs              5296626
;  :num-checks              304
;  :propagations            843
;  :quant-instantiations    386
;  :rlimit-count            266441)
; [eval] -1
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10616
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      566
;  :arith-assert-upper      667
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        483
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               235
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1028
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4374
;  :mk-clause               1123
;  :num-allocs              5296626
;  :num-checks              305
;  :propagations            843
;  :quant-instantiations    386
;  :rlimit-count            266489)
(push) ; 9
; [then-branch: 71 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
; [else-branch: 71 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
(push) ; 10
; [then-branch: 71 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 71 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10619
;  :arith-add-rows          219
;  :arith-assert-diseq      101
;  :arith-assert-lower      566
;  :arith-assert-upper      667
;  :arith-bound-prop        39
;  :arith-conflicts         22
;  :arith-eq-adapter        483
;  :arith-fixed-eqs         400
;  :arith-offset-eqs        46
;  :arith-pivots            213
;  :binary-propagations     11
;  :conflicts               235
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2138
;  :datatype-occurs-check   627
;  :datatype-splits         1572
;  :decisions               2182
;  :del-clause              1028
;  :final-checks            217
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4375
;  :mk-clause               1123
;  :num-allocs              5296626
;  :num-checks              306
;  :propagations            843
;  :quant-instantiations    387
;  :rlimit-count            266790)
; [eval] -1
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10860
;  :arith-add-rows          224
;  :arith-assert-diseq      102
;  :arith-assert-lower      578
;  :arith-assert-upper      680
;  :arith-bound-prop        40
;  :arith-conflicts         22
;  :arith-eq-adapter        496
;  :arith-fixed-eqs         413
;  :arith-offset-eqs        53
;  :arith-pivots            218
;  :binary-propagations     11
;  :conflicts               239
;  :datatype-accessor-ax    414
;  :datatype-constructor-ax 2193
;  :datatype-occurs-check   643
;  :datatype-splits         1608
;  :decisions               2237
;  :del-clause              1055
;  :final-checks            222
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4457
;  :mk-clause               1150
;  :num-allocs              5296626
;  :num-checks              307
;  :propagations            866
;  :quant-instantiations    393
;  :rlimit-count            268860
;  :time                    0.00)
(push) ; 12
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11093
;  :arith-add-rows          229
;  :arith-assert-diseq      102
;  :arith-assert-lower      589
;  :arith-assert-upper      695
;  :arith-bound-prop        40
;  :arith-conflicts         22
;  :arith-eq-adapter        506
;  :arith-fixed-eqs         429
;  :arith-offset-eqs        62
;  :arith-pivots            223
;  :binary-propagations     11
;  :conflicts               241
;  :datatype-accessor-ax    420
;  :datatype-constructor-ax 2244
;  :datatype-occurs-check   659
;  :datatype-splits         1642
;  :decisions               2290
;  :del-clause              1074
;  :final-checks            227
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4528
;  :mk-clause               1169
;  :num-allocs              5296626
;  :num-checks              308
;  :propagations            889
;  :quant-instantiations    398
;  :rlimit-count            270875
;  :time                    0.00)
; [then-branch: 72 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1 | live]
; [else-branch: 72 | First:(Second:(Second:(Second:($t@58@02))))[1] != -1 | live]
(push) ; 12
; [then-branch: 72 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11098
;  :arith-add-rows          231
;  :arith-assert-diseq      102
;  :arith-assert-lower      591
;  :arith-assert-upper      697
;  :arith-bound-prop        40
;  :arith-conflicts         22
;  :arith-eq-adapter        507
;  :arith-fixed-eqs         429
;  :arith-offset-eqs        62
;  :arith-pivots            224
;  :binary-propagations     11
;  :conflicts               241
;  :datatype-accessor-ax    420
;  :datatype-constructor-ax 2244
;  :datatype-occurs-check   659
;  :datatype-splits         1642
;  :decisions               2290
;  :del-clause              1074
;  :final-checks            227
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4533
;  :mk-clause               1172
;  :num-allocs              5296626
;  :num-checks              309
;  :propagations            894
;  :quant-instantiations    401
;  :rlimit-count            271131)
; [eval] -1
(pop) ; 12
(push) ; 12
; [else-branch: 72 | First:(Second:(Second:(Second:($t@58@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11098
;  :arith-add-rows          231
;  :arith-assert-diseq      102
;  :arith-assert-lower      591
;  :arith-assert-upper      697
;  :arith-bound-prop        40
;  :arith-conflicts         22
;  :arith-eq-adapter        507
;  :arith-fixed-eqs         429
;  :arith-offset-eqs        62
;  :arith-pivots            224
;  :binary-propagations     11
;  :conflicts               241
;  :datatype-accessor-ax    420
;  :datatype-constructor-ax 2244
;  :datatype-occurs-check   659
;  :datatype-splits         1642
;  :decisions               2290
;  :del-clause              1077
;  :final-checks            227
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4533
;  :mk-clause               1172
;  :num-allocs              5296626
;  :num-checks              310
;  :propagations            894
;  :quant-instantiations    401
;  :rlimit-count            271174)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11719
;  :arith-add-rows          269
;  :arith-assert-diseq      111
;  :arith-assert-lower      625
;  :arith-assert-upper      723
;  :arith-bound-prop        46
;  :arith-conflicts         23
;  :arith-eq-adapter        539
;  :arith-fixed-eqs         454
;  :arith-offset-eqs        77
;  :arith-pivots            234
;  :binary-propagations     11
;  :conflicts               253
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2383
;  :datatype-occurs-check   695
;  :datatype-splits         1760
;  :decisions               2429
;  :del-clause              1150
;  :final-checks            238
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4773
;  :mk-clause               1245
;  :num-allocs              5296626
;  :num-checks              311
;  :propagations            951
;  :quant-instantiations    413
;  :rlimit-count            275495
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11910
;  :arith-add-rows          302
;  :arith-assert-diseq      111
;  :arith-assert-lower      632
;  :arith-assert-upper      734
;  :arith-bound-prop        53
;  :arith-conflicts         23
;  :arith-eq-adapter        546
;  :arith-fixed-eqs         468
;  :arith-offset-eqs        86
;  :arith-pivots            244
;  :binary-propagations     11
;  :conflicts               253
;  :datatype-accessor-ax    448
;  :datatype-constructor-ax 2416
;  :datatype-occurs-check   706
;  :datatype-splits         1790
;  :decisions               2467
;  :del-clause              1169
;  :final-checks            242
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4830
;  :mk-clause               1264
;  :num-allocs              5296626
;  :num-checks              312
;  :propagations            965
;  :quant-instantiations    417
;  :rlimit-count            277561
;  :time                    0.00)
; [then-branch: 73 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2] | live]
; [else-branch: 73 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2]) | live]
(push) ; 10
; [then-branch: 73 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11914
;  :arith-add-rows          302
;  :arith-assert-diseq      111
;  :arith-assert-lower      635
;  :arith-assert-upper      736
;  :arith-bound-prop        53
;  :arith-conflicts         23
;  :arith-eq-adapter        547
;  :arith-fixed-eqs         469
;  :arith-offset-eqs        86
;  :arith-pivots            244
;  :binary-propagations     11
;  :conflicts               253
;  :datatype-accessor-ax    448
;  :datatype-constructor-ax 2416
;  :datatype-occurs-check   706
;  :datatype-splits         1790
;  :decisions               2467
;  :del-clause              1169
;  :final-checks            242
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4835
;  :mk-clause               1267
;  :num-allocs              5296626
;  :num-checks              313
;  :propagations            970
;  :quant-instantiations    420
;  :rlimit-count            277798)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 73 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11914
;  :arith-add-rows          302
;  :arith-assert-diseq      111
;  :arith-assert-lower      635
;  :arith-assert-upper      736
;  :arith-bound-prop        53
;  :arith-conflicts         23
;  :arith-eq-adapter        547
;  :arith-fixed-eqs         469
;  :arith-offset-eqs        86
;  :arith-pivots            244
;  :binary-propagations     11
;  :conflicts               253
;  :datatype-accessor-ax    448
;  :datatype-constructor-ax 2416
;  :datatype-occurs-check   706
;  :datatype-splits         1790
;  :decisions               2467
;  :del-clause              1172
;  :final-checks            242
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             4835
;  :mk-clause               1267
;  :num-allocs              5296626
;  :num-checks              314
;  :propagations            970
;  :quant-instantiations    420
;  :rlimit-count            277845)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12675
;  :arith-add-rows          357
;  :arith-assert-diseq      121
;  :arith-assert-lower      674
;  :arith-assert-upper      770
;  :arith-bound-prop        60
;  :arith-conflicts         24
;  :arith-eq-adapter        587
;  :arith-fixed-eqs         496
;  :arith-offset-eqs        112
;  :arith-pivots            257
;  :binary-propagations     11
;  :conflicts               266
;  :datatype-accessor-ax    478
;  :datatype-constructor-ax 2591
;  :datatype-occurs-check   746
;  :datatype-splits         1930
;  :decisions               2640
;  :del-clause              1265
;  :final-checks            255
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5111
;  :mk-clause               1360
;  :num-allocs              5296626
;  :num-checks              315
;  :propagations            1037
;  :quant-instantiations    432
;  :rlimit-count            283034
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12866
;  :arith-add-rows          384
;  :arith-assert-diseq      121
;  :arith-assert-lower      681
;  :arith-assert-upper      781
;  :arith-bound-prop        67
;  :arith-conflicts         24
;  :arith-eq-adapter        594
;  :arith-fixed-eqs         510
;  :arith-offset-eqs        121
;  :arith-pivots            266
;  :binary-propagations     11
;  :conflicts               266
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2624
;  :datatype-occurs-check   757
;  :datatype-splits         1960
;  :decisions               2678
;  :del-clause              1284
;  :final-checks            259
;  :interface-eqs           19
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5168
;  :mk-clause               1379
;  :num-allocs              5296626
;  :num-checks              316
;  :propagations            1051
;  :quant-instantiations    436
;  :rlimit-count            285008
;  :time                    0.00)
; [then-branch: 74 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2] | live]
; [else-branch: 74 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2]) | live]
(push) ; 10
; [then-branch: 74 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12870
;  :arith-add-rows          384
;  :arith-assert-diseq      121
;  :arith-assert-lower      684
;  :arith-assert-upper      783
;  :arith-bound-prop        67
;  :arith-conflicts         24
;  :arith-eq-adapter        595
;  :arith-fixed-eqs         511
;  :arith-offset-eqs        121
;  :arith-pivots            266
;  :binary-propagations     11
;  :conflicts               267
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2624
;  :datatype-occurs-check   757
;  :datatype-splits         1960
;  :decisions               2678
;  :del-clause              1284
;  :final-checks            259
;  :interface-eqs           19
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5173
;  :mk-clause               1382
;  :num-allocs              5296626
;  :num-checks              317
;  :propagations            1056
;  :quant-instantiations    439
;  :rlimit-count            285278)
(push) ; 11
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12870
;  :arith-add-rows          384
;  :arith-assert-diseq      121
;  :arith-assert-lower      684
;  :arith-assert-upper      783
;  :arith-bound-prop        67
;  :arith-conflicts         24
;  :arith-eq-adapter        595
;  :arith-fixed-eqs         511
;  :arith-offset-eqs        121
;  :arith-pivots            266
;  :binary-propagations     11
;  :conflicts               268
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2624
;  :datatype-occurs-check   757
;  :datatype-splits         1960
;  :decisions               2678
;  :del-clause              1284
;  :final-checks            259
;  :interface-eqs           19
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5173
;  :mk-clause               1382
;  :num-allocs              5296626
;  :num-checks              318
;  :propagations            1056
;  :quant-instantiations    439
;  :rlimit-count            285326)
(pop) ; 10
(push) ; 10
; [else-branch: 74 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 9
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12870
;  :arith-add-rows          384
;  :arith-assert-diseq      121
;  :arith-assert-lower      684
;  :arith-assert-upper      783
;  :arith-bound-prop        67
;  :arith-conflicts         24
;  :arith-eq-adapter        595
;  :arith-fixed-eqs         511
;  :arith-offset-eqs        121
;  :arith-pivots            266
;  :binary-propagations     11
;  :conflicts               269
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2624
;  :datatype-occurs-check   757
;  :datatype-splits         1960
;  :decisions               2678
;  :del-clause              1287
;  :final-checks            259
;  :interface-eqs           19
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5173
;  :mk-clause               1382
;  :num-allocs              5296626
;  :num-checks              319
;  :propagations            1056
;  :quant-instantiations    439
;  :rlimit-count            285406)
(push) ; 9
; [then-branch: 75 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
; [else-branch: 75 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 75 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12873
;  :arith-add-rows          384
;  :arith-assert-diseq      121
;  :arith-assert-lower      684
;  :arith-assert-upper      783
;  :arith-bound-prop        67
;  :arith-conflicts         24
;  :arith-eq-adapter        595
;  :arith-fixed-eqs         511
;  :arith-offset-eqs        121
;  :arith-pivots            266
;  :binary-propagations     11
;  :conflicts               269
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2624
;  :datatype-occurs-check   757
;  :datatype-splits         1960
;  :decisions               2678
;  :del-clause              1287
;  :final-checks            259
;  :interface-eqs           19
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5174
;  :mk-clause               1382
;  :num-allocs              5296626
;  :num-checks              320
;  :propagations            1056
;  :quant-instantiations    440
;  :rlimit-count            285661)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 75 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13113
;  :arith-add-rows          398
;  :arith-assert-diseq      122
;  :arith-assert-lower      696
;  :arith-assert-upper      796
;  :arith-bound-prop        68
;  :arith-conflicts         24
;  :arith-eq-adapter        608
;  :arith-fixed-eqs         520
;  :arith-offset-eqs        128
;  :arith-pivots            273
;  :binary-propagations     11
;  :conflicts               273
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 2679
;  :datatype-occurs-check   773
;  :datatype-splits         1996
;  :decisions               2733
;  :del-clause              1314
;  :final-checks            264
;  :interface-eqs           20
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5257
;  :mk-clause               1409
;  :num-allocs              5296626
;  :num-checks              321
;  :propagations            1079
;  :quant-instantiations    447
;  :rlimit-count            288102
;  :time                    0.00)
(push) ; 10
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13301
;  :arith-add-rows          403
;  :arith-assert-diseq      122
;  :arith-assert-lower      703
;  :arith-assert-upper      807
;  :arith-bound-prop        68
;  :arith-conflicts         24
;  :arith-eq-adapter        615
;  :arith-fixed-eqs         532
;  :arith-offset-eqs        136
;  :arith-pivots            278
;  :binary-propagations     11
;  :conflicts               273
;  :datatype-accessor-ax    493
;  :datatype-constructor-ax 2712
;  :datatype-occurs-check   784
;  :datatype-splits         2026
;  :decisions               2771
;  :del-clause              1326
;  :final-checks            268
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5307
;  :mk-clause               1421
;  :num-allocs              5296626
;  :num-checks              322
;  :propagations            1098
;  :quant-instantiations    451
;  :rlimit-count            289973
;  :time                    0.00)
; [then-branch: 76 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
; [else-branch: 76 | !(First:(Second:(Second:(Second:($t@58@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 76 | First:(Second:(Second:(Second:($t@58@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13309
;  :arith-add-rows          405
;  :arith-assert-diseq      122
;  :arith-assert-lower      705
;  :arith-assert-upper      809
;  :arith-bound-prop        68
;  :arith-conflicts         24
;  :arith-eq-adapter        616
;  :arith-fixed-eqs         532
;  :arith-offset-eqs        136
;  :arith-pivots            279
;  :binary-propagations     11
;  :conflicts               274
;  :datatype-accessor-ax    493
;  :datatype-constructor-ax 2712
;  :datatype-occurs-check   784
;  :datatype-splits         2026
;  :decisions               2771
;  :del-clause              1326
;  :final-checks            268
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5313
;  :mk-clause               1424
;  :num-allocs              5296626
;  :num-checks              323
;  :propagations            1103
;  :quant-instantiations    455
;  :rlimit-count            290453)
(push) ; 11
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13309
;  :arith-add-rows          405
;  :arith-assert-diseq      122
;  :arith-assert-lower      705
;  :arith-assert-upper      809
;  :arith-bound-prop        68
;  :arith-conflicts         24
;  :arith-eq-adapter        616
;  :arith-fixed-eqs         532
;  :arith-offset-eqs        136
;  :arith-pivots            279
;  :binary-propagations     11
;  :conflicts               275
;  :datatype-accessor-ax    493
;  :datatype-constructor-ax 2712
;  :datatype-occurs-check   784
;  :datatype-splits         2026
;  :decisions               2771
;  :del-clause              1326
;  :final-checks            268
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5313
;  :mk-clause               1424
;  :num-allocs              5296626
;  :num-checks              324
;  :propagations            1103
;  :quant-instantiations    455
;  :rlimit-count            290501)
(pop) ; 10
(push) ; 10
; [else-branch: 76 | !(First:(Second:(Second:(Second:($t@58@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) globals@3@02))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Sensor_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Sensor_m, globals), write)
(declare-const $t@71@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Sensor_m, globals), write)
(assert (= $t@71@02 ($Snap.combine ($Snap.first $t@71@02) ($Snap.second $t@71@02))))
(assert (= ($Snap.first $t@71@02) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@71@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@71@02))
    ($Snap.second ($Snap.second $t@71@02)))))
(assert (= ($Snap.first ($Snap.second $t@71@02)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@71@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@71@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@71@02))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@71@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@72@02 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 77 | 0 <= i@72@02 | live]
; [else-branch: 77 | !(0 <= i@72@02) | live]
(push) ; 11
; [then-branch: 77 | 0 <= i@72@02]
(assert (<= 0 i@72@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 77 | !(0 <= i@72@02)]
(assert (not (<= 0 i@72@02)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 78 | i@72@02 < |First:(Second:(Second:(Second:($t@71@02))))| && 0 <= i@72@02 | live]
; [else-branch: 78 | !(i@72@02 < |First:(Second:(Second:(Second:($t@71@02))))| && 0 <= i@72@02) | live]
(push) ; 11
; [then-branch: 78 | i@72@02 < |First:(Second:(Second:(Second:($t@71@02))))| && 0 <= i@72@02]
(assert (and
  (<
    i@72@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
  (<= 0 i@72@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@72@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13615
;  :arith-add-rows          410
;  :arith-assert-diseq      122
;  :arith-assert-lower      717
;  :arith-assert-upper      823
;  :arith-bound-prop        68
;  :arith-conflicts         24
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         544
;  :arith-offset-eqs        144
;  :arith-pivots            284
;  :binary-propagations     11
;  :conflicts               275
;  :datatype-accessor-ax    532
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1346
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5390
;  :mk-clause               1435
;  :num-allocs              5296626
;  :num-checks              326
;  :propagations            1122
;  :quant-instantiations    463
;  :rlimit-count            294291)
; [eval] -1
(push) ; 12
; [then-branch: 79 | First:(Second:(Second:(Second:($t@71@02))))[i@72@02] == -1 | live]
; [else-branch: 79 | First:(Second:(Second:(Second:($t@71@02))))[i@72@02] != -1 | live]
(push) ; 13
; [then-branch: 79 | First:(Second:(Second:(Second:($t@71@02))))[i@72@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    i@72@02)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 79 | First:(Second:(Second:(Second:($t@71@02))))[i@72@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      i@72@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@72@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13615
;  :arith-add-rows          410
;  :arith-assert-diseq      122
;  :arith-assert-lower      717
;  :arith-assert-upper      823
;  :arith-bound-prop        68
;  :arith-conflicts         24
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         544
;  :arith-offset-eqs        144
;  :arith-pivots            284
;  :binary-propagations     11
;  :conflicts               275
;  :datatype-accessor-ax    532
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1346
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5391
;  :mk-clause               1435
;  :num-allocs              5296626
;  :num-checks              327
;  :propagations            1122
;  :quant-instantiations    463
;  :rlimit-count            294466)
(push) ; 14
; [then-branch: 80 | 0 <= First:(Second:(Second:(Second:($t@71@02))))[i@72@02] | live]
; [else-branch: 80 | !(0 <= First:(Second:(Second:(Second:($t@71@02))))[i@72@02]) | live]
(push) ; 15
; [then-branch: 80 | 0 <= First:(Second:(Second:(Second:($t@71@02))))[i@72@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    i@72@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@72@02 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13615
;  :arith-add-rows          410
;  :arith-assert-diseq      123
;  :arith-assert-lower      720
;  :arith-assert-upper      823
;  :arith-bound-prop        68
;  :arith-conflicts         24
;  :arith-eq-adapter        626
;  :arith-fixed-eqs         544
;  :arith-offset-eqs        144
;  :arith-pivots            284
;  :binary-propagations     11
;  :conflicts               275
;  :datatype-accessor-ax    532
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1346
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5394
;  :mk-clause               1436
;  :num-allocs              5296626
;  :num-checks              328
;  :propagations            1122
;  :quant-instantiations    463
;  :rlimit-count            294589)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 80 | !(0 <= First:(Second:(Second:(Second:($t@71@02))))[i@72@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      i@72@02))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 78 | !(i@72@02 < |First:(Second:(Second:(Second:($t@71@02))))| && 0 <= i@72@02)]
(assert (not
  (and
    (<
      i@72@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    (<= 0 i@72@02))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@72@02 Int)) (!
  (implies
    (and
      (<
        i@72@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      (<= 0 i@72@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
          i@72@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
            i@72@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
            i@72@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    i@72@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))
(declare-const $k@73@02 $Perm)
(assert ($Perm.isReadVar $k@73@02 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@73@02 $Perm.No) (< $Perm.No $k@73@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13626
;  :arith-add-rows          410
;  :arith-assert-diseq      124
;  :arith-assert-lower      722
;  :arith-assert-upper      824
;  :arith-bound-prop        68
;  :arith-conflicts         24
;  :arith-eq-adapter        627
;  :arith-fixed-eqs         544
;  :arith-offset-eqs        144
;  :arith-pivots            284
;  :binary-propagations     11
;  :conflicts               276
;  :datatype-accessor-ax    534
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5402
;  :mk-clause               1438
;  :num-allocs              5296626
;  :num-checks              329
;  :propagations            1123
;  :quant-instantiations    463
;  :rlimit-count            295541)
(declare-const $t@74@02 Int)
(assert (and
  (implies
    (< $Perm.No (- $k@60@02 $k@68@02))
    (=
      $t@74@02
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  (implies
    (< $Perm.No $k@73@02)
    (=
      $t@74@02
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))
(assert (<= $Perm.No (+ (- $k@60@02 $k@68@02) $k@73@02)))
(assert (<= (+ (- $k@60@02 $k@68@02) $k@73@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@60@02 $k@68@02) $k@73@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
  $Snap.unit))
; [eval] 0 < diz.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@60@02 $k@68@02) $k@73@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13636
;  :arith-add-rows          411
;  :arith-assert-diseq      124
;  :arith-assert-lower      724
;  :arith-assert-upper      825
;  :arith-bound-prop        68
;  :arith-conflicts         25
;  :arith-eq-adapter        627
;  :arith-fixed-eqs         545
;  :arith-offset-eqs        144
;  :arith-pivots            286
;  :binary-propagations     11
;  :conflicts               277
;  :datatype-accessor-ax    535
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5410
;  :mk-clause               1438
;  :num-allocs              5296626
;  :num-checks              330
;  :propagations            1123
;  :quant-instantiations    464
;  :rlimit-count            296287)
(assert (< 0 $t@74@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))
(declare-const $k@75@02 $Perm)
(assert ($Perm.isReadVar $k@75@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@75@02 $Perm.No) (< $Perm.No $k@75@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13643
;  :arith-add-rows          412
;  :arith-assert-diseq      125
;  :arith-assert-lower      728
;  :arith-assert-upper      827
;  :arith-bound-prop        68
;  :arith-conflicts         25
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         546
;  :arith-offset-eqs        144
;  :arith-pivots            287
;  :binary-propagations     11
;  :conflicts               278
;  :datatype-accessor-ax    536
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5419
;  :mk-clause               1440
;  :num-allocs              5296626
;  :num-checks              331
;  :propagations            1124
;  :quant-instantiations    464
;  :rlimit-count            296755)
(declare-const $t@76@02 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@61@02 $k@69@02))
    (=
      $t@76@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
  (implies
    (< $Perm.No $k@75@02)
    (=
      $t@76@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))
(assert (<= $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02)))
(assert (<= (+ (- $k@61@02 $k@69@02) $k@75@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))
  $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13653
;  :arith-add-rows          413
;  :arith-assert-diseq      125
;  :arith-assert-lower      729
;  :arith-assert-upper      829
;  :arith-bound-prop        68
;  :arith-conflicts         26
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         547
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    537
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5427
;  :mk-clause               1440
;  :num-allocs              5296626
;  :num-checks              332
;  :propagations            1124
;  :quant-instantiations    465
;  :rlimit-count            297375)
(assert (not (= $t@76@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13658
;  :arith-add-rows          413
;  :arith-assert-diseq      125
;  :arith-assert-lower      729
;  :arith-assert-upper      830
;  :arith-bound-prop        68
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         548
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    538
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5429
;  :mk-clause               1440
;  :num-allocs              5296626
;  :num-checks              333
;  :propagations            1124
;  :quant-instantiations    465
;  :rlimit-count            297702)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13663
;  :arith-add-rows          413
;  :arith-assert-diseq      125
;  :arith-assert-lower      729
;  :arith-assert-upper      831
;  :arith-bound-prop        68
;  :arith-conflicts         28
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         549
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    539
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5431
;  :mk-clause               1440
;  :num-allocs              5296626
;  :num-checks              334
;  :propagations            1124
;  :quant-instantiations    465
;  :rlimit-count            298021)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13663
;  :arith-add-rows          413
;  :arith-assert-diseq      125
;  :arith-assert-lower      729
;  :arith-assert-upper      831
;  :arith-bound-prop        68
;  :arith-conflicts         28
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         549
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    539
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5431
;  :mk-clause               1440
;  :num-allocs              5296626
;  :num-checks              335
;  :propagations            1124
;  :quant-instantiations    465
;  :rlimit-count            298034)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  $t@76@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13663
;  :arith-add-rows          413
;  :arith-assert-diseq      125
;  :arith-assert-lower      729
;  :arith-assert-upper      831
;  :arith-bound-prop        68
;  :arith-conflicts         28
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         549
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    539
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5431
;  :mk-clause               1440
;  :num-allocs              5296626
;  :num-checks              336
;  :propagations            1124
;  :quant-instantiations    465
;  :rlimit-count            298045)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))
(declare-const $k@77@02 $Perm)
(assert ($Perm.isReadVar $k@77@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@77@02 $Perm.No) (< $Perm.No $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13671
;  :arith-add-rows          413
;  :arith-assert-diseq      126
;  :arith-assert-lower      731
;  :arith-assert-upper      832
;  :arith-bound-prop        68
;  :arith-conflicts         28
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         549
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               282
;  :datatype-accessor-ax    540
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5438
;  :mk-clause               1442
;  :num-allocs              5296626
;  :num-checks              337
;  :propagations            1125
;  :quant-instantiations    466
;  :rlimit-count            298565)
(declare-const $t@78@02 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@62@02 $k@70@02))
    (=
      $t@78@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))
  (implies
    (< $Perm.No $k@77@02)
    (=
      $t@78@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02)))
(assert (<= (+ (- $k@62@02 $k@70@02) $k@77@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13681
;  :arith-add-rows          414
;  :arith-assert-diseq      126
;  :arith-assert-lower      732
;  :arith-assert-upper      834
;  :arith-bound-prop        68
;  :arith-conflicts         29
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         550
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               283
;  :datatype-accessor-ax    541
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5446
;  :mk-clause               1442
;  :num-allocs              5296626
;  :num-checks              338
;  :propagations            1125
;  :quant-instantiations    467
;  :rlimit-count            299371)
(assert (not (= $t@78@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13687
;  :arith-add-rows          414
;  :arith-assert-diseq      126
;  :arith-assert-lower      732
;  :arith-assert-upper      835
;  :arith-bound-prop        68
;  :arith-conflicts         30
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         551
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               284
;  :datatype-accessor-ax    542
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5449
;  :mk-clause               1442
;  :num-allocs              5296626
;  :num-checks              339
;  :propagations            1125
;  :quant-instantiations    467
;  :rlimit-count            299763)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13692
;  :arith-add-rows          414
;  :arith-assert-diseq      126
;  :arith-assert-lower      732
;  :arith-assert-upper      836
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5451
;  :mk-clause               1442
;  :num-allocs              5296626
;  :num-checks              340
;  :propagations            1125
;  :quant-instantiations    467
;  :rlimit-count            300120)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13692
;  :arith-add-rows          414
;  :arith-assert-diseq      126
;  :arith-assert-lower      732
;  :arith-assert-upper      836
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5451
;  :mk-clause               1442
;  :num-allocs              5296626
;  :num-checks              341
;  :propagations            1125
;  :quant-instantiations    467
;  :rlimit-count            300133)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13698
;  :arith-add-rows          414
;  :arith-assert-diseq      126
;  :arith-assert-lower      732
;  :arith-assert-upper      836
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    544
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5453
;  :mk-clause               1442
;  :num-allocs              5296626
;  :num-checks              342
;  :propagations            1125
;  :quant-instantiations    467
;  :rlimit-count            300469)
; [eval] -1
(push) ; 9
; [then-branch: 81 | First:(Second:(Second:(Second:($t@71@02))))[0] == -1 | live]
; [else-branch: 81 | First:(Second:(Second:(Second:($t@71@02))))[0] != -1 | live]
(push) ; 10
; [then-branch: 81 | First:(Second:(Second:(Second:($t@71@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    0)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 81 | First:(Second:(Second:(Second:($t@71@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13698
;  :arith-add-rows          414
;  :arith-assert-diseq      127
;  :arith-assert-lower      735
;  :arith-assert-upper      837
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        631
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    544
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1347
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5459
;  :mk-clause               1446
;  :num-allocs              5296626
;  :num-checks              343
;  :propagations            1127
;  :quant-instantiations    468
;  :rlimit-count            300701)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13704
;  :arith-add-rows          414
;  :arith-assert-diseq      127
;  :arith-assert-lower      735
;  :arith-assert-upper      837
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        631
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1351
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5463
;  :mk-clause               1447
;  :num-allocs              5296626
;  :num-checks              344
;  :propagations            1127
;  :quant-instantiations    468
;  :rlimit-count            301138)
; [eval] -1
(push) ; 9
; [then-branch: 82 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1 | live]
; [else-branch: 82 | First:(Second:(Second:(Second:($t@71@02))))[1] != -1 | live]
(push) ; 10
; [then-branch: 82 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    1)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 82 | First:(Second:(Second:(Second:($t@71@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13704
;  :arith-add-rows          414
;  :arith-assert-diseq      128
;  :arith-assert-lower      738
;  :arith-assert-upper      838
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1351
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5469
;  :mk-clause               1451
;  :num-allocs              5296626
;  :num-checks              345
;  :propagations            1129
;  :quant-instantiations    469
;  :rlimit-count            301370)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13710
;  :arith-add-rows          414
;  :arith-assert-diseq      128
;  :arith-assert-lower      738
;  :arith-assert-upper      838
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    546
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1355
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5473
;  :mk-clause               1452
;  :num-allocs              5296626
;  :num-checks              346
;  :propagations            1129
;  :quant-instantiations    469
;  :rlimit-count            301817)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13716
;  :arith-add-rows          414
;  :arith-assert-diseq      128
;  :arith-assert-lower      738
;  :arith-assert-upper      838
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    547
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1355
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5476
;  :mk-clause               1452
;  :num-allocs              5296626
;  :num-checks              347
;  :propagations            1129
;  :quant-instantiations    469
;  :rlimit-count            302277)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13722
;  :arith-add-rows          414
;  :arith-assert-diseq      128
;  :arith-assert-lower      738
;  :arith-assert-upper      838
;  :arith-bound-prop        68
;  :arith-conflicts         31
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         552
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               285
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1355
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5479
;  :mk-clause               1452
;  :num-allocs              5296626
;  :num-checks              348
;  :propagations            1129
;  :quant-instantiations    469
;  :rlimit-count            302732)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13728
;  :arith-add-rows          414
;  :arith-assert-diseq      128
;  :arith-assert-lower      738
;  :arith-assert-upper      840
;  :arith-bound-prop        68
;  :arith-conflicts         32
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         553
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               286
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1355
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5483
;  :mk-clause               1452
;  :num-allocs              5296626
;  :num-checks              349
;  :propagations            1129
;  :quant-instantiations    469
;  :rlimit-count            303252)
(push) ; 9
; [then-branch: 83 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))) | live]
; [else-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 83 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13731
;  :arith-add-rows          414
;  :arith-assert-diseq      128
;  :arith-assert-lower      738
;  :arith-assert-upper      840
;  :arith-bound-prop        68
;  :arith-conflicts         32
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         553
;  :arith-offset-eqs        144
;  :arith-pivots            288
;  :binary-propagations     11
;  :conflicts               286
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2745
;  :datatype-occurs-check   843
;  :datatype-splits         2056
;  :decisions               2809
;  :del-clause              1355
;  :final-checks            272
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.79
;  :memory                  4.79
;  :minimized-lits          12
;  :mk-bool-var             5485
;  :mk-clause               1452
;  :num-allocs              5296626
;  :num-checks              350
;  :propagations            1129
;  :quant-instantiations    470
;  :rlimit-count            303589)
; [eval] -1
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14049
;  :arith-add-rows          418
;  :arith-assert-diseq      128
;  :arith-assert-lower      750
;  :arith-assert-upper      856
;  :arith-bound-prop        68
;  :arith-conflicts         32
;  :arith-eq-adapter        644
;  :arith-fixed-eqs         575
;  :arith-offset-eqs        158
;  :arith-pivots            294
;  :binary-propagations     11
;  :conflicts               287
;  :datatype-accessor-ax    554
;  :datatype-constructor-ax 2804
;  :datatype-occurs-check   905
;  :datatype-splits         2093
;  :decisions               2873
;  :del-clause              1372
;  :final-checks            276
;  :interface-eqs           23
;  :max-generation          2
;  :max-memory              4.99
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             5555
;  :mk-clause               1469
;  :num-allocs              5776205
;  :num-checks              351
;  :propagations            1153
;  :quant-instantiations    474
;  :rlimit-count            305905
;  :time                    0.00)
(push) ; 12
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14471
;  :arith-add-rows          422
;  :arith-assert-diseq      128
;  :arith-assert-lower      768
;  :arith-assert-upper      878
;  :arith-bound-prop        68
;  :arith-conflicts         32
;  :arith-eq-adapter        661
;  :arith-fixed-eqs         606
;  :arith-offset-eqs        178
;  :arith-pivots            300
;  :binary-propagations     11
;  :conflicts               290
;  :datatype-accessor-ax    561
;  :datatype-constructor-ax 2885
;  :datatype-occurs-check   986
;  :datatype-splits         2134
;  :decisions               2957
;  :del-clause              1399
;  :final-checks            281
;  :interface-eqs           24
;  :max-generation          2
;  :max-memory              4.99
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             5651
;  :mk-clause               1496
;  :num-allocs              5776205
;  :num-checks              352
;  :propagations            1185
;  :quant-instantiations    479
;  :rlimit-count            308664
;  :time                    0.00)
; [then-branch: 84 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1 | live]
; [else-branch: 84 | First:(Second:(Second:(Second:($t@71@02))))[1] != -1 | live]
(push) ; 12
; [then-branch: 84 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14473
;  :arith-add-rows          422
;  :arith-assert-diseq      128
;  :arith-assert-lower      768
;  :arith-assert-upper      878
;  :arith-bound-prop        68
;  :arith-conflicts         32
;  :arith-eq-adapter        661
;  :arith-fixed-eqs         606
;  :arith-offset-eqs        178
;  :arith-pivots            300
;  :binary-propagations     11
;  :conflicts               290
;  :datatype-accessor-ax    561
;  :datatype-constructor-ax 2885
;  :datatype-occurs-check   986
;  :datatype-splits         2134
;  :decisions               2957
;  :del-clause              1399
;  :final-checks            281
;  :interface-eqs           24
;  :max-generation          2
;  :max-memory              4.99
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             5651
;  :mk-clause               1496
;  :num-allocs              5776205
;  :num-checks              353
;  :propagations            1185
;  :quant-instantiations    479
;  :rlimit-count            308795)
; [eval] -1
(pop) ; 12
(push) ; 12
; [else-branch: 84 | First:(Second:(Second:(Second:($t@71@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14479
;  :arith-add-rows          422
;  :arith-assert-diseq      128
;  :arith-assert-lower      768
;  :arith-assert-upper      878
;  :arith-bound-prop        68
;  :arith-conflicts         32
;  :arith-eq-adapter        661
;  :arith-fixed-eqs         606
;  :arith-offset-eqs        178
;  :arith-pivots            300
;  :binary-propagations     11
;  :conflicts               290
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 2885
;  :datatype-occurs-check   986
;  :datatype-splits         2134
;  :decisions               2957
;  :del-clause              1399
;  :final-checks            281
;  :interface-eqs           24
;  :max-generation          2
;  :max-memory              4.99
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             5654
;  :mk-clause               1497
;  :num-allocs              5776205
;  :num-checks              354
;  :propagations            1185
;  :quant-instantiations    479
;  :rlimit-count            309388)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15252
;  :arith-add-rows          427
;  :arith-assert-diseq      130
;  :arith-assert-lower      795
;  :arith-assert-upper      914
;  :arith-bound-prop        68
;  :arith-conflicts         33
;  :arith-eq-adapter        691
;  :arith-fixed-eqs         653
;  :arith-offset-eqs        208
;  :arith-pivots            304
;  :binary-propagations     11
;  :conflicts               294
;  :datatype-accessor-ax    578
;  :datatype-constructor-ax 3021
;  :datatype-occurs-check   1153
;  :datatype-splits         2247
;  :decisions               3108
;  :del-clause              1444
;  :final-checks            292
;  :interface-eqs           27
;  :max-generation          2
;  :max-memory              4.99
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             5863
;  :mk-clause               1542
;  :num-allocs              5776205
;  :num-checks              355
;  :propagations            1246
;  :quant-instantiations    494
;  :rlimit-count            313789
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15578
;  :arith-add-rows          431
;  :arith-assert-diseq      130
;  :arith-assert-lower      807
;  :arith-assert-upper      931
;  :arith-bound-prop        68
;  :arith-conflicts         33
;  :arith-eq-adapter        703
;  :arith-fixed-eqs         675
;  :arith-offset-eqs        222
;  :arith-pivots            310
;  :binary-propagations     11
;  :conflicts               295
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 3080
;  :datatype-occurs-check   1215
;  :datatype-splits         2284
;  :decisions               3173
;  :del-clause              1461
;  :final-checks            296
;  :interface-eqs           28
;  :max-generation          2
;  :max-memory              4.99
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             5935
;  :mk-clause               1559
;  :num-allocs              5776205
;  :num-checks              356
;  :propagations            1271
;  :quant-instantiations    499
;  :rlimit-count            316170
;  :time                    0.00)
; [then-branch: 85 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2] | live]
; [else-branch: 85 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2]) | live]
(push) ; 10
; [then-branch: 85 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15579
;  :arith-add-rows          431
;  :arith-assert-diseq      130
;  :arith-assert-lower      808
;  :arith-assert-upper      931
;  :arith-bound-prop        68
;  :arith-conflicts         33
;  :arith-eq-adapter        703
;  :arith-fixed-eqs         676
;  :arith-offset-eqs        222
;  :arith-pivots            310
;  :binary-propagations     11
;  :conflicts               295
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 3080
;  :datatype-occurs-check   1215
;  :datatype-splits         2284
;  :decisions               3173
;  :del-clause              1461
;  :final-checks            296
;  :interface-eqs           28
;  :max-generation          2
;  :max-memory              4.99
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             5936
;  :mk-clause               1559
;  :num-allocs              5776205
;  :num-checks              357
;  :propagations            1271
;  :quant-instantiations    499
;  :rlimit-count            316318)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 85 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15585
;  :arith-add-rows          431
;  :arith-assert-diseq      130
;  :arith-assert-lower      808
;  :arith-assert-upper      931
;  :arith-bound-prop        68
;  :arith-conflicts         33
;  :arith-eq-adapter        703
;  :arith-fixed-eqs         676
;  :arith-offset-eqs        222
;  :arith-pivots            310
;  :binary-propagations     11
;  :conflicts               295
;  :datatype-accessor-ax    584
;  :datatype-constructor-ax 3080
;  :datatype-occurs-check   1215
;  :datatype-splits         2284
;  :decisions               3173
;  :del-clause              1461
;  :final-checks            296
;  :interface-eqs           28
;  :max-generation          2
;  :max-memory              4.99
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             5939
;  :mk-clause               1560
;  :num-allocs              5776205
;  :num-checks              358
;  :propagations            1271
;  :quant-instantiations    499
;  :rlimit-count            316911)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16831
;  :arith-add-rows          436
;  :arith-assert-diseq      132
;  :arith-assert-lower      847
;  :arith-assert-upper      982
;  :arith-bound-prop        68
;  :arith-conflicts         35
;  :arith-eq-adapter        745
;  :arith-fixed-eqs         744
;  :arith-offset-eqs        267
;  :arith-pivots            314
;  :binary-propagations     11
;  :conflicts               305
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 3310
;  :datatype-occurs-check   1406
;  :datatype-splits         2470
;  :decisions               3399
;  :del-clause              1529
;  :final-checks            311
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          12
;  :mk-bool-var             6270
;  :mk-clause               1628
;  :num-allocs              6025317
;  :num-checks              359
;  :propagations            1365
;  :quant-instantiations    514
;  :rlimit-count            322977
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17173
;  :arith-add-rows          440
;  :arith-assert-diseq      132
;  :arith-assert-lower      859
;  :arith-assert-upper      999
;  :arith-bound-prop        68
;  :arith-conflicts         35
;  :arith-eq-adapter        757
;  :arith-fixed-eqs         766
;  :arith-offset-eqs        281
;  :arith-pivots            320
;  :binary-propagations     11
;  :conflicts               306
;  :datatype-accessor-ax    627
;  :datatype-constructor-ax 3369
;  :datatype-occurs-check   1444
;  :datatype-splits         2507
;  :decisions               3464
;  :del-clause              1546
;  :final-checks            315
;  :interface-eqs           33
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6341
;  :mk-clause               1645
;  :num-allocs              6274884
;  :num-checks              360
;  :propagations            1390
;  :quant-instantiations    519
;  :rlimit-count            325373
;  :time                    0.00)
; [then-branch: 86 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2] | live]
; [else-branch: 86 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2]) | live]
(push) ; 10
; [then-branch: 86 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17176
;  :arith-add-rows          440
;  :arith-assert-diseq      132
;  :arith-assert-lower      861
;  :arith-assert-upper      1002
;  :arith-bound-prop        68
;  :arith-conflicts         36
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         768
;  :arith-offset-eqs        281
;  :arith-pivots            320
;  :binary-propagations     11
;  :conflicts               307
;  :datatype-accessor-ax    627
;  :datatype-constructor-ax 3369
;  :datatype-occurs-check   1444
;  :datatype-splits         2507
;  :decisions               3464
;  :del-clause              1546
;  :final-checks            315
;  :interface-eqs           33
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6346
;  :mk-clause               1648
;  :num-allocs              6274884
;  :num-checks              361
;  :propagations            1394
;  :quant-instantiations    520
;  :rlimit-count            325628)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@60@02 $k@68@02) $k@73@02))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17176
;  :arith-add-rows          440
;  :arith-assert-diseq      132
;  :arith-assert-lower      862
;  :arith-assert-upper      1002
;  :arith-bound-prop        68
;  :arith-conflicts         37
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         769
;  :arith-offset-eqs        281
;  :arith-pivots            321
;  :binary-propagations     11
;  :conflicts               308
;  :datatype-accessor-ax    627
;  :datatype-constructor-ax 3369
;  :datatype-occurs-check   1444
;  :datatype-splits         2507
;  :decisions               3464
;  :del-clause              1546
;  :final-checks            315
;  :interface-eqs           33
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6347
;  :mk-clause               1648
;  :num-allocs              6274884
;  :num-checks              362
;  :propagations            1394
;  :quant-instantiations    520
;  :rlimit-count            325724)
(pop) ; 10
(push) ; 10
; [else-branch: 86 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))
    $t@74@02)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17185
;  :arith-add-rows          441
;  :arith-assert-diseq      132
;  :arith-assert-lower      862
;  :arith-assert-upper      1003
;  :arith-bound-prop        68
;  :arith-conflicts         38
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         770
;  :arith-offset-eqs        281
;  :arith-pivots            321
;  :binary-propagations     11
;  :conflicts               309
;  :datatype-accessor-ax    627
;  :datatype-constructor-ax 3369
;  :datatype-occurs-check   1444
;  :datatype-splits         2507
;  :decisions               3464
;  :del-clause              1549
;  :final-checks            315
;  :interface-eqs           33
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6350
;  :mk-clause               1649
;  :num-allocs              6274884
;  :num-checks              363
;  :propagations            1394
;  :quant-instantiations    520
;  :rlimit-count            326334)
(push) ; 9
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))) | live]
; [else-branch: 87 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17188
;  :arith-add-rows          441
;  :arith-assert-diseq      132
;  :arith-assert-lower      862
;  :arith-assert-upper      1003
;  :arith-bound-prop        68
;  :arith-conflicts         38
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         770
;  :arith-offset-eqs        281
;  :arith-pivots            321
;  :binary-propagations     11
;  :conflicts               309
;  :datatype-accessor-ax    627
;  :datatype-constructor-ax 3369
;  :datatype-occurs-check   1444
;  :datatype-splits         2507
;  :decisions               3464
;  :del-clause              1549
;  :final-checks            315
;  :interface-eqs           33
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6351
;  :mk-clause               1649
;  :num-allocs              6274884
;  :num-checks              364
;  :propagations            1394
;  :quant-instantiations    521
;  :rlimit-count            326605)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 87 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17610
;  :arith-add-rows          449
;  :arith-assert-diseq      132
;  :arith-assert-lower      880
;  :arith-assert-upper      1027
;  :arith-bound-prop        69
;  :arith-conflicts         38
;  :arith-eq-adapter        776
;  :arith-fixed-eqs         803
;  :arith-offset-eqs        302
;  :arith-pivots            329
;  :binary-propagations     11
;  :conflicts               312
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 3449
;  :datatype-occurs-check   1525
;  :datatype-splits         2547
;  :decisions               3547
;  :del-clause              1578
;  :final-checks            320
;  :interface-eqs           34
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  5.08
;  :minimized-lits          12
;  :mk-bool-var             6450
;  :mk-clause               1678
;  :num-allocs              6527996
;  :num-checks              365
;  :propagations            1427
;  :quant-instantiations    527
;  :rlimit-count            329679
;  :time                    0.00)
(push) ; 10
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17947
;  :arith-add-rows          457
;  :arith-assert-diseq      132
;  :arith-assert-lower      893
;  :arith-assert-upper      1045
;  :arith-bound-prop        70
;  :arith-conflicts         38
;  :arith-eq-adapter        789
;  :arith-fixed-eqs         827
;  :arith-offset-eqs        317
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               313
;  :datatype-accessor-ax    639
;  :datatype-constructor-ax 3507
;  :datatype-occurs-check   1563
;  :datatype-splits         2583
;  :decisions               3611
;  :del-clause              1598
;  :final-checks            324
;  :interface-eqs           35
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6524
;  :mk-clause               1698
;  :num-allocs              6781521
;  :num-checks              366
;  :propagations            1453
;  :quant-instantiations    532
;  :rlimit-count            332292
;  :time                    0.00)
; [then-branch: 88 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))) | live]
; [else-branch: 88 | !(First:(Second:(Second:(Second:($t@71@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 88 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17954
;  :arith-add-rows          457
;  :arith-assert-diseq      132
;  :arith-assert-lower      894
;  :arith-assert-upper      1048
;  :arith-bound-prop        70
;  :arith-conflicts         39
;  :arith-eq-adapter        790
;  :arith-fixed-eqs         828
;  :arith-offset-eqs        317
;  :arith-pivots            337
;  :binary-propagations     11
;  :conflicts               314
;  :datatype-accessor-ax    639
;  :datatype-constructor-ax 3507
;  :datatype-occurs-check   1563
;  :datatype-splits         2583
;  :decisions               3611
;  :del-clause              1598
;  :final-checks            324
;  :interface-eqs           35
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6530
;  :mk-clause               1701
;  :num-allocs              6781521
;  :num-checks              367
;  :propagations            1457
;  :quant-instantiations    534
;  :rlimit-count            332732)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@60@02 $k@68@02) $k@73@02))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17954
;  :arith-add-rows          457
;  :arith-assert-diseq      132
;  :arith-assert-lower      895
;  :arith-assert-upper      1048
;  :arith-bound-prop        70
;  :arith-conflicts         40
;  :arith-eq-adapter        790
;  :arith-fixed-eqs         829
;  :arith-offset-eqs        317
;  :arith-pivots            338
;  :binary-propagations     11
;  :conflicts               315
;  :datatype-accessor-ax    639
;  :datatype-constructor-ax 3507
;  :datatype-occurs-check   1563
;  :datatype-splits         2583
;  :decisions               3611
;  :del-clause              1598
;  :final-checks            324
;  :interface-eqs           35
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6531
;  :mk-clause               1701
;  :num-allocs              6781521
;  :num-checks              368
;  :propagations            1457
;  :quant-instantiations    534
;  :rlimit-count            332828)
(pop) ; 10
(push) ; 10
; [else-branch: 88 | !(First:(Second:(Second:(Second:($t@71@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))
    $t@74@02)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@71@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) globals@3@02))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Sensor_m, globals), write)
(declare-const $t@79@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18539
;  :arith-add-rows          470
;  :arith-assert-diseq      132
;  :arith-assert-lower      917
;  :arith-assert-upper      1080
;  :arith-bound-prop        71
;  :arith-conflicts         40
;  :arith-eq-adapter        812
;  :arith-fixed-eqs         868
;  :arith-offset-eqs        341
;  :arith-pivots            353
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1637
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6668
;  :mk-clause               1734
;  :num-allocs              6781521
;  :num-checks              371
;  :propagations            1506
;  :quant-instantiations    544
;  :rlimit-count            337550)
; [eval] diz.Sensor_m != null
; [eval] |diz.Sensor_m.Main_process_state| == 2
; [eval] |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_event_state| == 3
; [eval] |diz.Sensor_m.Main_event_state|
; [eval] (forall i__20: Int :: { diz.Sensor_m.Main_process_state[i__20] } 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|)
(declare-const i__20@80@02 Int)
(push) ; 9
; [eval] 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= i__20 && i__20 < |diz.Sensor_m.Main_process_state|
; [eval] 0 <= i__20
(push) ; 10
; [then-branch: 89 | 0 <= i__20@80@02 | live]
; [else-branch: 89 | !(0 <= i__20@80@02) | live]
(push) ; 11
; [then-branch: 89 | 0 <= i__20@80@02]
(assert (<= 0 i__20@80@02))
; [eval] i__20 < |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 89 | !(0 <= i__20@80@02)]
(assert (not (<= 0 i__20@80@02)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 90 | i__20@80@02 < |First:(Second:(Second:(Second:($t@71@02))))| && 0 <= i__20@80@02 | live]
; [else-branch: 90 | !(i__20@80@02 < |First:(Second:(Second:(Second:($t@71@02))))| && 0 <= i__20@80@02) | live]
(push) ; 11
; [then-branch: 90 | i__20@80@02 < |First:(Second:(Second:(Second:($t@71@02))))| && 0 <= i__20@80@02]
(assert (and
  (<
    i__20@80@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
  (<= 0 i__20@80@02)))
; [eval] diz.Sensor_m.Main_process_state[i__20] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__20] == -1
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 12
(assert (not (>= i__20@80@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18539
;  :arith-add-rows          470
;  :arith-assert-diseq      132
;  :arith-assert-lower      918
;  :arith-assert-upper      1081
;  :arith-bound-prop        71
;  :arith-conflicts         40
;  :arith-eq-adapter        812
;  :arith-fixed-eqs         868
;  :arith-offset-eqs        341
;  :arith-pivots            353
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1637
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6670
;  :mk-clause               1734
;  :num-allocs              6781521
;  :num-checks              372
;  :propagations            1506
;  :quant-instantiations    544
;  :rlimit-count            337686)
; [eval] -1
(push) ; 12
; [then-branch: 91 | First:(Second:(Second:(Second:($t@71@02))))[i__20@80@02] == -1 | live]
; [else-branch: 91 | First:(Second:(Second:(Second:($t@71@02))))[i__20@80@02] != -1 | live]
(push) ; 13
; [then-branch: 91 | First:(Second:(Second:(Second:($t@71@02))))[i__20@80@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    i__20@80@02)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 91 | First:(Second:(Second:(Second:($t@71@02))))[i__20@80@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      i__20@80@02)
    (- 0 1))))
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__20] && diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__20]
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 14
(assert (not (>= i__20@80@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18539
;  :arith-add-rows          470
;  :arith-assert-diseq      133
;  :arith-assert-lower      921
;  :arith-assert-upper      1082
;  :arith-bound-prop        71
;  :arith-conflicts         40
;  :arith-eq-adapter        813
;  :arith-fixed-eqs         868
;  :arith-offset-eqs        341
;  :arith-pivots            353
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1637
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6676
;  :mk-clause               1738
;  :num-allocs              6781521
;  :num-checks              373
;  :propagations            1508
;  :quant-instantiations    545
;  :rlimit-count            337918)
(push) ; 14
; [then-branch: 92 | 0 <= First:(Second:(Second:(Second:($t@71@02))))[i__20@80@02] | live]
; [else-branch: 92 | !(0 <= First:(Second:(Second:(Second:($t@71@02))))[i__20@80@02]) | live]
(push) ; 15
; [then-branch: 92 | 0 <= First:(Second:(Second:(Second:($t@71@02))))[i__20@80@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    i__20@80@02)))
; [eval] diz.Sensor_m.Main_process_state[i__20] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__20]
(push) ; 16
(assert (not (>= i__20@80@02 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18539
;  :arith-add-rows          470
;  :arith-assert-diseq      133
;  :arith-assert-lower      921
;  :arith-assert-upper      1082
;  :arith-bound-prop        71
;  :arith-conflicts         40
;  :arith-eq-adapter        813
;  :arith-fixed-eqs         868
;  :arith-offset-eqs        341
;  :arith-pivots            353
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1637
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6676
;  :mk-clause               1738
;  :num-allocs              6781521
;  :num-checks              374
;  :propagations            1508
;  :quant-instantiations    545
;  :rlimit-count            338032)
; [eval] |diz.Sensor_m.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 92 | !(0 <= First:(Second:(Second:(Second:($t@71@02))))[i__20@80@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      i__20@80@02))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 90 | !(i__20@80@02 < |First:(Second:(Second:(Second:($t@71@02))))| && 0 <= i__20@80@02)]
(assert (not
  (and
    (<
      i__20@80@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    (<= 0 i__20@80@02))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i__20@80@02 Int)) (!
  (implies
    (and
      (<
        i__20@80@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      (<= 0 i__20@80@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
          i__20@80@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
            i__20@80@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
            i__20@80@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    i__20@80@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18539
;  :arith-add-rows          470
;  :arith-assert-diseq      134
;  :arith-assert-lower      922
;  :arith-assert-upper      1083
;  :arith-bound-prop        71
;  :arith-conflicts         40
;  :arith-eq-adapter        814
;  :arith-fixed-eqs         868
;  :arith-offset-eqs        341
;  :arith-pivots            353
;  :binary-propagations     11
;  :conflicts               317
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1653
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6684
;  :mk-clause               1750
;  :num-allocs              6781521
;  :num-checks              375
;  :propagations            1510
;  :quant-instantiations    546
;  :rlimit-count            338478)
(assert (forall ((i__20@80@02 Int)) (!
  (implies
    (and
      (<
        i__20@80@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      (<= 0 i__20@80@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
          i__20@80@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
            i__20@80@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
            i__20@80@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    i__20@80@02))
  :qid |prog.l<no position>|)))
(declare-const $k@81@02 $Perm)
(assert ($Perm.isReadVar $k@81@02 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@81@02 $Perm.No) (< $Perm.No $k@81@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18539
;  :arith-add-rows          470
;  :arith-assert-diseq      135
;  :arith-assert-lower      924
;  :arith-assert-upper      1084
;  :arith-bound-prop        71
;  :arith-conflicts         40
;  :arith-eq-adapter        815
;  :arith-fixed-eqs         868
;  :arith-offset-eqs        341
;  :arith-pivots            353
;  :binary-propagations     11
;  :conflicts               318
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1653
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6689
;  :mk-clause               1752
;  :num-allocs              6781521
;  :num-checks              376
;  :propagations            1511
;  :quant-instantiations    546
;  :rlimit-count            339038)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@60@02 $k@68@02) $k@73@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18540
;  :arith-add-rows          470
;  :arith-assert-diseq      135
;  :arith-assert-lower      925
;  :arith-assert-upper      1084
;  :arith-bound-prop        71
;  :arith-conflicts         41
;  :arith-eq-adapter        816
;  :arith-fixed-eqs         868
;  :arith-offset-eqs        341
;  :arith-pivots            354
;  :binary-propagations     11
;  :conflicts               319
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1655
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6691
;  :mk-clause               1754
;  :num-allocs              6781521
;  :num-checks              377
;  :propagations            1512
;  :quant-instantiations    546
;  :rlimit-count            339134)
(assert (< $k@81@02 (+ (- $k@60@02 $k@68@02) $k@73@02)))
(assert (<= $Perm.No (- (+ (- $k@60@02 $k@68@02) $k@73@02) $k@81@02)))
(assert (<= (- (+ (- $k@60@02 $k@68@02) $k@73@02) $k@81@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@60@02 $k@68@02) $k@73@02) $k@81@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] 0 < diz.Sensor_m.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@60@02 $k@68@02) $k@73@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18540
;  :arith-add-rows          471
;  :arith-assert-diseq      135
;  :arith-assert-lower      927
;  :arith-assert-upper      1086
;  :arith-bound-prop        71
;  :arith-conflicts         42
;  :arith-eq-adapter        816
;  :arith-fixed-eqs         869
;  :arith-offset-eqs        341
;  :arith-pivots            356
;  :binary-propagations     11
;  :conflicts               320
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1655
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6695
;  :mk-clause               1754
;  :num-allocs              6781521
;  :num-checks              378
;  :propagations            1512
;  :quant-instantiations    546
;  :rlimit-count            339422)
(declare-const $k@82@02 $Perm)
(assert ($Perm.isReadVar $k@82@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@82@02 $Perm.No) (< $Perm.No $k@82@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18540
;  :arith-add-rows          471
;  :arith-assert-diseq      136
;  :arith-assert-lower      929
;  :arith-assert-upper      1087
;  :arith-bound-prop        71
;  :arith-conflicts         42
;  :arith-eq-adapter        817
;  :arith-fixed-eqs         869
;  :arith-offset-eqs        341
;  :arith-pivots            356
;  :binary-propagations     11
;  :conflicts               321
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1655
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6699
;  :mk-clause               1756
;  :num-allocs              6781521
;  :num-checks              379
;  :propagations            1513
;  :quant-instantiations    546
;  :rlimit-count            339621)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@61@02 $k@69@02) $k@75@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18541
;  :arith-add-rows          471
;  :arith-assert-diseq      136
;  :arith-assert-lower      929
;  :arith-assert-upper      1088
;  :arith-bound-prop        71
;  :arith-conflicts         43
;  :arith-eq-adapter        818
;  :arith-fixed-eqs         869
;  :arith-offset-eqs        341
;  :arith-pivots            356
;  :binary-propagations     11
;  :conflicts               322
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1657
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6701
;  :mk-clause               1758
;  :num-allocs              6781521
;  :num-checks              380
;  :propagations            1514
;  :quant-instantiations    546
;  :rlimit-count            339701)
(assert (< $k@82@02 (+ (- $k@61@02 $k@69@02) $k@75@02)))
(assert (<= $Perm.No (- (+ (- $k@61@02 $k@69@02) $k@75@02) $k@82@02)))
(assert (<= (- (+ (- $k@61@02 $k@69@02) $k@75@02) $k@82@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@61@02 $k@69@02) $k@75@02) $k@82@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] diz.Sensor_m.Main_sensor != null
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18541
;  :arith-add-rows          473
;  :arith-assert-diseq      136
;  :arith-assert-lower      931
;  :arith-assert-upper      1090
;  :arith-bound-prop        71
;  :arith-conflicts         44
;  :arith-eq-adapter        818
;  :arith-fixed-eqs         870
;  :arith-offset-eqs        341
;  :arith-pivots            356
;  :binary-propagations     11
;  :conflicts               323
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1657
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6705
;  :mk-clause               1758
;  :num-allocs              6781521
;  :num-checks              381
;  :propagations            1514
;  :quant-instantiations    546
;  :rlimit-count            339970)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18541
;  :arith-add-rows          473
;  :arith-assert-diseq      136
;  :arith-assert-lower      931
;  :arith-assert-upper      1091
;  :arith-bound-prop        71
;  :arith-conflicts         45
;  :arith-eq-adapter        818
;  :arith-fixed-eqs         871
;  :arith-offset-eqs        341
;  :arith-pivots            356
;  :binary-propagations     11
;  :conflicts               324
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1657
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6706
;  :mk-clause               1758
;  :num-allocs              6781521
;  :num-checks              382
;  :propagations            1514
;  :quant-instantiations    546
;  :rlimit-count            340051)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18541
;  :arith-add-rows          473
;  :arith-assert-diseq      136
;  :arith-assert-lower      931
;  :arith-assert-upper      1091
;  :arith-bound-prop        71
;  :arith-conflicts         45
;  :arith-eq-adapter        818
;  :arith-fixed-eqs         871
;  :arith-offset-eqs        341
;  :arith-pivots            356
;  :binary-propagations     11
;  :conflicts               324
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1657
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6706
;  :mk-clause               1758
;  :num-allocs              6781521
;  :num-checks              383
;  :propagations            1514
;  :quant-instantiations    546
;  :rlimit-count            340064)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18541
;  :arith-add-rows          473
;  :arith-assert-diseq      136
;  :arith-assert-lower      931
;  :arith-assert-upper      1092
;  :arith-bound-prop        71
;  :arith-conflicts         46
;  :arith-eq-adapter        818
;  :arith-fixed-eqs         872
;  :arith-offset-eqs        341
;  :arith-pivots            356
;  :binary-propagations     11
;  :conflicts               325
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1657
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6707
;  :mk-clause               1758
;  :num-allocs              6781521
;  :num-checks              384
;  :propagations            1514
;  :quant-instantiations    546
;  :rlimit-count            340145)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
  $t@76@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18541
;  :arith-add-rows          473
;  :arith-assert-diseq      136
;  :arith-assert-lower      931
;  :arith-assert-upper      1092
;  :arith-bound-prop        71
;  :arith-conflicts         46
;  :arith-eq-adapter        818
;  :arith-fixed-eqs         872
;  :arith-offset-eqs        341
;  :arith-pivots            356
;  :binary-propagations     11
;  :conflicts               325
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3604
;  :datatype-occurs-check   1639
;  :datatype-splits         2655
;  :decisions               3720
;  :del-clause              1657
;  :final-checks            332
;  :interface-eqs           37
;  :max-generation          2
;  :max-memory              5.08
;  :memory                  4.99
;  :minimized-lits          12
;  :mk-bool-var             6707
;  :mk-clause               1758
;  :num-allocs              6781521
;  :num-checks              385
;  :propagations            1514
;  :quant-instantiations    546
;  :rlimit-count            340156)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18790
;  :arith-add-rows          477
;  :arith-assert-diseq      136
;  :arith-assert-lower      940
;  :arith-assert-upper      1106
;  :arith-bound-prop        71
;  :arith-conflicts         46
;  :arith-eq-adapter        827
;  :arith-fixed-eqs         887
;  :arith-offset-eqs        351
;  :arith-pivots            362
;  :binary-propagations     11
;  :conflicts               325
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1670
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.09
;  :minimized-lits          12
;  :mk-bool-var             6769
;  :mk-clause               1771
;  :num-allocs              7043329
;  :num-checks              386
;  :propagations            1537
;  :quant-instantiations    551
;  :rlimit-count            342063
;  :time                    0.00)
(declare-const $k@83@02 $Perm)
(assert ($Perm.isReadVar $k@83@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@83@02 $Perm.No) (< $Perm.No $k@83@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18790
;  :arith-add-rows          477
;  :arith-assert-diseq      137
;  :arith-assert-lower      942
;  :arith-assert-upper      1107
;  :arith-bound-prop        71
;  :arith-conflicts         46
;  :arith-eq-adapter        828
;  :arith-fixed-eqs         887
;  :arith-offset-eqs        351
;  :arith-pivots            362
;  :binary-propagations     11
;  :conflicts               326
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1670
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.09
;  :minimized-lits          12
;  :mk-bool-var             6773
;  :mk-clause               1773
;  :num-allocs              7043329
;  :num-checks              387
;  :propagations            1538
;  :quant-instantiations    551
;  :rlimit-count            342261)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@62@02 $k@70@02) $k@77@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18791
;  :arith-add-rows          477
;  :arith-assert-diseq      137
;  :arith-assert-lower      942
;  :arith-assert-upper      1108
;  :arith-bound-prop        71
;  :arith-conflicts         47
;  :arith-eq-adapter        829
;  :arith-fixed-eqs         887
;  :arith-offset-eqs        351
;  :arith-pivots            362
;  :binary-propagations     11
;  :conflicts               327
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1672
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6775
;  :mk-clause               1775
;  :num-allocs              7305747
;  :num-checks              388
;  :propagations            1539
;  :quant-instantiations    551
;  :rlimit-count            342339)
(assert (< $k@83@02 (+ (- $k@62@02 $k@70@02) $k@77@02)))
(assert (<= $Perm.No (- (+ (- $k@62@02 $k@70@02) $k@77@02) $k@83@02)))
(assert (<= (- (+ (- $k@62@02 $k@70@02) $k@77@02) $k@83@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@62@02 $k@70@02) $k@77@02) $k@83@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] diz.Sensor_m.Main_controller != null
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18791
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      944
;  :arith-assert-upper      1110
;  :arith-bound-prop        71
;  :arith-conflicts         48
;  :arith-eq-adapter        829
;  :arith-fixed-eqs         888
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               328
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1672
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6779
;  :mk-clause               1775
;  :num-allocs              7305747
;  :num-checks              389
;  :propagations            1539
;  :quant-instantiations    551
;  :rlimit-count            342611)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18791
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      944
;  :arith-assert-upper      1111
;  :arith-bound-prop        71
;  :arith-conflicts         49
;  :arith-eq-adapter        829
;  :arith-fixed-eqs         889
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               329
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1672
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6780
;  :mk-clause               1775
;  :num-allocs              7305747
;  :num-checks              390
;  :propagations            1539
;  :quant-instantiations    551
;  :rlimit-count            342689)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18791
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      944
;  :arith-assert-upper      1111
;  :arith-bound-prop        71
;  :arith-conflicts         49
;  :arith-eq-adapter        829
;  :arith-fixed-eqs         889
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               329
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1672
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6780
;  :mk-clause               1775
;  :num-allocs              7305747
;  :num-checks              391
;  :propagations            1539
;  :quant-instantiations    551
;  :rlimit-count            342702)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18791
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      944
;  :arith-assert-upper      1112
;  :arith-bound-prop        71
;  :arith-conflicts         50
;  :arith-eq-adapter        829
;  :arith-fixed-eqs         890
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1672
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6781
;  :mk-clause               1775
;  :num-allocs              7305747
;  :num-checks              392
;  :propagations            1539
;  :quant-instantiations    551
;  :rlimit-count            342780)
; [eval] diz.Sensor_m.Main_process_state[0] == -1 || diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0] == -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18791
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      944
;  :arith-assert-upper      1112
;  :arith-bound-prop        71
;  :arith-conflicts         50
;  :arith-eq-adapter        829
;  :arith-fixed-eqs         890
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1672
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6781
;  :mk-clause               1775
;  :num-allocs              7305747
;  :num-checks              393
;  :propagations            1539
;  :quant-instantiations    551
;  :rlimit-count            342795)
; [eval] -1
(push) ; 9
; [then-branch: 93 | First:(Second:(Second:(Second:($t@71@02))))[0] == -1 | live]
; [else-branch: 93 | First:(Second:(Second:(Second:($t@71@02))))[0] != -1 | live]
(push) ; 10
; [then-branch: 93 | First:(Second:(Second:(Second:($t@71@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    0)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 93 | First:(Second:(Second:(Second:($t@71@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      0)
    (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18793
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      945
;  :arith-assert-upper      1114
;  :arith-bound-prop        71
;  :arith-conflicts         50
;  :arith-eq-adapter        830
;  :arith-fixed-eqs         890
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1672
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6785
;  :mk-clause               1778
;  :num-allocs              7305747
;  :num-checks              394
;  :propagations            1542
;  :quant-instantiations    553
;  :rlimit-count            343028)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Sensor_m.Main_process_state[1] == -1 || diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18793
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      945
;  :arith-assert-upper      1114
;  :arith-bound-prop        71
;  :arith-conflicts         50
;  :arith-eq-adapter        830
;  :arith-fixed-eqs         890
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1675
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6785
;  :mk-clause               1778
;  :num-allocs              7305747
;  :num-checks              395
;  :propagations            1542
;  :quant-instantiations    553
;  :rlimit-count            343043)
; [eval] -1
(push) ; 9
; [then-branch: 94 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1 | live]
; [else-branch: 94 | First:(Second:(Second:(Second:($t@71@02))))[1] != -1 | live]
(push) ; 10
; [then-branch: 94 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    1)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 94 | First:(Second:(Second:(Second:($t@71@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18795
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      947
;  :arith-assert-upper      1116
;  :arith-bound-prop        71
;  :arith-conflicts         50
;  :arith-eq-adapter        831
;  :arith-fixed-eqs         890
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1675
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6790
;  :mk-clause               1781
;  :num-allocs              7305747
;  :num-checks              396
;  :propagations            1545
;  :quant-instantiations    555
;  :rlimit-count            343278)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Sensor_m.Main_event_state[0] != -1
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18795
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      947
;  :arith-assert-upper      1116
;  :arith-bound-prop        71
;  :arith-conflicts         50
;  :arith-eq-adapter        831
;  :arith-fixed-eqs         890
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1678
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6790
;  :mk-clause               1781
;  :num-allocs              7305747
;  :num-checks              397
;  :propagations            1545
;  :quant-instantiations    555
;  :rlimit-count            343293)
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[0] != 0
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18795
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      947
;  :arith-assert-upper      1116
;  :arith-bound-prop        71
;  :arith-conflicts         50
;  :arith-eq-adapter        831
;  :arith-fixed-eqs         890
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1678
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6790
;  :mk-clause               1781
;  :num-allocs              7305747
;  :num-checks              398
;  :propagations            1545
;  :quant-instantiations    555
;  :rlimit-count            343308)
; [eval] diz.Sensor_m.Main_event_state[2] <= -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18795
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      947
;  :arith-assert-upper      1116
;  :arith-bound-prop        71
;  :arith-conflicts         50
;  :arith-eq-adapter        831
;  :arith-fixed-eqs         890
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               330
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1678
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6790
;  :mk-clause               1781
;  :num-allocs              7305747
;  :num-checks              399
;  :propagations            1545
;  :quant-instantiations    555
;  :rlimit-count            343323)
; [eval] -1
; [eval] !diz.Sensor_m.Main_controller.Controller_init || (diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1)
; [eval] !diz.Sensor_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18795
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      947
;  :arith-assert-upper      1117
;  :arith-bound-prop        71
;  :arith-conflicts         51
;  :arith-eq-adapter        831
;  :arith-fixed-eqs         891
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               331
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1678
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6791
;  :mk-clause               1781
;  :num-allocs              7305747
;  :num-checks              400
;  :propagations            1545
;  :quant-instantiations    555
;  :rlimit-count            343401)
(push) ; 9
; [then-branch: 95 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))) | live]
; [else-branch: 95 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 95 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 95 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18798
;  :arith-add-rows          478
;  :arith-assert-diseq      137
;  :arith-assert-lower      947
;  :arith-assert-upper      1117
;  :arith-bound-prop        71
;  :arith-conflicts         51
;  :arith-eq-adapter        831
;  :arith-fixed-eqs         891
;  :arith-offset-eqs        351
;  :arith-pivots            363
;  :binary-propagations     11
;  :conflicts               331
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 3643
;  :datatype-occurs-check   1677
;  :datatype-splits         2691
;  :decisions               3765
;  :del-clause              1678
;  :final-checks            336
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.00
;  :minimized-lits          12
;  :mk-bool-var             6792
;  :mk-clause               1781
;  :num-allocs              7305747
;  :num-checks              401
;  :propagations            1545
;  :quant-instantiations    556
;  :rlimit-count            343720)
; [eval] -1
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19200
;  :arith-add-rows          483
;  :arith-assert-diseq      138
;  :arith-assert-lower      965
;  :arith-assert-upper      1137
;  :arith-bound-prop        72
;  :arith-conflicts         51
;  :arith-eq-adapter        850
;  :arith-fixed-eqs         919
;  :arith-offset-eqs        371
;  :arith-pivots            370
;  :binary-propagations     11
;  :conflicts               335
;  :datatype-accessor-ax    662
;  :datatype-constructor-ax 3715
;  :datatype-occurs-check   1758
;  :datatype-splits         2733
;  :decisions               3838
;  :del-clause              1711
;  :final-checks            341
;  :interface-eqs           39
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             6894
;  :mk-clause               1814
;  :num-allocs              7570695
;  :num-checks              402
;  :propagations            1581
;  :quant-instantiations    563
;  :rlimit-count            346411
;  :time                    0.00)
(push) ; 12
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19534
;  :arith-add-rows          488
;  :arith-assert-diseq      138
;  :arith-assert-lower      980
;  :arith-assert-upper      1157
;  :arith-bound-prop        72
;  :arith-conflicts         51
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         943
;  :arith-offset-eqs        388
;  :arith-pivots            377
;  :binary-propagations     11
;  :conflicts               337
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 3777
;  :datatype-occurs-check   1839
;  :datatype-splits         2773
;  :decisions               3903
;  :del-clause              1734
;  :final-checks            346
;  :interface-eqs           40
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             6981
;  :mk-clause               1837
;  :num-allocs              7570695
;  :num-checks              403
;  :propagations            1611
;  :quant-instantiations    569
;  :rlimit-count            348895
;  :time                    0.00)
; [then-branch: 96 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1 | live]
; [else-branch: 96 | First:(Second:(Second:(Second:($t@71@02))))[1] != -1 | live]
(push) ; 12
; [then-branch: 96 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
    1)
  (- 0 1)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19539
;  :arith-add-rows          489
;  :arith-assert-diseq      138
;  :arith-assert-lower      982
;  :arith-assert-upper      1159
;  :arith-bound-prop        72
;  :arith-conflicts         51
;  :arith-eq-adapter        865
;  :arith-fixed-eqs         943
;  :arith-offset-eqs        388
;  :arith-pivots            378
;  :binary-propagations     11
;  :conflicts               337
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 3777
;  :datatype-occurs-check   1839
;  :datatype-splits         2773
;  :decisions               3903
;  :del-clause              1734
;  :final-checks            346
;  :interface-eqs           40
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             6986
;  :mk-clause               1840
;  :num-allocs              7570695
;  :num-checks              404
;  :propagations            1616
;  :quant-instantiations    572
;  :rlimit-count            349141)
; [eval] -1
(pop) ; 12
(push) ; 12
; [else-branch: 96 | First:(Second:(Second:(Second:($t@71@02))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19539
;  :arith-add-rows          489
;  :arith-assert-diseq      138
;  :arith-assert-lower      982
;  :arith-assert-upper      1159
;  :arith-bound-prop        72
;  :arith-conflicts         51
;  :arith-eq-adapter        865
;  :arith-fixed-eqs         943
;  :arith-offset-eqs        388
;  :arith-pivots            378
;  :binary-propagations     11
;  :conflicts               337
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 3777
;  :datatype-occurs-check   1839
;  :datatype-splits         2773
;  :decisions               3903
;  :del-clause              1737
;  :final-checks            346
;  :interface-eqs           40
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             6986
;  :mk-clause               1840
;  :num-allocs              7570695
;  :num-checks              405
;  :propagations            1616
;  :quant-instantiations    572
;  :rlimit-count            349184)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20829
;  :arith-add-rows          580
;  :arith-assert-diseq      148
;  :arith-assert-lower      1040
;  :arith-assert-upper      1216
;  :arith-bound-prop        82
;  :arith-conflicts         53
;  :arith-eq-adapter        924
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        444
;  :arith-pivots            396
;  :binary-propagations     11
;  :conflicts               352
;  :datatype-accessor-ax    710
;  :datatype-constructor-ax 4032
;  :datatype-occurs-check   2068
;  :datatype-splits         2962
;  :decisions               4151
;  :del-clause              1853
;  :final-checks            360
;  :interface-eqs           43
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7362
;  :mk-clause               1956
;  :num-allocs              7570695
;  :num-checks              406
;  :propagations            1727
;  :quant-instantiations    587
;  :rlimit-count            356996
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21090
;  :arith-add-rows          642
;  :arith-assert-diseq      148
;  :arith-assert-lower      1049
;  :arith-assert-upper      1230
;  :arith-bound-prop        93
;  :arith-conflicts         53
;  :arith-eq-adapter        933
;  :arith-fixed-eqs         1024
;  :arith-offset-eqs        462
;  :arith-pivots            410
;  :binary-propagations     11
;  :conflicts               352
;  :datatype-accessor-ax    715
;  :datatype-constructor-ax 4071
;  :datatype-occurs-check   2106
;  :datatype-splits         2998
;  :decisions               4196
;  :del-clause              1878
;  :final-checks            364
;  :interface-eqs           44
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7436
;  :mk-clause               1981
;  :num-allocs              7570695
;  :num-checks              407
;  :propagations            1743
;  :quant-instantiations    592
;  :rlimit-count            359848
;  :time                    0.00)
; [then-branch: 97 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2] | live]
; [else-branch: 97 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2]) | live]
(push) ; 10
; [then-branch: 97 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21094
;  :arith-add-rows          643
;  :arith-assert-diseq      148
;  :arith-assert-lower      1052
;  :arith-assert-upper      1232
;  :arith-bound-prop        93
;  :arith-conflicts         53
;  :arith-eq-adapter        934
;  :arith-fixed-eqs         1025
;  :arith-offset-eqs        462
;  :arith-pivots            411
;  :binary-propagations     11
;  :conflicts               352
;  :datatype-accessor-ax    715
;  :datatype-constructor-ax 4071
;  :datatype-occurs-check   2106
;  :datatype-splits         2998
;  :decisions               4196
;  :del-clause              1878
;  :final-checks            364
;  :interface-eqs           44
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7441
;  :mk-clause               1984
;  :num-allocs              7570695
;  :num-checks              408
;  :propagations            1748
;  :quant-instantiations    595
;  :rlimit-count            360110)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 97 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21094
;  :arith-add-rows          643
;  :arith-assert-diseq      148
;  :arith-assert-lower      1052
;  :arith-assert-upper      1232
;  :arith-bound-prop        93
;  :arith-conflicts         53
;  :arith-eq-adapter        934
;  :arith-fixed-eqs         1025
;  :arith-offset-eqs        462
;  :arith-pivots            411
;  :binary-propagations     11
;  :conflicts               352
;  :datatype-accessor-ax    715
;  :datatype-constructor-ax 4071
;  :datatype-occurs-check   2106
;  :datatype-splits         2998
;  :decisions               4196
;  :del-clause              1881
;  :final-checks            364
;  :interface-eqs           44
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7441
;  :mk-clause               1984
;  :num-allocs              7570695
;  :num-checks              409
;  :propagations            1748
;  :quant-instantiations    595
;  :rlimit-count            360157)
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22367
;  :arith-add-rows          749
;  :arith-assert-diseq      158
;  :arith-assert-lower      1110
;  :arith-assert-upper      1289
;  :arith-bound-prop        103
;  :arith-conflicts         55
;  :arith-eq-adapter        993
;  :arith-fixed-eqs         1076
;  :arith-offset-eqs        512
;  :arith-pivots            432
;  :binary-propagations     11
;  :conflicts               367
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 4326
;  :datatype-occurs-check   2335
;  :datatype-splits         3187
;  :decisions               4444
;  :del-clause              1997
;  :final-checks            378
;  :interface-eqs           47
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7817
;  :mk-clause               2100
;  :num-allocs              7570695
;  :num-checks              410
;  :propagations            1859
;  :quant-instantiations    610
;  :rlimit-count            368193
;  :time                    0.00)
(push) ; 10
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22628
;  :arith-add-rows          811
;  :arith-assert-diseq      158
;  :arith-assert-lower      1119
;  :arith-assert-upper      1303
;  :arith-bound-prop        114
;  :arith-conflicts         55
;  :arith-eq-adapter        1002
;  :arith-fixed-eqs         1095
;  :arith-offset-eqs        530
;  :arith-pivots            446
;  :binary-propagations     11
;  :conflicts               367
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 4365
;  :datatype-occurs-check   2373
;  :datatype-splits         3223
;  :decisions               4489
;  :del-clause              2022
;  :final-checks            382
;  :interface-eqs           48
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7891
;  :mk-clause               2125
;  :num-allocs              7570695
;  :num-checks              411
;  :propagations            1875
;  :quant-instantiations    615
;  :rlimit-count            371045
;  :time                    0.00)
; [then-branch: 98 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2] | live]
; [else-branch: 98 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2]) | live]
(push) ; 10
; [then-branch: 98 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
    2)))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22632
;  :arith-add-rows          812
;  :arith-assert-diseq      158
;  :arith-assert-lower      1122
;  :arith-assert-upper      1306
;  :arith-bound-prop        114
;  :arith-conflicts         56
;  :arith-eq-adapter        1003
;  :arith-fixed-eqs         1097
;  :arith-offset-eqs        530
;  :arith-pivots            447
;  :binary-propagations     11
;  :conflicts               368
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 4365
;  :datatype-occurs-check   2373
;  :datatype-splits         3223
;  :decisions               4489
;  :del-clause              2022
;  :final-checks            382
;  :interface-eqs           48
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7897
;  :mk-clause               2128
;  :num-allocs              7570695
;  :num-checks              412
;  :propagations            1880
;  :quant-instantiations    618
;  :rlimit-count            371373)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@60@02 $k@68@02) $k@73@02))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22632
;  :arith-add-rows          812
;  :arith-assert-diseq      158
;  :arith-assert-lower      1123
;  :arith-assert-upper      1306
;  :arith-bound-prop        114
;  :arith-conflicts         57
;  :arith-eq-adapter        1003
;  :arith-fixed-eqs         1098
;  :arith-offset-eqs        530
;  :arith-pivots            448
;  :binary-propagations     11
;  :conflicts               369
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 4365
;  :datatype-occurs-check   2373
;  :datatype-splits         3223
;  :decisions               4489
;  :del-clause              2022
;  :final-checks            382
;  :interface-eqs           48
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7898
;  :mk-clause               2128
;  :num-allocs              7570695
;  :num-checks              413
;  :propagations            1880
;  :quant-instantiations    618
;  :rlimit-count            371470)
(pop) ; 10
(push) ; 10
; [else-branch: 98 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))
      2))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@62@02 $k@70@02) $k@77@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22632
;  :arith-add-rows          812
;  :arith-assert-diseq      158
;  :arith-assert-lower      1123
;  :arith-assert-upper      1307
;  :arith-bound-prop        114
;  :arith-conflicts         58
;  :arith-eq-adapter        1003
;  :arith-fixed-eqs         1099
;  :arith-offset-eqs        530
;  :arith-pivots            448
;  :binary-propagations     11
;  :conflicts               370
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 4365
;  :datatype-occurs-check   2373
;  :datatype-splits         3223
;  :decisions               4489
;  :del-clause              2025
;  :final-checks            382
;  :interface-eqs           48
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7899
;  :mk-clause               2128
;  :num-allocs              7570695
;  :num-checks              414
;  :propagations            1880
;  :quant-instantiations    618
;  :rlimit-count            371580)
(push) ; 9
; [then-branch: 99 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))) | live]
; [else-branch: 99 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 99 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22635
;  :arith-add-rows          812
;  :arith-assert-diseq      158
;  :arith-assert-lower      1123
;  :arith-assert-upper      1307
;  :arith-bound-prop        114
;  :arith-conflicts         58
;  :arith-eq-adapter        1003
;  :arith-fixed-eqs         1099
;  :arith-offset-eqs        530
;  :arith-pivots            448
;  :binary-propagations     11
;  :conflicts               370
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 4365
;  :datatype-occurs-check   2373
;  :datatype-splits         3223
;  :decisions               4489
;  :del-clause              2025
;  :final-checks            382
;  :interface-eqs           48
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             7900
;  :mk-clause               2128
;  :num-allocs              7570695
;  :num-checks              415
;  :propagations            1880
;  :quant-instantiations    619
;  :rlimit-count            371851)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 99 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23023
;  :arith-add-rows          831
;  :arith-assert-diseq      159
;  :arith-assert-lower      1141
;  :arith-assert-upper      1327
;  :arith-bound-prop        115
;  :arith-conflicts         58
;  :arith-eq-adapter        1022
;  :arith-fixed-eqs         1116
;  :arith-offset-eqs        544
;  :arith-pivots            457
;  :binary-propagations     11
;  :conflicts               374
;  :datatype-accessor-ax    769
;  :datatype-constructor-ax 4437
;  :datatype-occurs-check   2454
;  :datatype-splits         3265
;  :decisions               4562
;  :del-clause              2058
;  :final-checks            387
;  :interface-eqs           49
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8003
;  :mk-clause               2161
;  :num-allocs              7570695
;  :num-checks              416
;  :propagations            1916
;  :quant-instantiations    627
;  :rlimit-count            374988
;  :time                    0.00)
(push) ; 10
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23272
;  :arith-add-rows          836
;  :arith-assert-diseq      159
;  :arith-assert-lower      1150
;  :arith-assert-upper      1341
;  :arith-bound-prop        115
;  :arith-conflicts         58
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         1131
;  :arith-offset-eqs        554
;  :arith-pivots            464
;  :binary-propagations     11
;  :conflicts               374
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 4476
;  :datatype-occurs-check   2492
;  :datatype-splits         3301
;  :decisions               4607
;  :del-clause              2072
;  :final-checks            391
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8065
;  :mk-clause               2175
;  :num-allocs              7570695
;  :num-checks              417
;  :propagations            1939
;  :quant-instantiations    632
;  :rlimit-count            377210
;  :time                    0.00)
; [then-branch: 100 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))) | live]
; [else-branch: 100 | !(First:(Second:(Second:(Second:($t@71@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 100 | First:(Second:(Second:(Second:($t@71@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02))))))))))))))))))))))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23280
;  :arith-add-rows          837
;  :arith-assert-diseq      159
;  :arith-assert-lower      1152
;  :arith-assert-upper      1344
;  :arith-bound-prop        115
;  :arith-conflicts         59
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         1132
;  :arith-offset-eqs        554
;  :arith-pivots            465
;  :binary-propagations     11
;  :conflicts               375
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 4476
;  :datatype-occurs-check   2492
;  :datatype-splits         3301
;  :decisions               4607
;  :del-clause              2072
;  :final-checks            391
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8072
;  :mk-clause               2178
;  :num-allocs              7570695
;  :num-checks              418
;  :propagations            1944
;  :quant-instantiations    636
;  :rlimit-count            377722)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@60@02 $k@68@02) $k@73@02))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23280
;  :arith-add-rows          837
;  :arith-assert-diseq      159
;  :arith-assert-lower      1153
;  :arith-assert-upper      1344
;  :arith-bound-prop        115
;  :arith-conflicts         60
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         1133
;  :arith-offset-eqs        554
;  :arith-pivots            466
;  :binary-propagations     11
;  :conflicts               376
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 4476
;  :datatype-occurs-check   2492
;  :datatype-splits         3301
;  :decisions               4607
;  :del-clause              2072
;  :final-checks            391
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8073
;  :mk-clause               2178
;  :num-allocs              7570695
;  :num-checks              419
;  :propagations            1944
;  :quant-instantiations    636
;  :rlimit-count            377819)
(pop) ; 10
(push) ; 10
; [else-branch: 100 | !(First:(Second:(Second:(Second:($t@71@02))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@71@02))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@02)))))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] diz.Sensor_m.Main_sensor == diz
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@61@02 $k@69@02) $k@75@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23280
;  :arith-add-rows          837
;  :arith-assert-diseq      159
;  :arith-assert-lower      1153
;  :arith-assert-upper      1345
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         1134
;  :arith-offset-eqs        554
;  :arith-pivots            466
;  :binary-propagations     11
;  :conflicts               377
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 4476
;  :datatype-occurs-check   2492
;  :datatype-splits         3301
;  :decisions               4607
;  :del-clause              2075
;  :final-checks            391
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8074
;  :mk-clause               2178
;  :num-allocs              7570695
;  :num-checks              420
;  :propagations            1944
;  :quant-instantiations    636
;  :rlimit-count            377964)
(set-option :timeout 0)
(push) ; 9
(assert (not (= $t@76@02 diz@2@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23280
;  :arith-add-rows          837
;  :arith-assert-diseq      159
;  :arith-assert-lower      1153
;  :arith-assert-upper      1345
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         1134
;  :arith-offset-eqs        554
;  :arith-pivots            466
;  :binary-propagations     11
;  :conflicts               377
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 4476
;  :datatype-occurs-check   2492
;  :datatype-splits         3301
;  :decisions               4607
;  :del-clause              2075
;  :final-checks            391
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8074
;  :mk-clause               2178
;  :num-allocs              7570695
;  :num-checks              421
;  :propagations            1944
;  :quant-instantiations    636
;  :rlimit-count            377975)
(assert (= $t@76@02 diz@2@02))
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23280
;  :arith-add-rows          837
;  :arith-assert-diseq      159
;  :arith-assert-lower      1153
;  :arith-assert-upper      1345
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         1134
;  :arith-offset-eqs        554
;  :arith-pivots            466
;  :binary-propagations     11
;  :conflicts               377
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 4476
;  :datatype-occurs-check   2492
;  :datatype-splits         3301
;  :decisions               4607
;  :del-clause              2075
;  :final-checks            391
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8074
;  :mk-clause               2178
;  :num-allocs              7570695
;  :num-checks              422
;  :propagations            1944
;  :quant-instantiations    636
;  :rlimit-count            377991)
(pop) ; 8
(push) ; 8
; [else-branch: 64 | !(First:(Second:(Second:(Second:($t@58@02))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
          0)
        (- 0 2))))))
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23494
;  :arith-add-rows          841
;  :arith-assert-diseq      159
;  :arith-assert-lower      1161
;  :arith-assert-upper      1357
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1040
;  :arith-fixed-eqs         1148
;  :arith-offset-eqs        563
;  :arith-pivots            478
;  :binary-propagations     11
;  :conflicts               378
;  :datatype-accessor-ax    779
;  :datatype-constructor-ax 4517
;  :datatype-occurs-check   2504
;  :datatype-splits         3333
;  :decisions               4652
;  :del-clause              2103
;  :final-checks            395
;  :interface-eqs           51
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8132
;  :mk-clause               2191
;  :num-allocs              7570695
;  :num-checks              423
;  :propagations            1963
;  :quant-instantiations    640
;  :rlimit-count            379842
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23708
;  :arith-add-rows          844
;  :arith-assert-diseq      159
;  :arith-assert-lower      1169
;  :arith-assert-upper      1369
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1048
;  :arith-fixed-eqs         1162
;  :arith-offset-eqs        572
;  :arith-pivots            482
;  :binary-propagations     11
;  :conflicts               379
;  :datatype-accessor-ax    784
;  :datatype-constructor-ax 4558
;  :datatype-occurs-check   2516
;  :datatype-splits         3365
;  :decisions               4697
;  :del-clause              2116
;  :final-checks            399
;  :interface-eqs           52
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8190
;  :mk-clause               2204
;  :num-allocs              7570695
;  :num-checks              424
;  :propagations            1982
;  :quant-instantiations    644
;  :rlimit-count            381596
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23922
;  :arith-add-rows          847
;  :arith-assert-diseq      159
;  :arith-assert-lower      1177
;  :arith-assert-upper      1381
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1056
;  :arith-fixed-eqs         1176
;  :arith-offset-eqs        581
;  :arith-pivots            486
;  :binary-propagations     11
;  :conflicts               380
;  :datatype-accessor-ax    789
;  :datatype-constructor-ax 4599
;  :datatype-occurs-check   2528
;  :datatype-splits         3397
;  :decisions               4742
;  :del-clause              2129
;  :final-checks            403
;  :interface-eqs           53
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8248
;  :mk-clause               2217
;  :num-allocs              7570695
;  :num-checks              425
;  :propagations            2001
;  :quant-instantiations    648
;  :rlimit-count            383350)
; [eval] !(diz.Sensor_m.Main_process_state[0] != -1 || diz.Sensor_m.Main_event_state[0] != -2)
; [eval] diz.Sensor_m.Main_process_state[0] != -1 || diz.Sensor_m.Main_event_state[0] != -2
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23922
;  :arith-add-rows          847
;  :arith-assert-diseq      159
;  :arith-assert-lower      1177
;  :arith-assert-upper      1381
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1056
;  :arith-fixed-eqs         1176
;  :arith-offset-eqs        581
;  :arith-pivots            486
;  :binary-propagations     11
;  :conflicts               380
;  :datatype-accessor-ax    789
;  :datatype-constructor-ax 4599
;  :datatype-occurs-check   2528
;  :datatype-splits         3397
;  :decisions               4742
;  :del-clause              2129
;  :final-checks            403
;  :interface-eqs           53
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8248
;  :mk-clause               2217
;  :num-allocs              7570695
;  :num-checks              426
;  :propagations            2001
;  :quant-instantiations    648
;  :rlimit-count            383365)
; [eval] -1
(push) ; 8
; [then-branch: 101 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 | live]
; [else-branch: 101 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1 | live]
(push) ; 9
; [then-branch: 101 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 101 | First:(Second:(Second:(Second:($t@58@02))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    0)
  (- 0 1)))
; [eval] diz.Sensor_m.Main_event_state[0] != -2
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23924
;  :arith-add-rows          847
;  :arith-assert-diseq      159
;  :arith-assert-lower      1177
;  :arith-assert-upper      1382
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1056
;  :arith-fixed-eqs         1176
;  :arith-offset-eqs        581
;  :arith-pivots            486
;  :binary-propagations     11
;  :conflicts               380
;  :datatype-accessor-ax    789
;  :datatype-constructor-ax 4599
;  :datatype-occurs-check   2528
;  :datatype-splits         3397
;  :decisions               4742
;  :del-clause              2129
;  :final-checks            403
;  :interface-eqs           53
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8248
;  :mk-clause               2217
;  :num-allocs              7570695
;  :num-checks              427
;  :propagations            2002
;  :quant-instantiations    648
;  :rlimit-count            383531)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24113
;  :arith-add-rows          850
;  :arith-assert-diseq      159
;  :arith-assert-lower      1184
;  :arith-assert-upper      1393
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1063
;  :arith-fixed-eqs         1188
;  :arith-offset-eqs        589
;  :arith-pivots            490
;  :binary-propagations     11
;  :conflicts               380
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 4632
;  :datatype-occurs-check   2539
;  :datatype-splits         3427
;  :decisions               4779
;  :del-clause              2140
;  :final-checks            407
;  :interface-eqs           54
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8299
;  :mk-clause               2228
;  :num-allocs              7570695
;  :num-checks              428
;  :propagations            2020
;  :quant-instantiations    652
;  :rlimit-count            385243
;  :time                    0.00)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24301
;  :arith-add-rows          853
;  :arith-assert-diseq      159
;  :arith-assert-lower      1191
;  :arith-assert-upper      1404
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1070
;  :arith-fixed-eqs         1200
;  :arith-offset-eqs        597
;  :arith-pivots            494
;  :binary-propagations     11
;  :conflicts               380
;  :datatype-accessor-ax    797
;  :datatype-constructor-ax 4665
;  :datatype-occurs-check   2550
;  :datatype-splits         3457
;  :decisions               4817
;  :del-clause              2152
;  :final-checks            411
;  :interface-eqs           55
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8350
;  :mk-clause               2240
;  :num-allocs              7570695
;  :num-checks              429
;  :propagations            2039
;  :quant-instantiations    656
;  :rlimit-count            386988
;  :time                    0.00)
; [then-branch: 102 | !(First:(Second:(Second:(Second:($t@58@02))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[0] != -2) | live]
; [else-branch: 102 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[0] != -2 | live]
(push) ; 8
; [then-branch: 102 | !(First:(Second:(Second:(Second:($t@58@02))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
          0)
        (- 0 2))))))
; [exec]
; __flatten_7__8 := Sensor_getDistance_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
(declare-const sys__result@84@02 Int)
(declare-const $t@85@02 $Snap)
(assert (= $t@85@02 ($Snap.combine ($Snap.first $t@85@02) ($Snap.second $t@85@02))))
(assert (= ($Snap.first $t@85@02) $Snap.unit))
; [eval] 0 <= sys__result
(assert (<= 0 sys__result@84@02))
(assert (= ($Snap.second $t@85@02) $Snap.unit))
; [eval] sys__result < 256
(assert (< sys__result@84@02 256))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; diz.Sensor_dist := __flatten_7__8
; [exec]
; __flatten_9__9 := diz.Sensor_m
(declare-const __flatten_9__9@86@02 $Ref)
(assert (= __flatten_9__9@86@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [eval] diz.Sensor_dist < __flatten_9__9.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_9__9@86@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24501
;  :arith-add-rows          856
;  :arith-assert-diseq      159
;  :arith-assert-lower      1199
;  :arith-assert-upper      1416
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1077
;  :arith-fixed-eqs         1212
;  :arith-offset-eqs        605
;  :arith-pivots            498
;  :binary-propagations     11
;  :conflicts               380
;  :datatype-accessor-ax    802
;  :datatype-constructor-ax 4698
;  :datatype-occurs-check   2561
;  :datatype-splits         3487
;  :decisions               4854
;  :del-clause              2163
;  :final-checks            415
;  :interface-eqs           56
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8407
;  :mk-clause               2251
;  :num-allocs              7570695
;  :num-checks              431
;  :propagations            2057
;  :quant-instantiations    660
;  :rlimit-count            389016)
(push) ; 9
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24501
;  :arith-add-rows          856
;  :arith-assert-diseq      159
;  :arith-assert-lower      1199
;  :arith-assert-upper      1416
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1077
;  :arith-fixed-eqs         1212
;  :arith-offset-eqs        605
;  :arith-pivots            498
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    802
;  :datatype-constructor-ax 4698
;  :datatype-occurs-check   2561
;  :datatype-splits         3487
;  :decisions               4854
;  :del-clause              2163
;  :final-checks            415
;  :interface-eqs           56
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8407
;  :mk-clause               2251
;  :num-allocs              7570695
;  :num-checks              432
;  :propagations            2057
;  :quant-instantiations    660
;  :rlimit-count            389064)
(push) ; 9
(assert (not (not
  (<
    sys__result@84@02
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24687
;  :arith-add-rows          860
;  :arith-assert-diseq      159
;  :arith-assert-lower      1207
;  :arith-assert-upper      1426
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1084
;  :arith-fixed-eqs         1224
;  :arith-offset-eqs        613
;  :arith-pivots            502
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    806
;  :datatype-constructor-ax 4731
;  :datatype-occurs-check   2572
;  :datatype-splits         3517
;  :decisions               4891
;  :del-clause              2174
;  :final-checks            419
;  :interface-eqs           57
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8458
;  :mk-clause               2262
;  :num-allocs              7570695
;  :num-checks              433
;  :propagations            2074
;  :quant-instantiations    664
;  :rlimit-count            390771
;  :time                    0.00)
(push) ; 9
(assert (not (<
  sys__result@84@02
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24872
;  :arith-add-rows          878
;  :arith-assert-diseq      159
;  :arith-assert-lower      1214
;  :arith-assert-upper      1437
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1091
;  :arith-fixed-eqs         1236
;  :arith-offset-eqs        620
;  :arith-pivots            510
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8509
;  :mk-clause               2273
;  :num-allocs              7570695
;  :num-checks              434
;  :propagations            2091
;  :quant-instantiations    668
;  :rlimit-count            392749
;  :time                    0.00)
; [then-branch: 103 | sys__result@84@02 < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))) | live]
; [else-branch: 103 | !(sys__result@84@02 < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))) | live]
(push) ; 9
; [then-branch: 103 | sys__result@84@02 < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))]
(assert (<
  sys__result@84@02
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
; [exec]
; __flatten_10__10 := diz.Sensor_m
(declare-const __flatten_10__10@87@02 $Ref)
(assert (= __flatten_10__10@87@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_12__12 := diz.Sensor_m
(declare-const __flatten_12__12@88@02 $Ref)
(assert (= __flatten_12__12@88@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_11__11 := __flatten_12__12.Main_event_state[2 := -1]
; [eval] __flatten_12__12.Main_event_state[2 := -1]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_12__12@88@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24874
;  :arith-add-rows          879
;  :arith-assert-diseq      159
;  :arith-assert-lower      1215
;  :arith-assert-upper      1437
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1091
;  :arith-fixed-eqs         1236
;  :arith-offset-eqs        620
;  :arith-pivots            511
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8512
;  :mk-clause               2273
;  :num-allocs              7570695
;  :num-checks              435
;  :propagations            2091
;  :quant-instantiations    668
;  :rlimit-count            393023)
; [eval] -1
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24874
;  :arith-add-rows          879
;  :arith-assert-diseq      159
;  :arith-assert-lower      1215
;  :arith-assert-upper      1437
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1091
;  :arith-fixed-eqs         1236
;  :arith-offset-eqs        620
;  :arith-pivots            511
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8512
;  :mk-clause               2273
;  :num-allocs              7570695
;  :num-checks              436
;  :propagations            2091
;  :quant-instantiations    668
;  :rlimit-count            393038)
(declare-const __flatten_11__11@89@02 Seq<Int>)
(assert (Seq_equal
  __flatten_11__11@89@02
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    2
    (- 0 1))))
; [exec]
; __flatten_10__10.Main_event_state := __flatten_11__11
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_10__10@87@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24885
;  :arith-add-rows          882
;  :arith-assert-diseq      160
;  :arith-assert-lower      1219
;  :arith-assert-upper      1439
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1094
;  :arith-fixed-eqs         1238
;  :arith-offset-eqs        620
;  :arith-pivots            513
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8536
;  :mk-clause               2293
;  :num-allocs              7570695
;  :num-checks              437
;  :propagations            2100
;  :quant-instantiations    673
;  :rlimit-count            393548)
(assert (not (= __flatten_10__10@87@02 $Ref.null)))
; [exec]
; __flatten_13__13 := diz.Sensor_m
(declare-const __flatten_13__13@90@02 $Ref)
(assert (= __flatten_13__13@90@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_15__15 := diz.Sensor_m
(declare-const __flatten_15__15@91@02 $Ref)
(assert (= __flatten_15__15@91@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_14__14 := __flatten_15__15.Main_process_state[0 := 0]
; [eval] __flatten_15__15.Main_process_state[0 := 0]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_15__15@91@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24888
;  :arith-add-rows          882
;  :arith-assert-diseq      160
;  :arith-assert-lower      1219
;  :arith-assert-upper      1439
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1094
;  :arith-fixed-eqs         1238
;  :arith-offset-eqs        620
;  :arith-pivots            513
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8539
;  :mk-clause               2293
;  :num-allocs              7570695
;  :num-checks              438
;  :propagations            2100
;  :quant-instantiations    673
;  :rlimit-count            393675)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24888
;  :arith-add-rows          882
;  :arith-assert-diseq      160
;  :arith-assert-lower      1219
;  :arith-assert-upper      1439
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1094
;  :arith-fixed-eqs         1238
;  :arith-offset-eqs        620
;  :arith-pivots            513
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8539
;  :mk-clause               2293
;  :num-allocs              7570695
;  :num-checks              439
;  :propagations            2100
;  :quant-instantiations    673
;  :rlimit-count            393690)
(declare-const __flatten_14__14@92@02 Seq<Int>)
(assert (Seq_equal
  __flatten_14__14@92@02
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    0
    0)))
; [exec]
; __flatten_13__13.Main_process_state := __flatten_14__14
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_13__13@90@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24899
;  :arith-add-rows          885
;  :arith-assert-diseq      161
;  :arith-assert-lower      1223
;  :arith-assert-upper      1441
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1097
;  :arith-fixed-eqs         1240
;  :arith-offset-eqs        620
;  :arith-pivots            515
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8563
;  :mk-clause               2314
;  :num-allocs              7570695
;  :num-checks              440
;  :propagations            2109
;  :quant-instantiations    678
;  :rlimit-count            394166)
(assert (not (= __flatten_13__13@90@02 $Ref.null)))
; [exec]
; __flatten_16__16 := diz.Sensor_m
(declare-const __flatten_16__16@93@02 $Ref)
(assert (= __flatten_16__16@93@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_18__18 := diz.Sensor_m
(declare-const __flatten_18__18@94@02 $Ref)
(assert (= __flatten_18__18@94@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_17__17 := __flatten_18__18.Main_event_state[0 := 2]
; [eval] __flatten_18__18.Main_event_state[0 := 2]
(push) ; 10
(assert (not (= __flatten_10__10@87@02 __flatten_18__18@94@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24901
;  :arith-add-rows          885
;  :arith-assert-diseq      161
;  :arith-assert-lower      1223
;  :arith-assert-upper      1441
;  :arith-bound-prop        115
;  :arith-conflicts         61
;  :arith-eq-adapter        1097
;  :arith-fixed-eqs         1240
;  :arith-offset-eqs        620
;  :arith-pivots            515
;  :binary-propagations     11
;  :conflicts               381
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8565
;  :mk-clause               2314
;  :num-allocs              7570695
;  :num-checks              441
;  :propagations            2109
;  :quant-instantiations    678
;  :rlimit-count            394263)
(set-option :timeout 0)
(push) ; 10
(assert (not (< 0 (Seq_length __flatten_11__11@89@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24901
;  :arith-add-rows          885
;  :arith-assert-diseq      161
;  :arith-assert-lower      1223
;  :arith-assert-upper      1442
;  :arith-bound-prop        115
;  :arith-conflicts         62
;  :arith-eq-adapter        1097
;  :arith-fixed-eqs         1240
;  :arith-offset-eqs        620
;  :arith-pivots            515
;  :binary-propagations     11
;  :conflicts               382
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8566
;  :mk-clause               2314
;  :num-allocs              7570695
;  :num-checks              442
;  :propagations            2109
;  :quant-instantiations    678
;  :rlimit-count            394327)
(declare-const __flatten_17__17@95@02 Seq<Int>)
(assert (Seq_equal __flatten_17__17@95@02 (Seq_update __flatten_11__11@89@02 0 2)))
; [exec]
; __flatten_16__16.Main_event_state := __flatten_17__17
(set-option :timeout 10)
(push) ; 10
(assert (not (= __flatten_10__10@87@02 __flatten_16__16@93@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24913
;  :arith-add-rows          889
;  :arith-assert-diseq      162
;  :arith-assert-lower      1227
;  :arith-assert-upper      1444
;  :arith-bound-prop        115
;  :arith-conflicts         62
;  :arith-eq-adapter        1100
;  :arith-fixed-eqs         1242
;  :arith-offset-eqs        620
;  :arith-pivots            517
;  :binary-propagations     11
;  :conflicts               382
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8589
;  :mk-clause               2328
;  :num-allocs              7570695
;  :num-checks              443
;  :propagations            2115
;  :quant-instantiations    683
;  :rlimit-count            394765)
(assert (not (= __flatten_16__16@93@02 $Ref.null)))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24913
;  :arith-add-rows          889
;  :arith-assert-diseq      162
;  :arith-assert-lower      1227
;  :arith-assert-upper      1444
;  :arith-bound-prop        115
;  :arith-conflicts         62
;  :arith-eq-adapter        1100
;  :arith-fixed-eqs         1242
;  :arith-offset-eqs        620
;  :arith-pivots            517
;  :binary-propagations     11
;  :conflicts               382
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8589
;  :mk-clause               2328
;  :num-allocs              7570695
;  :num-checks              444
;  :propagations            2115
;  :quant-instantiations    683
;  :rlimit-count            394798)
; [eval] diz.Sensor_m != null
; [eval] |diz.Sensor_m.Main_process_state| == 2
; [eval] |diz.Sensor_m.Main_process_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_14__14@92@02) 2)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24913
;  :arith-add-rows          889
;  :arith-assert-diseq      162
;  :arith-assert-lower      1227
;  :arith-assert-upper      1444
;  :arith-bound-prop        115
;  :arith-conflicts         62
;  :arith-eq-adapter        1101
;  :arith-fixed-eqs         1242
;  :arith-offset-eqs        620
;  :arith-pivots            517
;  :binary-propagations     11
;  :conflicts               383
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8592
;  :mk-clause               2328
;  :num-allocs              7570695
;  :num-checks              445
;  :propagations            2115
;  :quant-instantiations    683
;  :rlimit-count            394872)
(assert (= (Seq_length __flatten_14__14@92@02) 2))
; [eval] |diz.Sensor_m.Main_event_state| == 3
; [eval] |diz.Sensor_m.Main_event_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_17__17@95@02) 3)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24914
;  :arith-add-rows          889
;  :arith-assert-diseq      162
;  :arith-assert-lower      1228
;  :arith-assert-upper      1445
;  :arith-bound-prop        115
;  :arith-conflicts         62
;  :arith-eq-adapter        1103
;  :arith-fixed-eqs         1242
;  :arith-offset-eqs        620
;  :arith-pivots            517
;  :binary-propagations     11
;  :conflicts               384
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8598
;  :mk-clause               2328
;  :num-allocs              7570695
;  :num-checks              446
;  :propagations            2115
;  :quant-instantiations    683
;  :rlimit-count            394997)
(assert (= (Seq_length __flatten_17__17@95@02) 3))
; [eval] (forall i__19: Int :: { diz.Sensor_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|)
(declare-const i__19@96@02 Int)
(push) ; 10
; [eval] 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state|
; [eval] 0 <= i__19
(push) ; 11
; [then-branch: 104 | 0 <= i__19@96@02 | live]
; [else-branch: 104 | !(0 <= i__19@96@02) | live]
(push) ; 12
; [then-branch: 104 | 0 <= i__19@96@02]
(assert (<= 0 i__19@96@02))
; [eval] i__19 < |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 104 | !(0 <= i__19@96@02)]
(assert (not (<= 0 i__19@96@02)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 105 | i__19@96@02 < |__flatten_14__14@92@02| && 0 <= i__19@96@02 | live]
; [else-branch: 105 | !(i__19@96@02 < |__flatten_14__14@92@02| && 0 <= i__19@96@02) | live]
(push) ; 12
; [then-branch: 105 | i__19@96@02 < |__flatten_14__14@92@02| && 0 <= i__19@96@02]
(assert (and (< i__19@96@02 (Seq_length __flatten_14__14@92@02)) (<= 0 i__19@96@02)))
; [eval] diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__19] == -1
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 13
(assert (not (>= i__19@96@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24915
;  :arith-add-rows          889
;  :arith-assert-diseq      162
;  :arith-assert-lower      1230
;  :arith-assert-upper      1447
;  :arith-bound-prop        115
;  :arith-conflicts         62
;  :arith-eq-adapter        1104
;  :arith-fixed-eqs         1242
;  :arith-offset-eqs        620
;  :arith-pivots            517
;  :binary-propagations     11
;  :conflicts               384
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8603
;  :mk-clause               2328
;  :num-allocs              7570695
;  :num-checks              447
;  :propagations            2115
;  :quant-instantiations    683
;  :rlimit-count            395184)
; [eval] -1
(push) ; 13
; [then-branch: 106 | __flatten_14__14@92@02[i__19@96@02] == -1 | live]
; [else-branch: 106 | __flatten_14__14@92@02[i__19@96@02] != -1 | live]
(push) ; 14
; [then-branch: 106 | __flatten_14__14@92@02[i__19@96@02] == -1]
(assert (= (Seq_index __flatten_14__14@92@02 i__19@96@02) (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 106 | __flatten_14__14@92@02[i__19@96@02] != -1]
(assert (not (= (Seq_index __flatten_14__14@92@02 i__19@96@02) (- 0 1))))
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__19]
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 15
(assert (not (>= i__19@96@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24916
;  :arith-add-rows          889
;  :arith-assert-diseq      162
;  :arith-assert-lower      1230
;  :arith-assert-upper      1447
;  :arith-bound-prop        115
;  :arith-conflicts         62
;  :arith-eq-adapter        1105
;  :arith-fixed-eqs         1242
;  :arith-offset-eqs        620
;  :arith-pivots            517
;  :binary-propagations     11
;  :conflicts               384
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8610
;  :mk-clause               2336
;  :num-allocs              7570695
;  :num-checks              448
;  :propagations            2115
;  :quant-instantiations    684
;  :rlimit-count            395347)
(push) ; 15
; [then-branch: 107 | 0 <= __flatten_14__14@92@02[i__19@96@02] | live]
; [else-branch: 107 | !(0 <= __flatten_14__14@92@02[i__19@96@02]) | live]
(push) ; 16
; [then-branch: 107 | 0 <= __flatten_14__14@92@02[i__19@96@02]]
(assert (<= 0 (Seq_index __flatten_14__14@92@02 i__19@96@02)))
; [eval] diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 17
(assert (not (>= i__19@96@02 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24916
;  :arith-add-rows          889
;  :arith-assert-diseq      163
;  :arith-assert-lower      1233
;  :arith-assert-upper      1447
;  :arith-bound-prop        115
;  :arith-conflicts         62
;  :arith-eq-adapter        1106
;  :arith-fixed-eqs         1242
;  :arith-offset-eqs        620
;  :arith-pivots            517
;  :binary-propagations     11
;  :conflicts               384
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4764
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4928
;  :del-clause              2185
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8613
;  :mk-clause               2337
;  :num-allocs              7570695
;  :num-checks              449
;  :propagations            2115
;  :quant-instantiations    684
;  :rlimit-count            395421)
; [eval] |diz.Sensor_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 107 | !(0 <= __flatten_14__14@92@02[i__19@96@02])]
(assert (not (<= 0 (Seq_index __flatten_14__14@92@02 i__19@96@02))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 105 | !(i__19@96@02 < |__flatten_14__14@92@02| && 0 <= i__19@96@02)]
(assert (not
  (and (< i__19@96@02 (Seq_length __flatten_14__14@92@02)) (<= 0 i__19@96@02))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((i__19@96@02 Int)) (!
  (implies
    (and (< i__19@96@02 (Seq_length __flatten_14__14@92@02)) (<= 0 i__19@96@02))
    (or
      (= (Seq_index __flatten_14__14@92@02 i__19@96@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_14__14@92@02 i__19@96@02)
          (Seq_length __flatten_17__17@95@02))
        (<= 0 (Seq_index __flatten_14__14@92@02 i__19@96@02)))))
  :pattern ((Seq_index __flatten_14__14@92@02 i__19@96@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      169
;  :arith-assert-lower      1252
;  :arith-assert-upper      1458
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1123
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            519
;  :binary-propagations     11
;  :conflicts               395
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8715
;  :mk-clause               2480
;  :num-allocs              7570695
;  :num-checks              450
;  :propagations            2152
;  :quant-instantiations    692
;  :rlimit-count            396355)
(assert (forall ((i__19@96@02 Int)) (!
  (implies
    (and (< i__19@96@02 (Seq_length __flatten_14__14@92@02)) (<= 0 i__19@96@02))
    (or
      (= (Seq_index __flatten_14__14@92@02 i__19@96@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_14__14@92@02 i__19@96@02)
          (Seq_length __flatten_17__17@95@02))
        (<= 0 (Seq_index __flatten_14__14@92@02 i__19@96@02)))))
  :pattern ((Seq_index __flatten_14__14@92@02 i__19@96@02))
  :qid |prog.l<no position>|)))
(declare-const $k@97@02 $Perm)
(assert ($Perm.isReadVar $k@97@02 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@97@02 $Perm.No) (< $Perm.No $k@97@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      170
;  :arith-assert-lower      1254
;  :arith-assert-upper      1459
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1124
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            519
;  :binary-propagations     11
;  :conflicts               396
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8720
;  :mk-clause               2482
;  :num-allocs              7570695
;  :num-checks              451
;  :propagations            2153
;  :quant-instantiations    692
;  :rlimit-count            396825)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@60@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      170
;  :arith-assert-lower      1254
;  :arith-assert-upper      1459
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1124
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            519
;  :binary-propagations     11
;  :conflicts               396
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8720
;  :mk-clause               2482
;  :num-allocs              7570695
;  :num-checks              452
;  :propagations            2153
;  :quant-instantiations    692
;  :rlimit-count            396836)
(assert (< $k@97@02 $k@60@02))
(assert (<= $Perm.No (- $k@60@02 $k@97@02)))
(assert (<= (- $k@60@02 $k@97@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@60@02 $k@97@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] 0 < diz.Sensor_m.Main_MIN_DIST
(push) ; 10
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      170
;  :arith-assert-lower      1256
;  :arith-assert-upper      1460
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1124
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               397
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8723
;  :mk-clause               2482
;  :num-allocs              7570695
;  :num-checks              453
;  :propagations            2153
;  :quant-instantiations    692
;  :rlimit-count            397050)
(declare-const $k@98@02 $Perm)
(assert ($Perm.isReadVar $k@98@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@98@02 $Perm.No) (< $Perm.No $k@98@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      171
;  :arith-assert-lower      1258
;  :arith-assert-upper      1461
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1125
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               398
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8727
;  :mk-clause               2484
;  :num-allocs              7570695
;  :num-checks              454
;  :propagations            2154
;  :quant-instantiations    692
;  :rlimit-count            397248)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@61@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      171
;  :arith-assert-lower      1258
;  :arith-assert-upper      1461
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1125
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               398
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8727
;  :mk-clause               2484
;  :num-allocs              7570695
;  :num-checks              455
;  :propagations            2154
;  :quant-instantiations    692
;  :rlimit-count            397259)
(assert (< $k@98@02 $k@61@02))
(assert (<= $Perm.No (- $k@61@02 $k@98@02)))
(assert (<= (- $k@61@02 $k@98@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@61@02 $k@98@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] diz.Sensor_m.Main_sensor != null
(push) ; 10
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      171
;  :arith-assert-lower      1260
;  :arith-assert-upper      1462
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1125
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            521
;  :binary-propagations     11
;  :conflicts               399
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8730
;  :mk-clause               2484
;  :num-allocs              7570695
;  :num-checks              456
;  :propagations            2154
;  :quant-instantiations    692
;  :rlimit-count            397473)
(push) ; 10
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      171
;  :arith-assert-lower      1260
;  :arith-assert-upper      1462
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1125
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            521
;  :binary-propagations     11
;  :conflicts               400
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8730
;  :mk-clause               2484
;  :num-allocs              7570695
;  :num-checks              457
;  :propagations            2154
;  :quant-instantiations    692
;  :rlimit-count            397521)
(push) ; 10
(assert (not (=
  diz@2@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      171
;  :arith-assert-lower      1260
;  :arith-assert-upper      1462
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1125
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            521
;  :binary-propagations     11
;  :conflicts               400
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8730
;  :mk-clause               2484
;  :num-allocs              7570695
;  :num-checks              458
;  :propagations            2154
;  :quant-instantiations    692
;  :rlimit-count            397532)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      171
;  :arith-assert-lower      1260
;  :arith-assert-upper      1462
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1125
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            521
;  :binary-propagations     11
;  :conflicts               400
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8730
;  :mk-clause               2484
;  :num-allocs              7570695
;  :num-checks              459
;  :propagations            2154
;  :quant-instantiations    692
;  :rlimit-count            397545)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24980
;  :arith-add-rows          889
;  :arith-assert-diseq      171
;  :arith-assert-lower      1260
;  :arith-assert-upper      1462
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1125
;  :arith-fixed-eqs         1246
;  :arith-offset-eqs        620
;  :arith-pivots            521
;  :binary-propagations     11
;  :conflicts               401
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 4767
;  :datatype-occurs-check   2583
;  :datatype-splits         3547
;  :decisions               4939
;  :del-clause              2337
;  :final-checks            423
;  :interface-eqs           58
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8730
;  :mk-clause               2484
;  :num-allocs              7570695
;  :num-checks              460
;  :propagations            2154
;  :quant-instantiations    692
;  :rlimit-count            397593)
(push) ; 10
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25175
;  :arith-add-rows          892
;  :arith-assert-diseq      172
;  :arith-assert-lower      1271
;  :arith-assert-upper      1474
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1135
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               401
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8792
;  :mk-clause               2502
;  :num-allocs              7570695
;  :num-checks              461
;  :propagations            2174
;  :quant-instantiations    697
;  :rlimit-count            399256
;  :time                    0.00)
(declare-const $k@99@02 $Perm)
(assert ($Perm.isReadVar $k@99@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@99@02 $Perm.No) (< $Perm.No $k@99@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25175
;  :arith-add-rows          892
;  :arith-assert-diseq      173
;  :arith-assert-lower      1273
;  :arith-assert-upper      1475
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1136
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               402
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8796
;  :mk-clause               2504
;  :num-allocs              7570695
;  :num-checks              462
;  :propagations            2175
;  :quant-instantiations    697
;  :rlimit-count            399455)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@62@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25175
;  :arith-add-rows          892
;  :arith-assert-diseq      173
;  :arith-assert-lower      1273
;  :arith-assert-upper      1475
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1136
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               402
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8796
;  :mk-clause               2504
;  :num-allocs              7570695
;  :num-checks              463
;  :propagations            2175
;  :quant-instantiations    697
;  :rlimit-count            399466)
(assert (< $k@99@02 $k@62@02))
(assert (<= $Perm.No (- $k@62@02 $k@99@02)))
(assert (<= (- $k@62@02 $k@99@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@62@02 $k@99@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] diz.Sensor_m.Main_controller != null
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25175
;  :arith-add-rows          892
;  :arith-assert-diseq      173
;  :arith-assert-lower      1275
;  :arith-assert-upper      1476
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1136
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               403
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8799
;  :mk-clause               2504
;  :num-allocs              7570695
;  :num-checks              464
;  :propagations            2175
;  :quant-instantiations    697
;  :rlimit-count            399674)
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25175
;  :arith-add-rows          892
;  :arith-assert-diseq      173
;  :arith-assert-lower      1275
;  :arith-assert-upper      1476
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1136
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8799
;  :mk-clause               2504
;  :num-allocs              7570695
;  :num-checks              465
;  :propagations            2175
;  :quant-instantiations    697
;  :rlimit-count            399722)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25175
;  :arith-add-rows          892
;  :arith-assert-diseq      173
;  :arith-assert-lower      1275
;  :arith-assert-upper      1476
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1136
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8799
;  :mk-clause               2504
;  :num-allocs              7570695
;  :num-checks              466
;  :propagations            2175
;  :quant-instantiations    697
;  :rlimit-count            399735)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25175
;  :arith-add-rows          892
;  :arith-assert-diseq      173
;  :arith-assert-lower      1275
;  :arith-assert-upper      1476
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1136
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               405
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8799
;  :mk-clause               2504
;  :num-allocs              7570695
;  :num-checks              467
;  :propagations            2175
;  :quant-instantiations    697
;  :rlimit-count            399783)
; [eval] diz.Sensor_m.Main_process_state[0] == -1 || diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0] == -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (< 0 (Seq_length __flatten_14__14@92@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25175
;  :arith-add-rows          892
;  :arith-assert-diseq      173
;  :arith-assert-lower      1275
;  :arith-assert-upper      1476
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1136
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               405
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8799
;  :mk-clause               2504
;  :num-allocs              7570695
;  :num-checks              468
;  :propagations            2175
;  :quant-instantiations    697
;  :rlimit-count            399798)
; [eval] -1
(push) ; 10
; [then-branch: 108 | __flatten_14__14@92@02[0] == -1 | live]
; [else-branch: 108 | __flatten_14__14@92@02[0] != -1 | live]
(push) ; 11
; [then-branch: 108 | __flatten_14__14@92@02[0] == -1]
(assert (= (Seq_index __flatten_14__14@92@02 0) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 108 | __flatten_14__14@92@02[0] != -1]
(assert (not (= (Seq_index __flatten_14__14@92@02 0) (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 12
(assert (not (< 0 (Seq_length __flatten_14__14@92@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25179
;  :arith-add-rows          892
;  :arith-assert-diseq      174
;  :arith-assert-lower      1278
;  :arith-assert-upper      1478
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1138
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               405
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2355
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8808
;  :mk-clause               2508
;  :num-allocs              7570695
;  :num-checks              469
;  :propagations            2177
;  :quant-instantiations    699
;  :rlimit-count            399978)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(assert (not (or
  (= (Seq_index __flatten_14__14@92@02 0) (- 0 1))
  (= (Seq_index __flatten_14__14@92@02 0) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25181
;  :arith-add-rows          892
;  :arith-assert-diseq      174
;  :arith-assert-lower      1278
;  :arith-assert-upper      1478
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1138
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               406
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2363
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8814
;  :mk-clause               2512
;  :num-allocs              7570695
;  :num-checks              470
;  :propagations            2179
;  :quant-instantiations    701
;  :rlimit-count            400165)
(assert (or
  (= (Seq_index __flatten_14__14@92@02 0) (- 0 1))
  (= (Seq_index __flatten_14__14@92@02 0) 0)))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 || diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 10
(assert (not (< 1 (Seq_length __flatten_14__14@92@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25181
;  :arith-add-rows          892
;  :arith-assert-diseq      174
;  :arith-assert-lower      1278
;  :arith-assert-upper      1478
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1138
;  :arith-fixed-eqs         1259
;  :arith-offset-eqs        628
;  :arith-pivots            527
;  :binary-propagations     11
;  :conflicts               406
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2363
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8816
;  :mk-clause               2513
;  :num-allocs              7570695
;  :num-checks              471
;  :propagations            2179
;  :quant-instantiations    701
;  :rlimit-count            400251)
; [eval] -1
(push) ; 10
; [then-branch: 109 | __flatten_14__14@92@02[1] == -1 | live]
; [else-branch: 109 | __flatten_14__14@92@02[1] != -1 | live]
(push) ; 11
; [then-branch: 109 | __flatten_14__14@92@02[1] == -1]
(assert (= (Seq_index __flatten_14__14@92@02 1) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 109 | __flatten_14__14@92@02[1] != -1]
(assert (not (= (Seq_index __flatten_14__14@92@02 1) (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 12
(assert (not (< 1 (Seq_length __flatten_14__14@92@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25190
;  :arith-add-rows          892
;  :arith-assert-diseq      178
;  :arith-assert-lower      1288
;  :arith-assert-upper      1482
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1143
;  :arith-fixed-eqs         1260
;  :arith-offset-eqs        628
;  :arith-pivots            528
;  :binary-propagations     11
;  :conflicts               406
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2363
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8837
;  :mk-clause               2525
;  :num-allocs              7570695
;  :num-checks              472
;  :propagations            2186
;  :quant-instantiations    704
;  :rlimit-count            400545)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(assert (not (or
  (= (Seq_index __flatten_14__14@92@02 1) (- 0 1))
  (= (Seq_index __flatten_14__14@92@02 1) 2))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25194
;  :arith-add-rows          892
;  :arith-assert-diseq      180
;  :arith-assert-lower      1290
;  :arith-assert-upper      1483
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1145
;  :arith-fixed-eqs         1260
;  :arith-offset-eqs        628
;  :arith-pivots            529
;  :binary-propagations     11
;  :conflicts               407
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2385
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8852
;  :mk-clause               2535
;  :num-allocs              7570695
;  :num-checks              473
;  :propagations            2189
;  :quant-instantiations    707
;  :rlimit-count            400776)
(assert (or
  (= (Seq_index __flatten_14__14@92@02 1) (- 0 1))
  (= (Seq_index __flatten_14__14@92@02 1) 2)))
; [eval] diz.Sensor_m.Main_event_state[0] != -1
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 10
(assert (not (< 0 (Seq_length __flatten_17__17@95@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25194
;  :arith-add-rows          892
;  :arith-assert-diseq      180
;  :arith-assert-lower      1290
;  :arith-assert-upper      1483
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1145
;  :arith-fixed-eqs         1260
;  :arith-offset-eqs        628
;  :arith-pivots            529
;  :binary-propagations     11
;  :conflicts               407
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2385
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8854
;  :mk-clause               2536
;  :num-allocs              7570695
;  :num-checks              474
;  :propagations            2189
;  :quant-instantiations    707
;  :rlimit-count            400862)
; [eval] -1
(push) ; 10
(assert (not (not (= (Seq_index __flatten_17__17@95@02 0) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25197
;  :arith-add-rows          892
;  :arith-assert-diseq      180
;  :arith-assert-lower      1290
;  :arith-assert-upper      1483
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1145
;  :arith-fixed-eqs         1260
;  :arith-offset-eqs        628
;  :arith-pivots            529
;  :binary-propagations     11
;  :conflicts               408
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2385
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8856
;  :mk-clause               2536
;  :num-allocs              7570695
;  :num-checks              475
;  :propagations            2189
;  :quant-instantiations    708
;  :rlimit-count            400982)
(assert (not (= (Seq_index __flatten_17__17@95@02 0) (- 0 1))))
; [eval] diz.Sensor_m.Main_event_state[0] != 0
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 10
(assert (not (< 0 (Seq_length __flatten_17__17@95@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25200
;  :arith-add-rows          892
;  :arith-assert-diseq      180
;  :arith-assert-lower      1290
;  :arith-assert-upper      1483
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1145
;  :arith-fixed-eqs         1260
;  :arith-offset-eqs        628
;  :arith-pivots            529
;  :binary-propagations     11
;  :conflicts               408
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2385
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8858
;  :mk-clause               2536
;  :num-allocs              7570695
;  :num-checks              476
;  :propagations            2189
;  :quant-instantiations    709
;  :rlimit-count            401083)
(push) ; 10
(assert (not (not (= (Seq_index __flatten_17__17@95@02 0) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25201
;  :arith-add-rows          892
;  :arith-assert-diseq      180
;  :arith-assert-lower      1290
;  :arith-assert-upper      1483
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1145
;  :arith-fixed-eqs         1260
;  :arith-offset-eqs        628
;  :arith-pivots            529
;  :binary-propagations     11
;  :conflicts               409
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2385
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8859
;  :mk-clause               2536
;  :num-allocs              7570695
;  :num-checks              477
;  :propagations            2189
;  :quant-instantiations    709
;  :rlimit-count            401141)
(assert (not (= (Seq_index __flatten_17__17@95@02 0) 0)))
; [eval] diz.Sensor_m.Main_event_state[2] <= -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 10
(assert (not (< 2 (Seq_length __flatten_17__17@95@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25202
;  :arith-add-rows          892
;  :arith-assert-diseq      180
;  :arith-assert-lower      1290
;  :arith-assert-upper      1483
;  :arith-bound-prop        119
;  :arith-conflicts         63
;  :arith-eq-adapter        1145
;  :arith-fixed-eqs         1260
;  :arith-offset-eqs        628
;  :arith-pivots            529
;  :binary-propagations     11
;  :conflicts               409
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2385
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8860
;  :mk-clause               2536
;  :num-allocs              7570695
;  :num-checks              478
;  :propagations            2189
;  :quant-instantiations    709
;  :rlimit-count            401222)
; [eval] -1
(push) ; 10
(assert (not (<= (Seq_index __flatten_17__17@95@02 2) (- 0 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25207
;  :arith-add-rows          892
;  :arith-assert-diseq      181
;  :arith-assert-lower      1293
;  :arith-assert-upper      1485
;  :arith-bound-prop        119
;  :arith-conflicts         64
;  :arith-eq-adapter        1148
;  :arith-fixed-eqs         1261
;  :arith-offset-eqs        628
;  :arith-pivots            531
;  :binary-propagations     11
;  :conflicts               410
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2392
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8873
;  :mk-clause               2543
;  :num-allocs              7570695
;  :num-checks              479
;  :propagations            2192
;  :quant-instantiations    711
;  :rlimit-count            401434)
(assert (<= (Seq_index __flatten_17__17@95@02 2) (- 0 1)))
; [eval] !diz.Sensor_m.Main_controller.Controller_init || (diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1)
; [eval] !diz.Sensor_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25214
;  :arith-add-rows          892
;  :arith-assert-diseq      183
;  :arith-assert-lower      1295
;  :arith-assert-upper      1488
;  :arith-bound-prop        119
;  :arith-conflicts         64
;  :arith-eq-adapter        1151
;  :arith-fixed-eqs         1262
;  :arith-offset-eqs        628
;  :arith-pivots            532
;  :binary-propagations     11
;  :conflicts               411
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2392
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8886
;  :mk-clause               2552
;  :num-allocs              7570695
;  :num-checks              480
;  :propagations            2195
;  :quant-instantiations    713
;  :rlimit-count            401597)
(push) ; 10
; [then-branch: 110 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
; [else-branch: 110 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
(push) ; 11
; [then-branch: 110 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 110 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 12
(assert (not (< 1 (Seq_length __flatten_14__14@92@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25219
;  :arith-add-rows          892
;  :arith-assert-diseq      183
;  :arith-assert-lower      1297
;  :arith-assert-upper      1490
;  :arith-bound-prop        119
;  :arith-conflicts         64
;  :arith-eq-adapter        1152
;  :arith-fixed-eqs         1262
;  :arith-offset-eqs        628
;  :arith-pivots            532
;  :binary-propagations     11
;  :conflicts               411
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2392
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8892
;  :mk-clause               2555
;  :num-allocs              7570695
;  :num-checks              481
;  :propagations            2199
;  :quant-instantiations    715
;  :rlimit-count            401949)
; [eval] -1
(push) ; 12
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (Seq_index __flatten_14__14@92@02 1) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25223
;  :arith-add-rows          892
;  :arith-assert-diseq      183
;  :arith-assert-lower      1297
;  :arith-assert-upper      1490
;  :arith-bound-prop        119
;  :arith-conflicts         64
;  :arith-eq-adapter        1152
;  :arith-fixed-eqs         1262
;  :arith-offset-eqs        628
;  :arith-pivots            532
;  :binary-propagations     11
;  :conflicts               412
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2394
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8895
;  :mk-clause               2557
;  :num-allocs              7570695
;  :num-checks              482
;  :propagations            2200
;  :quant-instantiations    716
;  :rlimit-count            402068)
; [then-branch: 111 | __flatten_14__14@92@02[1] == -1 | dead]
; [else-branch: 111 | __flatten_14__14@92@02[1] != -1 | live]
(push) ; 13
; [else-branch: 111 | __flatten_14__14@92@02[1] != -1]
(assert (not (= (Seq_index __flatten_14__14@92@02 1) (- 0 1))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (< 2 (Seq_length __flatten_17__17@95@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25223
;  :arith-add-rows          892
;  :arith-assert-diseq      183
;  :arith-assert-lower      1297
;  :arith-assert-upper      1490
;  :arith-bound-prop        119
;  :arith-conflicts         64
;  :arith-eq-adapter        1152
;  :arith-fixed-eqs         1262
;  :arith-offset-eqs        628
;  :arith-pivots            532
;  :binary-propagations     11
;  :conflicts               412
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 4800
;  :datatype-occurs-check   2594
;  :datatype-splits         3577
;  :decisions               4976
;  :del-clause              2397
;  :final-checks            427
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8895
;  :mk-clause               2557
;  :num-allocs              7570695
;  :num-checks              483
;  :propagations            2200
;  :quant-instantiations    716
;  :rlimit-count            402101)
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25427
;  :arith-add-rows          895
;  :arith-assert-diseq      183
;  :arith-assert-lower      1308
;  :arith-assert-upper      1504
;  :arith-bound-prop        119
;  :arith-conflicts         65
;  :arith-eq-adapter        1161
;  :arith-fixed-eqs         1274
;  :arith-offset-eqs        636
;  :arith-pivots            536
;  :binary-propagations     11
;  :conflicts               414
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 4833
;  :datatype-occurs-check   2605
;  :datatype-splits         3607
;  :decisions               5016
;  :del-clause              2415
;  :final-checks            431
;  :interface-eqs           60
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8958
;  :mk-clause               2575
;  :num-allocs              7570695
;  :num-checks              484
;  :propagations            2223
;  :quant-instantiations    724
;  :rlimit-count            403962
;  :time                    0.00)
(push) ; 11
(assert (not (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25427
;  :arith-add-rows          895
;  :arith-assert-diseq      183
;  :arith-assert-lower      1308
;  :arith-assert-upper      1505
;  :arith-bound-prop        119
;  :arith-conflicts         66
;  :arith-eq-adapter        1161
;  :arith-fixed-eqs         1274
;  :arith-offset-eqs        636
;  :arith-pivots            536
;  :binary-propagations     11
;  :conflicts               415
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 4833
;  :datatype-occurs-check   2605
;  :datatype-splits         3607
;  :decisions               5016
;  :del-clause              2415
;  :final-checks            431
;  :interface-eqs           60
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8959
;  :mk-clause               2575
;  :num-allocs              7570695
;  :num-checks              485
;  :propagations            2223
;  :quant-instantiations    724
;  :rlimit-count            404040)
; [then-branch: 112 | -1 <= __flatten_17__17@95@02[2] | live]
; [else-branch: 112 | !(-1 <= __flatten_17__17@95@02[2]) | dead]
(push) ; 11
; [then-branch: 112 | -1 <= __flatten_17__17@95@02[2]]
(assert (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2)))
; [eval] diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 12
(assert (not (< 0 (Seq_length __flatten_14__14@92@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25427
;  :arith-add-rows          895
;  :arith-assert-diseq      183
;  :arith-assert-lower      1309
;  :arith-assert-upper      1505
;  :arith-bound-prop        119
;  :arith-conflicts         66
;  :arith-eq-adapter        1161
;  :arith-fixed-eqs         1274
;  :arith-offset-eqs        636
;  :arith-pivots            536
;  :binary-propagations     11
;  :conflicts               415
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 4833
;  :datatype-occurs-check   2605
;  :datatype-splits         3607
;  :decisions               5016
;  :del-clause              2415
;  :final-checks            431
;  :interface-eqs           60
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8960
;  :mk-clause               2575
;  :num-allocs              7570695
;  :num-checks              486
;  :propagations            2223
;  :quant-instantiations    724
;  :rlimit-count            404113)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (implies
  (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2))
  (not (= (Seq_index __flatten_14__14@92@02 0) (- 0 1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25431
;  :arith-add-rows          895
;  :arith-assert-diseq      183
;  :arith-assert-lower      1310
;  :arith-assert-upper      1505
;  :arith-bound-prop        119
;  :arith-conflicts         66
;  :arith-eq-adapter        1161
;  :arith-fixed-eqs         1274
;  :arith-offset-eqs        636
;  :arith-pivots            536
;  :binary-propagations     11
;  :conflicts               416
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 4833
;  :datatype-occurs-check   2605
;  :datatype-splits         3607
;  :decisions               5016
;  :del-clause              2415
;  :final-checks            431
;  :interface-eqs           60
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8962
;  :mk-clause               2575
;  :num-allocs              7570695
;  :num-checks              487
;  :propagations            2223
;  :quant-instantiations    725
;  :rlimit-count            404266)
(assert (implies
  (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2))
  (not (= (Seq_index __flatten_14__14@92@02 0) (- 0 1)))))
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 10
(assert (not (< 2 (Seq_length __flatten_17__17@95@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25431
;  :arith-add-rows          895
;  :arith-assert-diseq      183
;  :arith-assert-lower      1310
;  :arith-assert-upper      1505
;  :arith-bound-prop        119
;  :arith-conflicts         66
;  :arith-eq-adapter        1161
;  :arith-fixed-eqs         1274
;  :arith-offset-eqs        636
;  :arith-pivots            536
;  :binary-propagations     11
;  :conflicts               416
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 4833
;  :datatype-occurs-check   2605
;  :datatype-splits         3607
;  :decisions               5016
;  :del-clause              2415
;  :final-checks            431
;  :interface-eqs           60
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             8963
;  :mk-clause               2576
;  :num-allocs              7570695
;  :num-checks              488
;  :propagations            2223
;  :quant-instantiations    725
;  :rlimit-count            404404)
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25631
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1321
;  :arith-assert-upper      1519
;  :arith-bound-prop        119
;  :arith-conflicts         67
;  :arith-eq-adapter        1170
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               417
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2433
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9024
;  :mk-clause               2594
;  :num-allocs              7570695
;  :num-checks              489
;  :propagations            2247
;  :quant-instantiations    732
;  :rlimit-count            406232
;  :time                    0.00)
(push) ; 11
(assert (not (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25631
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1321
;  :arith-assert-upper      1520
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1170
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               418
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2433
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9024
;  :mk-clause               2594
;  :num-allocs              7570695
;  :num-checks              490
;  :propagations            2247
;  :quant-instantiations    732
;  :rlimit-count            406306)
; [then-branch: 113 | -1 <= __flatten_17__17@95@02[2] | live]
; [else-branch: 113 | !(-1 <= __flatten_17__17@95@02[2]) | dead]
(push) ; 11
; [then-branch: 113 | -1 <= __flatten_17__17@95@02[2]]
(assert (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2)))
; [eval] diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
(push) ; 12
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25635
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1323
;  :arith-assert-upper      1522
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1171
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               419
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2433
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9029
;  :mk-clause               2597
;  :num-allocs              7570695
;  :num-checks              491
;  :propagations            2251
;  :quant-instantiations    734
;  :rlimit-count            406495)
(push) ; 12
(assert (not (=
  diz@2@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25635
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1323
;  :arith-assert-upper      1522
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1171
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               419
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2433
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9029
;  :mk-clause               2597
;  :num-allocs              7570695
;  :num-checks              492
;  :propagations            2251
;  :quant-instantiations    734
;  :rlimit-count            406506)
(push) ; 12
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25635
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1323
;  :arith-assert-upper      1522
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1171
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               420
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2433
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9029
;  :mk-clause               2597
;  :num-allocs              7570695
;  :num-checks              493
;  :propagations            2251
;  :quant-instantiations    734
;  :rlimit-count            406554)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2))
  (<
    sys__result@84@02
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25635
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1323
;  :arith-assert-upper      1522
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1171
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               420
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2436
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9029
;  :mk-clause               2597
;  :num-allocs              7570695
;  :num-checks              494
;  :propagations            2251
;  :quant-instantiations    734
;  :rlimit-count            406619)
(assert (implies
  (<= (- 0 1) (Seq_index __flatten_17__17@95@02 2))
  (<
    sys__result@84@02
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25635
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1323
;  :arith-assert-upper      1522
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1171
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               421
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2436
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9029
;  :mk-clause               2597
;  :num-allocs              7570695
;  :num-checks              495
;  :propagations            2251
;  :quant-instantiations    734
;  :rlimit-count            406729)
(push) ; 10
; [then-branch: 114 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
; [else-branch: 114 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
(push) ; 11
; [then-branch: 114 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 12
(assert (not (< 1 (Seq_length __flatten_14__14@92@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25640
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1325
;  :arith-assert-upper      1524
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               421
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2436
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9035
;  :mk-clause               2600
;  :num-allocs              7570695
;  :num-checks              496
;  :propagations            2255
;  :quant-instantiations    736
;  :rlimit-count            407034)
; [eval] -1
(pop) ; 11
(push) ; 11
; [else-branch: 114 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (and
    (= (Seq_index __flatten_14__14@92@02 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25647
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1325
;  :arith-assert-upper      1524
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               422
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2445
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9042
;  :mk-clause               2606
;  :num-allocs              7570695
;  :num-checks              497
;  :propagations            2260
;  :quant-instantiations    739
;  :rlimit-count            407462)
; [then-branch: 115 | __flatten_14__14@92@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | dead]
; [else-branch: 115 | !(__flatten_14__14@92@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
(push) ; 11
; [else-branch: 115 | !(__flatten_14__14@92@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  (and
    (= (Seq_index __flatten_14__14@92@02 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] diz.Sensor_m.Main_sensor == diz
(push) ; 10
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25647
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1325
;  :arith-assert-upper      1524
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               423
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2445
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9042
;  :mk-clause               2606
;  :num-allocs              7570695
;  :num-checks              498
;  :propagations            2260
;  :quant-instantiations    739
;  :rlimit-count            407568)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25647
;  :arith-add-rows          898
;  :arith-assert-diseq      183
;  :arith-assert-lower      1325
;  :arith-assert-upper      1524
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            540
;  :binary-propagations     11
;  :conflicts               423
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2445
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9042
;  :mk-clause               2606
;  :num-allocs              7570695
;  :num-checks              499
;  :propagations            2260
;  :quant-instantiations    739
;  :rlimit-count            407581)
(pop) ; 9
(push) ; 9
; [else-branch: 103 | !(sys__result@84@02 < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))]
(assert (not
  (<
    sys__result@84@02
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(pop) ; 9
; [eval] !(diz.Sensor_dist < __flatten_9__9.Main_MIN_DIST)
; [eval] diz.Sensor_dist < __flatten_9__9.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_9__9@86@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25647
;  :arith-add-rows          903
;  :arith-assert-diseq      183
;  :arith-assert-lower      1325
;  :arith-assert-upper      1524
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            550
;  :binary-propagations     11
;  :conflicts               423
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2518
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9042
;  :mk-clause               2606
;  :num-allocs              7570695
;  :num-checks              500
;  :propagations            2260
;  :quant-instantiations    739
;  :rlimit-count            407731)
(push) ; 9
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25647
;  :arith-add-rows          903
;  :arith-assert-diseq      183
;  :arith-assert-lower      1325
;  :arith-assert-upper      1524
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         1286
;  :arith-offset-eqs        644
;  :arith-pivots            550
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 4866
;  :datatype-occurs-check   2616
;  :datatype-splits         3637
;  :decisions               5055
;  :del-clause              2518
;  :final-checks            435
;  :interface-eqs           61
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9042
;  :mk-clause               2606
;  :num-allocs              7570695
;  :num-checks              501
;  :propagations            2260
;  :quant-instantiations    739
;  :rlimit-count            407779)
(push) ; 9
(assert (not (<
  sys__result@84@02
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25833
;  :arith-add-rows          907
;  :arith-assert-diseq      183
;  :arith-assert-lower      1332
;  :arith-assert-upper      1535
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1179
;  :arith-fixed-eqs         1298
;  :arith-offset-eqs        652
;  :arith-pivots            556
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    826
;  :datatype-constructor-ax 4899
;  :datatype-occurs-check   2627
;  :datatype-splits         3667
;  :decisions               5092
;  :del-clause              2529
;  :final-checks            439
;  :interface-eqs           62
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9093
;  :mk-clause               2617
;  :num-allocs              7570695
;  :num-checks              502
;  :propagations            2277
;  :quant-instantiations    743
;  :rlimit-count            409481
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (<
    sys__result@84@02
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26019
;  :arith-add-rows          911
;  :arith-assert-diseq      183
;  :arith-assert-lower      1340
;  :arith-assert-upper      1545
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1186
;  :arith-fixed-eqs         1310
;  :arith-offset-eqs        660
;  :arith-pivots            562
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9144
;  :mk-clause               2628
;  :num-allocs              7570695
;  :num-checks              503
;  :propagations            2294
;  :quant-instantiations    747
;  :rlimit-count            411201)
; [then-branch: 116 | !(sys__result@84@02 < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))) | live]
; [else-branch: 116 | sys__result@84@02 < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))) | live]
(push) ; 9
; [then-branch: 116 | !(sys__result@84@02 < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))]
(assert (not
  (<
    sys__result@84@02
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))
; [exec]
; __flatten_13__13 := diz.Sensor_m
(declare-const __flatten_13__13@100@02 $Ref)
(assert (= __flatten_13__13@100@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_15__15 := diz.Sensor_m
(declare-const __flatten_15__15@101@02 $Ref)
(assert (= __flatten_15__15@101@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_14__14 := __flatten_15__15.Main_process_state[0 := 0]
; [eval] __flatten_15__15.Main_process_state[0 := 0]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_15__15@101@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26021
;  :arith-add-rows          912
;  :arith-assert-diseq      183
;  :arith-assert-lower      1340
;  :arith-assert-upper      1546
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1186
;  :arith-fixed-eqs         1310
;  :arith-offset-eqs        660
;  :arith-pivots            563
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9147
;  :mk-clause               2628
;  :num-allocs              7570695
;  :num-checks              504
;  :propagations            2294
;  :quant-instantiations    747
;  :rlimit-count            411461)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26021
;  :arith-add-rows          912
;  :arith-assert-diseq      183
;  :arith-assert-lower      1340
;  :arith-assert-upper      1546
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1186
;  :arith-fixed-eqs         1310
;  :arith-offset-eqs        660
;  :arith-pivots            563
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9147
;  :mk-clause               2628
;  :num-allocs              7570695
;  :num-checks              505
;  :propagations            2294
;  :quant-instantiations    747
;  :rlimit-count            411476)
(declare-const __flatten_14__14@102@02 Seq<Int>)
(assert (Seq_equal
  __flatten_14__14@102@02
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
    0
    0)))
; [exec]
; __flatten_13__13.Main_process_state := __flatten_14__14
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_13__13@100@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26031
;  :arith-add-rows          915
;  :arith-assert-diseq      184
;  :arith-assert-lower      1344
;  :arith-assert-upper      1548
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1189
;  :arith-fixed-eqs         1312
;  :arith-offset-eqs        660
;  :arith-pivots            565
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9170
;  :mk-clause               2647
;  :num-allocs              7570695
;  :num-checks              506
;  :propagations            2303
;  :quant-instantiations    752
;  :rlimit-count            411930)
(assert (not (= __flatten_13__13@100@02 $Ref.null)))
; [exec]
; __flatten_16__16 := diz.Sensor_m
(declare-const __flatten_16__16@103@02 $Ref)
(assert (= __flatten_16__16@103@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_18__18 := diz.Sensor_m
(declare-const __flatten_18__18@104@02 $Ref)
(assert (= __flatten_18__18@104@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02))))
; [exec]
; __flatten_17__17 := __flatten_18__18.Main_event_state[0 := 2]
; [eval] __flatten_18__18.Main_event_state[0 := 2]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_18__18@104@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26034
;  :arith-add-rows          915
;  :arith-assert-diseq      184
;  :arith-assert-lower      1344
;  :arith-assert-upper      1548
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1189
;  :arith-fixed-eqs         1312
;  :arith-offset-eqs        660
;  :arith-pivots            565
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9173
;  :mk-clause               2647
;  :num-allocs              7570695
;  :num-checks              507
;  :propagations            2303
;  :quant-instantiations    752
;  :rlimit-count            412057)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26034
;  :arith-add-rows          915
;  :arith-assert-diseq      184
;  :arith-assert-lower      1344
;  :arith-assert-upper      1548
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1189
;  :arith-fixed-eqs         1312
;  :arith-offset-eqs        660
;  :arith-pivots            565
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9173
;  :mk-clause               2647
;  :num-allocs              7570695
;  :num-checks              508
;  :propagations            2303
;  :quant-instantiations    752
;  :rlimit-count            412072)
(declare-const __flatten_17__17@105@02 Seq<Int>)
(assert (Seq_equal
  __flatten_17__17@105@02
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
    0
    2)))
; [exec]
; __flatten_16__16.Main_event_state := __flatten_17__17
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) __flatten_16__16@103@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26045
;  :arith-add-rows          918
;  :arith-assert-diseq      185
;  :arith-assert-lower      1348
;  :arith-assert-upper      1550
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1192
;  :arith-fixed-eqs         1314
;  :arith-offset-eqs        660
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9197
;  :mk-clause               2666
;  :num-allocs              7570695
;  :num-checks              509
;  :propagations            2312
;  :quant-instantiations    757
;  :rlimit-count            412577)
(assert (not (= __flatten_16__16@103@02 $Ref.null)))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26045
;  :arith-add-rows          918
;  :arith-assert-diseq      185
;  :arith-assert-lower      1348
;  :arith-assert-upper      1550
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1192
;  :arith-fixed-eqs         1314
;  :arith-offset-eqs        660
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               424
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9197
;  :mk-clause               2666
;  :num-allocs              7570695
;  :num-checks              510
;  :propagations            2312
;  :quant-instantiations    757
;  :rlimit-count            412610)
; [eval] diz.Sensor_m != null
; [eval] |diz.Sensor_m.Main_process_state| == 2
; [eval] |diz.Sensor_m.Main_process_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_14__14@102@02) 2)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26045
;  :arith-add-rows          918
;  :arith-assert-diseq      185
;  :arith-assert-lower      1348
;  :arith-assert-upper      1550
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1193
;  :arith-fixed-eqs         1314
;  :arith-offset-eqs        660
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               425
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9200
;  :mk-clause               2666
;  :num-allocs              7570695
;  :num-checks              511
;  :propagations            2312
;  :quant-instantiations    757
;  :rlimit-count            412684)
(assert (= (Seq_length __flatten_14__14@102@02) 2))
; [eval] |diz.Sensor_m.Main_event_state| == 3
; [eval] |diz.Sensor_m.Main_event_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_17__17@105@02) 3)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26046
;  :arith-add-rows          918
;  :arith-assert-diseq      185
;  :arith-assert-lower      1349
;  :arith-assert-upper      1551
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1195
;  :arith-fixed-eqs         1314
;  :arith-offset-eqs        660
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9206
;  :mk-clause               2666
;  :num-allocs              7570695
;  :num-checks              512
;  :propagations            2312
;  :quant-instantiations    757
;  :rlimit-count            412809)
(assert (= (Seq_length __flatten_17__17@105@02) 3))
; [eval] (forall i__19: Int :: { diz.Sensor_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|)
(declare-const i__19@106@02 Int)
(push) ; 10
; [eval] 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state| ==> diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= i__19 && i__19 < |diz.Sensor_m.Main_process_state|
; [eval] 0 <= i__19
(push) ; 11
; [then-branch: 117 | 0 <= i__19@106@02 | live]
; [else-branch: 117 | !(0 <= i__19@106@02) | live]
(push) ; 12
; [then-branch: 117 | 0 <= i__19@106@02]
(assert (<= 0 i__19@106@02))
; [eval] i__19 < |diz.Sensor_m.Main_process_state|
; [eval] |diz.Sensor_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 117 | !(0 <= i__19@106@02)]
(assert (not (<= 0 i__19@106@02)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 118 | i__19@106@02 < |__flatten_14__14@102@02| && 0 <= i__19@106@02 | live]
; [else-branch: 118 | !(i__19@106@02 < |__flatten_14__14@102@02| && 0 <= i__19@106@02) | live]
(push) ; 12
; [then-branch: 118 | i__19@106@02 < |__flatten_14__14@102@02| && 0 <= i__19@106@02]
(assert (and (< i__19@106@02 (Seq_length __flatten_14__14@102@02)) (<= 0 i__19@106@02)))
; [eval] diz.Sensor_m.Main_process_state[i__19] == -1 || 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__19] == -1
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 13
(assert (not (>= i__19@106@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26047
;  :arith-add-rows          918
;  :arith-assert-diseq      185
;  :arith-assert-lower      1351
;  :arith-assert-upper      1553
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1196
;  :arith-fixed-eqs         1314
;  :arith-offset-eqs        660
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9211
;  :mk-clause               2666
;  :num-allocs              7570695
;  :num-checks              513
;  :propagations            2312
;  :quant-instantiations    757
;  :rlimit-count            412996)
; [eval] -1
(push) ; 13
; [then-branch: 119 | __flatten_14__14@102@02[i__19@106@02] == -1 | live]
; [else-branch: 119 | __flatten_14__14@102@02[i__19@106@02] != -1 | live]
(push) ; 14
; [then-branch: 119 | __flatten_14__14@102@02[i__19@106@02] == -1]
(assert (= (Seq_index __flatten_14__14@102@02 i__19@106@02) (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 119 | __flatten_14__14@102@02[i__19@106@02] != -1]
(assert (not (= (Seq_index __flatten_14__14@102@02 i__19@106@02) (- 0 1))))
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__19] && diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] 0 <= diz.Sensor_m.Main_process_state[i__19]
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 15
(assert (not (>= i__19@106@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26048
;  :arith-add-rows          918
;  :arith-assert-diseq      185
;  :arith-assert-lower      1351
;  :arith-assert-upper      1553
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1197
;  :arith-fixed-eqs         1314
;  :arith-offset-eqs        660
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9218
;  :mk-clause               2674
;  :num-allocs              7570695
;  :num-checks              514
;  :propagations            2312
;  :quant-instantiations    758
;  :rlimit-count            413157)
(push) ; 15
; [then-branch: 120 | 0 <= __flatten_14__14@102@02[i__19@106@02] | live]
; [else-branch: 120 | !(0 <= __flatten_14__14@102@02[i__19@106@02]) | live]
(push) ; 16
; [then-branch: 120 | 0 <= __flatten_14__14@102@02[i__19@106@02]]
(assert (<= 0 (Seq_index __flatten_14__14@102@02 i__19@106@02)))
; [eval] diz.Sensor_m.Main_process_state[i__19] < |diz.Sensor_m.Main_event_state|
; [eval] diz.Sensor_m.Main_process_state[i__19]
(push) ; 17
(assert (not (>= i__19@106@02 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26048
;  :arith-add-rows          918
;  :arith-assert-diseq      186
;  :arith-assert-lower      1354
;  :arith-assert-upper      1553
;  :arith-bound-prop        119
;  :arith-conflicts         68
;  :arith-eq-adapter        1198
;  :arith-fixed-eqs         1314
;  :arith-offset-eqs        660
;  :arith-pivots            567
;  :binary-propagations     11
;  :conflicts               426
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4932
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5129
;  :del-clause              2540
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9221
;  :mk-clause               2675
;  :num-allocs              7570695
;  :num-checks              515
;  :propagations            2312
;  :quant-instantiations    758
;  :rlimit-count            413231)
; [eval] |diz.Sensor_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 120 | !(0 <= __flatten_14__14@102@02[i__19@106@02])]
(assert (not (<= 0 (Seq_index __flatten_14__14@102@02 i__19@106@02))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 118 | !(i__19@106@02 < |__flatten_14__14@102@02| && 0 <= i__19@106@02)]
(assert (not
  (and (< i__19@106@02 (Seq_length __flatten_14__14@102@02)) (<= 0 i__19@106@02))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((i__19@106@02 Int)) (!
  (implies
    (and
      (< i__19@106@02 (Seq_length __flatten_14__14@102@02))
      (<= 0 i__19@106@02))
    (or
      (= (Seq_index __flatten_14__14@102@02 i__19@106@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_14__14@102@02 i__19@106@02)
          (Seq_length __flatten_17__17@105@02))
        (<= 0 (Seq_index __flatten_14__14@102@02 i__19@106@02)))))
  :pattern ((Seq_index __flatten_14__14@102@02 i__19@106@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      192
;  :arith-assert-lower      1370
;  :arith-assert-upper      1567
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1215
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            569
;  :binary-propagations     11
;  :conflicts               437
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9323
;  :mk-clause               2818
;  :num-allocs              7570695
;  :num-checks              516
;  :propagations            2349
;  :quant-instantiations    766
;  :rlimit-count            414164)
(assert (forall ((i__19@106@02 Int)) (!
  (implies
    (and
      (< i__19@106@02 (Seq_length __flatten_14__14@102@02))
      (<= 0 i__19@106@02))
    (or
      (= (Seq_index __flatten_14__14@102@02 i__19@106@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_14__14@102@02 i__19@106@02)
          (Seq_length __flatten_17__17@105@02))
        (<= 0 (Seq_index __flatten_14__14@102@02 i__19@106@02)))))
  :pattern ((Seq_index __flatten_14__14@102@02 i__19@106@02))
  :qid |prog.l<no position>|)))
(declare-const $k@107@02 $Perm)
(assert ($Perm.isReadVar $k@107@02 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@107@02 $Perm.No) (< $Perm.No $k@107@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      193
;  :arith-assert-lower      1372
;  :arith-assert-upper      1568
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            569
;  :binary-propagations     11
;  :conflicts               438
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9328
;  :mk-clause               2820
;  :num-allocs              7570695
;  :num-checks              517
;  :propagations            2350
;  :quant-instantiations    766
;  :rlimit-count            414634)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@60@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      193
;  :arith-assert-lower      1372
;  :arith-assert-upper      1568
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            569
;  :binary-propagations     11
;  :conflicts               438
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9328
;  :mk-clause               2820
;  :num-allocs              7570695
;  :num-checks              518
;  :propagations            2350
;  :quant-instantiations    766
;  :rlimit-count            414645)
(assert (< $k@107@02 $k@60@02))
(assert (<= $Perm.No (- $k@60@02 $k@107@02)))
(assert (<= (- $k@60@02 $k@107@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@60@02 $k@107@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] 0 < diz.Sensor_m.Main_MIN_DIST
(push) ; 10
(assert (not (< $Perm.No $k@60@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      193
;  :arith-assert-lower      1374
;  :arith-assert-upper      1569
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1216
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            570
;  :binary-propagations     11
;  :conflicts               439
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9331
;  :mk-clause               2820
;  :num-allocs              7570695
;  :num-checks              519
;  :propagations            2350
;  :quant-instantiations    766
;  :rlimit-count            414859)
(declare-const $k@108@02 $Perm)
(assert ($Perm.isReadVar $k@108@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@108@02 $Perm.No) (< $Perm.No $k@108@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      194
;  :arith-assert-lower      1376
;  :arith-assert-upper      1570
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1217
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            570
;  :binary-propagations     11
;  :conflicts               440
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9335
;  :mk-clause               2822
;  :num-allocs              7570695
;  :num-checks              520
;  :propagations            2351
;  :quant-instantiations    766
;  :rlimit-count            415057)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@61@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      194
;  :arith-assert-lower      1376
;  :arith-assert-upper      1570
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1217
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            570
;  :binary-propagations     11
;  :conflicts               440
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9335
;  :mk-clause               2822
;  :num-allocs              7570695
;  :num-checks              521
;  :propagations            2351
;  :quant-instantiations    766
;  :rlimit-count            415068)
(assert (< $k@108@02 $k@61@02))
(assert (<= $Perm.No (- $k@61@02 $k@108@02)))
(assert (<= (- $k@61@02 $k@108@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@61@02 $k@108@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] diz.Sensor_m.Main_sensor != null
(push) ; 10
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      194
;  :arith-assert-lower      1377
;  :arith-assert-upper      1572
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1217
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            571
;  :binary-propagations     11
;  :conflicts               441
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9338
;  :mk-clause               2822
;  :num-allocs              7570695
;  :num-checks              522
;  :propagations            2351
;  :quant-instantiations    766
;  :rlimit-count            415282)
(push) ; 10
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      194
;  :arith-assert-lower      1377
;  :arith-assert-upper      1572
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1217
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            571
;  :binary-propagations     11
;  :conflicts               442
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9338
;  :mk-clause               2822
;  :num-allocs              7570695
;  :num-checks              523
;  :propagations            2351
;  :quant-instantiations    766
;  :rlimit-count            415330)
(push) ; 10
(assert (not (=
  diz@2@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      194
;  :arith-assert-lower      1377
;  :arith-assert-upper      1572
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1217
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            571
;  :binary-propagations     11
;  :conflicts               442
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9338
;  :mk-clause               2822
;  :num-allocs              7570695
;  :num-checks              524
;  :propagations            2351
;  :quant-instantiations    766
;  :rlimit-count            415341)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      194
;  :arith-assert-lower      1377
;  :arith-assert-upper      1572
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1217
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            571
;  :binary-propagations     11
;  :conflicts               442
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9338
;  :mk-clause               2822
;  :num-allocs              7570695
;  :num-checks              525
;  :propagations            2351
;  :quant-instantiations    766
;  :rlimit-count            415354)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26112
;  :arith-add-rows          918
;  :arith-assert-diseq      194
;  :arith-assert-lower      1377
;  :arith-assert-upper      1572
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1217
;  :arith-fixed-eqs         1318
;  :arith-offset-eqs        660
;  :arith-pivots            571
;  :binary-propagations     11
;  :conflicts               443
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   2638
;  :datatype-splits         3697
;  :decisions               5140
;  :del-clause              2692
;  :final-checks            443
;  :interface-eqs           63
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9338
;  :mk-clause               2822
;  :num-allocs              7570695
;  :num-checks              526
;  :propagations            2351
;  :quant-instantiations    766
;  :rlimit-count            415402)
(push) ; 10
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26312
;  :arith-add-rows          921
;  :arith-assert-diseq      195
;  :arith-assert-lower      1388
;  :arith-assert-upper      1584
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1228
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            577
;  :binary-propagations     11
;  :conflicts               443
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9403
;  :mk-clause               2841
;  :num-allocs              7570695
;  :num-checks              527
;  :propagations            2371
;  :quant-instantiations    771
;  :rlimit-count            417095)
(declare-const $k@109@02 $Perm)
(assert ($Perm.isReadVar $k@109@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@109@02 $Perm.No) (< $Perm.No $k@109@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26312
;  :arith-add-rows          921
;  :arith-assert-diseq      196
;  :arith-assert-lower      1390
;  :arith-assert-upper      1585
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1229
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            577
;  :binary-propagations     11
;  :conflicts               444
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9407
;  :mk-clause               2843
;  :num-allocs              7570695
;  :num-checks              528
;  :propagations            2372
;  :quant-instantiations    771
;  :rlimit-count            417293)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@62@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26312
;  :arith-add-rows          921
;  :arith-assert-diseq      196
;  :arith-assert-lower      1390
;  :arith-assert-upper      1585
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1229
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            577
;  :binary-propagations     11
;  :conflicts               444
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9407
;  :mk-clause               2843
;  :num-allocs              7570695
;  :num-checks              529
;  :propagations            2372
;  :quant-instantiations    771
;  :rlimit-count            417304)
(assert (< $k@109@02 $k@62@02))
(assert (<= $Perm.No (- $k@62@02 $k@109@02)))
(assert (<= (- $k@62@02 $k@109@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@62@02 $k@109@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@02)) $Ref.null))))
; [eval] diz.Sensor_m.Main_controller != null
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26312
;  :arith-add-rows          921
;  :arith-assert-diseq      196
;  :arith-assert-lower      1392
;  :arith-assert-upper      1586
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1229
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               445
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9410
;  :mk-clause               2843
;  :num-allocs              7570695
;  :num-checks              530
;  :propagations            2372
;  :quant-instantiations    771
;  :rlimit-count            417518)
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26312
;  :arith-add-rows          921
;  :arith-assert-diseq      196
;  :arith-assert-lower      1392
;  :arith-assert-upper      1586
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1229
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               446
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9410
;  :mk-clause               2843
;  :num-allocs              7570695
;  :num-checks              531
;  :propagations            2372
;  :quant-instantiations    771
;  :rlimit-count            417566)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26312
;  :arith-add-rows          921
;  :arith-assert-diseq      196
;  :arith-assert-lower      1392
;  :arith-assert-upper      1586
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1229
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               446
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9410
;  :mk-clause               2843
;  :num-allocs              7570695
;  :num-checks              532
;  :propagations            2372
;  :quant-instantiations    771
;  :rlimit-count            417579)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26312
;  :arith-add-rows          921
;  :arith-assert-diseq      196
;  :arith-assert-lower      1392
;  :arith-assert-upper      1586
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1229
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               447
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9410
;  :mk-clause               2843
;  :num-allocs              7570695
;  :num-checks              533
;  :propagations            2372
;  :quant-instantiations    771
;  :rlimit-count            417627)
; [eval] diz.Sensor_m.Main_process_state[0] == -1 || diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0] == -1
; [eval] diz.Sensor_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (< 0 (Seq_length __flatten_14__14@102@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26312
;  :arith-add-rows          921
;  :arith-assert-diseq      196
;  :arith-assert-lower      1392
;  :arith-assert-upper      1586
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1229
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               447
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9410
;  :mk-clause               2843
;  :num-allocs              7570695
;  :num-checks              534
;  :propagations            2372
;  :quant-instantiations    771
;  :rlimit-count            417642)
; [eval] -1
(push) ; 10
; [then-branch: 121 | __flatten_14__14@102@02[0] == -1 | live]
; [else-branch: 121 | __flatten_14__14@102@02[0] != -1 | live]
(push) ; 11
; [then-branch: 121 | __flatten_14__14@102@02[0] == -1]
(assert (= (Seq_index __flatten_14__14@102@02 0) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 121 | __flatten_14__14@102@02[0] != -1]
(assert (not (= (Seq_index __flatten_14__14@102@02 0) (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[0] == 0
; [eval] diz.Sensor_m.Main_process_state[0]
(push) ; 12
(assert (not (< 0 (Seq_length __flatten_14__14@102@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26316
;  :arith-add-rows          921
;  :arith-assert-diseq      197
;  :arith-assert-lower      1395
;  :arith-assert-upper      1588
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1231
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               447
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2711
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9419
;  :mk-clause               2847
;  :num-allocs              7570695
;  :num-checks              535
;  :propagations            2374
;  :quant-instantiations    773
;  :rlimit-count            417818)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(assert (not (or
  (= (Seq_index __flatten_14__14@102@02 0) (- 0 1))
  (= (Seq_index __flatten_14__14@102@02 0) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26318
;  :arith-add-rows          921
;  :arith-assert-diseq      197
;  :arith-assert-lower      1395
;  :arith-assert-upper      1588
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1231
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               448
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2719
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9425
;  :mk-clause               2851
;  :num-allocs              7570695
;  :num-checks              536
;  :propagations            2376
;  :quant-instantiations    775
;  :rlimit-count            418005)
(assert (or
  (= (Seq_index __flatten_14__14@102@02 0) (- 0 1))
  (= (Seq_index __flatten_14__14@102@02 0) 0)))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 || diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 10
(assert (not (< 1 (Seq_length __flatten_14__14@102@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26318
;  :arith-add-rows          921
;  :arith-assert-diseq      197
;  :arith-assert-lower      1395
;  :arith-assert-upper      1588
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1231
;  :arith-fixed-eqs         1331
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               448
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2719
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9427
;  :mk-clause               2852
;  :num-allocs              7570695
;  :num-checks              537
;  :propagations            2376
;  :quant-instantiations    775
;  :rlimit-count            418091)
; [eval] -1
(push) ; 10
; [then-branch: 122 | __flatten_14__14@102@02[1] == -1 | live]
; [else-branch: 122 | __flatten_14__14@102@02[1] != -1 | live]
(push) ; 11
; [then-branch: 122 | __flatten_14__14@102@02[1] == -1]
(assert (= (Seq_index __flatten_14__14@102@02 1) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 122 | __flatten_14__14@102@02[1] != -1]
(assert (not (= (Seq_index __flatten_14__14@102@02 1) (- 0 1))))
; [eval] diz.Sensor_m.Main_process_state[1] == 2
; [eval] diz.Sensor_m.Main_process_state[1]
(push) ; 12
(assert (not (< 1 (Seq_length __flatten_14__14@102@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26327
;  :arith-add-rows          921
;  :arith-assert-diseq      201
;  :arith-assert-lower      1405
;  :arith-assert-upper      1592
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1236
;  :arith-fixed-eqs         1332
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               448
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2719
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9448
;  :mk-clause               2864
;  :num-allocs              7570695
;  :num-checks              538
;  :propagations            2383
;  :quant-instantiations    778
;  :rlimit-count            418374)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(assert (not (or
  (= (Seq_index __flatten_14__14@102@02 1) (- 0 1))
  (= (Seq_index __flatten_14__14@102@02 1) 2))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26331
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1407
;  :arith-assert-upper      1593
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1238
;  :arith-fixed-eqs         1332
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               449
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2741
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9463
;  :mk-clause               2874
;  :num-allocs              7570695
;  :num-checks              539
;  :propagations            2386
;  :quant-instantiations    781
;  :rlimit-count            418602)
(assert (or
  (= (Seq_index __flatten_14__14@102@02 1) (- 0 1))
  (= (Seq_index __flatten_14__14@102@02 1) 2)))
; [eval] diz.Sensor_m.Main_event_state[0] != -1
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 10
(assert (not (< 0 (Seq_length __flatten_17__17@105@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26331
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1407
;  :arith-assert-upper      1593
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1238
;  :arith-fixed-eqs         1332
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               449
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2741
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9465
;  :mk-clause               2875
;  :num-allocs              7570695
;  :num-checks              540
;  :propagations            2386
;  :quant-instantiations    781
;  :rlimit-count            418688)
; [eval] -1
(push) ; 10
(assert (not (not (= (Seq_index __flatten_17__17@105@02 0) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26334
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1407
;  :arith-assert-upper      1593
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1238
;  :arith-fixed-eqs         1332
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               450
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2741
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9467
;  :mk-clause               2875
;  :num-allocs              7570695
;  :num-checks              541
;  :propagations            2386
;  :quant-instantiations    782
;  :rlimit-count            418806)
(assert (not (= (Seq_index __flatten_17__17@105@02 0) (- 0 1))))
; [eval] diz.Sensor_m.Main_event_state[0] != 0
; [eval] diz.Sensor_m.Main_event_state[0]
(push) ; 10
(assert (not (< 0 (Seq_length __flatten_17__17@105@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26337
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1407
;  :arith-assert-upper      1593
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1238
;  :arith-fixed-eqs         1332
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               450
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2741
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9469
;  :mk-clause               2875
;  :num-allocs              7570695
;  :num-checks              542
;  :propagations            2386
;  :quant-instantiations    783
;  :rlimit-count            418907)
(push) ; 10
(assert (not (not (= (Seq_index __flatten_17__17@105@02 0) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26338
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1407
;  :arith-assert-upper      1593
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1238
;  :arith-fixed-eqs         1332
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               451
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2741
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9470
;  :mk-clause               2875
;  :num-allocs              7570695
;  :num-checks              543
;  :propagations            2386
;  :quant-instantiations    783
;  :rlimit-count            418965)
(assert (not (= (Seq_index __flatten_17__17@105@02 0) 0)))
; [eval] diz.Sensor_m.Main_event_state[2] <= -1
; [eval] diz.Sensor_m.Main_event_state[2]
(push) ; 10
(assert (not (< 2 (Seq_length __flatten_17__17@105@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26339
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1407
;  :arith-assert-upper      1593
;  :arith-bound-prop        123
;  :arith-conflicts         69
;  :arith-eq-adapter        1238
;  :arith-fixed-eqs         1332
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               451
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2741
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9471
;  :mk-clause               2875
;  :num-allocs              7570695
;  :num-checks              544
;  :propagations            2386
;  :quant-instantiations    783
;  :rlimit-count            419046)
; [eval] -1
(push) ; 10
(assert (not (<= (Seq_index __flatten_17__17@105@02 2) (- 0 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26342
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1410
;  :arith-assert-upper      1594
;  :arith-bound-prop        123
;  :arith-conflicts         70
;  :arith-eq-adapter        1239
;  :arith-fixed-eqs         1333
;  :arith-offset-eqs        668
;  :arith-pivots            578
;  :binary-propagations     11
;  :conflicts               452
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2744
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9478
;  :mk-clause               2878
;  :num-allocs              7570695
;  :num-checks              545
;  :propagations            2387
;  :quant-instantiations    784
;  :rlimit-count            419193)
(assert (<= (Seq_index __flatten_17__17@105@02 2) (- 0 1)))
; [eval] !diz.Sensor_m.Main_controller.Controller_init || (diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1)
; [eval] !diz.Sensor_m.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26346
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1412
;  :arith-assert-upper      1596
;  :arith-bound-prop        123
;  :arith-conflicts         70
;  :arith-eq-adapter        1240
;  :arith-fixed-eqs         1334
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               453
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2744
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9485
;  :mk-clause               2880
;  :num-allocs              7570695
;  :num-checks              546
;  :propagations            2388
;  :quant-instantiations    785
;  :rlimit-count            419330)
(push) ; 10
; [then-branch: 123 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
; [else-branch: 123 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
(push) ; 11
; [then-branch: 123 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 123 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 12
(assert (not (< 1 (Seq_length __flatten_14__14@102@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26351
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1414
;  :arith-assert-upper      1598
;  :arith-bound-prop        123
;  :arith-conflicts         70
;  :arith-eq-adapter        1241
;  :arith-fixed-eqs         1334
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               453
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2744
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9491
;  :mk-clause               2883
;  :num-allocs              7570695
;  :num-checks              547
;  :propagations            2392
;  :quant-instantiations    787
;  :rlimit-count            419681)
; [eval] -1
(push) ; 12
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (Seq_index __flatten_14__14@102@02 1) (- 0 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26355
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1414
;  :arith-assert-upper      1598
;  :arith-bound-prop        123
;  :arith-conflicts         70
;  :arith-eq-adapter        1241
;  :arith-fixed-eqs         1334
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               454
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2746
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9494
;  :mk-clause               2885
;  :num-allocs              7570695
;  :num-checks              548
;  :propagations            2393
;  :quant-instantiations    788
;  :rlimit-count            419800)
; [then-branch: 124 | __flatten_14__14@102@02[1] == -1 | dead]
; [else-branch: 124 | __flatten_14__14@102@02[1] != -1 | live]
(push) ; 13
; [else-branch: 124 | __flatten_14__14@102@02[1] != -1]
(assert (not (= (Seq_index __flatten_14__14@102@02 1) (- 0 1))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_process_state[0] != -1
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (< 2 (Seq_length __flatten_17__17@105@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26355
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1414
;  :arith-assert-upper      1598
;  :arith-bound-prop        123
;  :arith-conflicts         70
;  :arith-eq-adapter        1241
;  :arith-fixed-eqs         1334
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               454
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2749
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9494
;  :mk-clause               2885
;  :num-allocs              7570695
;  :num-checks              549
;  :propagations            2393
;  :quant-instantiations    788
;  :rlimit-count            419833)
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (<= (- 0 1) (Seq_index __flatten_17__17@105@02 2)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26355
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1415
;  :arith-assert-upper      1598
;  :arith-bound-prop        123
;  :arith-conflicts         71
;  :arith-eq-adapter        1241
;  :arith-fixed-eqs         1335
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               455
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2749
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9495
;  :mk-clause               2885
;  :num-allocs              7570695
;  :num-checks              550
;  :propagations            2393
;  :quant-instantiations    788
;  :rlimit-count            419902)
; [then-branch: 125 | -1 <= __flatten_17__17@105@02[2] | dead]
; [else-branch: 125 | !(-1 <= __flatten_17__17@105@02[2]) | live]
(push) ; 11
; [else-branch: 125 | !(-1 <= __flatten_17__17@105@02[2])]
(assert (not (<= (- 0 1) (Seq_index __flatten_17__17@105@02 2))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] -1 <= diz.Sensor_m.Main_event_state[2] ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] -1 <= diz.Sensor_m.Main_event_state[2]
; [eval] -1
; [eval] diz.Sensor_m.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (< 2 (Seq_length __flatten_17__17@105@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26355
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1415
;  :arith-assert-upper      1598
;  :arith-bound-prop        123
;  :arith-conflicts         71
;  :arith-eq-adapter        1241
;  :arith-fixed-eqs         1335
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               455
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2749
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9495
;  :mk-clause               2885
;  :num-allocs              7570695
;  :num-checks              551
;  :propagations            2393
;  :quant-instantiations    788
;  :rlimit-count            419935)
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (<= (- 0 1) (Seq_index __flatten_17__17@105@02 2)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26355
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1416
;  :arith-assert-upper      1598
;  :arith-bound-prop        123
;  :arith-conflicts         72
;  :arith-eq-adapter        1241
;  :arith-fixed-eqs         1336
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               456
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2749
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9496
;  :mk-clause               2885
;  :num-allocs              7570695
;  :num-checks              552
;  :propagations            2393
;  :quant-instantiations    788
;  :rlimit-count            420004)
; [then-branch: 126 | -1 <= __flatten_17__17@105@02[2] | dead]
; [else-branch: 126 | !(-1 <= __flatten_17__17@105@02[2]) | live]
(push) ; 11
; [else-branch: 126 | !(-1 <= __flatten_17__17@105@02[2])]
(assert (not (<= (- 0 1) (Seq_index __flatten_17__17@105@02 2))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1 ==> diz.Sensor_m.Main_sensor.Sensor_dist < diz.Sensor_m.Main_MIN_DIST
; [eval] diz.Sensor_m.Main_controller.Controller_init && diz.Sensor_m.Main_process_state[1] == -1
(push) ; 10
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26355
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1416
;  :arith-assert-upper      1598
;  :arith-bound-prop        123
;  :arith-conflicts         72
;  :arith-eq-adapter        1241
;  :arith-fixed-eqs         1336
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               457
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2749
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9496
;  :mk-clause               2885
;  :num-allocs              7570695
;  :num-checks              553
;  :propagations            2393
;  :quant-instantiations    788
;  :rlimit-count            420070)
(push) ; 10
; [then-branch: 127 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | live]
; [else-branch: 127 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
(push) ; 11
; [then-branch: 127 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))
; [eval] diz.Sensor_m.Main_process_state[1] == -1
; [eval] diz.Sensor_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 12
(assert (not (< 1 (Seq_length __flatten_14__14@102@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26360
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1418
;  :arith-assert-upper      1600
;  :arith-bound-prop        123
;  :arith-conflicts         72
;  :arith-eq-adapter        1242
;  :arith-fixed-eqs         1336
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               457
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2749
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9502
;  :mk-clause               2888
;  :num-allocs              7570695
;  :num-checks              554
;  :propagations            2397
;  :quant-instantiations    790
;  :rlimit-count            420376)
; [eval] -1
(pop) ; 11
(push) ; 11
; [else-branch: 127 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (and
    (= (Seq_index __flatten_14__14@102@02 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26367
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1418
;  :arith-assert-upper      1600
;  :arith-bound-prop        123
;  :arith-conflicts         72
;  :arith-eq-adapter        1242
;  :arith-fixed-eqs         1336
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               458
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2758
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9509
;  :mk-clause               2894
;  :num-allocs              7570695
;  :num-checks              555
;  :propagations            2402
;  :quant-instantiations    793
;  :rlimit-count            420804)
; [then-branch: 128 | __flatten_14__14@102@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))) | dead]
; [else-branch: 128 | !(__flatten_14__14@102@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))))))))))))))) | live]
(push) ; 11
; [else-branch: 128 | !(__flatten_14__14@102@02[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))))))))))))]
(assert (not
  (and
    (= (Seq_index __flatten_14__14@102@02 1) (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] diz.Sensor_m.Main_sensor == diz
(push) ; 10
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26367
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1418
;  :arith-assert-upper      1600
;  :arith-bound-prop        123
;  :arith-conflicts         72
;  :arith-eq-adapter        1242
;  :arith-fixed-eqs         1336
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               459
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2758
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9509
;  :mk-clause               2894
;  :num-allocs              7570695
;  :num-checks              556
;  :propagations            2402
;  :quant-instantiations    793
;  :rlimit-count            420910)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26367
;  :arith-add-rows          921
;  :arith-assert-diseq      203
;  :arith-assert-lower      1418
;  :arith-assert-upper      1600
;  :arith-bound-prop        123
;  :arith-conflicts         72
;  :arith-eq-adapter        1242
;  :arith-fixed-eqs         1336
;  :arith-offset-eqs        668
;  :arith-pivots            579
;  :binary-propagations     11
;  :conflicts               459
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 4968
;  :datatype-occurs-check   2649
;  :datatype-splits         3727
;  :decisions               5177
;  :del-clause              2758
;  :final-checks            447
;  :interface-eqs           64
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9509
;  :mk-clause               2894
;  :num-allocs              7570695
;  :num-checks              557
;  :propagations            2402
;  :quant-instantiations    793
;  :rlimit-count            420923)
(pop) ; 9
(push) ; 9
; [else-branch: 116 | sys__result@84@02 < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@58@02)))))))))]
(assert (<
  sys__result@84@02
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02))))))))))))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 102 | First:(Second:(Second:(Second:($t@58@02))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@02))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@02)))))))
        0)
      (- 0 2)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26552
;  :arith-add-rows          940
;  :arith-assert-diseq      203
;  :arith-assert-lower      1424
;  :arith-assert-upper      1612
;  :arith-bound-prop        125
;  :arith-conflicts         72
;  :arith-eq-adapter        1248
;  :arith-fixed-eqs         1345
;  :arith-offset-eqs        669
;  :arith-pivots            600
;  :binary-propagations     11
;  :conflicts               460
;  :datatype-accessor-ax    841
;  :datatype-constructor-ax 5004
;  :datatype-occurs-check   2661
;  :datatype-splits         3762
;  :decisions               5220
;  :del-clause              2845
;  :final-checks            453
;  :interface-eqs           66
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9573
;  :mk-clause               2913
;  :num-allocs              7570695
;  :num-checks              558
;  :propagations            2423
;  :quant-instantiations    799
;  :rlimit-count            422829)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26737
;  :arith-add-rows          950
;  :arith-assert-diseq      203
;  :arith-assert-lower      1430
;  :arith-assert-upper      1624
;  :arith-bound-prop        127
;  :arith-conflicts         72
;  :arith-eq-adapter        1254
;  :arith-fixed-eqs         1354
;  :arith-offset-eqs        670
;  :arith-pivots            604
;  :binary-propagations     11
;  :conflicts               461
;  :datatype-accessor-ax    848
;  :datatype-constructor-ax 5040
;  :datatype-occurs-check   2673
;  :datatype-splits         3797
;  :decisions               5263
;  :del-clause              2864
;  :final-checks            459
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9637
;  :mk-clause               2932
;  :num-allocs              7570695
;  :num-checks              559
;  :propagations            2444
;  :quant-instantiations    805
;  :rlimit-count            424446)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@49@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26922
;  :arith-add-rows          960
;  :arith-assert-diseq      203
;  :arith-assert-lower      1436
;  :arith-assert-upper      1636
;  :arith-bound-prop        129
;  :arith-conflicts         72
;  :arith-eq-adapter        1260
;  :arith-fixed-eqs         1363
;  :arith-offset-eqs        671
;  :arith-pivots            608
;  :binary-propagations     11
;  :conflicts               462
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 5076
;  :datatype-occurs-check   2685
;  :datatype-splits         3832
;  :decisions               5306
;  :del-clause              2883
;  :final-checks            465
;  :interface-eqs           70
;  :max-generation          2
;  :max-memory              5.11
;  :memory                  5.11
;  :minimized-lits          12
;  :mk-bool-var             9701
;  :mk-clause               2951
;  :num-allocs              7570695
;  :num-checks              560
;  :propagations            2465
;  :quant-instantiations    811
;  :rlimit-count            426063)
; [eval] !true
; [then-branch: 129 | False | dead]
; [else-branch: 129 | True | live]
(push) ; 5
; [else-branch: 129 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
