class TickCounter_vr { 
    //Auto-generated fields of the TickCounter_vr class:
    Main m;
    int ticks;
    int speed;
    
    //Auto-generated constructor:
    //Auto-generated specifications of the constructor TickCounter_vr:
    ensures Perm(m, write) **
            Perm(ticks, write) **
            Perm(speed, write) **
            (m == m_param) ;
    TickCounter_vr(Main m_param){
        m = m_param;
    }
    
    
    //Auto-generated functions:
    //Auto-generated specifications of the function rand__randomize_0:
    pure int rand__randomize_0();
    
    //Auto-generated specifications of the function run:
    context Perm(m, read) **
            (m != null) **
            Perm(m.vr, read) **
            (m.vr == this) ;
    void run(){
        lock m;
        loop_invariant true ** 
                Perm(m, read) ** 
                (m != null) ** 
                held(m)  ** 
                m.global_permission_invariant() ** 
                (m.vr == this) ;
        while (true) {
            m.process_state = m.process_state[1 -> 9];
            m.event_state = m.event_state[9 -> 1];
            loop_invariant true ** 
                    Perm(m, read) ** 
                    (m != null) ** 
                    held(m)  ** 
                    m.global_permission_invariant() ** 
                    (m.vr == this) ;
            while (m.process_state[1] != -1 || m.event_state[9] != -2) {
                unlock m;
                lock m;
            }
            speed = rand__randomize_0();
            loop_invariant true ** 
                    Perm(m, read) ** 
                    (m != null) ** 
                    held(m)  ** 
                    m.global_permission_invariant() ** 
                    (m.vr == this) ;
            while (|m.speed_vr.buffer| >= 16) {
                m.process_state = m.process_state[1 -> 2];
                loop_invariant true ** 
                        Perm(m, read) ** 
                        (m != null) ** 
                        held(m)  ** 
                        m.global_permission_invariant() ** 
                        (m.vr == this) ;
                while (m.process_state[1] != -1 || m.event_state[2] != -2) {
                    unlock m;
                    lock m;
                }
            }
            m.speed_vr.fifo_write(speed);
        }
        unlock m;
    }
    
}

