(get-info :version)
; (:version "4.8.6")
; Started: 2024-05-28 15:42:49
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Int>)
(declare-sort Set<Bool>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_ALU<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Driver<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_Monitor<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [ALU_m: Ref]
(declare-fun $FVF.domain_ALU_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_ALU_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_ALU_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_ALU_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_ALU_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_ALU_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Driver_m: Ref]
(declare-fun $FVF.domain_Driver_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Driver_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Driver_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Driver_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Driver_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Driver_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Monitor_m: Ref]
(declare-fun $FVF.domain_Monitor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Monitor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Monitor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Monitor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Monitor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Monitor_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Driver_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Driver_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_ALU<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Driver<TYPE> class_Main<TYPE> class_Monitor<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_ALU<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Driver<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Monitor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [ALU_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_ALU_m vs) ($FVF.domain_ALU_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_ALU_m vs))
            (= ($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x)))
          :pattern (($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_ALU_m pm r))
    :pattern ($FVF.perm_ALU_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_ALU_m f r) true)
    :pattern ($FVF.loc_ALU_m f r))))
; /field_value_functions_axioms.smt2 [Driver_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Driver_m vs) ($FVF.domain_Driver_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Driver_m vs))
            (= ($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x)))
          :pattern (($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Driver_m pm r))
    :pattern ($FVF.perm_Driver_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Driver_m f r) true)
    :pattern ($FVF.loc_Driver_m f r))))
; /field_value_functions_axioms.smt2 [Monitor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Monitor_m vs) ($FVF.domain_Monitor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Monitor_m vs))
            (= ($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x)))
          :pattern (($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Monitor_m pm r))
    :pattern ($FVF.perm_Monitor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Monitor_m f r) true)
    :pattern ($FVF.loc_Monitor_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 2))
    (and
      (and
        (or
          (< (Seq_index vals@8@00 0) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 0)))
        (or
          (< (Seq_index vals@8@00 1) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 1))))
      (and
        (implies
          (and
            (< (Seq_index vals@8@00 0) (- 0 1))
            (< (Seq_index vals@8@00 1) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (<= (- 0 1) (Seq_index vals@8@00 0))
            (<= (- 0 1) (Seq_index vals@8@00 1)))
          (or
            (and
              (<= (- 0 1) (Seq_index vals@8@00 0))
              (= result@9@00 (Seq_index vals@8@00 0)))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 1))
              (= result@9@00 (Seq_index vals@8@00 1)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- ALU_set_bit_EncodedGlobalVariables_Integer_Integer_Integer ----------
(declare-const diz@0@03 $Ref)
(declare-const globals@1@03 $Ref)
(declare-const value@2@03 Int)
(declare-const pos@3@03 Int)
(declare-const bit@4@03 Int)
(declare-const sys__result@5@03 Int)
(declare-const diz@6@03 $Ref)
(declare-const globals@7@03 $Ref)
(declare-const value@8@03 Int)
(declare-const pos@9@03 Int)
(declare-const bit@10@03 Int)
(declare-const sys__result@11@03 Int)
(push) ; 1
(declare-const $t@12@03 $Snap)
(assert (= $t@12@03 ($Snap.combine ($Snap.first $t@12@03) ($Snap.second $t@12@03))))
(assert (= ($Snap.first $t@12@03) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@6@03 $Ref.null)))
(assert (=
  ($Snap.second $t@12@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@03))
    ($Snap.second ($Snap.second $t@12@03)))))
(declare-const $k@13@03 $Perm)
(assert ($Perm.isReadVar $k@13@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@13@03 $Perm.No) (< $Perm.No $k@13@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            17
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   2
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            1
;  :datatype-accessor-ax 3
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          264
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           1
;  :propagations         17
;  :quant-instantiations 1
;  :rlimit-count         111756)
(assert (<= $Perm.No $k@13@03))
(assert (<= $k@13@03 $Perm.Write))
(assert (implies (< $Perm.No $k@13@03) (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@12@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@03))) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            23
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            2
;  :datatype-accessor-ax 4
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          267
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           2
;  :propagations         17
;  :quant-instantiations 1
;  :rlimit-count         112009)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            29
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            3
;  :datatype-accessor-ax 5
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          270
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           3
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112293)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            34
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            4
;  :datatype-accessor-ax 6
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          271
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           4
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112480)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            40
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            5
;  :datatype-accessor-ax 7
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          273
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           5
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112709)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            47
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  16
;  :conflicts            6
;  :datatype-accessor-ax 8
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          282
;  :mk-clause            6
;  :num-allocs           3554378
;  :num-checks           6
;  :propagations         18
;  :quant-instantiations 5
;  :rlimit-count         113070
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            53
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  16
;  :conflicts            7
;  :datatype-accessor-ax 9
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          284
;  :mk-clause            6
;  :num-allocs           3554378
;  :num-checks           7
;  :propagations         18
;  :quant-instantiations 5
;  :rlimit-count         113319)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@14@03 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | 0 <= i@14@03 | live]
; [else-branch: 0 | !(0 <= i@14@03) | live]
(push) ; 4
; [then-branch: 0 | 0 <= i@14@03]
(assert (<= 0 i@14@03))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            61
;  :arith-assert-diseq   3
;  :arith-assert-lower   10
;  :arith-assert-upper   5
;  :arith-eq-adapter     6
;  :binary-propagations  16
;  :conflicts            8
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          295
;  :mk-clause            9
;  :num-allocs           3554378
;  :num-checks           8
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113791)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(0 <= i@14@03)]
(assert (not (<= 0 i@14@03)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 1 | i@14@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@14@03 | live]
; [else-branch: 1 | !(i@14@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@14@03) | live]
(push) ; 4
; [then-branch: 1 | i@14@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@14@03]
(assert (and
  (<
    i@14@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  (<= 0 i@14@03)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 5
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          297
;  :mk-clause            9
;  :num-allocs           3554378
;  :num-checks           9
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113952)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@14@03 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          297
;  :mk-clause            9
;  :num-allocs           3554378
;  :num-checks           10
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113961)
; [eval] -1
(push) ; 5
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] != -1 | live]
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@14@03)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
      i@14@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          298
;  :mk-clause            9
;  :num-allocs           3673091
;  :num-checks           11
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114187)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@14@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          298
;  :mk-clause            9
;  :num-allocs           3673091
;  :num-checks           12
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114196)
(push) ; 7
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03]) | live]
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@14@03)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3673091
;  :num-checks           13
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114369)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@14@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3673091
;  :num-checks           14
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114378)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            12
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3673091
;  :num-checks           15
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114426
;  :time                 0.00)
(pop) ; 8
(push) ; 8
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@14@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
      i@14@03))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(i@14@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@14@03)]
(assert (not
  (and
    (<
      i@14@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
    (<= 0 i@14@03))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@14@03 Int)) (!
  (implies
    (and
      (<
        i@14@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
      (<= 0 i@14@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
          i@14@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@14@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@14@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@14@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            13
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          303
;  :mk-clause            10
;  :num-allocs           3673091
;  :num-checks           16
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         115081)
(declare-const $k@15@03 $Perm)
(assert ($Perm.isReadVar $k@15@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@15@03 $Perm.No) (< $Perm.No $k@15@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   7
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            14
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          307
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           17
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115279)
(assert (<= $Perm.No $k@15@03))
(assert (<= $k@15@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@15@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            15
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          310
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           18
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115612)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            16
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          310
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           19
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115660)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            17
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          313
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           20
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116026)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            18
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          313
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           21
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116074
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            19
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          314
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           22
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116341)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            20
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          314
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           23
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116389)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            21
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          315
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           24
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116666)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            22
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          315
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           25
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116714)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            23
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          316
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           26
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117001)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            24
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          316
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           27
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117049)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            25
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           28
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117346)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            26
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           29
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117394)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            27
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          318
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           30
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117701)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            28
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          318
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           31
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117749)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            109
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            29
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          319
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           32
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118066)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            109
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            30
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          319
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           33
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118114)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            114
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            31
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           34
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118441)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            114
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            32
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           35
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118489)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            119
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            33
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          321
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           36
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118826)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            119
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            34
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          321
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           37
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118874
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            124
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            35
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          322
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           38
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         119221)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            124
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            36
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          322
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           39
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         119269)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            129
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            37
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          323
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           40
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         119626)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            129
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            38
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          323
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           41
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         119674)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            39
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           42
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120041)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            40
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           43
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120089)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            139
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            41
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          325
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           44
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120466)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            139
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            42
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          325
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           45
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120514)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            144
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            43
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          326
;  :mk-clause            12
;  :num-allocs           3673091
;  :num-checks           46
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120901)
(declare-const $k@16@03 $Perm)
(assert ($Perm.isReadVar $k@16@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@16@03 $Perm.No) (< $Perm.No $k@16@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            144
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   9
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            44
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          330
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           47
;  :propagations         21
;  :quant-instantiations 9
;  :rlimit-count         121100)
(assert (<= $Perm.No $k@16@03))
(assert (<= $k@16@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@16@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            150
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            45
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          333
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           48
;  :propagations         21
;  :quant-instantiations 9
;  :rlimit-count         121583)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            150
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            46
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          333
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           49
;  :propagations         21
;  :quant-instantiations 9
;  :rlimit-count         121631)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            156
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            47
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           50
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         122171)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            156
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            48
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           51
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         122219)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            161
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            49
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           52
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         122636)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            161
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            50
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           53
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         122684)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            166
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            51
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          338
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           54
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         123111)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            166
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            52
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          338
;  :mk-clause            14
;  :num-allocs           3673091
;  :num-checks           55
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         123159)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            53
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          339
;  :mk-clause            14
;  :num-allocs           3798390
;  :num-checks           56
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         123596)
(push) ; 2
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            54
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          339
;  :mk-clause            14
;  :num-allocs           3798390
;  :num-checks           57
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         123644)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            55
;  :datatype-accessor-ax 32
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3798390
;  :num-checks           58
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         124091)
(declare-const $k@17@03 $Perm)
(assert ($Perm.isReadVar $k@17@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@17@03 $Perm.No) (< $Perm.No $k@17@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   11
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            56
;  :datatype-accessor-ax 32
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          344
;  :mk-clause            16
;  :num-allocs           3798390
;  :num-checks           59
;  :propagations         22
;  :quant-instantiations 10
;  :rlimit-count         124290)
(assert (<= $Perm.No $k@17@03))
(assert (<= $k@17@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@17@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            182
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            57
;  :datatype-accessor-ax 33
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          347
;  :mk-clause            16
;  :num-allocs           3798390
;  :num-checks           60
;  :propagations         22
;  :quant-instantiations 10
;  :rlimit-count         124833)
(push) ; 2
(assert (not (< $Perm.No $k@17@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            182
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            58
;  :datatype-accessor-ax 33
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          347
;  :mk-clause            16
;  :num-allocs           3798390
;  :num-checks           61
;  :propagations         22
;  :quant-instantiations 10
;  :rlimit-count         124881)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            59
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          350
;  :mk-clause            16
;  :num-allocs           3798390
;  :num-checks           62
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         125463)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            60
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          350
;  :mk-clause            16
;  :num-allocs           3798390
;  :num-checks           63
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         125511)
(declare-const $k@18@03 $Perm)
(assert ($Perm.isReadVar $k@18@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@18@03 $Perm.No) (< $Perm.No $k@18@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   13
;  :arith-eq-adapter     11
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            61
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          354
;  :mk-clause            18
;  :num-allocs           3798390
;  :num-checks           64
;  :propagations         23
;  :quant-instantiations 11
;  :rlimit-count         125709)
(set-option :timeout 10)
(push) ; 2
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               258
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      13
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               62
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3925937
;  :num-checks              65
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            126592
;  :time                    0.00)
(assert (<= $Perm.No $k@18@03))
(assert (<= $k@18@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@18@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               63
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3925937
;  :num-checks              66
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            127155)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               64
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3925937
;  :num-checks              67
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            127203)
(push) ; 2
(assert (not (< $Perm.No $k@18@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               65
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3925937
;  :num-checks              68
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            127251)
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               66
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3925937
;  :num-checks              69
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            127299)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 2
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               268
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               67
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             390
;  :mk-clause               19
;  :num-allocs              3925937
;  :num-checks              70
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            127840)
(push) ; 2
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               268
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               68
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             390
;  :mk-clause               19
;  :num-allocs              3925937
;  :num-checks              71
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            127888)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  diz@6@03))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@19@03 $Snap)
(assert (= $t@19@03 ($Snap.combine ($Snap.first $t@19@03) ($Snap.second $t@19@03))))
(declare-const $k@20@03 $Perm)
(assert ($Perm.isReadVar $k@20@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@20@03 $Perm.No) (< $Perm.No $k@20@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               341
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               70
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             423
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              73
;  :propagations            24
;  :quant-instantiations    12
;  :rlimit-count            129018)
(assert (<= $Perm.No $k@20@03))
(assert (<= $k@20@03 $Perm.Write))
(assert (implies (< $Perm.No $k@20@03) (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second $t@19@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@19@03))
    ($Snap.second ($Snap.second $t@19@03)))))
(assert (= ($Snap.first ($Snap.second $t@19@03)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               347
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               71
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             426
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              74
;  :propagations            24
;  :quant-instantiations    12
;  :rlimit-count            129261)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@19@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@19@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               353
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               72
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             429
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              75
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            129533)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@19@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               358
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               73
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             430
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              76
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            129710)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               364
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             432
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              77
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            129929)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               371
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             438
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              78
;  :propagations            24
;  :quant-instantiations    15
;  :rlimit-count            130259)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               377
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             440
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              79
;  :propagations            24
;  :quant-instantiations    15
;  :rlimit-count            130498)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@21@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@21@03 | live]
; [else-branch: 4 | !(0 <= i@21@03) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@21@03]
(assert (<= 0 i@21@03))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               385
;  :arith-assert-diseq      9
;  :arith-assert-lower      29
;  :arith-assert-upper      18
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               77
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             448
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              80
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            130938)
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@21@03)]
(assert (not (<= 0 i@21@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@21@03 < |First:(Second:(Second:(Second:($t@19@03))))| && 0 <= i@21@03 | live]
; [else-branch: 5 | !(i@21@03 < |First:(Second:(Second:(Second:($t@19@03))))| && 0 <= i@21@03) | live]
(push) ; 5
; [then-branch: 5 | i@21@03 < |First:(Second:(Second:(Second:($t@19@03))))| && 0 <= i@21@03]
(assert (and
  (<
    i@21@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))
  (<= 0 i@21@03)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 6
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      9
;  :arith-assert-lower      30
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               78
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             450
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              81
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131099)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@21@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      9
;  :arith-assert-lower      30
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               78
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             450
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              82
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131108)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@19@03))))[i@21@03] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@19@03))))[i@21@03] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@19@03))))[i@21@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
    i@21@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@19@03))))[i@21@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
      i@21@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      9
;  :arith-assert-lower      30
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               79
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             451
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              83
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131322)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@21@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      9
;  :arith-assert-lower      30
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               79
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             451
;  :mk-clause               22
;  :num-allocs              3925937
;  :num-checks              84
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131331)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@19@03))))[i@21@03] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@19@03))))[i@21@03]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@19@03))))[i@21@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
    i@21@03)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      19
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               80
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               23
;  :num-allocs              3925937
;  :num-checks              85
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131493)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@21@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      19
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               80
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               23
;  :num-allocs              3925937
;  :num-checks              86
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131502)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      19
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               81
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               23
;  :num-allocs              3925937
;  :num-checks              87
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131550)
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@19@03))))[i@21@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
      i@21@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@21@03 < |First:(Second:(Second:(Second:($t@19@03))))| && 0 <= i@21@03)]
(assert (not
  (and
    (<
      i@21@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))
    (<= 0 i@21@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@21@03 Int)) (!
  (implies
    (and
      (<
        i@21@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))
      (<= 0 i@21@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
          i@21@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
            i@21@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
            i@21@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
    i@21@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               391
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      19
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               82
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             456
;  :mk-clause               23
;  :num-allocs              3925937
;  :num-checks              88
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            132175)
(declare-const $k@22@03 $Perm)
(assert ($Perm.isReadVar $k@22@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@22@03 $Perm.No) (< $Perm.No $k@22@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               391
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      20
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               83
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             460
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              89
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            132373)
(assert (<= $Perm.No $k@22@03))
(assert (<= $k@22@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@22@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               397
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               84
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              90
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            132696)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               397
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               85
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              91
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            132744)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               403
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               86
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             466
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              92
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133100)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               403
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               87
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             466
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              93
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133148)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               408
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               88
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             467
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              94
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133405)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               408
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               89
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             467
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              95
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133453)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               413
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               90
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             468
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              96
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133720)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               413
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               91
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             468
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              97
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133768)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               92
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             469
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              98
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134045)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               93
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             469
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              99
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134093)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               423
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             470
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              100
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134380)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               423
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               95
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             470
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              101
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134428)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               428
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               96
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             471
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              102
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134725)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               428
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               97
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             471
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              103
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134773)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               433
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               98
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             472
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              104
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135080)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               433
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               99
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             472
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              105
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135128)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               438
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               100
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             473
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              106
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135445)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               438
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               101
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             473
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              107
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135493)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               443
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               102
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             474
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              108
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135820)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               443
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               103
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             474
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              109
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135868)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               448
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               104
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             475
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              110
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            136205)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               448
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               105
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             475
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              111
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            136253)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               453
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               106
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             476
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              112
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            136600)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               453
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               107
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             476
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              113
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            136648)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               458
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               108
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             477
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              114
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137005)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               458
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               109
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             477
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              115
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137053)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               463
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               110
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             478
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              116
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137420)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               463
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               111
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             478
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              117
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137468)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               468
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               112
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             479
;  :mk-clause               25
;  :num-allocs              3925937
;  :num-checks              118
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137845)
(declare-const $k@23@03 $Perm)
(assert ($Perm.isReadVar $k@23@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@23@03 $Perm.No) (< $Perm.No $k@23@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               468
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      22
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               113
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             483
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              119
;  :propagations            26
;  :quant-instantiations    18
;  :rlimit-count            138044)
(assert (<= $Perm.No $k@23@03))
(assert (<= $k@23@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@23@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               114
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             486
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              120
;  :propagations            26
;  :quant-instantiations    18
;  :rlimit-count            138517)
(push) ; 3
(assert (not (< $Perm.No $k@23@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               115
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             486
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              121
;  :propagations            26
;  :quant-instantiations    18
;  :rlimit-count            138565)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               480
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               116
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             489
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              122
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            139095
;  :time                    0.00)
(push) ; 3
(assert (not (< $Perm.No $k@23@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               480
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               117
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             489
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              123
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            139143)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               485
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               118
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             490
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              124
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            139550)
(push) ; 3
(assert (not (< $Perm.No $k@23@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               485
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             490
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              125
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            139598)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               120
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             491
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              126
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140015)
(push) ; 3
(assert (not (< $Perm.No $k@23@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               121
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             491
;  :mk-clause               27
;  :num-allocs              3925937
;  :num-checks              127
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140063)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               495
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               122
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             492
;  :mk-clause               27
;  :num-allocs              4063633
;  :num-checks              128
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140490)
(push) ; 3
(assert (not (< $Perm.No $k@23@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               495
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               123
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             492
;  :mk-clause               27
;  :num-allocs              4063633
;  :num-checks              129
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140538)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               500
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               124
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             493
;  :mk-clause               27
;  :num-allocs              4063633
;  :num-checks              130
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140975)
(declare-const $k@24@03 $Perm)
(assert ($Perm.isReadVar $k@24@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@24@03 $Perm.No) (< $Perm.No $k@24@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               500
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      24
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               125
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             497
;  :mk-clause               29
;  :num-allocs              4063633
;  :num-checks              131
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            141173)
(assert (<= $Perm.No $k@24@03))
(assert (<= $k@24@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@24@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               506
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               126
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             500
;  :mk-clause               29
;  :num-allocs              4063633
;  :num-checks              132
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            141706)
(push) ; 3
(assert (not (< $Perm.No $k@24@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               506
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               127
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             500
;  :mk-clause               29
;  :num-allocs              4063633
;  :num-checks              133
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            141754)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               128
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             503
;  :mk-clause               29
;  :num-allocs              4063633
;  :num-checks              134
;  :propagations            27
;  :quant-instantiations    20
;  :rlimit-count            142326)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               129
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             503
;  :mk-clause               29
;  :num-allocs              4063633
;  :num-checks              135
;  :propagations            27
;  :quant-instantiations    20
;  :rlimit-count            142374)
(declare-const $k@25@03 $Perm)
(assert ($Perm.isReadVar $k@25@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@25@03 $Perm.No) (< $Perm.No $k@25@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      26
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               130
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             507
;  :mk-clause               31
;  :num-allocs              4063633
;  :num-checks              136
;  :propagations            28
;  :quant-instantiations    20
;  :rlimit-count            142573)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      26
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               132
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             602
;  :mk-clause               33
;  :num-allocs              4203625
;  :num-checks              137
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            144505
;  :time                    0.00)
(assert (<= $Perm.No $k@25@03))
(assert (<= $k@25@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@25@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             605
;  :mk-clause               33
;  :num-allocs              4203625
;  :num-checks              138
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            145058)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               134
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             605
;  :mk-clause               33
;  :num-allocs              4203625
;  :num-checks              139
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            145106)
(push) ; 3
(assert (not (< $Perm.No $k@25@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               135
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             605
;  :mk-clause               33
;  :num-allocs              4203625
;  :num-checks              140
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            145154)
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               136
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             605
;  :mk-clause               33
;  :num-allocs              4203625
;  :num-checks              141
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            145202)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@19@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 3
(assert (not (< $Perm.No $k@20@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             608
;  :mk-clause               33
;  :num-allocs              4203625
;  :num-checks              142
;  :propagations            29
;  :quant-instantiations    21
;  :rlimit-count            145734)
(push) ; 3
(assert (not (< $Perm.No $k@22@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               138
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             608
;  :mk-clause               33
;  :num-allocs              4203625
;  :num-checks              143
;  :propagations            29
;  :quant-instantiations    21
;  :rlimit-count            145782)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))))
  diz@6@03))
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__11: Int
(declare-const sys__local__result__11@26@03 Int)
; [exec]
; var __flatten_3__12: Int
(declare-const __flatten_3__12@27@03 Int)
; [exec]
; var __flatten_5__13: Int
(declare-const __flatten_5__13@28@03 Int)
; [exec]
; var __flatten_6__14: Int
(declare-const __flatten_6__14@29@03 Int)
; [exec]
; __flatten_3__12 := ALU_get_bit_EncodedGlobalVariables_Integer_Integer(diz, globals, value, pos)
; [eval] diz != null
(declare-const $k@30@03 $Perm)
(assert ($Perm.isReadVar $k@30@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@30@03 $Perm.No) (< $Perm.No $k@30@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      28
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             612
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              144
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146009)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@13@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      28
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             612
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              145
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146020)
(assert (< $k@30@03 $k@13@03))
(assert (<= $Perm.No (- $k@13@03 $k@30@03)))
(assert (<= (- $k@13@03 $k@30@03) $Perm.Write))
(assert (implies (< $Perm.No (- $k@13@03 $k@30@03)) (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             615
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              146
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146228)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             615
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              147
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146276)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             615
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              148
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146324)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             615
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              149
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146372)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               144
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             615
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              150
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146420)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             615
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              151
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146468)
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@31@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 8 | 0 <= i@31@03 | live]
; [else-branch: 8 | !(0 <= i@31@03) | live]
(push) ; 5
; [then-branch: 8 | 0 <= i@31@03]
(assert (<= 0 i@31@03))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               146
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             616
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              152
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146569)
(pop) ; 5
(push) ; 5
; [else-branch: 8 | !(0 <= i@31@03)]
(assert (not (<= 0 i@31@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 9 | i@31@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@31@03 | live]
; [else-branch: 9 | !(i@31@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@31@03) | live]
(push) ; 5
; [then-branch: 9 | i@31@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@31@03]
(assert (and
  (<
    i@31@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  (<= 0 i@31@03)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 6
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               804
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      30
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             618
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              153
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146730
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@31@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               804
;  :arith-assert-diseq      15
;  :arith-assert-lower      47
;  :arith-assert-upper      30
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             618
;  :mk-clause               35
;  :num-allocs              4203625
;  :num-checks              154
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146739)
; [eval] -1
(push) ; 6
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@31@03] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@31@03] != -1 | live]
(push) ; 7
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@31@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@31@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 10 | First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@31@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
      i@31@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               806
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             625
;  :mk-clause               47
;  :num-allocs              4203625
;  :num-checks              155
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            147027
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@31@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               806
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             625
;  :mk-clause               47
;  :num-allocs              4203625
;  :num-checks              156
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            147036)
(push) ; 8
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@31@03] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@31@03]) | live]
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@31@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@31@03)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         4
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             629
;  :mk-clause               47
;  :num-allocs              4203625
;  :num-checks              157
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            147216)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@31@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         4
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             629
;  :mk-clause               47
;  :num-allocs              4203625
;  :num-checks              158
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            147225)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         4
;  :binary-propagations     16
;  :conflicts               150
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             629
;  :mk-clause               47
;  :num-allocs              4203625
;  :num-checks              159
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            147273)
(pop) ; 9
(push) ; 9
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:(Second:($t@12@03)))))[i@31@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
      i@31@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(i@31@03 < |First:(Second:(Second:(Second:(Second:($t@12@03)))))| && 0 <= i@31@03)]
(assert (not
  (and
    (<
      i@31@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
    (<= 0 i@31@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((i@31@03 Int)) (!
  (implies
    (and
      (<
        i@31@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
      (<= 0 i@31@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
          i@31@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@31@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@31@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@31@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      18
;  :arith-assert-lower      53
;  :arith-assert-upper      33
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               151
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             637
;  :mk-clause               59
;  :num-allocs              4203625
;  :num-checks              160
;  :propagations            37
;  :quant-instantiations    23
;  :rlimit-count            147731)
(assert (forall ((i@31@03 Int)) (!
  (implies
    (and
      (<
        i@31@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
      (<= 0 i@31@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
          i@31@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@31@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
            i@31@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    i@31@03))
  :qid |prog.l<no position>|)))
(declare-const $k@32@03 $Perm)
(assert ($Perm.isReadVar $k@32@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               152
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             642
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              161
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148308)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@32@03 $Perm.No) (< $Perm.No $k@32@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               153
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             642
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              162
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148358)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@15@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               153
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             642
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              163
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148369)
(assert (< $k@32@03 $k@15@03))
(assert (<= $Perm.No (- $k@15@03 $k@32@03)))
(assert (<= (- $k@15@03 $k@32@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@15@03 $k@32@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               154
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              164
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148577
;  :time                    0.00)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               155
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              165
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148625)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              166
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148673
;  :time                    0.00)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              167
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148721)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               158
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              168
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148769)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              169
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148817)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               160
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              170
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148865)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               161
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              171
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148913)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              172
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            148961)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               163
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              173
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149009)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              174
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149057)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               165
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              175
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149105)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               166
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              176
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149153)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               167
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              177
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149201)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               168
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              178
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149249)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               169
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              179
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149297)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               170
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              180
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149345)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               171
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              181
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149393)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               172
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              182
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149441)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               173
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              183
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149489)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              184
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149537)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               175
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              185
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149585)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              186
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149633)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               177
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              187
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149681)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              188
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149729)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               179
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              189
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149777)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               180
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              190
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149825)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               181
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             645
;  :mk-clause               61
;  :num-allocs              4203625
;  :num-checks              191
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            149873)
(declare-const $k@33@03 $Perm)
(assert ($Perm.isReadVar $k@33@03 $Perm.Write))
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               182
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             649
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              192
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150070)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@33@03 $Perm.No) (< $Perm.No $k@33@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               183
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             649
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              193
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150120)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@16@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               183
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             649
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              194
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150131)
(assert (< $k@33@03 $k@16@03))
(assert (<= $Perm.No (- $k@16@03 $k@33@03)))
(assert (<= (- $k@16@03 $k@33@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@16@03 $k@33@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               184
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              195
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150345)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               185
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              196
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150393)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               186
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              197
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150441)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               187
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              198
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150489)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               188
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              199
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150537)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              200
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150585)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              201
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150633)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              202
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150681)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              203
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150729)
(push) ; 3
(assert (not (< $Perm.No $k@16@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      20
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               193
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             652
;  :mk-clause               63
;  :num-allocs              4203625
;  :num-checks              204
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            150777)
(declare-const $k@34@03 $Perm)
(assert ($Perm.isReadVar $k@34@03 $Perm.Write))
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             656
;  :mk-clause               65
;  :num-allocs              4203625
;  :num-checks              205
;  :propagations            40
;  :quant-instantiations    23
;  :rlimit-count            150973)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@34@03 $Perm.No) (< $Perm.No $k@34@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             656
;  :mk-clause               65
;  :num-allocs              4203625
;  :num-checks              206
;  :propagations            40
;  :quant-instantiations    23
;  :rlimit-count            151023)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@17@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             656
;  :mk-clause               65
;  :num-allocs              4203625
;  :num-checks              207
;  :propagations            40
;  :quant-instantiations    23
;  :rlimit-count            151034)
(assert (< $k@34@03 $k@17@03))
(assert (<= $Perm.No (- $k@17@03 $k@34@03)))
(assert (<= (- $k@17@03 $k@34@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@17@03 $k@34@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      21
;  :arith-assert-lower      65
;  :arith-assert-upper      39
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               196
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             659
;  :mk-clause               65
;  :num-allocs              4203625
;  :num-checks              208
;  :propagations            40
;  :quant-instantiations    23
;  :rlimit-count            151254)
(push) ; 3
(assert (not (< $Perm.No $k@17@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      21
;  :arith-assert-lower      65
;  :arith-assert-upper      39
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               197
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             659
;  :mk-clause               65
;  :num-allocs              4203625
;  :num-checks              209
;  :propagations            40
;  :quant-instantiations    23
;  :rlimit-count            151302)
(declare-const $k@35@03 $Perm)
(assert ($Perm.isReadVar $k@35@03 $Perm.Write))
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               198
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             663
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              210
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            151499)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             663
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              211
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            151547)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@35@03 $Perm.No) (< $Perm.No $k@35@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               200
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             663
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              212
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            151597)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@18@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               200
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             663
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              213
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            151608)
(assert (< $k@35@03 $k@18@03))
(assert (<= $Perm.No (- $k@18@03 $k@35@03)))
(assert (<= (- $k@18@03 $k@35@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@18@03 $k@35@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      69
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               201
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             666
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              214
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            151816)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      69
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             666
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              215
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            151864)
(push) ; 3
(assert (not (< $Perm.No $k@18@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      69
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             666
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              216
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            151912)
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      69
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               204
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             666
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              217
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            151960)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 3
(assert (not (< $Perm.No $k@13@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      69
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             666
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              218
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            152008)
(push) ; 3
(assert (not (< $Perm.No $k@15@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      22
;  :arith-assert-lower      69
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               206
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             666
;  :mk-clause               67
;  :num-allocs              4203625
;  :num-checks              219
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            152056)
(declare-const sys__result@36@03 Int)
(declare-const $t@37@03 $Snap)
(assert (= $t@37@03 ($Snap.combine ($Snap.first $t@37@03) ($Snap.second $t@37@03))))
(declare-const $k@38@03 $Perm)
(assert ($Perm.isReadVar $k@38@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@38@03 $Perm.No) (< $Perm.No $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               813
;  :arith-assert-diseq      23
;  :arith-assert-lower      71
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         5
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               207
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             671
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              220
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            152342)
(declare-const $t@39@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@13@03 $k@30@03))
    (=
      $t@39@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))))
  (implies
    (< $Perm.No $k@38@03)
    (= $t@39@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@37@03))))))
(assert (<= $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03)))
(assert (<= (+ (- $k@13@03 $k@30@03) $k@38@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))
  (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second $t@37@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@37@03))
    ($Snap.second ($Snap.second $t@37@03)))))
(assert (= ($Snap.first ($Snap.second $t@37@03)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               823
;  :arith-add-rows          1
;  :arith-assert-diseq      23
;  :arith-assert-lower      72
;  :arith-assert-upper      44
;  :arith-conflicts         1
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               208
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             679
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              221
;  :propagations            42
;  :quant-instantiations    24
;  :rlimit-count            152905)
(assert (not (= $t@39@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@37@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@37@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               829
;  :arith-add-rows          2
;  :arith-assert-diseq      23
;  :arith-assert-lower      72
;  :arith-assert-upper      45
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         7
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               209
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             682
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              222
;  :propagations            42
;  :quant-instantiations    24
;  :rlimit-count            153182)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@37@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               834
;  :arith-add-rows          3
;  :arith-assert-diseq      23
;  :arith-assert-lower      72
;  :arith-assert-upper      46
;  :arith-conflicts         3
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     16
;  :conflicts               210
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             684
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              223
;  :propagations            42
;  :quant-instantiations    24
;  :rlimit-count            153419)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               840
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      72
;  :arith-assert-upper      47
;  :arith-conflicts         4
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         9
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               211
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             687
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              224
;  :propagations            42
;  :quant-instantiations    24
;  :rlimit-count            153703)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               847
;  :arith-add-rows          5
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      49
;  :arith-conflicts         5
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         10
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               212
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             694
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              225
;  :propagations            42
;  :quant-instantiations    26
;  :rlimit-count            154092)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               853
;  :arith-add-rows          6
;  :arith-assert-diseq      23
;  :arith-assert-lower      74
;  :arith-assert-upper      50
;  :arith-conflicts         6
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         11
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               213
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             697
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              226
;  :propagations            42
;  :quant-instantiations    26
;  :rlimit-count            154396)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@40@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 12 | 0 <= i@40@03 | live]
; [else-branch: 12 | !(0 <= i@40@03) | live]
(push) ; 5
; [then-branch: 12 | 0 <= i@40@03]
(assert (<= 0 i@40@03))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               861
;  :arith-add-rows          7
;  :arith-assert-diseq      23
;  :arith-assert-lower      77
;  :arith-assert-upper      52
;  :arith-conflicts         7
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               214
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             706
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              227
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            154895)
(pop) ; 5
(push) ; 5
; [else-branch: 12 | !(0 <= i@40@03)]
(assert (not (<= 0 i@40@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 13 | i@40@03 < |First:(Second:(Second:(Second:($t@37@03))))| && 0 <= i@40@03 | live]
; [else-branch: 13 | !(i@40@03 < |First:(Second:(Second:(Second:($t@37@03))))| && 0 <= i@40@03) | live]
(push) ; 5
; [then-branch: 13 | i@40@03 < |First:(Second:(Second:(Second:($t@37@03))))| && 0 <= i@40@03]
(assert (and
  (<
    i@40@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
  (<= 0 i@40@03)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               862
;  :arith-add-rows          8
;  :arith-assert-diseq      23
;  :arith-assert-lower      78
;  :arith-assert-upper      54
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         14
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               215
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             709
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              228
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            155121)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@40@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               862
;  :arith-add-rows          8
;  :arith-assert-diseq      23
;  :arith-assert-lower      78
;  :arith-assert-upper      54
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         14
;  :arith-pivots            24
;  :binary-propagations     16
;  :conflicts               215
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             709
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              229
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            155130)
; [eval] -1
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@37@03))))[i@40@03] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@37@03))))[i@40@03] != -1 | live]
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:($t@37@03))))[i@40@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
    i@40@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | First:(Second:(Second:(Second:($t@37@03))))[i@40@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
      i@40@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               862
;  :arith-add-rows          9
;  :arith-assert-diseq      23
;  :arith-assert-lower      78
;  :arith-assert-upper      55
;  :arith-conflicts         9
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         15
;  :arith-pivots            26
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             711
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              230
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            155404)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@40@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               862
;  :arith-add-rows          9
;  :arith-assert-diseq      23
;  :arith-assert-lower      78
;  :arith-assert-upper      55
;  :arith-conflicts         9
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         15
;  :arith-pivots            26
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             711
;  :mk-clause               69
;  :num-allocs              4203625
;  :num-checks              231
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            155413)
(push) ; 8
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@37@03))))[i@40@03] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@37@03))))[i@40@03]) | live]
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@37@03))))[i@40@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
    i@40@03)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               862
;  :arith-add-rows          10
;  :arith-assert-diseq      24
;  :arith-assert-lower      81
;  :arith-assert-upper      56
;  :arith-conflicts         10
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         16
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             715
;  :mk-clause               70
;  :num-allocs              4203625
;  :num-checks              232
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            155641)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@40@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               862
;  :arith-add-rows          10
;  :arith-assert-diseq      24
;  :arith-assert-lower      81
;  :arith-assert-upper      56
;  :arith-conflicts         10
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         16
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             715
;  :mk-clause               70
;  :num-allocs              4203625
;  :num-checks              233
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            155650)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               862
;  :arith-add-rows          11
;  :arith-assert-diseq      24
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         11
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         17
;  :arith-pivots            31
;  :binary-propagations     16
;  :conflicts               218
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              55
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             716
;  :mk-clause               70
;  :num-allocs              4203625
;  :num-checks              234
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            155758)
(pop) ; 9
(push) ; 9
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@37@03))))[i@40@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
      i@40@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 13 | !(i@40@03 < |First:(Second:(Second:(Second:($t@37@03))))| && 0 <= i@40@03)]
(assert (not
  (and
    (<
      i@40@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
    (<= 0 i@40@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@40@03 Int)) (!
  (implies
    (and
      (<
        i@40@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
      (<= 0 i@40@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
          i@40@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
            i@40@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
            i@40@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
    i@40@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               867
;  :arith-add-rows          12
;  :arith-assert-diseq      24
;  :arith-assert-lower      81
;  :arith-assert-upper      58
;  :arith-conflicts         12
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         18
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               219
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             719
;  :mk-clause               70
;  :num-allocs              4203625
;  :num-checks              235
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            156448)
(declare-const $k@41@03 $Perm)
(assert ($Perm.isReadVar $k@41@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@41@03 $Perm.No) (< $Perm.No $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               867
;  :arith-add-rows          12
;  :arith-assert-diseq      25
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         12
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         18
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               220
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             723
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              236
;  :propagations            43
;  :quant-instantiations    28
;  :rlimit-count            156646)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               867
;  :arith-add-rows          12
;  :arith-assert-diseq      25
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         12
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         18
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               220
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             723
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              237
;  :propagations            43
;  :quant-instantiations    28
;  :rlimit-count            156657)
(declare-const $t@42@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@15@03 $k@32@03))
    (=
      $t@42@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
  (implies
    (< $Perm.No $k@41@03)
    (=
      $t@42@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))
(assert (<= $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03)))
(assert (<= (+ (- $k@15@03 $k@32@03) $k@41@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               877
;  :arith-add-rows          13
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      61
;  :arith-conflicts         13
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         19
;  :arith-pivots            37
;  :binary-propagations     16
;  :conflicts               221
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             731
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              238
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            157279)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               877
;  :arith-add-rows          13
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      61
;  :arith-conflicts         13
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         19
;  :arith-pivots            37
;  :binary-propagations     16
;  :conflicts               221
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             731
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              239
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            157290)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               877
;  :arith-add-rows          14
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      62
;  :arith-conflicts         14
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         20
;  :arith-pivots            39
;  :binary-propagations     16
;  :conflicts               222
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             732
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              240
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            157399)
(assert (not (= $t@42@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               882
;  :arith-add-rows          15
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         21
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             734
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              241
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            157729)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               882
;  :arith-add-rows          15
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         21
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             734
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              242
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            157740)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               882
;  :arith-add-rows          16
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      64
;  :arith-conflicts         16
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         22
;  :arith-pivots            45
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             735
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              243
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            157853)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               887
;  :arith-add-rows          17
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      65
;  :arith-conflicts         17
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             737
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              244
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            158170)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               887
;  :arith-add-rows          17
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      65
;  :arith-conflicts         17
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             737
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              245
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            158181)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               887
;  :arith-add-rows          18
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      66
;  :arith-conflicts         18
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         24
;  :arith-pivots            49
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             738
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              246
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            158289)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               892
;  :arith-add-rows          19
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      67
;  :arith-conflicts         19
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         25
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               227
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             740
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              247
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            158621)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               892
;  :arith-add-rows          19
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      67
;  :arith-conflicts         19
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         25
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               227
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             740
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              248
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            158632)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               892
;  :arith-add-rows          20
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      68
;  :arith-conflicts         20
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         26
;  :arith-pivots            55
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             741
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              249
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            158745)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               897
;  :arith-add-rows          21
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      69
;  :arith-conflicts         21
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         27
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               229
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             743
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              250
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            159082)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               897
;  :arith-add-rows          21
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      69
;  :arith-conflicts         21
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         27
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               229
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             743
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              251
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            159093)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               897
;  :arith-add-rows          22
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      70
;  :arith-conflicts         22
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         28
;  :arith-pivots            59
;  :binary-propagations     16
;  :conflicts               230
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             744
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              252
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            159201)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               902
;  :arith-add-rows          23
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      71
;  :arith-conflicts         23
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         29
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               231
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             746
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              253
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            159553)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               902
;  :arith-add-rows          23
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      71
;  :arith-conflicts         23
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         29
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               231
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             746
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              254
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            159564)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               902
;  :arith-add-rows          24
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      72
;  :arith-conflicts         24
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         30
;  :arith-pivots            65
;  :binary-propagations     16
;  :conflicts               232
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             747
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              255
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            159677)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               907
;  :arith-add-rows          25
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      73
;  :arith-conflicts         25
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         31
;  :arith-pivots            67
;  :binary-propagations     16
;  :conflicts               233
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             749
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              256
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            160034)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               907
;  :arith-add-rows          25
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      73
;  :arith-conflicts         25
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         31
;  :arith-pivots            67
;  :binary-propagations     16
;  :conflicts               233
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             749
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              257
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            160045)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               907
;  :arith-add-rows          26
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      74
;  :arith-conflicts         26
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         32
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               234
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             750
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              258
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            160153)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          27
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      75
;  :arith-conflicts         27
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         33
;  :arith-pivots            72
;  :binary-propagations     16
;  :conflicts               235
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             752
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              259
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            160525)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          27
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      75
;  :arith-conflicts         27
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         33
;  :arith-pivots            72
;  :binary-propagations     16
;  :conflicts               235
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             752
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              260
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            160536)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          28
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      76
;  :arith-conflicts         28
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         34
;  :arith-pivots            75
;  :binary-propagations     16
;  :conflicts               236
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             753
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              261
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            160649)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               917
;  :arith-add-rows          29
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      77
;  :arith-conflicts         29
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         35
;  :arith-pivots            77
;  :binary-propagations     16
;  :conflicts               237
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             755
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              262
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            161026)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               917
;  :arith-add-rows          29
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      77
;  :arith-conflicts         29
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         35
;  :arith-pivots            77
;  :binary-propagations     16
;  :conflicts               237
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             755
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              263
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            161037)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               917
;  :arith-add-rows          30
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      78
;  :arith-conflicts         30
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         36
;  :arith-pivots            79
;  :binary-propagations     16
;  :conflicts               238
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             756
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              264
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            161145)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               922
;  :arith-add-rows          31
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      79
;  :arith-conflicts         31
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         37
;  :arith-pivots            82
;  :binary-propagations     16
;  :conflicts               239
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             758
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              265
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            161537)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               922
;  :arith-add-rows          31
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      79
;  :arith-conflicts         31
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         37
;  :arith-pivots            82
;  :binary-propagations     16
;  :conflicts               239
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             758
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              266
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            161548)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               922
;  :arith-add-rows          32
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      80
;  :arith-conflicts         32
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         38
;  :arith-pivots            85
;  :binary-propagations     16
;  :conflicts               240
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             759
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              267
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            161661)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               927
;  :arith-add-rows          33
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      81
;  :arith-conflicts         33
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         39
;  :arith-pivots            87
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             761
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              268
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            162058)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               927
;  :arith-add-rows          33
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      81
;  :arith-conflicts         33
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         39
;  :arith-pivots            87
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             761
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              269
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            162069)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               927
;  :arith-add-rows          34
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      82
;  :arith-conflicts         34
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         40
;  :arith-pivots            89
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             762
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              270
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            162177)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               932
;  :arith-add-rows          35
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      83
;  :arith-conflicts         35
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         41
;  :arith-pivots            92
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             764
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              271
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            162589)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               932
;  :arith-add-rows          35
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      83
;  :arith-conflicts         35
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         41
;  :arith-pivots            92
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             764
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              272
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            162600)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               932
;  :arith-add-rows          36
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      84
;  :arith-conflicts         36
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         42
;  :arith-pivots            95
;  :binary-propagations     16
;  :conflicts               244
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             765
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              273
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            162713)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               937
;  :arith-add-rows          37
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      85
;  :arith-conflicts         37
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         43
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               245
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             767
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              274
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            163130)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               937
;  :arith-add-rows          37
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      85
;  :arith-conflicts         37
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         43
;  :arith-pivots            97
;  :binary-propagations     16
;  :conflicts               245
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             767
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              275
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            163141)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               937
;  :arith-add-rows          38
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      86
;  :arith-conflicts         38
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         44
;  :arith-pivots            99
;  :binary-propagations     16
;  :conflicts               246
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             768
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              276
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            163249)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               942
;  :arith-add-rows          39
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      87
;  :arith-conflicts         39
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         45
;  :arith-pivots            102
;  :binary-propagations     16
;  :conflicts               247
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             770
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              277
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            163681)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               942
;  :arith-add-rows          39
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      87
;  :arith-conflicts         39
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         45
;  :arith-pivots            102
;  :binary-propagations     16
;  :conflicts               247
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             770
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              278
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            163692)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               942
;  :arith-add-rows          40
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      88
;  :arith-conflicts         40
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         46
;  :arith-pivots            105
;  :binary-propagations     16
;  :conflicts               248
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             771
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              279
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            163805)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               947
;  :arith-add-rows          41
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      89
;  :arith-conflicts         41
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         47
;  :arith-pivots            107
;  :binary-propagations     16
;  :conflicts               249
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             773
;  :mk-clause               72
;  :num-allocs              4203625
;  :num-checks              280
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            164242)
(declare-const $k@43@03 $Perm)
(assert ($Perm.isReadVar $k@43@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@43@03 $Perm.No) (< $Perm.No $k@43@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               947
;  :arith-add-rows          41
;  :arith-assert-diseq      26
;  :arith-assert-lower      86
;  :arith-assert-upper      90
;  :arith-conflicts         41
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         47
;  :arith-pivots            107
;  :binary-propagations     16
;  :conflicts               250
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             777
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              281
;  :propagations            44
;  :quant-instantiations    29
;  :rlimit-count            164441)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               947
;  :arith-add-rows          41
;  :arith-assert-diseq      26
;  :arith-assert-lower      86
;  :arith-assert-upper      90
;  :arith-conflicts         41
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         47
;  :arith-pivots            107
;  :binary-propagations     16
;  :conflicts               250
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             777
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              282
;  :propagations            44
;  :quant-instantiations    29
;  :rlimit-count            164452)
(declare-const $t@44@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@16@03 $k@33@03))
    (=
      $t@44@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@43@03)
    (=
      $t@44@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03)))
(assert (<= (+ (- $k@16@03 $k@33@03) $k@43@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               957
;  :arith-add-rows          43
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      92
;  :arith-conflicts         42
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         48
;  :arith-pivots            110
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             785
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              283
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            165505)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               957
;  :arith-add-rows          43
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      92
;  :arith-conflicts         42
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         48
;  :arith-pivots            110
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             785
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              284
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            165516)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               957
;  :arith-add-rows          43
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      93
;  :arith-conflicts         43
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         49
;  :arith-pivots            110
;  :binary-propagations     16
;  :conflicts               252
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             786
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              285
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            165594)
(assert (not (= $t@44@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               963
;  :arith-add-rows          44
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      94
;  :arith-conflicts         44
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         50
;  :arith-pivots            112
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             789
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              286
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            166096)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               963
;  :arith-add-rows          44
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      94
;  :arith-conflicts         44
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         50
;  :arith-pivots            112
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             789
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              287
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            166107)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               963
;  :arith-add-rows          44
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      95
;  :arith-conflicts         45
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         51
;  :arith-pivots            112
;  :binary-propagations     16
;  :conflicts               254
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             790
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              288
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            166185)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               968
;  :arith-add-rows          45
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      96
;  :arith-conflicts         46
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         52
;  :arith-pivots            115
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             792
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              289
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            166657)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               968
;  :arith-add-rows          45
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      96
;  :arith-conflicts         46
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         52
;  :arith-pivots            115
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             792
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              290
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            166668)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               968
;  :arith-add-rows          45
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      97
;  :arith-conflicts         47
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         53
;  :arith-pivots            115
;  :binary-propagations     16
;  :conflicts               256
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             793
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              291
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            166746)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               973
;  :arith-add-rows          46
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      98
;  :arith-conflicts         48
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         54
;  :arith-pivots            117
;  :binary-propagations     16
;  :conflicts               257
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             795
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              292
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            167223)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               973
;  :arith-add-rows          46
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      98
;  :arith-conflicts         48
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         54
;  :arith-pivots            117
;  :binary-propagations     16
;  :conflicts               257
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             795
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              293
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            167234)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               973
;  :arith-add-rows          46
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      99
;  :arith-conflicts         49
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         55
;  :arith-pivots            117
;  :binary-propagations     16
;  :conflicts               258
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             796
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              294
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            167312)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               978
;  :arith-add-rows          47
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      100
;  :arith-conflicts         50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         56
;  :arith-pivots            120
;  :binary-propagations     16
;  :conflicts               259
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             798
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              295
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            167804)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               978
;  :arith-add-rows          47
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      100
;  :arith-conflicts         50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         56
;  :arith-pivots            120
;  :binary-propagations     16
;  :conflicts               259
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             798
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              296
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            167815)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               978
;  :arith-add-rows          47
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      101
;  :arith-conflicts         51
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         57
;  :arith-pivots            120
;  :binary-propagations     16
;  :conflicts               260
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             799
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              297
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            167893)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               983
;  :arith-add-rows          48
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      102
;  :arith-conflicts         52
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         58
;  :arith-pivots            122
;  :binary-propagations     16
;  :conflicts               261
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             801
;  :mk-clause               74
;  :num-allocs              4203625
;  :num-checks              298
;  :propagations            44
;  :quant-instantiations    30
;  :rlimit-count            168390)
(declare-const $k@45@03 $Perm)
(assert ($Perm.isReadVar $k@45@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@45@03 $Perm.No) (< $Perm.No $k@45@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               983
;  :arith-add-rows          48
;  :arith-assert-diseq      27
;  :arith-assert-lower      89
;  :arith-assert-upper      103
;  :arith-conflicts         52
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         58
;  :arith-pivots            122
;  :binary-propagations     16
;  :conflicts               262
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             805
;  :mk-clause               76
;  :num-allocs              4203625
;  :num-checks              299
;  :propagations            45
;  :quant-instantiations    30
;  :rlimit-count            168589)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               983
;  :arith-add-rows          48
;  :arith-assert-diseq      27
;  :arith-assert-lower      89
;  :arith-assert-upper      103
;  :arith-conflicts         52
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         58
;  :arith-pivots            122
;  :binary-propagations     16
;  :conflicts               262
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             805
;  :mk-clause               76
;  :num-allocs              4203625
;  :num-checks              300
;  :propagations            45
;  :quant-instantiations    30
;  :rlimit-count            168600)
(declare-const $t@46@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@17@03 $k@34@03))
    (=
      $t@46@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@45@03)
    (=
      $t@46@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@17@03 $k@34@03) $k@45@03)))
(assert (<= (+ (- $k@17@03 $k@34@03) $k@45@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@17@03 $k@34@03) $k@45@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               993
;  :arith-add-rows          50
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      105
;  :arith-conflicts         53
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         59
;  :arith-pivots            125
;  :binary-propagations     16
;  :conflicts               263
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             813
;  :mk-clause               76
;  :num-allocs              4203625
;  :num-checks              301
;  :propagations            45
;  :quant-instantiations    31
;  :rlimit-count            169755)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               993
;  :arith-add-rows          50
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      105
;  :arith-conflicts         53
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         59
;  :arith-pivots            125
;  :binary-propagations     16
;  :conflicts               263
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             813
;  :mk-clause               76
;  :num-allocs              4203625
;  :num-checks              302
;  :propagations            45
;  :quant-instantiations    31
;  :rlimit-count            169766)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@17@03 $k@34@03) $k@45@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               993
;  :arith-add-rows          50
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      106
;  :arith-conflicts         54
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         60
;  :arith-pivots            125
;  :binary-propagations     16
;  :conflicts               264
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             814
;  :mk-clause               76
;  :num-allocs              4203625
;  :num-checks              303
;  :propagations            45
;  :quant-instantiations    31
;  :rlimit-count            169844)
(assert (not (= $t@46@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               999
;  :arith-add-rows          51
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      107
;  :arith-conflicts         55
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         61
;  :arith-pivots            127
;  :binary-propagations     16
;  :conflicts               265
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             817
;  :mk-clause               76
;  :num-allocs              4203625
;  :num-checks              304
;  :propagations            45
;  :quant-instantiations    31
;  :rlimit-count            170406)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@39@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               999
;  :arith-add-rows          51
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      107
;  :arith-conflicts         55
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         61
;  :arith-pivots            127
;  :binary-propagations     16
;  :conflicts               265
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             817
;  :mk-clause               76
;  :num-allocs              4203625
;  :num-checks              305
;  :propagations            45
;  :quant-instantiations    31
;  :rlimit-count            170417)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               999
;  :arith-add-rows          52
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      108
;  :arith-conflicts         56
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         62
;  :arith-pivots            129
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             818
;  :mk-clause               76
;  :num-allocs              4203625
;  :num-checks              306
;  :propagations            45
;  :quant-instantiations    31
;  :rlimit-count            170525)
(declare-const $k@47@03 $Perm)
(assert ($Perm.isReadVar $k@47@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@47@03 $Perm.No) (< $Perm.No $k@47@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               999
;  :arith-add-rows          52
;  :arith-assert-diseq      28
;  :arith-assert-lower      92
;  :arith-assert-upper      109
;  :arith-conflicts         56
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         62
;  :arith-pivots            129
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             822
;  :mk-clause               78
;  :num-allocs              4203625
;  :num-checks              307
;  :propagations            46
;  :quant-instantiations    31
;  :rlimit-count            170723)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               999
;  :arith-add-rows          52
;  :arith-assert-diseq      28
;  :arith-assert-lower      92
;  :arith-assert-upper      109
;  :arith-conflicts         56
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         62
;  :arith-pivots            129
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             822
;  :mk-clause               78
;  :num-allocs              4203625
;  :num-checks              308
;  :propagations            46
;  :quant-instantiations    31
;  :rlimit-count            170734)
(declare-const $t@48@03 $Ref)
(assert (and
  (implies (< $Perm.No (+ (- $k@13@03 $k@30@03) $k@38@03)) (= $t@48@03 $t@39@03))
  (implies
    (< $Perm.No $k@47@03)
    (=
      $t@48@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03)))
(assert (<= (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))
  (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-add-rows          56
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      111
;  :arith-conflicts         57
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         63
;  :arith-pivots            134
;  :binary-propagations     16
;  :conflicts               268
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             831
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              309
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            171669)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1008
;  :arith-add-rows          58
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      112
;  :arith-conflicts         58
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         64
;  :arith-pivots            137
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             832
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              310
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            171787)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1008
;  :arith-add-rows          59
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      113
;  :arith-conflicts         59
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         65
;  :arith-pivots            140
;  :binary-propagations     16
;  :conflicts               270
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             833
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              311
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            171900)
(push) ; 3
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1008
;  :arith-add-rows          59
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      113
;  :arith-conflicts         59
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         65
;  :arith-pivots            140
;  :binary-propagations     16
;  :conflicts               270
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             833
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              312
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            171911)
(push) ; 3
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1008
;  :arith-add-rows          62
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      114
;  :arith-conflicts         60
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         66
;  :arith-pivots            144
;  :binary-propagations     16
;  :conflicts               271
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             834
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              313
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            172069)
(push) ; 3
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1008
;  :arith-add-rows          63
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      115
;  :arith-conflicts         61
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         67
;  :arith-pivots            146
;  :binary-propagations     16
;  :conflicts               272
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             835
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              314
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            172188)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 3
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1010
;  :arith-add-rows          64
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      116
;  :arith-conflicts         62
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         68
;  :arith-pivots            149
;  :binary-propagations     16
;  :conflicts               273
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             837
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              315
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            172678)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1011
;  :arith-add-rows          66
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      117
;  :arith-conflicts         63
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         69
;  :arith-pivots            152
;  :binary-propagations     16
;  :conflicts               274
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             838
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              316
;  :propagations            48
;  :quant-instantiations    32
;  :rlimit-count            172796)
(push) ; 3
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1011
;  :arith-add-rows          67
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      118
;  :arith-conflicts         64
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               275
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              56
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             839
;  :mk-clause               79
;  :num-allocs              4203625
;  :num-checks              317
;  :propagations            48
;  :quant-instantiations    32
;  :rlimit-count            172904)
(assert (= $t@42@03 diz@6@03))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; diz.ALU_current_bit := __flatten_3__12
; [exec]
; diz.ALU_divisor := 1
; [exec]
; diz.ALU_i := 0
(declare-const __flatten_5__13@49@03 Int)
(declare-const __flatten_6__14@50@03 Int)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@51@03 $Snap)
(assert (= $t@51@03 ($Snap.combine ($Snap.first $t@51@03) ($Snap.second $t@51@03))))
(declare-const $k@52@03 $Perm)
(assert ($Perm.isReadVar $k@52@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@52@03 $Perm.No) (< $Perm.No $k@52@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1224
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      119
;  :arith-conflicts         64
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               277
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             893
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              319
;  :propagations            50
;  :quant-instantiations    32
;  :rlimit-count            174617)
(assert (<= $Perm.No $k@52@03))
(assert (<= $k@52@03 $Perm.Write))
(assert (implies (< $Perm.No $k@52@03) (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second $t@51@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@51@03))
    ($Snap.second ($Snap.second $t@51@03)))))
(assert (= ($Snap.first ($Snap.second $t@51@03)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1230
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      120
;  :arith-conflicts         64
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               278
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             896
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              320
;  :propagations            50
;  :quant-instantiations    32
;  :rlimit-count            174860)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@51@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@51@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1236
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      120
;  :arith-conflicts         64
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               279
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             899
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              321
;  :propagations            50
;  :quant-instantiations    33
;  :rlimit-count            175132)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@51@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1241
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      120
;  :arith-conflicts         64
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             900
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              322
;  :propagations            50
;  :quant-instantiations    33
;  :rlimit-count            175309)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1247
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      120
;  :arith-conflicts         64
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               281
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             902
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              323
;  :propagations            50
;  :quant-instantiations    33
;  :rlimit-count            175528)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1254
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      121
;  :arith-conflicts         64
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               282
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             908
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              324
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            175858)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1260
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      121
;  :arith-conflicts         64
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               283
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             910
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              325
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            176097)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
  $Snap.unit))
; [eval] (forall i__15: Int :: { diz.ALU_m.Main_process_state[i__15] } 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|)
(declare-const i__15@53@03 Int)
(push) ; 4
; [eval] 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__15
(push) ; 5
; [then-branch: 16 | 0 <= i__15@53@03 | live]
; [else-branch: 16 | !(0 <= i__15@53@03) | live]
(push) ; 6
; [then-branch: 16 | 0 <= i__15@53@03]
(assert (<= 0 i__15@53@03))
; [eval] i__15 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1268
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      100
;  :arith-assert-upper      122
;  :arith-conflicts         64
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         70
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               284
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             918
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              326
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            176536)
(pop) ; 6
(push) ; 6
; [else-branch: 16 | !(0 <= i__15@53@03)]
(assert (not (<= 0 i__15@53@03)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 17 | i__15@53@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__15@53@03 | live]
; [else-branch: 17 | !(i__15@53@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__15@53@03) | live]
(push) ; 6
; [then-branch: 17 | i__15@53@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__15@53@03]
(assert (and
  (<
    i__15@53@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (<= 0 i__15@53@03)))
; [eval] diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__15] == -1
; [eval] diz.ALU_m.Main_process_state[i__15]
(push) ; 7
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1269
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               285
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             920
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              327
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            176697)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__15@53@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1269
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               285
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             920
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              328
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            176706)
; [eval] -1
(push) ; 7
; [then-branch: 18 | First:(Second:(Second:(Second:($t@51@03))))[i__15@53@03] == -1 | live]
; [else-branch: 18 | First:(Second:(Second:(Second:($t@51@03))))[i__15@53@03] != -1 | live]
(push) ; 8
; [then-branch: 18 | First:(Second:(Second:(Second:($t@51@03))))[i__15@53@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__15@53@03)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 18 | First:(Second:(Second:(Second:($t@51@03))))[i__15@53@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__15@53@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__15]
; [eval] diz.ALU_m.Main_process_state[i__15]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1269
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               286
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             921
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              329
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            176920)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__15@53@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1269
;  :arith-add-rows          67
;  :arith-assert-diseq      29
;  :arith-assert-lower      101
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               286
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             921
;  :mk-clause               82
;  :num-allocs              4365216
;  :num-checks              330
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            176929)
(push) ; 9
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__15@53@03] | live]
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__15@53@03]) | live]
(push) ; 10
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__15@53@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__15@53@03)))
; [eval] diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__15]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1269
;  :arith-add-rows          67
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             924
;  :mk-clause               83
;  :num-allocs              4365216
;  :num-checks              331
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            177091)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__15@53@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1269
;  :arith-add-rows          67
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             924
;  :mk-clause               83
;  :num-allocs              4365216
;  :num-checks              332
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            177100)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1269
;  :arith-add-rows          67
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               288
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              76
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             924
;  :mk-clause               83
;  :num-allocs              4365216
;  :num-checks              333
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            177148)
(pop) ; 10
(push) ; 10
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__15@53@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__15@53@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 17 | !(i__15@53@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__15@53@03)]
(assert (not
  (and
    (<
      i__15@53@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    (<= 0 i__15@53@03))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__15@53@03 Int)) (!
  (implies
    (and
      (<
        i__15@53@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__15@53@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__15@53@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__15@53@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__15@53@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__15@53@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1274
;  :arith-add-rows          67
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               289
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             926
;  :mk-clause               83
;  :num-allocs              4365216
;  :num-checks              334
;  :propagations            50
;  :quant-instantiations    37
;  :rlimit-count            177773)
(declare-const $k@54@03 $Perm)
(assert ($Perm.isReadVar $k@54@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@54@03 $Perm.No) (< $Perm.No $k@54@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1274
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      124
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             930
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              335
;  :propagations            51
;  :quant-instantiations    37
;  :rlimit-count            177971)
(assert (<= $Perm.No $k@54@03))
(assert (<= $k@54@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@54@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1280
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               291
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             933
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              336
;  :propagations            51
;  :quant-instantiations    37
;  :rlimit-count            178294)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1280
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               292
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             933
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              337
;  :propagations            51
;  :quant-instantiations    37
;  :rlimit-count            178342)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               293
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             936
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              338
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            178698)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               294
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             936
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              339
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            178746)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1291
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               295
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             937
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              340
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            179003)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1291
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               296
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             937
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              341
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            179051)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1296
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               297
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             938
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              342
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            179318)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1296
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               298
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             938
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              343
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            179366)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1301
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               299
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             939
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              344
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            179643)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1301
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               300
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             939
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              345
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            179691)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1306
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               301
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             940
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              346
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            179978)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1306
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               302
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             940
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              347
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            180026)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1311
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               303
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             941
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              348
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            180323)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1311
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               304
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             941
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              349
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            180371)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               305
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             942
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              350
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            180678)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               306
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             942
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              351
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            180726)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1321
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             943
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              352
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            181043)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1321
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               308
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             943
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              353
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            181091)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1326
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               309
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             944
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              354
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            181418)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1326
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               310
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             944
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              355
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            181466)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1331
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               311
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             945
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              356
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            181803)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1331
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               312
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             945
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              357
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            181851)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1336
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               313
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             946
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              358
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            182198)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1336
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               314
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             946
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              359
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            182246)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1341
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               315
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             947
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              360
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            182603)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1341
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               316
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             947
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              361
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            182651)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1346
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               317
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             948
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              362
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            183018)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1346
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             948
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              363
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            183066)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1351
;  :arith-add-rows          67
;  :arith-assert-diseq      31
;  :arith-assert-lower      106
;  :arith-assert-upper      125
;  :arith-conflicts         64
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             949
;  :mk-clause               85
;  :num-allocs              4365216
;  :num-checks              364
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            183443)
(declare-const $k@55@03 $Perm)
(assert ($Perm.isReadVar $k@55@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@55@03 $Perm.No) (< $Perm.No $k@55@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1351
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      126
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               320
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             953
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              365
;  :propagations            52
;  :quant-instantiations    38
;  :rlimit-count            183642)
(assert (<= $Perm.No $k@55@03))
(assert (<= $k@55@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@55@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1357
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               321
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             956
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              366
;  :propagations            52
;  :quant-instantiations    38
;  :rlimit-count            184115)
(push) ; 4
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1357
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               322
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             956
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              367
;  :propagations            52
;  :quant-instantiations    38
;  :rlimit-count            184163)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1363
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               323
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             959
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              368
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            184693)
(push) ; 4
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1363
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               324
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             959
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              369
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            184741)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1368
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               325
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             960
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              370
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            185148)
(push) ; 4
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1368
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               326
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             960
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              371
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            185196)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1373
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               327
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             961
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              372
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            185613
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1373
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               328
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             961
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              373
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            185661)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1378
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               329
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             962
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              374
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            186088)
(push) ; 4
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1378
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               330
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             962
;  :mk-clause               87
;  :num-allocs              4365216
;  :num-checks              375
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            186136)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1383
;  :arith-add-rows          67
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      127
;  :arith-conflicts         64
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               331
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             963
;  :mk-clause               87
;  :num-allocs              4536068
;  :num-checks              376
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            186573)
(declare-const $k@56@03 $Perm)
(assert ($Perm.isReadVar $k@56@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@56@03 $Perm.No) (< $Perm.No $k@56@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1383
;  :arith-add-rows          67
;  :arith-assert-diseq      33
;  :arith-assert-lower      110
;  :arith-assert-upper      128
;  :arith-conflicts         64
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             967
;  :mk-clause               89
;  :num-allocs              4536068
;  :num-checks              377
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            186771)
(assert (<= $Perm.No $k@56@03))
(assert (<= $k@56@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@56@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1389
;  :arith-add-rows          67
;  :arith-assert-diseq      33
;  :arith-assert-lower      110
;  :arith-assert-upper      129
;  :arith-conflicts         64
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               333
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             970
;  :mk-clause               89
;  :num-allocs              4536068
;  :num-checks              378
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            187304)
(push) ; 4
(assert (not (< $Perm.No $k@56@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1389
;  :arith-add-rows          67
;  :arith-assert-diseq      33
;  :arith-assert-lower      110
;  :arith-assert-upper      129
;  :arith-conflicts         64
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               334
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             970
;  :mk-clause               89
;  :num-allocs              4536068
;  :num-checks              379
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            187352)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1395
;  :arith-add-rows          67
;  :arith-assert-diseq      33
;  :arith-assert-lower      110
;  :arith-assert-upper      129
;  :arith-conflicts         64
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               335
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             973
;  :mk-clause               89
;  :num-allocs              4536068
;  :num-checks              380
;  :propagations            53
;  :quant-instantiations    40
;  :rlimit-count            187924)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1395
;  :arith-add-rows          67
;  :arith-assert-diseq      33
;  :arith-assert-lower      110
;  :arith-assert-upper      129
;  :arith-conflicts         64
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               336
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             973
;  :mk-clause               89
;  :num-allocs              4536068
;  :num-checks              381
;  :propagations            53
;  :quant-instantiations    40
;  :rlimit-count            187972)
(declare-const $k@57@03 $Perm)
(assert ($Perm.isReadVar $k@57@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@57@03 $Perm.No) (< $Perm.No $k@57@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1395
;  :arith-add-rows          67
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      130
;  :arith-conflicts         64
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 233
;  :datatype-occurs-check   19
;  :datatype-splits         186
;  :decisions               228
;  :del-clause              77
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             977
;  :mk-clause               91
;  :num-allocs              4536068
;  :num-checks              382
;  :propagations            54
;  :quant-instantiations    40
;  :rlimit-count            188171)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1903
;  :arith-add-rows          67
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      130
;  :arith-conflicts         64
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               339
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              79
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1134
;  :mk-clause               93
;  :num-allocs              4709028
;  :num-checks              383
;  :propagations            56
;  :quant-instantiations    40
;  :rlimit-count            191092
;  :time                    0.00)
(assert (<= $Perm.No $k@57@03))
(assert (<= $k@57@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@57@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1909
;  :arith-add-rows          67
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      131
;  :arith-conflicts         64
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               340
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              79
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1137
;  :mk-clause               93
;  :num-allocs              4709028
;  :num-checks              384
;  :propagations            56
;  :quant-instantiations    40
;  :rlimit-count            191645)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1909
;  :arith-add-rows          67
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      131
;  :arith-conflicts         64
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               341
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              79
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1137
;  :mk-clause               93
;  :num-allocs              4709028
;  :num-checks              385
;  :propagations            56
;  :quant-instantiations    40
;  :rlimit-count            191693)
(push) ; 4
(assert (not (< $Perm.No $k@57@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1909
;  :arith-add-rows          67
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      131
;  :arith-conflicts         64
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               342
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              79
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1137
;  :mk-clause               93
;  :num-allocs              4709028
;  :num-checks              386
;  :propagations            56
;  :quant-instantiations    40
;  :rlimit-count            191741)
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1909
;  :arith-add-rows          67
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      131
;  :arith-conflicts         64
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              79
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1137
;  :mk-clause               93
;  :num-allocs              4709028
;  :num-checks              387
;  :propagations            56
;  :quant-instantiations    40
;  :rlimit-count            191789)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 4
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1914
;  :arith-add-rows          67
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      131
;  :arith-conflicts         64
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              79
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1140
;  :mk-clause               93
;  :num-allocs              4709028
;  :num-checks              388
;  :propagations            56
;  :quant-instantiations    41
;  :rlimit-count            192321)
(push) ; 4
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1914
;  :arith-add-rows          67
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      131
;  :arith-conflicts         64
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               345
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              79
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1140
;  :mk-clause               93
;  :num-allocs              4709028
;  :num-checks              389
;  :propagations            56
;  :quant-instantiations    41
;  :rlimit-count            192369
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  diz@6@03))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.ALU_i < pos
(pop) ; 4
(push) ; 4
; [eval] !(diz.ALU_i < pos)
; [eval] diz.ALU_i < pos
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@58@03 $Perm)
(assert ($Perm.isReadVar $k@58@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@58@03 $Perm.No) (< $Perm.No $k@58@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1917
;  :arith-add-rows          67
;  :arith-assert-diseq      35
;  :arith-assert-lower      114
;  :arith-assert-upper      132
;  :arith-conflicts         64
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         71
;  :arith-pivots            154
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              89
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1145
;  :mk-clause               95
;  :num-allocs              4709028
;  :num-checks              390
;  :propagations            57
;  :quant-instantiations    41
;  :rlimit-count            192722)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1918
;  :arith-add-rows          70
;  :arith-assert-diseq      35
;  :arith-assert-lower      114
;  :arith-assert-upper      133
;  :arith-conflicts         65
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         71
;  :arith-pivots            158
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1147
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              391
;  :propagations            58
;  :quant-instantiations    41
;  :rlimit-count            192878)
(assert (< $k@58@03 (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03)))
(assert (<= $Perm.No (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))
(assert (<= (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1918
;  :arith-add-rows          73
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      135
;  :arith-conflicts         66
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         72
;  :arith-pivots            160
;  :binary-propagations     16
;  :conflicts               348
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1151
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              392
;  :propagations            58
;  :quant-instantiations    41
;  :rlimit-count            193190)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= $t@48@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1920
;  :arith-add-rows          76
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      136
;  :arith-conflicts         67
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         73
;  :arith-pivots            164
;  :binary-propagations     16
;  :conflicts               349
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1152
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              393
;  :propagations            59
;  :quant-instantiations    41
;  :rlimit-count            193313)
(assert (not (= $t@48@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1920
;  :arith-add-rows          78
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      137
;  :arith-conflicts         68
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         74
;  :arith-pivots            167
;  :binary-propagations     16
;  :conflicts               350
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1154
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              394
;  :propagations            59
;  :quant-instantiations    41
;  :rlimit-count            193508)
(push) ; 4
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1921
;  :arith-add-rows          81
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      138
;  :arith-conflicts         69
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         75
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               351
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1155
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              395
;  :propagations            60
;  :quant-instantiations    41
;  :rlimit-count            193645)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1921
;  :arith-add-rows          83
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      139
;  :arith-conflicts         70
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         76
;  :arith-pivots            174
;  :binary-propagations     16
;  :conflicts               352
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1156
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              396
;  :propagations            60
;  :quant-instantiations    41
;  :rlimit-count            193785)
(push) ; 4
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1922
;  :arith-add-rows          86
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      140
;  :arith-conflicts         71
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         77
;  :arith-pivots            178
;  :binary-propagations     16
;  :conflicts               353
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1157
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              397
;  :propagations            61
;  :quant-instantiations    41
;  :rlimit-count            193922)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1922
;  :arith-add-rows          88
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      141
;  :arith-conflicts         72
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         78
;  :arith-pivots            181
;  :binary-propagations     16
;  :conflicts               354
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1158
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              398
;  :propagations            61
;  :quant-instantiations    41
;  :rlimit-count            194062)
(push) ; 4
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          91
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      142
;  :arith-conflicts         73
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         79
;  :arith-pivots            185
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1159
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              399
;  :propagations            62
;  :quant-instantiations    41
;  :rlimit-count            194199)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          93
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      143
;  :arith-conflicts         74
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         80
;  :arith-pivots            188
;  :binary-propagations     16
;  :conflicts               356
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1160
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              400
;  :propagations            62
;  :quant-instantiations    41
;  :rlimit-count            194339)
(push) ; 4
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1924
;  :arith-add-rows          96
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      144
;  :arith-conflicts         75
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         81
;  :arith-pivots            192
;  :binary-propagations     16
;  :conflicts               357
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1161
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              401
;  :propagations            63
;  :quant-instantiations    41
;  :rlimit-count            194476)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1924
;  :arith-add-rows          98
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      145
;  :arith-conflicts         76
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         82
;  :arith-pivots            195
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1162
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              402
;  :propagations            63
;  :quant-instantiations    41
;  :rlimit-count            194616)
(push) ; 4
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1925
;  :arith-add-rows          101
;  :arith-assert-diseq      35
;  :arith-assert-lower      116
;  :arith-assert-upper      146
;  :arith-conflicts         77
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         83
;  :arith-pivots            199
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1163
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              403
;  :propagations            64
;  :quant-instantiations    41
;  :rlimit-count            194753)
; [eval] (forall i__15: Int :: { diz.ALU_m.Main_process_state[i__15] } 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|)
(declare-const i__15@59@03 Int)
(push) ; 4
; [eval] 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__15
(push) ; 5
; [then-branch: 20 | 0 <= i__15@59@03 | live]
; [else-branch: 20 | !(0 <= i__15@59@03) | live]
(push) ; 6
; [then-branch: 20 | 0 <= i__15@59@03]
(assert (<= 0 i__15@59@03))
; [eval] i__15 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1925
;  :arith-add-rows          103
;  :arith-assert-diseq      35
;  :arith-assert-lower      117
;  :arith-assert-upper      147
;  :arith-conflicts         78
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         84
;  :arith-pivots            202
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1165
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              404
;  :propagations            64
;  :quant-instantiations    41
;  :rlimit-count            194945)
(push) ; 7
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1926
;  :arith-add-rows          106
;  :arith-assert-diseq      35
;  :arith-assert-lower      117
;  :arith-assert-upper      148
;  :arith-conflicts         79
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         85
;  :arith-pivots            206
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1166
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              405
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            195082)
(pop) ; 6
(push) ; 6
; [else-branch: 20 | !(0 <= i__15@59@03)]
(assert (not (<= 0 i__15@59@03)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 21 | i__15@59@03 < |First:(Second:(Second:(Second:($t@37@03))))| && 0 <= i__15@59@03 | live]
; [else-branch: 21 | !(i__15@59@03 < |First:(Second:(Second:(Second:($t@37@03))))| && 0 <= i__15@59@03) | live]
(push) ; 6
; [then-branch: 21 | i__15@59@03 < |First:(Second:(Second:(Second:($t@37@03))))| && 0 <= i__15@59@03]
(assert (and
  (<
    i__15@59@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
  (<= 0 i__15@59@03)))
; [eval] diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__15] == -1
; [eval] diz.ALU_m.Main_process_state[i__15]
(push) ; 7
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1927
;  :arith-add-rows          108
;  :arith-assert-diseq      35
;  :arith-assert-lower      118
;  :arith-assert-upper      150
;  :arith-conflicts         80
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         87
;  :arith-pivots            209
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1169
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              406
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            195335)
(push) ; 7
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1928
;  :arith-add-rows          111
;  :arith-assert-diseq      35
;  :arith-assert-lower      118
;  :arith-assert-upper      151
;  :arith-conflicts         81
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         88
;  :arith-pivots            213
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1170
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              407
;  :propagations            66
;  :quant-instantiations    41
;  :rlimit-count            195472)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__15@59@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1928
;  :arith-add-rows          111
;  :arith-assert-diseq      35
;  :arith-assert-lower      118
;  :arith-assert-upper      151
;  :arith-conflicts         81
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         88
;  :arith-pivots            213
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1170
;  :mk-clause               97
;  :num-allocs              4709028
;  :num-checks              408
;  :propagations            66
;  :quant-instantiations    41
;  :rlimit-count            195481)
; [eval] -1
(push) ; 7
; [then-branch: 22 | First:(Second:(Second:(Second:($t@37@03))))[i__15@59@03] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@37@03))))[i__15@59@03] != -1 | live]
(push) ; 8
; [then-branch: 22 | First:(Second:(Second:(Second:($t@37@03))))[i__15@59@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
    i__15@59@03)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 22 | First:(Second:(Second:(Second:($t@37@03))))[i__15@59@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
      i__15@59@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__15]
; [eval] diz.ALU_m.Main_process_state[i__15]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1930
;  :arith-add-rows          113
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      153
;  :arith-conflicts         82
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         89
;  :arith-pivots            216
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1178
;  :mk-clause               109
;  :num-allocs              4709028
;  :num-checks              409
;  :propagations            71
;  :quant-instantiations    42
;  :rlimit-count            195843)
(push) ; 9
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1931
;  :arith-add-rows          116
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      154
;  :arith-conflicts         83
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         90
;  :arith-pivots            220
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1179
;  :mk-clause               109
;  :num-allocs              4709028
;  :num-checks              410
;  :propagations            72
;  :quant-instantiations    42
;  :rlimit-count            195980)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__15@59@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1931
;  :arith-add-rows          116
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      154
;  :arith-conflicts         83
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         90
;  :arith-pivots            220
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1179
;  :mk-clause               109
;  :num-allocs              4709028
;  :num-checks              411
;  :propagations            72
;  :quant-instantiations    42
;  :rlimit-count            195989)
(push) ; 9
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@37@03))))[i__15@59@03] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@37@03))))[i__15@59@03]) | live]
(push) ; 10
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@37@03))))[i__15@59@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
    i__15@59@03)))
; [eval] diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__15]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1933
;  :arith-add-rows          118
;  :arith-assert-diseq      37
;  :arith-assert-lower      123
;  :arith-assert-upper      156
;  :arith-conflicts         84
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         92
;  :arith-pivots            223
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1184
;  :mk-clause               109
;  :num-allocs              4709028
;  :num-checks              412
;  :propagations            72
;  :quant-instantiations    42
;  :rlimit-count            196251)
(push) ; 11
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1934
;  :arith-add-rows          121
;  :arith-assert-diseq      37
;  :arith-assert-lower      123
;  :arith-assert-upper      157
;  :arith-conflicts         85
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         93
;  :arith-pivots            227
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1185
;  :mk-clause               109
;  :num-allocs              4709028
;  :num-checks              413
;  :propagations            73
;  :quant-instantiations    42
;  :rlimit-count            196388)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__15@59@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1934
;  :arith-add-rows          121
;  :arith-assert-diseq      37
;  :arith-assert-lower      123
;  :arith-assert-upper      157
;  :arith-conflicts         85
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         93
;  :arith-pivots            227
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1185
;  :mk-clause               109
;  :num-allocs              4709028
;  :num-checks              414
;  :propagations            73
;  :quant-instantiations    42
;  :rlimit-count            196397)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1934
;  :arith-add-rows          123
;  :arith-assert-diseq      37
;  :arith-assert-lower      123
;  :arith-assert-upper      158
;  :arith-conflicts         86
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         94
;  :arith-pivots            230
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1186
;  :mk-clause               109
;  :num-allocs              4709028
;  :num-checks              415
;  :propagations            73
;  :quant-instantiations    42
;  :rlimit-count            196537)
(push) ; 11
(assert (not (= $t@39@03 $t@48@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1935
;  :arith-add-rows          126
;  :arith-assert-diseq      37
;  :arith-assert-lower      123
;  :arith-assert-upper      159
;  :arith-conflicts         87
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         95
;  :arith-pivots            234
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              91
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1187
;  :mk-clause               109
;  :num-allocs              4709028
;  :num-checks              416
;  :propagations            74
;  :quant-instantiations    42
;  :rlimit-count            196674)
(pop) ; 10
(push) ; 10
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@37@03))))[i__15@59@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
      i__15@59@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 21 | !(i__15@59@03 < |First:(Second:(Second:(Second:($t@37@03))))| && 0 <= i__15@59@03)]
(assert (not
  (and
    (<
      i__15@59@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
    (<= 0 i__15@59@03))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__15@59@03 Int)) (!
  (implies
    (and
      (<
        i__15@59@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
      (<= 0 i__15@59@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
          i__15@59@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
            i__15@59@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
            i__15@59@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
    i__15@59@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1935
;  :arith-add-rows          126
;  :arith-assert-diseq      38
;  :arith-assert-lower      124
;  :arith-assert-upper      160
;  :arith-conflicts         87
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         96
;  :arith-pivots            234
;  :binary-propagations     16
;  :conflicts               370
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              115
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1195
;  :mk-clause               121
;  :num-allocs              4709028
;  :num-checks              417
;  :propagations            76
;  :quant-instantiations    43
;  :rlimit-count            197120)
(assert (forall ((i__15@59@03 Int)) (!
  (implies
    (and
      (<
        i__15@59@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))
      (<= 0 i__15@59@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
          i__15@59@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
            i__15@59@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
            i__15@59@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@03)))))
    i__15@59@03))
  :qid |prog.l<no position>|)))
(declare-const $k@60@03 $Perm)
(assert ($Perm.isReadVar $k@60@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1935
;  :arith-add-rows          128
;  :arith-assert-diseq      39
;  :arith-assert-lower      126
;  :arith-assert-upper      162
;  :arith-conflicts         88
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         97
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               371
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              115
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1201
;  :mk-clause               123
;  :num-allocs              4709028
;  :num-checks              418
;  :propagations            77
;  :quant-instantiations    43
;  :rlimit-count            197771)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@60@03 $Perm.No) (< $Perm.No $k@60@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1935
;  :arith-add-rows          128
;  :arith-assert-diseq      39
;  :arith-assert-lower      126
;  :arith-assert-upper      162
;  :arith-conflicts         88
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         97
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               372
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              115
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1201
;  :mk-clause               123
;  :num-allocs              4709028
;  :num-checks              419
;  :propagations            77
;  :quant-instantiations    43
;  :rlimit-count            197821)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1936
;  :arith-add-rows          131
;  :arith-assert-diseq      39
;  :arith-assert-lower      126
;  :arith-assert-upper      163
;  :arith-conflicts         89
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         98
;  :arith-pivots            241
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              115
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1202
;  :mk-clause               123
;  :num-allocs              4709028
;  :num-checks              420
;  :propagations            78
;  :quant-instantiations    43
;  :rlimit-count            197958)
(push) ; 4
(assert (not (not (= (+ (- $k@15@03 $k@32@03) $k@41@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1937
;  :arith-add-rows          132
;  :arith-assert-diseq      39
;  :arith-assert-lower      126
;  :arith-assert-upper      164
;  :arith-conflicts         90
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         98
;  :arith-pivots            244
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1204
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              421
;  :propagations            79
;  :quant-instantiations    43
;  :rlimit-count            198071)
(assert (< $k@60@03 (+ (- $k@15@03 $k@32@03) $k@41@03)))
(assert (<= $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03)))
(assert (<= (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1937
;  :arith-add-rows          136
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      166
;  :arith-conflicts         91
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         99
;  :arith-pivots            247
;  :binary-propagations     16
;  :conflicts               375
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1208
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              422
;  :propagations            79
;  :quant-instantiations    43
;  :rlimit-count            198399)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1938
;  :arith-add-rows          139
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      167
;  :arith-conflicts         92
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         100
;  :arith-pivots            251
;  :binary-propagations     16
;  :conflicts               376
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1209
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              423
;  :propagations            80
;  :quant-instantiations    43
;  :rlimit-count            198536)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1938
;  :arith-add-rows          140
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      168
;  :arith-conflicts         93
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         101
;  :arith-pivots            253
;  :binary-propagations     16
;  :conflicts               377
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1210
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              424
;  :propagations            80
;  :quant-instantiations    43
;  :rlimit-count            198645)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1938
;  :arith-add-rows          142
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      169
;  :arith-conflicts         94
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         102
;  :arith-pivots            256
;  :binary-propagations     16
;  :conflicts               378
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1211
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              425
;  :propagations            80
;  :quant-instantiations    43
;  :rlimit-count            198785)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1939
;  :arith-add-rows          145
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      170
;  :arith-conflicts         95
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         103
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1212
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              426
;  :propagations            81
;  :quant-instantiations    43
;  :rlimit-count            198922)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1939
;  :arith-add-rows          146
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      171
;  :arith-conflicts         96
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         104
;  :arith-pivots            263
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1213
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              427
;  :propagations            81
;  :quant-instantiations    43
;  :rlimit-count            199036)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1939
;  :arith-add-rows          148
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      172
;  :arith-conflicts         97
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         105
;  :arith-pivots            266
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1214
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              428
;  :propagations            81
;  :quant-instantiations    43
;  :rlimit-count            199176)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1940
;  :arith-add-rows          151
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      173
;  :arith-conflicts         98
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         106
;  :arith-pivots            270
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1215
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              429
;  :propagations            82
;  :quant-instantiations    43
;  :rlimit-count            199313)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1940
;  :arith-add-rows          152
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      174
;  :arith-conflicts         99
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         107
;  :arith-pivots            272
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1216
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              430
;  :propagations            82
;  :quant-instantiations    43
;  :rlimit-count            199422)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1940
;  :arith-add-rows          154
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      175
;  :arith-conflicts         100
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         108
;  :arith-pivots            275
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1217
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              431
;  :propagations            82
;  :quant-instantiations    43
;  :rlimit-count            199562)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1941
;  :arith-add-rows          157
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      176
;  :arith-conflicts         101
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         109
;  :arith-pivots            279
;  :binary-propagations     16
;  :conflicts               385
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1218
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              432
;  :propagations            83
;  :quant-instantiations    43
;  :rlimit-count            199699)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1941
;  :arith-add-rows          158
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      177
;  :arith-conflicts         102
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         110
;  :arith-pivots            282
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1219
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              433
;  :propagations            83
;  :quant-instantiations    43
;  :rlimit-count            199813)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1941
;  :arith-add-rows          160
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      178
;  :arith-conflicts         103
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         111
;  :arith-pivots            285
;  :binary-propagations     16
;  :conflicts               387
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1220
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              434
;  :propagations            83
;  :quant-instantiations    43
;  :rlimit-count            199953)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1942
;  :arith-add-rows          163
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      179
;  :arith-conflicts         104
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         112
;  :arith-pivots            289
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1221
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              435
;  :propagations            84
;  :quant-instantiations    43
;  :rlimit-count            200090)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1942
;  :arith-add-rows          164
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      180
;  :arith-conflicts         105
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         113
;  :arith-pivots            291
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1222
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              436
;  :propagations            84
;  :quant-instantiations    43
;  :rlimit-count            200199)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1942
;  :arith-add-rows          166
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      181
;  :arith-conflicts         106
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         114
;  :arith-pivots            294
;  :binary-propagations     16
;  :conflicts               390
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1223
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              437
;  :propagations            84
;  :quant-instantiations    43
;  :rlimit-count            200339)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1943
;  :arith-add-rows          169
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      182
;  :arith-conflicts         107
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         115
;  :arith-pivots            298
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1224
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              438
;  :propagations            85
;  :quant-instantiations    43
;  :rlimit-count            200476)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1943
;  :arith-add-rows          170
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      183
;  :arith-conflicts         108
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         116
;  :arith-pivots            301
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1225
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              439
;  :propagations            85
;  :quant-instantiations    43
;  :rlimit-count            200590)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1943
;  :arith-add-rows          172
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      184
;  :arith-conflicts         109
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         117
;  :arith-pivots            304
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1226
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              440
;  :propagations            85
;  :quant-instantiations    43
;  :rlimit-count            200730)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1944
;  :arith-add-rows          175
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      185
;  :arith-conflicts         110
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         118
;  :arith-pivots            308
;  :binary-propagations     16
;  :conflicts               394
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1227
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              441
;  :propagations            86
;  :quant-instantiations    43
;  :rlimit-count            200867)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1944
;  :arith-add-rows          176
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      186
;  :arith-conflicts         111
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         119
;  :arith-pivots            310
;  :binary-propagations     16
;  :conflicts               395
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1228
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              442
;  :propagations            86
;  :quant-instantiations    43
;  :rlimit-count            200976)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1944
;  :arith-add-rows          178
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      187
;  :arith-conflicts         112
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         120
;  :arith-pivots            313
;  :binary-propagations     16
;  :conflicts               396
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1229
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              443
;  :propagations            86
;  :quant-instantiations    43
;  :rlimit-count            201116
;  :time                    0.00)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1945
;  :arith-add-rows          181
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      188
;  :arith-conflicts         113
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         121
;  :arith-pivots            317
;  :binary-propagations     16
;  :conflicts               397
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1230
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              444
;  :propagations            87
;  :quant-instantiations    43
;  :rlimit-count            201253)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1945
;  :arith-add-rows          182
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      189
;  :arith-conflicts         114
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         122
;  :arith-pivots            320
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1231
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              445
;  :propagations            87
;  :quant-instantiations    43
;  :rlimit-count            201367)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1945
;  :arith-add-rows          184
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      190
;  :arith-conflicts         115
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         123
;  :arith-pivots            323
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1232
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              446
;  :propagations            87
;  :quant-instantiations    43
;  :rlimit-count            201507)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1946
;  :arith-add-rows          187
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      191
;  :arith-conflicts         116
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         124
;  :arith-pivots            327
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1233
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              447
;  :propagations            88
;  :quant-instantiations    43
;  :rlimit-count            201644)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1946
;  :arith-add-rows          188
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      192
;  :arith-conflicts         117
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         125
;  :arith-pivots            329
;  :binary-propagations     16
;  :conflicts               401
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1234
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              448
;  :propagations            88
;  :quant-instantiations    43
;  :rlimit-count            201753)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1946
;  :arith-add-rows          190
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      193
;  :arith-conflicts         118
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         126
;  :arith-pivots            332
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1235
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              449
;  :propagations            88
;  :quant-instantiations    43
;  :rlimit-count            201893)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1947
;  :arith-add-rows          193
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      194
;  :arith-conflicts         119
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         127
;  :arith-pivots            336
;  :binary-propagations     16
;  :conflicts               403
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1236
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              450
;  :propagations            89
;  :quant-instantiations    43
;  :rlimit-count            202030)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1947
;  :arith-add-rows          194
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      195
;  :arith-conflicts         120
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         128
;  :arith-pivots            339
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1237
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              451
;  :propagations            89
;  :quant-instantiations    43
;  :rlimit-count            202144)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1947
;  :arith-add-rows          196
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      196
;  :arith-conflicts         121
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         129
;  :arith-pivots            342
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1238
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              452
;  :propagations            89
;  :quant-instantiations    43
;  :rlimit-count            202284)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1948
;  :arith-add-rows          199
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      197
;  :arith-conflicts         122
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         130
;  :arith-pivots            346
;  :binary-propagations     16
;  :conflicts               406
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1239
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              453
;  :propagations            90
;  :quant-instantiations    43
;  :rlimit-count            202421)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1948
;  :arith-add-rows          200
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      198
;  :arith-conflicts         123
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         131
;  :arith-pivots            348
;  :binary-propagations     16
;  :conflicts               407
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1240
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              454
;  :propagations            90
;  :quant-instantiations    43
;  :rlimit-count            202530)
(push) ; 4
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1948
;  :arith-add-rows          200
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      198
;  :arith-conflicts         123
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         131
;  :arith-pivots            348
;  :binary-propagations     16
;  :conflicts               407
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1240
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              455
;  :propagations            90
;  :quant-instantiations    43
;  :rlimit-count            202541)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1948
;  :arith-add-rows          202
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      199
;  :arith-conflicts         124
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         132
;  :arith-pivots            351
;  :binary-propagations     16
;  :conflicts               408
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1241
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              456
;  :propagations            90
;  :quant-instantiations    43
;  :rlimit-count            202681)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1949
;  :arith-add-rows          205
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      200
;  :arith-conflicts         125
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         133
;  :arith-pivots            355
;  :binary-propagations     16
;  :conflicts               409
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1242
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              457
;  :propagations            91
;  :quant-instantiations    43
;  :rlimit-count            202818)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1949
;  :arith-add-rows          206
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      201
;  :arith-conflicts         126
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         134
;  :arith-pivots            358
;  :binary-propagations     16
;  :conflicts               410
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1243
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              458
;  :propagations            91
;  :quant-instantiations    43
;  :rlimit-count            202932)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1949
;  :arith-add-rows          208
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      202
;  :arith-conflicts         127
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         135
;  :arith-pivots            361
;  :binary-propagations     16
;  :conflicts               411
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1244
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              459
;  :propagations            91
;  :quant-instantiations    43
;  :rlimit-count            203072)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1950
;  :arith-add-rows          211
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      203
;  :arith-conflicts         128
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         136
;  :arith-pivots            365
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1245
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              460
;  :propagations            92
;  :quant-instantiations    43
;  :rlimit-count            203209)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1950
;  :arith-add-rows          212
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      204
;  :arith-conflicts         129
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         137
;  :arith-pivots            367
;  :binary-propagations     16
;  :conflicts               413
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1246
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              461
;  :propagations            92
;  :quant-instantiations    43
;  :rlimit-count            203318)
(push) ; 4
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1950
;  :arith-add-rows          212
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      204
;  :arith-conflicts         129
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         137
;  :arith-pivots            367
;  :binary-propagations     16
;  :conflicts               413
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1246
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              462
;  :propagations            92
;  :quant-instantiations    43
;  :rlimit-count            203329)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1950
;  :arith-add-rows          214
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      205
;  :arith-conflicts         130
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         138
;  :arith-pivots            370
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1247
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              463
;  :propagations            92
;  :quant-instantiations    43
;  :rlimit-count            203469)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1951
;  :arith-add-rows          217
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      206
;  :arith-conflicts         131
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         139
;  :arith-pivots            374
;  :binary-propagations     16
;  :conflicts               415
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1248
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              464
;  :propagations            93
;  :quant-instantiations    43
;  :rlimit-count            203606)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1951
;  :arith-add-rows          218
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      207
;  :arith-conflicts         132
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         140
;  :arith-pivots            377
;  :binary-propagations     16
;  :conflicts               416
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1249
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              465
;  :propagations            93
;  :quant-instantiations    43
;  :rlimit-count            203720)
(push) ; 4
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1951
;  :arith-add-rows          218
;  :arith-assert-diseq      39
;  :arith-assert-lower      128
;  :arith-assert-upper      207
;  :arith-conflicts         132
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         140
;  :arith-pivots            377
;  :binary-propagations     16
;  :conflicts               416
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1249
;  :mk-clause               125
;  :num-allocs              4709028
;  :num-checks              466
;  :propagations            93
;  :quant-instantiations    43
;  :rlimit-count            203731)
(declare-const $k@61@03 $Perm)
(assert ($Perm.isReadVar $k@61@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1951
;  :arith-add-rows          220
;  :arith-assert-diseq      40
;  :arith-assert-lower      130
;  :arith-assert-upper      209
;  :arith-conflicts         133
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         141
;  :arith-pivots            380
;  :binary-propagations     16
;  :conflicts               417
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1254
;  :mk-clause               127
;  :num-allocs              4709028
;  :num-checks              467
;  :propagations            94
;  :quant-instantiations    43
;  :rlimit-count            204020)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@61@03 $Perm.No) (< $Perm.No $k@61@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1951
;  :arith-add-rows          220
;  :arith-assert-diseq      40
;  :arith-assert-lower      130
;  :arith-assert-upper      209
;  :arith-conflicts         133
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         141
;  :arith-pivots            380
;  :binary-propagations     16
;  :conflicts               418
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1254
;  :mk-clause               127
;  :num-allocs              4709028
;  :num-checks              468
;  :propagations            94
;  :quant-instantiations    43
;  :rlimit-count            204070)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1952
;  :arith-add-rows          223
;  :arith-assert-diseq      40
;  :arith-assert-lower      130
;  :arith-assert-upper      210
;  :arith-conflicts         134
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         142
;  :arith-pivots            384
;  :binary-propagations     16
;  :conflicts               419
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              117
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1255
;  :mk-clause               127
;  :num-allocs              4709028
;  :num-checks              469
;  :propagations            95
;  :quant-instantiations    43
;  :rlimit-count            204207)
(push) ; 4
(assert (not (not (= (+ (- $k@16@03 $k@33@03) $k@43@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1953
;  :arith-add-rows          223
;  :arith-assert-diseq      40
;  :arith-assert-lower      130
;  :arith-assert-upper      211
;  :arith-conflicts         135
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         142
;  :arith-pivots            384
;  :binary-propagations     16
;  :conflicts               420
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1257
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              470
;  :propagations            96
;  :quant-instantiations    43
;  :rlimit-count            204285)
(assert (< $k@61@03 (+ (- $k@16@03 $k@33@03) $k@43@03)))
(assert (<= $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03)))
(assert (<= (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1953
;  :arith-add-rows          226
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      213
;  :arith-conflicts         136
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         143
;  :arith-pivots            387
;  :binary-propagations     16
;  :conflicts               421
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1261
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              471
;  :propagations            96
;  :quant-instantiations    43
;  :rlimit-count            204612)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1954
;  :arith-add-rows          229
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      214
;  :arith-conflicts         137
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         144
;  :arith-pivots            391
;  :binary-propagations     16
;  :conflicts               422
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1262
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              472
;  :propagations            97
;  :quant-instantiations    43
;  :rlimit-count            204749)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1954
;  :arith-add-rows          229
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      215
;  :arith-conflicts         138
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         145
;  :arith-pivots            391
;  :binary-propagations     16
;  :conflicts               423
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1263
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              473
;  :propagations            97
;  :quant-instantiations    43
;  :rlimit-count            204827)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1954
;  :arith-add-rows          231
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      216
;  :arith-conflicts         139
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         146
;  :arith-pivots            394
;  :binary-propagations     16
;  :conflicts               424
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1264
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              474
;  :propagations            97
;  :quant-instantiations    43
;  :rlimit-count            204967)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1955
;  :arith-add-rows          234
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      217
;  :arith-conflicts         140
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         147
;  :arith-pivots            398
;  :binary-propagations     16
;  :conflicts               425
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1265
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              475
;  :propagations            98
;  :quant-instantiations    43
;  :rlimit-count            205104)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1955
;  :arith-add-rows          234
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      218
;  :arith-conflicts         141
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         148
;  :arith-pivots            398
;  :binary-propagations     16
;  :conflicts               426
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1266
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              476
;  :propagations            98
;  :quant-instantiations    43
;  :rlimit-count            205182)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1955
;  :arith-add-rows          236
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      219
;  :arith-conflicts         142
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         149
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               427
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1267
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              477
;  :propagations            98
;  :quant-instantiations    43
;  :rlimit-count            205322)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1956
;  :arith-add-rows          239
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      220
;  :arith-conflicts         143
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         150
;  :arith-pivots            405
;  :binary-propagations     16
;  :conflicts               428
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1268
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              478
;  :propagations            99
;  :quant-instantiations    43
;  :rlimit-count            205459)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1956
;  :arith-add-rows          239
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      221
;  :arith-conflicts         144
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         151
;  :arith-pivots            405
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1269
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              479
;  :propagations            99
;  :quant-instantiations    43
;  :rlimit-count            205537)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1956
;  :arith-add-rows          241
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      222
;  :arith-conflicts         145
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         152
;  :arith-pivots            408
;  :binary-propagations     16
;  :conflicts               430
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1270
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              480
;  :propagations            99
;  :quant-instantiations    43
;  :rlimit-count            205677)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1957
;  :arith-add-rows          244
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      223
;  :arith-conflicts         146
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         153
;  :arith-pivots            412
;  :binary-propagations     16
;  :conflicts               431
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1271
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              481
;  :propagations            100
;  :quant-instantiations    43
;  :rlimit-count            205814)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1957
;  :arith-add-rows          244
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      224
;  :arith-conflicts         147
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         154
;  :arith-pivots            412
;  :binary-propagations     16
;  :conflicts               432
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1272
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              482
;  :propagations            100
;  :quant-instantiations    43
;  :rlimit-count            205892)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1957
;  :arith-add-rows          246
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      225
;  :arith-conflicts         148
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         155
;  :arith-pivots            415
;  :binary-propagations     16
;  :conflicts               433
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1273
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              483
;  :propagations            100
;  :quant-instantiations    43
;  :rlimit-count            206032)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1958
;  :arith-add-rows          249
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      226
;  :arith-conflicts         149
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         156
;  :arith-pivots            419
;  :binary-propagations     16
;  :conflicts               434
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1274
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              484
;  :propagations            101
;  :quant-instantiations    43
;  :rlimit-count            206169)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@16@03 $k@33@03) $k@43@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1958
;  :arith-add-rows          249
;  :arith-assert-diseq      40
;  :arith-assert-lower      132
;  :arith-assert-upper      227
;  :arith-conflicts         150
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         157
;  :arith-pivots            419
;  :binary-propagations     16
;  :conflicts               435
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1275
;  :mk-clause               129
;  :num-allocs              4709028
;  :num-checks              485
;  :propagations            101
;  :quant-instantiations    43
;  :rlimit-count            206247)
(declare-const $k@62@03 $Perm)
(assert ($Perm.isReadVar $k@62@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1958
;  :arith-add-rows          251
;  :arith-assert-diseq      41
;  :arith-assert-lower      134
;  :arith-assert-upper      229
;  :arith-conflicts         151
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         158
;  :arith-pivots            422
;  :binary-propagations     16
;  :conflicts               436
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1280
;  :mk-clause               131
;  :num-allocs              4709028
;  :num-checks              486
;  :propagations            102
;  :quant-instantiations    43
;  :rlimit-count            206535)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@62@03 $Perm.No) (< $Perm.No $k@62@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1958
;  :arith-add-rows          251
;  :arith-assert-diseq      41
;  :arith-assert-lower      134
;  :arith-assert-upper      229
;  :arith-conflicts         151
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         158
;  :arith-pivots            422
;  :binary-propagations     16
;  :conflicts               437
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1280
;  :mk-clause               131
;  :num-allocs              4709028
;  :num-checks              487
;  :propagations            102
;  :quant-instantiations    43
;  :rlimit-count            206585)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1959
;  :arith-add-rows          254
;  :arith-assert-diseq      41
;  :arith-assert-lower      134
;  :arith-assert-upper      230
;  :arith-conflicts         152
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         159
;  :arith-pivots            426
;  :binary-propagations     16
;  :conflicts               438
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              119
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1281
;  :mk-clause               131
;  :num-allocs              4709028
;  :num-checks              488
;  :propagations            103
;  :quant-instantiations    43
;  :rlimit-count            206722)
(push) ; 4
(assert (not (not (= (+ (- $k@17@03 $k@34@03) $k@45@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1960
;  :arith-add-rows          254
;  :arith-assert-diseq      41
;  :arith-assert-lower      134
;  :arith-assert-upper      231
;  :arith-conflicts         153
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         159
;  :arith-pivots            426
;  :binary-propagations     16
;  :conflicts               439
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1283
;  :mk-clause               133
;  :num-allocs              4709028
;  :num-checks              489
;  :propagations            104
;  :quant-instantiations    43
;  :rlimit-count            206800)
(assert (< $k@62@03 (+ (- $k@17@03 $k@34@03) $k@45@03)))
(assert (<= $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)))
(assert (<= (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1960
;  :arith-add-rows          257
;  :arith-assert-diseq      41
;  :arith-assert-lower      136
;  :arith-assert-upper      233
;  :arith-conflicts         154
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         160
;  :arith-pivots            430
;  :binary-propagations     16
;  :conflicts               440
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1287
;  :mk-clause               133
;  :num-allocs              4709028
;  :num-checks              490
;  :propagations            104
;  :quant-instantiations    43
;  :rlimit-count            207134)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1961
;  :arith-add-rows          260
;  :arith-assert-diseq      41
;  :arith-assert-lower      136
;  :arith-assert-upper      234
;  :arith-conflicts         155
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         161
;  :arith-pivots            434
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1288
;  :mk-clause               133
;  :num-allocs              4709028
;  :num-checks              491
;  :propagations            105
;  :quant-instantiations    43
;  :rlimit-count            207271)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@03 $k@34@03) $k@45@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1961
;  :arith-add-rows          260
;  :arith-assert-diseq      41
;  :arith-assert-lower      136
;  :arith-assert-upper      235
;  :arith-conflicts         156
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         162
;  :arith-pivots            434
;  :binary-propagations     16
;  :conflicts               442
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1289
;  :mk-clause               133
;  :num-allocs              4709028
;  :num-checks              492
;  :propagations            105
;  :quant-instantiations    43
;  :rlimit-count            207349)
(declare-const $k@63@03 $Perm)
(assert ($Perm.isReadVar $k@63@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1961
;  :arith-add-rows          262
;  :arith-assert-diseq      42
;  :arith-assert-lower      138
;  :arith-assert-upper      237
;  :arith-conflicts         157
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         163
;  :arith-pivots            437
;  :binary-propagations     16
;  :conflicts               443
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1294
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              493
;  :propagations            106
;  :quant-instantiations    43
;  :rlimit-count            207638)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1962
;  :arith-add-rows          265
;  :arith-assert-diseq      42
;  :arith-assert-lower      138
;  :arith-assert-upper      238
;  :arith-conflicts         158
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         164
;  :arith-pivots            441
;  :binary-propagations     16
;  :conflicts               444
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1295
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              494
;  :propagations            107
;  :quant-instantiations    43
;  :rlimit-count            207775)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1962
;  :arith-add-rows          266
;  :arith-assert-diseq      42
;  :arith-assert-lower      138
;  :arith-assert-upper      239
;  :arith-conflicts         159
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         165
;  :arith-pivots            443
;  :binary-propagations     16
;  :conflicts               445
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1296
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              495
;  :propagations            107
;  :quant-instantiations    43
;  :rlimit-count            207884)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@63@03 $Perm.No) (< $Perm.No $k@63@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1962
;  :arith-add-rows          266
;  :arith-assert-diseq      42
;  :arith-assert-lower      138
;  :arith-assert-upper      239
;  :arith-conflicts         159
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         165
;  :arith-pivots            443
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1296
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              496
;  :propagations            107
;  :quant-instantiations    43
;  :rlimit-count            207934)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1962
;  :arith-add-rows          266
;  :arith-assert-diseq      42
;  :arith-assert-lower      138
;  :arith-assert-upper      239
;  :arith-conflicts         159
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         165
;  :arith-pivots            443
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1296
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              497
;  :propagations            107
;  :quant-instantiations    43
;  :rlimit-count            207945)
(push) ; 4
(assert (not (not (= (- $k@18@03 $k@35@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1962
;  :arith-add-rows          266
;  :arith-assert-diseq      42
;  :arith-assert-lower      138
;  :arith-assert-upper      239
;  :arith-conflicts         159
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         165
;  :arith-pivots            443
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1297
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              498
;  :propagations            107
;  :quant-instantiations    43
;  :rlimit-count            208013)
(assert (< $k@63@03 (- $k@18@03 $k@35@03)))
(assert (<= $Perm.No (- (- $k@18@03 $k@35@03) $k@63@03)))
(assert (<= (- (- $k@18@03 $k@35@03) $k@63@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@18@03 $k@35@03) $k@63@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1962
;  :arith-add-rows          268
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      241
;  :arith-conflicts         160
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         166
;  :arith-pivots            446
;  :binary-propagations     16
;  :conflicts               448
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1301
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              499
;  :propagations            107
;  :quant-instantiations    43
;  :rlimit-count            208337)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1963
;  :arith-add-rows          271
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      242
;  :arith-conflicts         161
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         167
;  :arith-pivots            450
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1302
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              500
;  :propagations            108
;  :quant-instantiations    43
;  :rlimit-count            208474)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1963
;  :arith-add-rows          272
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      243
;  :arith-conflicts         162
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         168
;  :arith-pivots            453
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1303
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              501
;  :propagations            108
;  :quant-instantiations    43
;  :rlimit-count            208588)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1963
;  :arith-add-rows          272
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      243
;  :arith-conflicts         162
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         168
;  :arith-pivots            453
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1303
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              502
;  :propagations            108
;  :quant-instantiations    43
;  :rlimit-count            208599)
(push) ; 4
(assert (not (< $Perm.No (- $k@18@03 $k@35@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1963
;  :arith-add-rows          272
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      243
;  :arith-conflicts         162
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         168
;  :arith-pivots            453
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1303
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              503
;  :propagations            108
;  :quant-instantiations    43
;  :rlimit-count            208618)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1963
;  :arith-add-rows          274
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      244
;  :arith-conflicts         163
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         169
;  :arith-pivots            456
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1304
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              504
;  :propagations            108
;  :quant-instantiations    43
;  :rlimit-count            208758)
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
  $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1964
;  :arith-add-rows          277
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      245
;  :arith-conflicts         164
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         170
;  :arith-pivots            460
;  :binary-propagations     16
;  :conflicts               452
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1305
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              505
;  :propagations            109
;  :quant-instantiations    43
;  :rlimit-count            208900)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))
  $t@48@03))
; [eval] diz.ALU_m.Main_alu == diz
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1972
;  :arith-add-rows          279
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      246
;  :arith-conflicts         165
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         171
;  :arith-pivots            463
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1307
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              506
;  :propagations            109
;  :quant-instantiations    43
;  :rlimit-count            209091)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@48@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1972
;  :arith-add-rows          279
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      246
;  :arith-conflicts         165
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         171
;  :arith-pivots            463
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1307
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              507
;  :propagations            109
;  :quant-instantiations    43
;  :rlimit-count            209102)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@03 $k@32@03) $k@41@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1972
;  :arith-add-rows          280
;  :arith-assert-diseq      42
;  :arith-assert-lower      140
;  :arith-assert-upper      247
;  :arith-conflicts         166
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         172
;  :arith-pivots            465
;  :binary-propagations     16
;  :conflicts               454
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 400
;  :datatype-occurs-check   33
;  :datatype-splits         335
;  :decisions               392
;  :del-clause              121
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1308
;  :mk-clause               135
;  :num-allocs              4709028
;  :num-checks              508
;  :propagations            109
;  :quant-instantiations    43
;  :rlimit-count            209211)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@52@03 $Perm.Write))
(assert ($Perm.isReadVar $k@54@03 $Perm.Write))
(assert ($Perm.isReadVar $k@55@03 $Perm.Write))
(assert ($Perm.isReadVar $k@56@03 $Perm.Write))
(assert ($Perm.isReadVar $k@57@03 $Perm.Write))
(assert (= $t@51@03 ($Snap.combine ($Snap.first $t@51@03) ($Snap.second $t@51@03))))
(assert (<= $Perm.No $k@52@03))
(assert (<= $k@52@03 $Perm.Write))
(assert (implies (< $Perm.No $k@52@03) (not (= diz@6@03 $Ref.null))))
(assert (=
  ($Snap.second $t@51@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@51@03))
    ($Snap.second ($Snap.second $t@51@03)))))
(assert (= ($Snap.first ($Snap.second $t@51@03)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@51@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@51@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@51@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
  $Snap.unit))
(assert (forall ((i__15@53@03 Int)) (!
  (implies
    (and
      (<
        i__15@53@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__15@53@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__15@53@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__15@53@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__15@53@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__15@53@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))
(assert (<= $Perm.No $k@54@03))
(assert (<= $k@54@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@54@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))
(assert (<= $Perm.No $k@55@03))
(assert (<= $k@55@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@55@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@56@03))
(assert (<= $k@56@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@56@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@57@03))
(assert (<= $k@57@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@57@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  diz@6@03))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.ALU_i < pos
(push) ; 5
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
    pos@9@03))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2992
;  :arith-add-rows          280
;  :arith-assert-diseq      47
;  :arith-assert-lower      154
;  :arith-assert-upper      260
;  :arith-conflicts         166
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         172
;  :arith-pivots            467
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 663
;  :datatype-occurs-check   56
;  :datatype-splits         526
;  :decisions               645
;  :del-clause              133
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1595
;  :mk-clause               148
;  :num-allocs              4709028
;  :num-checks              511
;  :propagations            122
;  :quant-instantiations    53
;  :rlimit-count            219811
;  :time                    0.00)
(push) ; 5
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
  pos@9@03)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3228
;  :arith-add-rows          280
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      260
;  :arith-conflicts         166
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         172
;  :arith-pivots            467
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1647
;  :mk-clause               148
;  :num-allocs              4709028
;  :num-checks              512
;  :propagations            125
;  :quant-instantiations    54
;  :rlimit-count            221647
;  :time                    0.00)
; [then-branch: 24 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03)))))))))))))))))))) < pos@9@03 | live]
; [else-branch: 24 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03)))))))))))))))))))) < pos@9@03) | live]
(push) ; 5
; [then-branch: 24 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03)))))))))))))))))))) < pos@9@03]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
  pos@9@03))
; [exec]
; __flatten_5__13 := diz.ALU_divisor * 2
; [eval] diz.ALU_divisor * 2
(declare-const __flatten_5__13@64@03 Int)
(assert (=
  __flatten_5__13@64@03
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))
    2)))
; [exec]
; diz.ALU_divisor := __flatten_5__13
; [exec]
; __flatten_6__14 := diz.ALU_i
(declare-const __flatten_6__14@65@03 Int)
(assert (=
  __flatten_6__14@65@03
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))
; [exec]
; diz.ALU_i := diz.ALU_i + 1
; [eval] diz.ALU_i + 1
(declare-const ALU_i@66@03 Int)
(assert (=
  ALU_i@66@03
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
    1)))
; Loop head block: Re-establish invariant
(declare-const $k@67@03 $Perm)
(assert ($Perm.isReadVar $k@67@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@67@03 $Perm.No) (< $Perm.No $k@67@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      160
;  :arith-assert-upper      263
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            470
;  :binary-propagations     16
;  :conflicts               456
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1661
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              513
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            222468)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@52@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      160
;  :arith-assert-upper      263
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            470
;  :binary-propagations     16
;  :conflicts               456
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1661
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              514
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            222479)
(assert (< $k@67@03 $k@52@03))
(assert (<= $Perm.No (- $k@52@03 $k@67@03)))
(assert (<= (- $k@52@03 $k@67@03) $Perm.Write))
(assert (implies (< $Perm.No (- $k@52@03 $k@67@03)) (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      162
;  :arith-assert-upper      264
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               457
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1664
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              515
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            222693)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      162
;  :arith-assert-upper      264
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               458
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1664
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              516
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            222741)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      162
;  :arith-assert-upper      264
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               459
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1664
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              517
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            222789)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      162
;  :arith-assert-upper      264
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1664
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              518
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            222837)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      162
;  :arith-assert-upper      264
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               461
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1664
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              519
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            222885)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      162
;  :arith-assert-upper      264
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               462
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1664
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              520
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            222933)
; [eval] (forall i__15: Int :: { diz.ALU_m.Main_process_state[i__15] } 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|)
(declare-const i__15@68@03 Int)
(push) ; 6
; [eval] 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__15 && i__15 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__15
(push) ; 7
; [then-branch: 25 | 0 <= i__15@68@03 | live]
; [else-branch: 25 | !(0 <= i__15@68@03) | live]
(push) ; 8
; [then-branch: 25 | 0 <= i__15@68@03]
(assert (<= 0 i__15@68@03))
; [eval] i__15 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3233
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      163
;  :arith-assert-upper      264
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         172
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               463
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1665
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              521
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            223034)
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(0 <= i__15@68@03)]
(assert (not (<= 0 i__15@68@03)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 26 | i__15@68@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__15@68@03 | live]
; [else-branch: 26 | !(i__15@68@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__15@68@03) | live]
(push) ; 8
; [then-branch: 26 | i__15@68@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__15@68@03]
(assert (and
  (<
    i__15@68@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (<= 0 i__15@68@03)))
; [eval] diz.ALU_m.Main_process_state[i__15] == -1 || 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__15] == -1
; [eval] diz.ALU_m.Main_process_state[i__15]
(push) ; 9
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3234
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      164
;  :arith-assert-upper      265
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         173
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               464
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1667
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              522
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            223195)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__15@68@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3234
;  :arith-add-rows          280
;  :arith-assert-diseq      48
;  :arith-assert-lower      164
;  :arith-assert-upper      265
;  :arith-conflicts         166
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         173
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               464
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1667
;  :mk-clause               156
;  :num-allocs              4709028
;  :num-checks              523
;  :propagations            130
;  :quant-instantiations    56
;  :rlimit-count            223204)
; [eval] -1
(push) ; 9
; [then-branch: 27 | First:(Second:(Second:(Second:($t@51@03))))[i__15@68@03] == -1 | live]
; [else-branch: 27 | First:(Second:(Second:(Second:($t@51@03))))[i__15@68@03] != -1 | live]
(push) ; 10
; [then-branch: 27 | First:(Second:(Second:(Second:($t@51@03))))[i__15@68@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__15@68@03)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 27 | First:(Second:(Second:(Second:($t@51@03))))[i__15@68@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__15@68@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__15] && diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__15]
; [eval] diz.ALU_m.Main_process_state[i__15]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3236
;  :arith-add-rows          280
;  :arith-assert-diseq      50
;  :arith-assert-lower      167
;  :arith-assert-upper      266
;  :arith-conflicts         166
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         173
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1674
;  :mk-clause               166
;  :num-allocs              4709028
;  :num-checks              524
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            223474)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__15@68@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3236
;  :arith-add-rows          280
;  :arith-assert-diseq      50
;  :arith-assert-lower      167
;  :arith-assert-upper      266
;  :arith-conflicts         166
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         173
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1674
;  :mk-clause               166
;  :num-allocs              4709028
;  :num-checks              525
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            223483)
(push) ; 11
; [then-branch: 28 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__15@68@03] | live]
; [else-branch: 28 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__15@68@03]) | live]
(push) ; 12
; [then-branch: 28 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__15@68@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__15@68@03)))
; [eval] diz.ALU_m.Main_process_state[i__15] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__15]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      50
;  :arith-assert-lower      169
;  :arith-assert-upper      267
;  :arith-conflicts         166
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         174
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               466
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1678
;  :mk-clause               166
;  :num-allocs              4709028
;  :num-checks              526
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            223653)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__15@68@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      50
;  :arith-assert-lower      169
;  :arith-assert-upper      267
;  :arith-conflicts         166
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         174
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               466
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1678
;  :mk-clause               166
;  :num-allocs              4709028
;  :num-checks              527
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            223662)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      50
;  :arith-assert-lower      169
;  :arith-assert-upper      267
;  :arith-conflicts         166
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         174
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               467
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              133
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1678
;  :mk-clause               166
;  :num-allocs              4709028
;  :num-checks              528
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            223710)
(pop) ; 12
(push) ; 12
; [else-branch: 28 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__15@68@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__15@68@03))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 26 | !(i__15@68@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__15@68@03)]
(assert (not
  (and
    (<
      i__15@68@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    (<= 0 i__15@68@03))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__15@68@03 Int)) (!
  (implies
    (and
      (<
        i__15@68@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__15@68@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__15@68@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__15@68@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__15@68@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__15@68@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      52
;  :arith-assert-lower      170
;  :arith-assert-upper      268
;  :arith-conflicts         166
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         175
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               468
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1686
;  :mk-clause               180
;  :num-allocs              4709028
;  :num-checks              529
;  :propagations            137
;  :quant-instantiations    58
;  :rlimit-count            224156)
(assert (forall ((i__15@68@03 Int)) (!
  (implies
    (and
      (<
        i__15@68@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__15@68@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__15@68@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__15@68@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__15@68@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__15@68@03))
  :qid |prog.l<no position>|)))
(declare-const $k@69@03 $Perm)
(assert ($Perm.isReadVar $k@69@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      172
;  :arith-assert-upper      269
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               469
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1691
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              530
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            224714)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@69@03 $Perm.No) (< $Perm.No $k@69@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      172
;  :arith-assert-upper      269
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1691
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              531
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            224764)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@54@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      172
;  :arith-assert-upper      269
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            471
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1691
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              532
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            224775)
(assert (< $k@69@03 $k@54@03))
(assert (<= $Perm.No (- $k@54@03 $k@69@03)))
(assert (<= (- $k@54@03 $k@69@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@54@03 $k@69@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              533
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            224995)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               472
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              534
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225043)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               473
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              535
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225091)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               474
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              536
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225139)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               475
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              537
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225187)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               476
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              538
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225235)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               477
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              539
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225283)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               478
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              540
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225331)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               479
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              541
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225379)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              542
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225427)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               481
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              543
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225475)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               482
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              544
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225523)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               483
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              545
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225571)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               484
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              546
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225619)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               485
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              547
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225667)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               486
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              548
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225715)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               487
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              549
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225763)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               488
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              550
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225811)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               489
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              551
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225859)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               490
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              552
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225907)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               491
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              553
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            225955)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               492
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              554
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226003)
(push) ; 6
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               492
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              555
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226014)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               493
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              556
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226062)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               494
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              557
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226110)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               495
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              558
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226158)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               496
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              559
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226206)
(push) ; 6
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               496
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              560
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226217)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               497
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              561
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226265)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      270
;  :arith-conflicts         166
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               498
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1694
;  :mk-clause               182
;  :num-allocs              4709028
;  :num-checks              562
;  :propagations            138
;  :quant-instantiations    58
;  :rlimit-count            226313)
(declare-const $k@70@03 $Perm)
(assert ($Perm.isReadVar $k@70@03 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      176
;  :arith-assert-upper      271
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               499
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1698
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              563
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            226509)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@70@03 $Perm.No) (< $Perm.No $k@70@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      176
;  :arith-assert-upper      271
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1698
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              564
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            226559)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@55@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      176
;  :arith-assert-upper      271
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            473
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1698
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              565
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            226570)
(assert (< $k@70@03 $k@55@03))
(assert (<= $Perm.No (- $k@55@03 $k@70@03)))
(assert (<= (- $k@55@03 $k@70@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@55@03 $k@70@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              566
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            226790)
(push) ; 6
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              567
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            226838)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              568
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            226886)
(push) ; 6
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              569
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            226934)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              570
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            226982)
(push) ; 6
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              571
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            227030)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              572
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            227078)
(push) ; 6
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              573
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            227126)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               509
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              574
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            227174)
(push) ; 6
(assert (not (< $Perm.No $k@55@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      272
;  :arith-conflicts         166
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1701
;  :mk-clause               184
;  :num-allocs              4709028
;  :num-checks              575
;  :propagations            139
;  :quant-instantiations    58
;  :rlimit-count            227222)
(declare-const $k@71@03 $Perm)
(assert ($Perm.isReadVar $k@71@03 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      55
;  :arith-assert-lower      180
;  :arith-assert-upper      273
;  :arith-conflicts         166
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1705
;  :mk-clause               186
;  :num-allocs              4709028
;  :num-checks              576
;  :propagations            140
;  :quant-instantiations    58
;  :rlimit-count            227418)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@71@03 $Perm.No) (< $Perm.No $k@71@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      55
;  :arith-assert-lower      180
;  :arith-assert-upper      273
;  :arith-conflicts         166
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1705
;  :mk-clause               186
;  :num-allocs              4709028
;  :num-checks              577
;  :propagations            140
;  :quant-instantiations    58
;  :rlimit-count            227468)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@56@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      55
;  :arith-assert-lower      180
;  :arith-assert-upper      273
;  :arith-conflicts         166
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         175
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1705
;  :mk-clause               186
;  :num-allocs              4709028
;  :num-checks              578
;  :propagations            140
;  :quant-instantiations    58
;  :rlimit-count            227479)
(assert (< $k@71@03 $k@56@03))
(assert (<= $Perm.No (- $k@56@03 $k@71@03)))
(assert (<= (- $k@56@03 $k@71@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@56@03 $k@71@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      55
;  :arith-assert-lower      182
;  :arith-assert-upper      274
;  :arith-conflicts         166
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1708
;  :mk-clause               186
;  :num-allocs              4709028
;  :num-checks              579
;  :propagations            140
;  :quant-instantiations    58
;  :rlimit-count            227699)
(push) ; 6
(assert (not (< $Perm.No $k@56@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      55
;  :arith-assert-lower      182
;  :arith-assert-upper      274
;  :arith-conflicts         166
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1708
;  :mk-clause               186
;  :num-allocs              4709028
;  :num-checks              580
;  :propagations            140
;  :quant-instantiations    58
;  :rlimit-count            227747)
(declare-const $k@72@03 $Perm)
(assert ($Perm.isReadVar $k@72@03 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      184
;  :arith-assert-upper      275
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1712
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              581
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            227944)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      184
;  :arith-assert-upper      275
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1712
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              582
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            227992)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@72@03 $Perm.No) (< $Perm.No $k@72@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      184
;  :arith-assert-upper      275
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1712
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              583
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228042)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@57@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      184
;  :arith-assert-upper      275
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1712
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              584
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228053)
(assert (< $k@72@03 $k@57@03))
(assert (<= $Perm.No (- $k@57@03 $k@72@03)))
(assert (<= (- $k@57@03 $k@72@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@57@03 $k@72@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               518
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1715
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              585
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228284)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1715
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              586
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228332)
(push) ; 6
(assert (not (< $Perm.No $k@57@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               520
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1715
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              587
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228380)
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1715
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              588
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228428)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 6
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1715
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              589
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228476)
(push) ; 6
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              157
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1715
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              590
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228524)
(pop) ; 5
(push) ; 5
; [else-branch: 24 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03)))))))))))))))))))) < pos@9@03)]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
    pos@9@03)))
(pop) ; 5
(push) ; 5
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3238
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            484
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   63
;  :datatype-splits         575
;  :decisions               715
;  :del-clause              173
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1715
;  :mk-clause               188
;  :num-allocs              4709028
;  :num-checks              591
;  :propagations            141
;  :quant-instantiations    58
;  :rlimit-count            228612)
(declare-const $t@73@03 $Ref)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3559
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            484
;  :binary-propagations     16
;  :conflicts               524
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 852
;  :datatype-occurs-check   71
;  :datatype-splits         626
;  :decisions               827
;  :del-clause              174
;  :final-checks            34
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             1770
;  :mk-clause               189
;  :num-allocs              4910481
;  :num-checks              592
;  :propagations            144
;  :quant-instantiations    58
;  :rlimit-count            230737
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3880
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            484
;  :binary-propagations     16
;  :conflicts               525
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 968
;  :datatype-occurs-check   79
;  :datatype-splits         677
;  :decisions               939
;  :del-clause              175
;  :final-checks            37
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             1825
;  :mk-clause               190
;  :num-allocs              4910481
;  :num-checks              593
;  :propagations            147
;  :quant-instantiations    58
;  :rlimit-count            232862
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4201
;  :arith-add-rows          280
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      276
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            484
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 1084
;  :datatype-occurs-check   87
;  :datatype-splits         728
;  :decisions               1051
;  :del-clause              176
;  :final-checks            40
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             1880
;  :mk-clause               191
;  :num-allocs              4910481
;  :num-checks              594
;  :propagations            150
;  :quant-instantiations    58
;  :rlimit-count            234987
;  :time                    0.00)
(declare-const $t@74@03 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@52@03)
    (= $t@73@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))))
  (implies
    (< $Perm.No (- (- $k@18@03 $k@35@03) $k@63@03))
    (=
      $t@73@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03)))
    (= $t@74@03 $t@73@03))
  (implies
    (< $Perm.No (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    (= $t@74@03 $t@48@03))))
(assert (<=
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))))
(assert (<=
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))
  (not (= diz@6@03 $Ref.null))))
(assert (<= $Perm.No (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))))
(assert (<= (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03)))
  (not (= diz@6@03 $Ref.null))))
; [eval] !(diz.ALU_i < pos)
; [eval] diz.ALU_i < pos
(push) ; 5
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
  pos@9@03)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4438
;  :arith-add-rows          284
;  :arith-assert-diseq      56
;  :arith-assert-lower      189
;  :arith-assert-upper      278
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            486
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 1156
;  :datatype-occurs-check   94
;  :datatype-splits         776
;  :decisions               1120
;  :del-clause              176
;  :final-checks            43
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             1938
;  :mk-clause               191
;  :num-allocs              4910481
;  :num-checks              595
;  :propagations            153
;  :quant-instantiations    59
;  :rlimit-count            237386
;  :time                    0.00)
(push) ; 5
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
    pos@9@03))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4668
;  :arith-add-rows          284
;  :arith-assert-diseq      56
;  :arith-assert-lower      189
;  :arith-assert-upper      279
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            488
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   101
;  :datatype-splits         824
;  :decisions               1189
;  :del-clause              176
;  :final-checks            46
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             1989
;  :mk-clause               191
;  :num-allocs              4910481
;  :num-checks              596
;  :propagations            156
;  :quant-instantiations    60
;  :rlimit-count            239240
;  :time                    0.00)
; [then-branch: 29 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03)))))))))))))))))))) < pos@9@03) | live]
; [else-branch: 29 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03)))))))))))))))))))) < pos@9@03 | live]
(push) ; 5
; [then-branch: 29 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03)))))))))))))))))))) < pos@9@03)]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
    pos@9@03)))
; [eval] diz.ALU_current_bit == bit
(push) ; 6
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
    bit@10@03))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4901
;  :arith-add-rows          284
;  :arith-assert-diseq      56
;  :arith-assert-lower      190
;  :arith-assert-upper      279
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            488
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 1300
;  :datatype-occurs-check   108
;  :datatype-splits         872
;  :decisions               1258
;  :del-clause              176
;  :final-checks            49
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2042
;  :mk-clause               191
;  :num-allocs              4910481
;  :num-checks              597
;  :propagations            159
;  :quant-instantiations    62
;  :rlimit-count            241388
;  :time                    0.00)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
  bit@10@03)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5132
;  :arith-add-rows          284
;  :arith-assert-diseq      56
;  :arith-assert-lower      190
;  :arith-assert-upper      279
;  :arith-conflicts         166
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         175
;  :arith-pivots            488
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              176
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2093
;  :mk-clause               191
;  :num-allocs              4910481
;  :num-checks              598
;  :propagations            162
;  :quant-instantiations    63
;  :rlimit-count            243231
;  :time                    0.00)
; [then-branch: 30 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03))))))))))))))))))))))) == bit@10@03 | live]
; [else-branch: 30 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03))))))))))))))))))))))) != bit@10@03 | live]
(push) ; 6
; [then-branch: 30 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03))))))))))))))))))))))) == bit@10@03]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
  bit@10@03))
; [exec]
; sys__local__result__11 := value
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__16: Int :: { diz.ALU_m.Main_process_state[i__16] } 0 <= i__16 && i__16 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__16] == -1 || 0 <= diz.ALU_m.Main_process_state[i__16] && diz.ALU_m.Main_process_state[i__16] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && diz.ALU_m.Main_alu == diz
(declare-const $k@75@03 $Perm)
(assert ($Perm.isReadVar $k@75@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@75@03 $Perm.No) (< $Perm.No $k@75@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5134
;  :arith-add-rows          284
;  :arith-assert-diseq      57
;  :arith-assert-lower      192
;  :arith-assert-upper      280
;  :arith-conflicts         166
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         175
;  :arith-pivots            488
;  :binary-propagations     16
;  :conflicts               527
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              176
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2099
;  :mk-clause               193
;  :num-allocs              4910481
;  :num-checks              599
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            243718)
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5135
;  :arith-add-rows          294
;  :arith-assert-diseq      57
;  :arith-assert-lower      192
;  :arith-assert-upper      281
;  :arith-conflicts         167
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         175
;  :arith-pivots            492
;  :binary-propagations     16
;  :conflicts               528
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2101
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              600
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            244110)
(assert (<
  $k@75@03
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@75@03)))
(assert (<=
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@75@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@75@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5135
;  :arith-add-rows          305
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      283
;  :arith-conflicts         168
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         176
;  :arith-pivots            499
;  :binary-propagations     16
;  :conflicts               529
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2105
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              601
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            244766)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@74@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5136
;  :arith-add-rows          305
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      283
;  :arith-conflicts         168
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         176
;  :arith-pivots            499
;  :binary-propagations     16
;  :conflicts               530
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2106
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              602
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            244814)
(assert (not (= $t@74@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          308
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      284
;  :arith-conflicts         169
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         177
;  :arith-pivots            504
;  :binary-propagations     16
;  :conflicts               531
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2108
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              603
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            245099)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          308
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      284
;  :arith-conflicts         169
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         177
;  :arith-pivots            504
;  :binary-propagations     16
;  :conflicts               532
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2109
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              604
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            245179)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          311
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      285
;  :arith-conflicts         170
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         178
;  :arith-pivots            508
;  :binary-propagations     16
;  :conflicts               533
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2110
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              605
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            245410)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          311
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      285
;  :arith-conflicts         170
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         178
;  :arith-pivots            508
;  :binary-propagations     16
;  :conflicts               534
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2111
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              606
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            245490)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          313
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      286
;  :arith-conflicts         171
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         179
;  :arith-pivots            510
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2112
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              607
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            245681)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          313
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      286
;  :arith-conflicts         171
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         179
;  :arith-pivots            510
;  :binary-propagations     16
;  :conflicts               536
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2113
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              608
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            245761)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          315
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      287
;  :arith-conflicts         172
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         180
;  :arith-pivots            512
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2114
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              609
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            245962)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          315
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      287
;  :arith-conflicts         172
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         180
;  :arith-pivots            512
;  :binary-propagations     16
;  :conflicts               538
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2115
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              610
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            246042)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          318
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      288
;  :arith-conflicts         173
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         181
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               539
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2116
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              611
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            246271)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          318
;  :arith-assert-diseq      57
;  :arith-assert-lower      194
;  :arith-assert-upper      288
;  :arith-conflicts         173
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         181
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               540
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2117
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              612
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            246351)
; [eval] (forall i__16: Int :: { diz.ALU_m.Main_process_state[i__16] } 0 <= i__16 && i__16 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__16] == -1 || 0 <= diz.ALU_m.Main_process_state[i__16] && diz.ALU_m.Main_process_state[i__16] < |diz.ALU_m.Main_event_state|)
(declare-const i__16@76@03 Int)
(push) ; 7
; [eval] 0 <= i__16 && i__16 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__16] == -1 || 0 <= diz.ALU_m.Main_process_state[i__16] && diz.ALU_m.Main_process_state[i__16] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__16 && i__16 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__16
(push) ; 8
; [then-branch: 31 | 0 <= i__16@76@03 | live]
; [else-branch: 31 | !(0 <= i__16@76@03) | live]
(push) ; 9
; [then-branch: 31 | 0 <= i__16@76@03]
(assert (<= 0 i__16@76@03))
; [eval] i__16 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          321
;  :arith-assert-diseq      57
;  :arith-assert-lower      195
;  :arith-assert-upper      289
;  :arith-conflicts         174
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         182
;  :arith-pivots            521
;  :binary-propagations     16
;  :conflicts               541
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2119
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              613
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            246634)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5137
;  :arith-add-rows          321
;  :arith-assert-diseq      57
;  :arith-assert-lower      195
;  :arith-assert-upper      289
;  :arith-conflicts         174
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         182
;  :arith-pivots            521
;  :binary-propagations     16
;  :conflicts               542
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2120
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              614
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            246714)
(pop) ; 9
(push) ; 9
; [else-branch: 31 | !(0 <= i__16@76@03)]
(assert (not (<= 0 i__16@76@03)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 32 | i__16@76@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__16@76@03 | live]
; [else-branch: 32 | !(i__16@76@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__16@76@03) | live]
(push) ; 9
; [then-branch: 32 | i__16@76@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__16@76@03]
(assert (and
  (<
    i__16@76@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (<= 0 i__16@76@03)))
; [eval] diz.ALU_m.Main_process_state[i__16] == -1 || 0 <= diz.ALU_m.Main_process_state[i__16] && diz.ALU_m.Main_process_state[i__16] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__16] == -1
; [eval] diz.ALU_m.Main_process_state[i__16]
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5138
;  :arith-add-rows          323
;  :arith-assert-diseq      57
;  :arith-assert-lower      196
;  :arith-assert-upper      291
;  :arith-conflicts         175
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         184
;  :arith-pivots            523
;  :binary-propagations     16
;  :conflicts               543
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2123
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              615
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            247018)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5138
;  :arith-add-rows          323
;  :arith-assert-diseq      57
;  :arith-assert-lower      196
;  :arith-assert-upper      291
;  :arith-conflicts         175
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         184
;  :arith-pivots            523
;  :binary-propagations     16
;  :conflicts               544
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2124
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              616
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            247098)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__16@76@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5138
;  :arith-add-rows          323
;  :arith-assert-diseq      57
;  :arith-assert-lower      196
;  :arith-assert-upper      291
;  :arith-conflicts         175
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         184
;  :arith-pivots            523
;  :binary-propagations     16
;  :conflicts               544
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2124
;  :mk-clause               195
;  :num-allocs              4910481
;  :num-checks              617
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            247107)
; [eval] -1
(push) ; 10
; [then-branch: 33 | First:(Second:(Second:(Second:($t@51@03))))[i__16@76@03] == -1 | live]
; [else-branch: 33 | First:(Second:(Second:(Second:($t@51@03))))[i__16@76@03] != -1 | live]
(push) ; 11
; [then-branch: 33 | First:(Second:(Second:(Second:($t@51@03))))[i__16@76@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__16@76@03)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 33 | First:(Second:(Second:(Second:($t@51@03))))[i__16@76@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__16@76@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__16] && diz.ALU_m.Main_process_state[i__16] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__16]
; [eval] diz.ALU_m.Main_process_state[i__16]
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5140
;  :arith-add-rows          325
;  :arith-assert-diseq      59
;  :arith-assert-lower      199
;  :arith-assert-upper      293
;  :arith-conflicts         176
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         185
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               545
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2132
;  :mk-clause               205
;  :num-allocs              4910481
;  :num-checks              618
;  :propagations            169
;  :quant-instantiations    65
;  :rlimit-count            247516)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5140
;  :arith-add-rows          325
;  :arith-assert-diseq      59
;  :arith-assert-lower      199
;  :arith-assert-upper      293
;  :arith-conflicts         176
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         185
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               546
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2133
;  :mk-clause               205
;  :num-allocs              4910481
;  :num-checks              619
;  :propagations            169
;  :quant-instantiations    65
;  :rlimit-count            247596)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__16@76@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5140
;  :arith-add-rows          325
;  :arith-assert-diseq      59
;  :arith-assert-lower      199
;  :arith-assert-upper      293
;  :arith-conflicts         176
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         185
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               546
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2133
;  :mk-clause               205
;  :num-allocs              4910481
;  :num-checks              620
;  :propagations            169
;  :quant-instantiations    65
;  :rlimit-count            247605)
(push) ; 12
; [then-branch: 34 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__16@76@03] | live]
; [else-branch: 34 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__16@76@03]) | live]
(push) ; 13
; [then-branch: 34 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__16@76@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__16@76@03)))
; [eval] diz.ALU_m.Main_process_state[i__16] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__16]
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          328
;  :arith-assert-diseq      59
;  :arith-assert-lower      201
;  :arith-assert-upper      295
;  :arith-conflicts         177
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         187
;  :arith-pivots            532
;  :binary-propagations     16
;  :conflicts               547
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2138
;  :mk-clause               205
;  :num-allocs              4910481
;  :num-checks              621
;  :propagations            169
;  :quant-instantiations    65
;  :rlimit-count            247966)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          328
;  :arith-assert-diseq      59
;  :arith-assert-lower      201
;  :arith-assert-upper      295
;  :arith-conflicts         177
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         187
;  :arith-pivots            532
;  :binary-propagations     16
;  :conflicts               548
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2139
;  :mk-clause               205
;  :num-allocs              4910481
;  :num-checks              622
;  :propagations            169
;  :quant-instantiations    65
;  :rlimit-count            248046)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__16@76@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          328
;  :arith-assert-diseq      59
;  :arith-assert-lower      201
;  :arith-assert-upper      295
;  :arith-conflicts         177
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         187
;  :arith-pivots            532
;  :binary-propagations     16
;  :conflicts               548
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2139
;  :mk-clause               205
;  :num-allocs              4910481
;  :num-checks              623
;  :propagations            169
;  :quant-instantiations    65
;  :rlimit-count            248055)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          331
;  :arith-assert-diseq      59
;  :arith-assert-lower      201
;  :arith-assert-upper      296
;  :arith-conflicts         178
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         188
;  :arith-pivots            536
;  :binary-propagations     16
;  :conflicts               549
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2140
;  :mk-clause               205
;  :num-allocs              4910481
;  :num-checks              624
;  :propagations            169
;  :quant-instantiations    65
;  :rlimit-count            248286)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          331
;  :arith-assert-diseq      59
;  :arith-assert-lower      201
;  :arith-assert-upper      296
;  :arith-conflicts         178
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         188
;  :arith-pivots            536
;  :binary-propagations     16
;  :conflicts               550
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              178
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2141
;  :mk-clause               205
;  :num-allocs              4910481
;  :num-checks              625
;  :propagations            169
;  :quant-instantiations    65
;  :rlimit-count            248366)
(pop) ; 13
(push) ; 13
; [else-branch: 34 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__16@76@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__16@76@03))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 32 | !(i__16@76@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__16@76@03)]
(assert (not
  (and
    (<
      i__16@76@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    (<= 0 i__16@76@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__16@76@03 Int)) (!
  (implies
    (and
      (<
        i__16@76@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__16@76@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__16@76@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__16@76@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__16@76@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__16@76@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          331
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      297
;  :arith-conflicts         178
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         189
;  :arith-pivots            537
;  :binary-propagations     16
;  :conflicts               551
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2149
;  :mk-clause               219
;  :num-allocs              4910481
;  :num-checks              626
;  :propagations            171
;  :quant-instantiations    66
;  :rlimit-count            248815)
(assert (forall ((i__16@76@03 Int)) (!
  (implies
    (and
      (<
        i__16@76@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__16@76@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__16@76@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__16@76@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__16@76@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__16@76@03))
  :qid |prog.l<no position>|)))
(declare-const $k@77@03 $Perm)
(assert ($Perm.isReadVar $k@77@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          335
;  :arith-assert-diseq      62
;  :arith-assert-lower      204
;  :arith-assert-upper      299
;  :arith-conflicts         179
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         190
;  :arith-pivots            540
;  :binary-propagations     16
;  :conflicts               552
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2155
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              627
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            249562)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@77@03 $Perm.No) (< $Perm.No $k@77@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          335
;  :arith-assert-diseq      62
;  :arith-assert-lower      204
;  :arith-assert-upper      299
;  :arith-conflicts         179
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         190
;  :arith-pivots            540
;  :binary-propagations     16
;  :conflicts               553
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2155
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              628
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            249612)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          335
;  :arith-assert-diseq      62
;  :arith-assert-lower      204
;  :arith-assert-upper      299
;  :arith-conflicts         179
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         190
;  :arith-pivots            540
;  :binary-propagations     16
;  :conflicts               553
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2155
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              629
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            249631)
(push) ; 7
(assert (not (not (= (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          335
;  :arith-assert-diseq      62
;  :arith-assert-lower      204
;  :arith-assert-upper      299
;  :arith-conflicts         179
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         190
;  :arith-pivots            540
;  :binary-propagations     16
;  :conflicts               554
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2156
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              630
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            249723)
(assert (< $k@77@03 (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03)))
(assert (<= $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@77@03)))
(assert (<= (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@77@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@77@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          338
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      301
;  :arith-conflicts         180
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         191
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               555
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2160
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              631
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250143)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          338
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      301
;  :arith-conflicts         180
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         191
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               555
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2160
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              632
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250162)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          338
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      301
;  :arith-conflicts         180
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         191
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               555
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2160
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              633
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250191)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          341
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      302
;  :arith-conflicts         181
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         192
;  :arith-pivots            548
;  :binary-propagations     16
;  :conflicts               556
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2161
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              634
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250420)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          341
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      302
;  :arith-conflicts         181
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         192
;  :arith-pivots            548
;  :binary-propagations     16
;  :conflicts               556
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2161
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              635
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250439)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          341
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      302
;  :arith-conflicts         181
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         192
;  :arith-pivots            548
;  :binary-propagations     16
;  :conflicts               556
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2161
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              636
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250468)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          341
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      302
;  :arith-conflicts         181
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         192
;  :arith-pivots            548
;  :binary-propagations     16
;  :conflicts               556
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2161
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              637
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250479)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          344
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      303
;  :arith-conflicts         182
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         193
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               557
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2162
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              638
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250710)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          344
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      303
;  :arith-conflicts         182
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         193
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               557
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2162
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              639
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250729)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          344
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      303
;  :arith-conflicts         182
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         193
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               557
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2162
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              640
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250758)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          344
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      303
;  :arith-conflicts         182
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         193
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               557
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2162
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              641
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            250769)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          348
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      304
;  :arith-conflicts         183
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         194
;  :arith-pivots            555
;  :binary-propagations     16
;  :conflicts               558
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2163
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              642
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251006)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          348
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      304
;  :arith-conflicts         183
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         194
;  :arith-pivots            555
;  :binary-propagations     16
;  :conflicts               558
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2163
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              643
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251025)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          348
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      304
;  :arith-conflicts         183
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         194
;  :arith-pivots            555
;  :binary-propagations     16
;  :conflicts               558
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2163
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              644
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251054)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          348
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      304
;  :arith-conflicts         183
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         194
;  :arith-pivots            555
;  :binary-propagations     16
;  :conflicts               558
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2163
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              645
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251065)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          350
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      305
;  :arith-conflicts         184
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         195
;  :arith-pivots            557
;  :binary-propagations     16
;  :conflicts               559
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2164
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              646
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251269)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          350
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      305
;  :arith-conflicts         184
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         195
;  :arith-pivots            557
;  :binary-propagations     16
;  :conflicts               559
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2164
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              647
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251288)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          350
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      305
;  :arith-conflicts         184
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         195
;  :arith-pivots            557
;  :binary-propagations     16
;  :conflicts               559
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2164
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              648
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251317)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          350
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      305
;  :arith-conflicts         184
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         195
;  :arith-pivots            557
;  :binary-propagations     16
;  :conflicts               559
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2164
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              649
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251328)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          353
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      306
;  :arith-conflicts         185
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         196
;  :arith-pivots            562
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2165
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              650
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251557)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          353
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      306
;  :arith-conflicts         185
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         196
;  :arith-pivots            562
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2165
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              651
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251576)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          353
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      306
;  :arith-conflicts         185
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         196
;  :arith-pivots            562
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2165
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              652
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251605)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          353
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      306
;  :arith-conflicts         185
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         196
;  :arith-pivots            562
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2165
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              653
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251616)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          356
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      307
;  :arith-conflicts         186
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         197
;  :arith-pivots            566
;  :binary-propagations     16
;  :conflicts               561
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2166
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              654
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251847)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          356
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      307
;  :arith-conflicts         186
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         197
;  :arith-pivots            566
;  :binary-propagations     16
;  :conflicts               561
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2166
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              655
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251866)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          356
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      307
;  :arith-conflicts         186
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         197
;  :arith-pivots            566
;  :binary-propagations     16
;  :conflicts               561
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2166
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              656
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251895)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          356
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      307
;  :arith-conflicts         186
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         197
;  :arith-pivots            566
;  :binary-propagations     16
;  :conflicts               561
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2166
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              657
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            251906)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          360
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      308
;  :arith-conflicts         187
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         198
;  :arith-pivots            569
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2167
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              658
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252143)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          360
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      308
;  :arith-conflicts         187
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         198
;  :arith-pivots            569
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2167
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              659
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252162)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          360
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      308
;  :arith-conflicts         187
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         198
;  :arith-pivots            569
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2167
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              660
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252191)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          360
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      308
;  :arith-conflicts         187
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         198
;  :arith-pivots            569
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2167
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              661
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252202)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          362
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      309
;  :arith-conflicts         188
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         199
;  :arith-pivots            571
;  :binary-propagations     16
;  :conflicts               563
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2168
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              662
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252406)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          362
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      309
;  :arith-conflicts         188
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         199
;  :arith-pivots            571
;  :binary-propagations     16
;  :conflicts               563
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2168
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              663
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252425)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          362
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      309
;  :arith-conflicts         188
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         199
;  :arith-pivots            571
;  :binary-propagations     16
;  :conflicts               563
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2168
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              664
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252454)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          362
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      309
;  :arith-conflicts         188
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         199
;  :arith-pivots            571
;  :binary-propagations     16
;  :conflicts               563
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2168
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              665
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252465)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          365
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      310
;  :arith-conflicts         189
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         200
;  :arith-pivots            576
;  :binary-propagations     16
;  :conflicts               564
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2169
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              666
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252694)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          365
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      310
;  :arith-conflicts         189
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         200
;  :arith-pivots            576
;  :binary-propagations     16
;  :conflicts               564
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2169
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              667
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252713)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          365
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      310
;  :arith-conflicts         189
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         200
;  :arith-pivots            576
;  :binary-propagations     16
;  :conflicts               564
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2169
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              668
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252742)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          365
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      310
;  :arith-conflicts         189
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         200
;  :arith-pivots            576
;  :binary-propagations     16
;  :conflicts               564
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2169
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              669
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252753)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          368
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      311
;  :arith-conflicts         190
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         201
;  :arith-pivots            580
;  :binary-propagations     16
;  :conflicts               565
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2170
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              670
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            252984)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          368
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      311
;  :arith-conflicts         190
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         201
;  :arith-pivots            580
;  :binary-propagations     16
;  :conflicts               565
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2170
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              671
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253003)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          368
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      311
;  :arith-conflicts         190
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         201
;  :arith-pivots            580
;  :binary-propagations     16
;  :conflicts               565
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2170
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              672
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253032)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          368
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      311
;  :arith-conflicts         190
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         201
;  :arith-pivots            580
;  :binary-propagations     16
;  :conflicts               565
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2170
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              673
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253043)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          372
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      312
;  :arith-conflicts         191
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         202
;  :arith-pivots            583
;  :binary-propagations     16
;  :conflicts               566
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2171
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              674
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253280)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          372
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      312
;  :arith-conflicts         191
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         202
;  :arith-pivots            583
;  :binary-propagations     16
;  :conflicts               566
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2171
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              675
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253299)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          372
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      312
;  :arith-conflicts         191
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         202
;  :arith-pivots            583
;  :binary-propagations     16
;  :conflicts               566
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2171
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              676
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253328)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          372
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      312
;  :arith-conflicts         191
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         202
;  :arith-pivots            583
;  :binary-propagations     16
;  :conflicts               566
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2171
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              677
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253339)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          374
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      313
;  :arith-conflicts         192
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         203
;  :arith-pivots            585
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2172
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              678
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253543)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          374
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      313
;  :arith-conflicts         192
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         203
;  :arith-pivots            585
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2172
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              679
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253562)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          374
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      313
;  :arith-conflicts         192
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         203
;  :arith-pivots            585
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2172
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              680
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253591)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          374
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      313
;  :arith-conflicts         192
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         203
;  :arith-pivots            585
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2172
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              681
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253602)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          377
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      314
;  :arith-conflicts         193
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         204
;  :arith-pivots            590
;  :binary-propagations     16
;  :conflicts               568
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2173
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              682
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253831)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          377
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      314
;  :arith-conflicts         193
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         204
;  :arith-pivots            590
;  :binary-propagations     16
;  :conflicts               568
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2173
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              683
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253850)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          377
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      314
;  :arith-conflicts         193
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         204
;  :arith-pivots            590
;  :binary-propagations     16
;  :conflicts               568
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2173
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              684
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253879)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          377
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      314
;  :arith-conflicts         193
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         204
;  :arith-pivots            590
;  :binary-propagations     16
;  :conflicts               568
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2173
;  :mk-clause               221
;  :num-allocs              4910481
;  :num-checks              685
;  :propagations            172
;  :quant-instantiations    66
;  :rlimit-count            253890)
(declare-const $k@78@03 $Perm)
(assert ($Perm.isReadVar $k@78@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          380
;  :arith-assert-diseq      63
;  :arith-assert-lower      208
;  :arith-assert-upper      316
;  :arith-conflicts         194
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         205
;  :arith-pivots            594
;  :binary-propagations     16
;  :conflicts               569
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2178
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              686
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            254270)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@78@03 $Perm.No) (< $Perm.No $k@78@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          380
;  :arith-assert-diseq      63
;  :arith-assert-lower      208
;  :arith-assert-upper      316
;  :arith-conflicts         194
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         205
;  :arith-pivots            594
;  :binary-propagations     16
;  :conflicts               570
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2178
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              687
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            254320)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          380
;  :arith-assert-diseq      63
;  :arith-assert-lower      208
;  :arith-assert-upper      316
;  :arith-conflicts         194
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         205
;  :arith-pivots            594
;  :binary-propagations     16
;  :conflicts               570
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2178
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              688
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            254339)
(push) ; 7
(assert (not (not (= (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          380
;  :arith-assert-diseq      63
;  :arith-assert-lower      208
;  :arith-assert-upper      316
;  :arith-conflicts         194
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         205
;  :arith-pivots            594
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2179
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              689
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            254431)
(assert (< $k@78@03 (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@78@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@78@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@78@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          387
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      318
;  :arith-conflicts         195
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         206
;  :arith-pivots            598
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2183
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              690
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            254921)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          387
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      318
;  :arith-conflicts         195
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         206
;  :arith-pivots            598
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2183
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              691
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            254940)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          387
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      318
;  :arith-conflicts         195
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         206
;  :arith-pivots            598
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2183
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              692
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            254969)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          389
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      319
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            600
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2184
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              693
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            255173)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          389
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      319
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            600
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2184
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              694
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            255192)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5142
;  :arith-add-rows          389
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      319
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            600
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 1372
;  :datatype-occurs-check   115
;  :datatype-splits         920
;  :decisions               1327
;  :del-clause              202
;  :final-checks            52
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2184
;  :mk-clause               223
;  :num-allocs              4910481
;  :num-checks              695
;  :propagations            173
;  :quant-instantiations    66
;  :rlimit-count            255221)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5477
;  :arith-add-rows          389
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      319
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            600
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1489
;  :datatype-occurs-check   126
;  :datatype-splits         1013
;  :decisions               1438
;  :del-clause              203
;  :final-checks            56
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2282
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              696
;  :propagations            176
;  :quant-instantiations    66
;  :rlimit-count            257624
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5937
;  :arith-add-rows          389
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      319
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            600
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2380
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              699
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            260709)
(declare-const $t@79@03 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5937
;  :arith-add-rows          389
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      319
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            600
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2380
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              700
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            260788)
(declare-const $t@80@03 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5937
;  :arith-add-rows          389
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      319
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            600
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2380
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              701
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            260863)
(declare-const $t@81@03 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5937
;  :arith-add-rows          389
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      319
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            600
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2381
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              702
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            260948)
(declare-const $t@82@03 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@75@03))
    (= $t@79@03 $t@74@03))
  (implies
    (< $Perm.No $k@57@03)
    (=
      $t@79@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@78@03))
    (= $t@80@03 $t@44@03))
  (implies
    (< $Perm.No $k@55@03)
    (=
      $t@80@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@77@03))
    (= $t@81@03 $t@42@03))
  (implies
    (< $Perm.No $k@54@03)
    (=
      $t@81@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@56@03)
    (=
      $t@82@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))
    (= $t@82@03 $t@46@03))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@75@03)
    $k@57@03)))
(assert (<=
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@75@03)
    $k@57@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@75@03)
      $k@57@03))
  (not (= diz@6@03 $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@78@03) $k@55@03)))
(assert (<=
  (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@78@03) $k@55@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@78@03) $k@55@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@77@03) $k@54@03)))
(assert (<=
  (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@77@03) $k@54@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@77@03) $k@54@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(assert (<= (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          398
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      323
;  :arith-conflicts         196
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         207
;  :arith-pivots            601
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2397
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              703
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            262673)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          401
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      324
;  :arith-conflicts         197
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         208
;  :arith-pivots            606
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2398
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              704
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            262903)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          401
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      324
;  :arith-conflicts         197
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         208
;  :arith-pivots            606
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2398
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              705
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            262925)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          401
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      324
;  :arith-conflicts         197
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         208
;  :arith-pivots            606
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2398
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              706
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            262954)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          401
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      324
;  :arith-conflicts         197
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         208
;  :arith-pivots            606
;  :binary-propagations     16
;  :conflicts               580
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2399
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              707
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            263264)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          404
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      325
;  :arith-conflicts         198
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         209
;  :arith-pivots            610
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2400
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              708
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            263496)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          404
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      325
;  :arith-conflicts         198
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         209
;  :arith-pivots            610
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2400
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              709
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            263518)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          404
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      325
;  :arith-conflicts         198
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         209
;  :arith-pivots            610
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2400
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              710
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            263547)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          404
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      325
;  :arith-conflicts         198
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         209
;  :arith-pivots            610
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2401
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              711
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            263857)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          406
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      326
;  :arith-conflicts         199
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         210
;  :arith-pivots            612
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2402
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              712
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            264049)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          406
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      326
;  :arith-conflicts         199
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         210
;  :arith-pivots            612
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2402
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              713
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            264071)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          406
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      326
;  :arith-conflicts         199
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         210
;  :arith-pivots            612
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2402
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              714
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            264100)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          406
;  :arith-assert-diseq      63
;  :arith-assert-lower      214
;  :arith-assert-upper      326
;  :arith-conflicts         199
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         210
;  :arith-pivots            612
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2403
;  :mk-clause               224
;  :num-allocs              4910481
;  :num-checks              715
;  :propagations            182
;  :quant-instantiations    66
;  :rlimit-count            264410)
(declare-const $k@83@03 $Perm)
(assert ($Perm.isReadVar $k@83@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          408
;  :arith-assert-diseq      64
;  :arith-assert-lower      216
;  :arith-assert-upper      328
;  :arith-conflicts         200
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         211
;  :arith-pivots            614
;  :binary-propagations     16
;  :conflicts               585
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2408
;  :mk-clause               226
;  :num-allocs              4910481
;  :num-checks              716
;  :propagations            183
;  :quant-instantiations    66
;  :rlimit-count            264760)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@83@03 $Perm.No) (< $Perm.No $k@83@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          408
;  :arith-assert-diseq      64
;  :arith-assert-lower      216
;  :arith-assert-upper      328
;  :arith-conflicts         200
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         211
;  :arith-pivots            614
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2408
;  :mk-clause               226
;  :num-allocs              4910481
;  :num-checks              717
;  :propagations            183
;  :quant-instantiations    66
;  :rlimit-count            264810)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5950
;  :arith-add-rows          408
;  :arith-assert-diseq      64
;  :arith-assert-lower      216
;  :arith-assert-upper      328
;  :arith-conflicts         200
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         211
;  :arith-pivots            614
;  :binary-propagations     16
;  :conflicts               587
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              209
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2409
;  :mk-clause               226
;  :num-allocs              4910481
;  :num-checks              718
;  :propagations            183
;  :quant-instantiations    66
;  :rlimit-count            264890)
(push) ; 7
(assert (not (not (= (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          408
;  :arith-assert-diseq      64
;  :arith-assert-lower      216
;  :arith-assert-upper      329
;  :arith-conflicts         201
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         211
;  :arith-pivots            615
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2411
;  :mk-clause               228
;  :num-allocs              4910481
;  :num-checks              719
;  :propagations            184
;  :quant-instantiations    66
;  :rlimit-count            264996)
(assert (< $k@83@03 (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(assert (<=
  $Perm.No
  (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@83@03)))
(assert (<=
  (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@83@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@83@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          414
;  :arith-assert-diseq      64
;  :arith-assert-lower      218
;  :arith-assert-upper      331
;  :arith-conflicts         202
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         212
;  :arith-pivots            620
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2415
;  :mk-clause               228
;  :num-allocs              4910481
;  :num-checks              720
;  :propagations            184
;  :quant-instantiations    66
;  :rlimit-count            265437)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          414
;  :arith-assert-diseq      64
;  :arith-assert-lower      218
;  :arith-assert-upper      331
;  :arith-conflicts         202
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         212
;  :arith-pivots            620
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2415
;  :mk-clause               228
;  :num-allocs              4910481
;  :num-checks              721
;  :propagations            184
;  :quant-instantiations    66
;  :rlimit-count            265459)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          414
;  :arith-assert-diseq      64
;  :arith-assert-lower      218
;  :arith-assert-upper      331
;  :arith-conflicts         202
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         212
;  :arith-pivots            620
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2415
;  :mk-clause               228
;  :num-allocs              4910481
;  :num-checks              722
;  :propagations            184
;  :quant-instantiations    66
;  :rlimit-count            265488)
(declare-const $k@84@03 $Perm)
(assert ($Perm.isReadVar $k@84@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          417
;  :arith-assert-diseq      65
;  :arith-assert-lower      220
;  :arith-assert-upper      333
;  :arith-conflicts         203
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         213
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2420
;  :mk-clause               230
;  :num-allocs              4910481
;  :num-checks              723
;  :propagations            185
;  :quant-instantiations    66
;  :rlimit-count            265869)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          417
;  :arith-assert-diseq      65
;  :arith-assert-lower      220
;  :arith-assert-upper      333
;  :arith-conflicts         203
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         213
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2420
;  :mk-clause               230
;  :num-allocs              4910481
;  :num-checks              724
;  :propagations            185
;  :quant-instantiations    66
;  :rlimit-count            265891)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          417
;  :arith-assert-diseq      65
;  :arith-assert-lower      220
;  :arith-assert-upper      333
;  :arith-conflicts         203
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         213
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2420
;  :mk-clause               230
;  :num-allocs              4910481
;  :num-checks              725
;  :propagations            185
;  :quant-instantiations    66
;  :rlimit-count            265920)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@84@03 $Perm.No) (< $Perm.No $k@84@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          417
;  :arith-assert-diseq      65
;  :arith-assert-lower      220
;  :arith-assert-upper      333
;  :arith-conflicts         203
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         213
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               591
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2420
;  :mk-clause               230
;  :num-allocs              4910481
;  :num-checks              726
;  :propagations            185
;  :quant-instantiations    66
;  :rlimit-count            265970)
(set-option :timeout 10)
(push) ; 7
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5951
;  :arith-add-rows          417
;  :arith-assert-diseq      65
;  :arith-assert-lower      220
;  :arith-assert-upper      333
;  :arith-conflicts         203
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         213
;  :arith-pivots            624
;  :binary-propagations     16
;  :conflicts               591
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              211
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2420
;  :mk-clause               230
;  :num-allocs              4910481
;  :num-checks              727
;  :propagations            185
;  :quant-instantiations    66
;  :rlimit-count            265981)
(push) ; 7
(assert (not (not
  (=
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@75@03)
      $k@57@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          421
;  :arith-assert-diseq      65
;  :arith-assert-lower      220
;  :arith-assert-upper      334
;  :arith-conflicts         204
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         213
;  :arith-pivots            626
;  :binary-propagations     16
;  :conflicts               592
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2422
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              728
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            266237)
(assert (<
  $k@84@03
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@75@03)
    $k@57@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@75@03)
      $k@57@03)
    $k@84@03)))
(assert (<=
  (-
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@75@03)
      $k@57@03)
    $k@84@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
            (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
          $k@75@03)
        $k@57@03)
      $k@84@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          431
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      336
;  :arith-conflicts         205
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         214
;  :arith-pivots            629
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2426
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              729
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            266770)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          431
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      336
;  :arith-conflicts         205
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         214
;  :arith-pivots            629
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2426
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              730
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            266792)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          431
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      336
;  :arith-conflicts         205
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         214
;  :arith-pivots            629
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2426
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              731
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            266821)
(push) ; 7
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          431
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      336
;  :arith-conflicts         205
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         214
;  :arith-pivots            629
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2426
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              732
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            266832)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          433
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      337
;  :arith-conflicts         206
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         215
;  :arith-pivots            631
;  :binary-propagations     16
;  :conflicts               594
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2427
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              733
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            267034)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          436
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      338
;  :arith-conflicts         207
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         216
;  :arith-pivots            636
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2428
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              734
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            267264)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          439
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      339
;  :arith-conflicts         208
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         217
;  :arith-pivots            640
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2429
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              735
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            267496)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          439
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      339
;  :arith-conflicts         208
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         217
;  :arith-pivots            640
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2429
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              736
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            267518)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          439
;  :arith-assert-diseq      65
;  :arith-assert-lower      222
;  :arith-assert-upper      339
;  :arith-conflicts         208
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         217
;  :arith-pivots            640
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2429
;  :mk-clause               232
;  :num-allocs              4910481
;  :num-checks              737
;  :propagations            186
;  :quant-instantiations    66
;  :rlimit-count            267547)
; [exec]
; label __return_set_bit
; [exec]
; sys__result := sys__local__result__11
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__19: Int :: { diz.ALU_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && diz.ALU_m.Main_alu == diz
(declare-const $k@85@03 $Perm)
(assert ($Perm.isReadVar $k@85@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@85@03 $Perm.No) (< $Perm.No $k@85@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5952
;  :arith-add-rows          439
;  :arith-assert-diseq      66
;  :arith-assert-lower      224
;  :arith-assert-upper      340
;  :arith-conflicts         208
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         217
;  :arith-pivots            640
;  :binary-propagations     16
;  :conflicts               597
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              213
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2433
;  :mk-clause               234
;  :num-allocs              4910481
;  :num-checks              738
;  :propagations            187
;  :quant-instantiations    66
;  :rlimit-count            267746)
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          443
;  :arith-assert-diseq      66
;  :arith-assert-lower      224
;  :arith-assert-upper      341
;  :arith-conflicts         209
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         217
;  :arith-pivots            643
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2435
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              739
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            267984)
(assert (<
  $k@85@03
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@85@03)))
(assert (<=
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@85@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@85@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          449
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      343
;  :arith-conflicts         210
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         218
;  :arith-pivots            645
;  :binary-propagations     16
;  :conflicts               599
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2439
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              740
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            268442)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          452
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      344
;  :arith-conflicts         211
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         219
;  :arith-pivots            650
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2440
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              741
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            268673)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          452
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      344
;  :arith-conflicts         211
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         219
;  :arith-pivots            650
;  :binary-propagations     16
;  :conflicts               601
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2441
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              742
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            268753)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          455
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      345
;  :arith-conflicts         212
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         220
;  :arith-pivots            654
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2442
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              743
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            268986)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          455
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      345
;  :arith-conflicts         212
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         220
;  :arith-pivots            654
;  :binary-propagations     16
;  :conflicts               603
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2443
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              744
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            269066)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          457
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      346
;  :arith-conflicts         213
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         221
;  :arith-pivots            656
;  :binary-propagations     16
;  :conflicts               604
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2444
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              745
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            269259)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          457
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      346
;  :arith-conflicts         213
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         221
;  :arith-pivots            656
;  :binary-propagations     16
;  :conflicts               605
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2445
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              746
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            269339)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          459
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      347
;  :arith-conflicts         214
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         222
;  :arith-pivots            658
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2446
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              747
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            269542)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          459
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      347
;  :arith-conflicts         214
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         222
;  :arith-pivots            658
;  :binary-propagations     16
;  :conflicts               607
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2447
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              748
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            269622)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          462
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      348
;  :arith-conflicts         215
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         223
;  :arith-pivots            663
;  :binary-propagations     16
;  :conflicts               608
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2448
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              749
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            269853)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          462
;  :arith-assert-diseq      66
;  :arith-assert-lower      226
;  :arith-assert-upper      348
;  :arith-conflicts         215
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         223
;  :arith-pivots            663
;  :binary-propagations     16
;  :conflicts               609
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2449
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              750
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            269933)
; [eval] (forall i__19: Int :: { diz.ALU_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|)
(declare-const i__19@86@03 Int)
(push) ; 7
; [eval] 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__19
(push) ; 8
; [then-branch: 35 | 0 <= i__19@86@03 | live]
; [else-branch: 35 | !(0 <= i__19@86@03) | live]
(push) ; 9
; [then-branch: 35 | 0 <= i__19@86@03]
(assert (<= 0 i__19@86@03))
; [eval] i__19 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          465
;  :arith-assert-diseq      66
;  :arith-assert-lower      227
;  :arith-assert-upper      349
;  :arith-conflicts         216
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         224
;  :arith-pivots            667
;  :binary-propagations     16
;  :conflicts               610
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2451
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              751
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            270219)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5953
;  :arith-add-rows          465
;  :arith-assert-diseq      66
;  :arith-assert-lower      227
;  :arith-assert-upper      349
;  :arith-conflicts         216
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         224
;  :arith-pivots            667
;  :binary-propagations     16
;  :conflicts               611
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2452
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              752
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            270299)
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(0 <= i__19@86@03)]
(assert (not (<= 0 i__19@86@03)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 36 | i__19@86@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@86@03 | live]
; [else-branch: 36 | !(i__19@86@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@86@03) | live]
(push) ; 9
; [then-branch: 36 | i__19@86@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@86@03]
(assert (and
  (<
    i__19@86@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (<= 0 i__19@86@03)))
; [eval] diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__19] == -1
; [eval] diz.ALU_m.Main_process_state[i__19]
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5954
;  :arith-add-rows          469
;  :arith-assert-diseq      66
;  :arith-assert-lower      228
;  :arith-assert-upper      351
;  :arith-conflicts         217
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         226
;  :arith-pivots            670
;  :binary-propagations     16
;  :conflicts               612
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2455
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              753
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            270651)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5954
;  :arith-add-rows          469
;  :arith-assert-diseq      66
;  :arith-assert-lower      228
;  :arith-assert-upper      351
;  :arith-conflicts         217
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         226
;  :arith-pivots            670
;  :binary-propagations     16
;  :conflicts               613
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2456
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              754
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            270731)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__19@86@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5954
;  :arith-add-rows          469
;  :arith-assert-diseq      66
;  :arith-assert-lower      228
;  :arith-assert-upper      351
;  :arith-conflicts         217
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         226
;  :arith-pivots            670
;  :binary-propagations     16
;  :conflicts               613
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2456
;  :mk-clause               236
;  :num-allocs              4910481
;  :num-checks              755
;  :propagations            188
;  :quant-instantiations    66
;  :rlimit-count            270740)
; [eval] -1
(push) ; 10
; [then-branch: 37 | First:(Second:(Second:(Second:($t@51@03))))[i__19@86@03] == -1 | live]
; [else-branch: 37 | First:(Second:(Second:(Second:($t@51@03))))[i__19@86@03] != -1 | live]
(push) ; 11
; [then-branch: 37 | First:(Second:(Second:(Second:($t@51@03))))[i__19@86@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@86@03)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 37 | First:(Second:(Second:(Second:($t@51@03))))[i__19@86@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__19@86@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__19]
; [eval] diz.ALU_m.Main_process_state[i__19]
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5956
;  :arith-add-rows          471
;  :arith-assert-diseq      68
;  :arith-assert-lower      231
;  :arith-assert-upper      353
;  :arith-conflicts         218
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         227
;  :arith-pivots            672
;  :binary-propagations     16
;  :conflicts               614
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2464
;  :mk-clause               247
;  :num-allocs              4910481
;  :num-checks              756
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            271179)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5956
;  :arith-add-rows          471
;  :arith-assert-diseq      68
;  :arith-assert-lower      231
;  :arith-assert-upper      353
;  :arith-conflicts         218
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         227
;  :arith-pivots            672
;  :binary-propagations     16
;  :conflicts               615
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2465
;  :mk-clause               247
;  :num-allocs              4910481
;  :num-checks              757
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            271259)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__19@86@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5956
;  :arith-add-rows          471
;  :arith-assert-diseq      68
;  :arith-assert-lower      231
;  :arith-assert-upper      353
;  :arith-conflicts         218
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         227
;  :arith-pivots            672
;  :binary-propagations     16
;  :conflicts               615
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2465
;  :mk-clause               247
;  :num-allocs              4910481
;  :num-checks              758
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            271268)
(push) ; 12
; [then-branch: 38 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@86@03] | live]
; [else-branch: 38 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@86@03]) | live]
(push) ; 13
; [then-branch: 38 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@86@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@86@03)))
; [eval] diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__19]
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          474
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      355
;  :arith-conflicts         219
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         229
;  :arith-pivots            679
;  :binary-propagations     16
;  :conflicts               616
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2470
;  :mk-clause               247
;  :num-allocs              4910481
;  :num-checks              759
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            271631)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          474
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      355
;  :arith-conflicts         219
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         229
;  :arith-pivots            679
;  :binary-propagations     16
;  :conflicts               617
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2471
;  :mk-clause               247
;  :num-allocs              4910481
;  :num-checks              760
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            271711)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__19@86@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          474
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      355
;  :arith-conflicts         219
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         229
;  :arith-pivots            679
;  :binary-propagations     16
;  :conflicts               617
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2471
;  :mk-clause               247
;  :num-allocs              4910481
;  :num-checks              761
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            271720)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          477
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      356
;  :arith-conflicts         220
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         230
;  :arith-pivots            683
;  :binary-propagations     16
;  :conflicts               618
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2472
;  :mk-clause               247
;  :num-allocs              4910481
;  :num-checks              762
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            271953)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          477
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      356
;  :arith-conflicts         220
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         230
;  :arith-pivots            683
;  :binary-propagations     16
;  :conflicts               619
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              215
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2473
;  :mk-clause               247
;  :num-allocs              4910481
;  :num-checks              763
;  :propagations            193
;  :quant-instantiations    68
;  :rlimit-count            272033)
(pop) ; 13
(push) ; 13
; [else-branch: 38 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@86@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__19@86@03))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 36 | !(i__19@86@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@86@03)]
(assert (not
  (and
    (<
      i__19@86@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    (<= 0 i__19@86@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__19@86@03 Int)) (!
  (implies
    (and
      (<
        i__19@86@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__19@86@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__19@86@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@86@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@86@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@86@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          477
;  :arith-assert-diseq      70
;  :arith-assert-lower      234
;  :arith-assert-upper      357
;  :arith-conflicts         220
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         231
;  :arith-pivots            684
;  :binary-propagations     16
;  :conflicts               620
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2481
;  :mk-clause               261
;  :num-allocs              4910481
;  :num-checks              764
;  :propagations            195
;  :quant-instantiations    70
;  :rlimit-count            272507)
(assert (forall ((i__19@86@03 Int)) (!
  (implies
    (and
      (<
        i__19@86@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__19@86@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__19@86@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@86@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@86@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@86@03))
  :qid |prog.l<no position>|)))
(declare-const $k@87@03 $Perm)
(assert ($Perm.isReadVar $k@87@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          481
;  :arith-assert-diseq      71
;  :arith-assert-lower      236
;  :arith-assert-upper      359
;  :arith-conflicts         221
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         232
;  :arith-pivots            687
;  :binary-propagations     16
;  :conflicts               621
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2487
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              765
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            273256)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@87@03 $Perm.No) (< $Perm.No $k@87@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          481
;  :arith-assert-diseq      71
;  :arith-assert-lower      236
;  :arith-assert-upper      359
;  :arith-conflicts         221
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         232
;  :arith-pivots            687
;  :binary-propagations     16
;  :conflicts               622
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2487
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              766
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            273306)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          481
;  :arith-assert-diseq      71
;  :arith-assert-lower      236
;  :arith-assert-upper      359
;  :arith-conflicts         221
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         232
;  :arith-pivots            687
;  :binary-propagations     16
;  :conflicts               622
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2487
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              767
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            273328)
(push) ; 7
(assert (not (not (= (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          481
;  :arith-assert-diseq      71
;  :arith-assert-lower      236
;  :arith-assert-upper      359
;  :arith-conflicts         221
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         232
;  :arith-pivots            687
;  :binary-propagations     16
;  :conflicts               623
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2488
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              768
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            273420)
(assert (< $k@87@03 (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03)))
(assert (<= $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@87@03)))
(assert (<= (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@87@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@87@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          484
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      361
;  :arith-conflicts         222
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         233
;  :arith-pivots            690
;  :binary-propagations     16
;  :conflicts               624
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2492
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              769
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            273838)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          484
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      361
;  :arith-conflicts         222
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         233
;  :arith-pivots            690
;  :binary-propagations     16
;  :conflicts               624
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2492
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              770
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            273860)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          484
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      361
;  :arith-conflicts         222
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         233
;  :arith-pivots            690
;  :binary-propagations     16
;  :conflicts               624
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2492
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              771
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            273889)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          487
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      362
;  :arith-conflicts         223
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         234
;  :arith-pivots            695
;  :binary-propagations     16
;  :conflicts               625
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2493
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              772
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274120)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          487
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      362
;  :arith-conflicts         223
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         234
;  :arith-pivots            695
;  :binary-propagations     16
;  :conflicts               625
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2493
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              773
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274142)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          487
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      362
;  :arith-conflicts         223
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         234
;  :arith-pivots            695
;  :binary-propagations     16
;  :conflicts               625
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2493
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              774
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274171)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          487
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      362
;  :arith-conflicts         223
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         234
;  :arith-pivots            695
;  :binary-propagations     16
;  :conflicts               625
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2493
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              775
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274182)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          490
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      363
;  :arith-conflicts         224
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         235
;  :arith-pivots            699
;  :binary-propagations     16
;  :conflicts               626
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2494
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              776
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274415)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          490
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      363
;  :arith-conflicts         224
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         235
;  :arith-pivots            699
;  :binary-propagations     16
;  :conflicts               626
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2494
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              777
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274437)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          490
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      363
;  :arith-conflicts         224
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         235
;  :arith-pivots            699
;  :binary-propagations     16
;  :conflicts               626
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2494
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              778
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274466)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          490
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      363
;  :arith-conflicts         224
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         235
;  :arith-pivots            699
;  :binary-propagations     16
;  :conflicts               626
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2494
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              779
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274477)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          494
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      364
;  :arith-conflicts         225
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         236
;  :arith-pivots            702
;  :binary-propagations     16
;  :conflicts               627
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2495
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              780
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274716)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          494
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      364
;  :arith-conflicts         225
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         236
;  :arith-pivots            702
;  :binary-propagations     16
;  :conflicts               627
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2495
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              781
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274738)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          494
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      364
;  :arith-conflicts         225
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         236
;  :arith-pivots            702
;  :binary-propagations     16
;  :conflicts               627
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2495
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              782
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274767)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          494
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      364
;  :arith-conflicts         225
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         236
;  :arith-pivots            702
;  :binary-propagations     16
;  :conflicts               627
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2495
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              783
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274778)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          496
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      365
;  :arith-conflicts         226
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         237
;  :arith-pivots            704
;  :binary-propagations     16
;  :conflicts               628
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2496
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              784
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            274984)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          496
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      365
;  :arith-conflicts         226
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         237
;  :arith-pivots            704
;  :binary-propagations     16
;  :conflicts               628
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2496
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              785
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275006)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          496
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      365
;  :arith-conflicts         226
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         237
;  :arith-pivots            704
;  :binary-propagations     16
;  :conflicts               628
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2496
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              786
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275035)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          496
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      365
;  :arith-conflicts         226
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         237
;  :arith-pivots            704
;  :binary-propagations     16
;  :conflicts               628
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2496
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              787
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275046)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          499
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      366
;  :arith-conflicts         227
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         238
;  :arith-pivots            709
;  :binary-propagations     16
;  :conflicts               629
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2497
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              788
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275277)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          499
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      366
;  :arith-conflicts         227
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         238
;  :arith-pivots            709
;  :binary-propagations     16
;  :conflicts               629
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2497
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              789
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275299)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          499
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      366
;  :arith-conflicts         227
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         238
;  :arith-pivots            709
;  :binary-propagations     16
;  :conflicts               629
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2497
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              790
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275328)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          499
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      366
;  :arith-conflicts         227
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         238
;  :arith-pivots            709
;  :binary-propagations     16
;  :conflicts               629
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2497
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              791
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275339)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          502
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      367
;  :arith-conflicts         228
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         239
;  :arith-pivots            713
;  :binary-propagations     16
;  :conflicts               630
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2498
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              792
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275572)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          502
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      367
;  :arith-conflicts         228
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         239
;  :arith-pivots            713
;  :binary-propagations     16
;  :conflicts               630
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2498
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              793
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275594)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          502
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      367
;  :arith-conflicts         228
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         239
;  :arith-pivots            713
;  :binary-propagations     16
;  :conflicts               630
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2498
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              794
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275623)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          502
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      367
;  :arith-conflicts         228
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         239
;  :arith-pivots            713
;  :binary-propagations     16
;  :conflicts               630
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2498
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              795
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275634)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          506
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      368
;  :arith-conflicts         229
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         240
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               631
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2499
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              796
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275873)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          506
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      368
;  :arith-conflicts         229
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         240
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               631
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2499
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              797
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275895)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          506
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      368
;  :arith-conflicts         229
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         240
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               631
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2499
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              798
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275924)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          506
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      368
;  :arith-conflicts         229
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         240
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               631
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2499
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              799
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            275935)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          508
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      369
;  :arith-conflicts         230
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         241
;  :arith-pivots            718
;  :binary-propagations     16
;  :conflicts               632
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2500
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              800
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276141)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          508
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      369
;  :arith-conflicts         230
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         241
;  :arith-pivots            718
;  :binary-propagations     16
;  :conflicts               632
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2500
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              801
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276163)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          508
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      369
;  :arith-conflicts         230
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         241
;  :arith-pivots            718
;  :binary-propagations     16
;  :conflicts               632
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2500
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              802
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276192)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          508
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      369
;  :arith-conflicts         230
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         241
;  :arith-pivots            718
;  :binary-propagations     16
;  :conflicts               632
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2500
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              803
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276203)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          511
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      370
;  :arith-conflicts         231
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         242
;  :arith-pivots            723
;  :binary-propagations     16
;  :conflicts               633
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2501
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              804
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276434)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          511
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      370
;  :arith-conflicts         231
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         242
;  :arith-pivots            723
;  :binary-propagations     16
;  :conflicts               633
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2501
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              805
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276456)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          511
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      370
;  :arith-conflicts         231
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         242
;  :arith-pivots            723
;  :binary-propagations     16
;  :conflicts               633
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2501
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              806
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276485)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          511
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      370
;  :arith-conflicts         231
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         242
;  :arith-pivots            723
;  :binary-propagations     16
;  :conflicts               633
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2501
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              807
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276496)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          514
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      371
;  :arith-conflicts         232
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         243
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               634
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2502
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              808
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276729)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          514
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      371
;  :arith-conflicts         232
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         243
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               634
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2502
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              809
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276751)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          514
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      371
;  :arith-conflicts         232
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         243
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               634
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2502
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              810
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276780)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          514
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      371
;  :arith-conflicts         232
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         243
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               634
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2502
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              811
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276791)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          516
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      372
;  :arith-conflicts         233
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         244
;  :arith-pivots            729
;  :binary-propagations     16
;  :conflicts               635
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2503
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              812
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            276984)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          516
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      372
;  :arith-conflicts         233
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         244
;  :arith-pivots            729
;  :binary-propagations     16
;  :conflicts               635
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2503
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              813
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277006)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          516
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      372
;  :arith-conflicts         233
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         244
;  :arith-pivots            729
;  :binary-propagations     16
;  :conflicts               635
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2503
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              814
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277035)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          516
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      372
;  :arith-conflicts         233
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         244
;  :arith-pivots            729
;  :binary-propagations     16
;  :conflicts               635
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2503
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              815
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277046)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          518
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      373
;  :arith-conflicts         234
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         245
;  :arith-pivots            731
;  :binary-propagations     16
;  :conflicts               636
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2504
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              816
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277249)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          518
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      373
;  :arith-conflicts         234
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         245
;  :arith-pivots            731
;  :binary-propagations     16
;  :conflicts               636
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2504
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              817
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277271)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          518
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      373
;  :arith-conflicts         234
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         245
;  :arith-pivots            731
;  :binary-propagations     16
;  :conflicts               636
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2504
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              818
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277300)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          518
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      373
;  :arith-conflicts         234
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         245
;  :arith-pivots            731
;  :binary-propagations     16
;  :conflicts               636
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2504
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              819
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277311)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          521
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      374
;  :arith-conflicts         235
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         246
;  :arith-pivots            736
;  :binary-propagations     16
;  :conflicts               637
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2505
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              820
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277542)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          521
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      374
;  :arith-conflicts         235
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         246
;  :arith-pivots            736
;  :binary-propagations     16
;  :conflicts               637
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2505
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              821
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277564)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          521
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      374
;  :arith-conflicts         235
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         246
;  :arith-pivots            736
;  :binary-propagations     16
;  :conflicts               637
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2505
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              822
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277593)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          521
;  :arith-assert-diseq      71
;  :arith-assert-lower      238
;  :arith-assert-upper      374
;  :arith-conflicts         235
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         246
;  :arith-pivots            736
;  :binary-propagations     16
;  :conflicts               637
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2505
;  :mk-clause               263
;  :num-allocs              4910481
;  :num-checks              823
;  :propagations            196
;  :quant-instantiations    70
;  :rlimit-count            277604)
(declare-const $k@88@03 $Perm)
(assert ($Perm.isReadVar $k@88@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          524
;  :arith-assert-diseq      72
;  :arith-assert-lower      240
;  :arith-assert-upper      376
;  :arith-conflicts         236
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         247
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               638
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2510
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              824
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            277985)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@88@03 $Perm.No) (< $Perm.No $k@88@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          524
;  :arith-assert-diseq      72
;  :arith-assert-lower      240
;  :arith-assert-upper      376
;  :arith-conflicts         236
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         247
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               639
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2510
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              825
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278035)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          524
;  :arith-assert-diseq      72
;  :arith-assert-lower      240
;  :arith-assert-upper      376
;  :arith-conflicts         236
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         247
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               639
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2510
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              826
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278057)
(push) ; 7
(assert (not (not (= (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          524
;  :arith-assert-diseq      72
;  :arith-assert-lower      240
;  :arith-assert-upper      376
;  :arith-conflicts         236
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         247
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               640
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2511
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              827
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278149)
(assert (< $k@88@03 (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@88@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@88@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@88@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          528
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      378
;  :arith-conflicts         237
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         248
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               641
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2515
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              828
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278555)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          528
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      378
;  :arith-conflicts         237
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         248
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               641
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2515
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              829
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278577)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          528
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      378
;  :arith-conflicts         237
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         248
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               641
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2515
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              830
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278606)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          530
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      379
;  :arith-conflicts         238
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         249
;  :arith-pivots            745
;  :binary-propagations     16
;  :conflicts               642
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2516
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              831
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278809)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          530
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      379
;  :arith-conflicts         238
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         249
;  :arith-pivots            745
;  :binary-propagations     16
;  :conflicts               642
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2516
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              832
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278831)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          530
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      379
;  :arith-conflicts         238
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         249
;  :arith-pivots            745
;  :binary-propagations     16
;  :conflicts               642
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2516
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              833
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            278860)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          530
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      379
;  :arith-conflicts         238
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         249
;  :arith-pivots            745
;  :binary-propagations     16
;  :conflicts               643
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2517
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              834
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            279170)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          533
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      380
;  :arith-conflicts         239
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         250
;  :arith-pivots            750
;  :binary-propagations     16
;  :conflicts               644
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2518
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              835
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            279401)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          533
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      380
;  :arith-conflicts         239
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         250
;  :arith-pivots            750
;  :binary-propagations     16
;  :conflicts               644
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2518
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              836
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            279423)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          533
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      380
;  :arith-conflicts         239
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         250
;  :arith-pivots            750
;  :binary-propagations     16
;  :conflicts               644
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2518
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              837
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            279452)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          533
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      380
;  :arith-conflicts         239
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         250
;  :arith-pivots            750
;  :binary-propagations     16
;  :conflicts               645
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2519
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              838
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            279762)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          536
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      381
;  :arith-conflicts         240
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         251
;  :arith-pivots            754
;  :binary-propagations     16
;  :conflicts               646
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2520
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              839
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            279995)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          536
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      381
;  :arith-conflicts         240
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         251
;  :arith-pivots            754
;  :binary-propagations     16
;  :conflicts               646
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2520
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              840
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            280017)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          536
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      381
;  :arith-conflicts         240
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         251
;  :arith-pivots            754
;  :binary-propagations     16
;  :conflicts               646
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2520
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              841
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            280046)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          536
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      381
;  :arith-conflicts         240
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         251
;  :arith-pivots            754
;  :binary-propagations     16
;  :conflicts               647
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2521
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              842
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            280356)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          540
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      382
;  :arith-conflicts         241
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         252
;  :arith-pivots            757
;  :binary-propagations     16
;  :conflicts               648
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2522
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              843
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            280595)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          540
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      382
;  :arith-conflicts         241
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         252
;  :arith-pivots            757
;  :binary-propagations     16
;  :conflicts               648
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2522
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              844
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            280617)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          540
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      382
;  :arith-conflicts         241
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         252
;  :arith-pivots            757
;  :binary-propagations     16
;  :conflicts               648
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2522
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              845
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            280646)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          540
;  :arith-assert-diseq      72
;  :arith-assert-lower      242
;  :arith-assert-upper      382
;  :arith-conflicts         241
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         252
;  :arith-pivots            757
;  :binary-propagations     16
;  :conflicts               649
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2523
;  :mk-clause               265
;  :num-allocs              4910481
;  :num-checks              846
;  :propagations            197
;  :quant-instantiations    70
;  :rlimit-count            280956)
(declare-const $k@89@03 $Perm)
(assert ($Perm.isReadVar $k@89@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          542
;  :arith-assert-diseq      73
;  :arith-assert-lower      244
;  :arith-assert-upper      384
;  :arith-conflicts         242
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         253
;  :arith-pivots            759
;  :binary-propagations     16
;  :conflicts               650
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2528
;  :mk-clause               267
;  :num-allocs              4910481
;  :num-checks              847
;  :propagations            198
;  :quant-instantiations    70
;  :rlimit-count            281310)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@89@03 $Perm.No) (< $Perm.No $k@89@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          542
;  :arith-assert-diseq      73
;  :arith-assert-lower      244
;  :arith-assert-upper      384
;  :arith-conflicts         242
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         253
;  :arith-pivots            759
;  :binary-propagations     16
;  :conflicts               651
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2528
;  :mk-clause               267
;  :num-allocs              4910481
;  :num-checks              848
;  :propagations            198
;  :quant-instantiations    70
;  :rlimit-count            281360)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          542
;  :arith-assert-diseq      73
;  :arith-assert-lower      244
;  :arith-assert-upper      384
;  :arith-conflicts         242
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         253
;  :arith-pivots            759
;  :binary-propagations     16
;  :conflicts               651
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2528
;  :mk-clause               267
;  :num-allocs              4910481
;  :num-checks              849
;  :propagations            198
;  :quant-instantiations    70
;  :rlimit-count            281382)
(push) ; 7
(assert (not (not (= (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          542
;  :arith-assert-diseq      73
;  :arith-assert-lower      244
;  :arith-assert-upper      384
;  :arith-conflicts         242
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         253
;  :arith-pivots            759
;  :binary-propagations     16
;  :conflicts               652
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2529
;  :mk-clause               267
;  :num-allocs              4910481
;  :num-checks              850
;  :propagations            198
;  :quant-instantiations    70
;  :rlimit-count            281474)
(assert (< $k@89@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)))
(assert (<= $Perm.No (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@89@03)))
(assert (<= (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@89@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@89@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          550
;  :arith-assert-diseq      73
;  :arith-assert-lower      246
;  :arith-assert-upper      386
;  :arith-conflicts         243
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         254
;  :arith-pivots            767
;  :binary-propagations     16
;  :conflicts               653
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2533
;  :mk-clause               267
;  :num-allocs              4910481
;  :num-checks              851
;  :propagations            198
;  :quant-instantiations    70
;  :rlimit-count            281982)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          550
;  :arith-assert-diseq      73
;  :arith-assert-lower      246
;  :arith-assert-upper      386
;  :arith-conflicts         243
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         254
;  :arith-pivots            767
;  :binary-propagations     16
;  :conflicts               653
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2533
;  :mk-clause               267
;  :num-allocs              4910481
;  :num-checks              852
;  :propagations            198
;  :quant-instantiations    70
;  :rlimit-count            282004)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          550
;  :arith-assert-diseq      73
;  :arith-assert-lower      246
;  :arith-assert-upper      386
;  :arith-conflicts         243
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         254
;  :arith-pivots            767
;  :binary-propagations     16
;  :conflicts               653
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2533
;  :mk-clause               267
;  :num-allocs              4910481
;  :num-checks              853
;  :propagations            198
;  :quant-instantiations    70
;  :rlimit-count            282033)
(declare-const $k@90@03 $Perm)
(assert ($Perm.isReadVar $k@90@03 $Perm.Write))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          553
;  :arith-assert-diseq      74
;  :arith-assert-lower      248
;  :arith-assert-upper      388
;  :arith-conflicts         244
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         255
;  :arith-pivots            771
;  :binary-propagations     16
;  :conflicts               654
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2538
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              854
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            282415)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          553
;  :arith-assert-diseq      74
;  :arith-assert-lower      248
;  :arith-assert-upper      388
;  :arith-conflicts         244
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         255
;  :arith-pivots            771
;  :binary-propagations     16
;  :conflicts               654
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2538
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              855
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            282437)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          553
;  :arith-assert-diseq      74
;  :arith-assert-lower      248
;  :arith-assert-upper      388
;  :arith-conflicts         244
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         255
;  :arith-pivots            771
;  :binary-propagations     16
;  :conflicts               654
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2538
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              856
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            282466)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@90@03 $Perm.No) (< $Perm.No $k@90@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          553
;  :arith-assert-diseq      74
;  :arith-assert-lower      248
;  :arith-assert-upper      388
;  :arith-conflicts         244
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         255
;  :arith-pivots            771
;  :binary-propagations     16
;  :conflicts               655
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2538
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              857
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            282516)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          553
;  :arith-assert-diseq      74
;  :arith-assert-lower      248
;  :arith-assert-upper      388
;  :arith-conflicts         244
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         255
;  :arith-pivots            771
;  :binary-propagations     16
;  :conflicts               655
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2538
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              858
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            282527)
(push) ; 7
(assert (not (not (= $k@57@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          553
;  :arith-assert-diseq      74
;  :arith-assert-lower      248
;  :arith-assert-upper      388
;  :arith-conflicts         244
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         255
;  :arith-pivots            771
;  :binary-propagations     16
;  :conflicts               655
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2538
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              859
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            282538)
(assert (< $k@90@03 $k@57@03))
(assert (<= $Perm.No (- $k@57@03 $k@90@03)))
(assert (<= (- $k@57@03 $k@90@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@57@03 $k@90@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          558
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      390
;  :arith-conflicts         245
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         256
;  :arith-pivots            774
;  :binary-propagations     16
;  :conflicts               656
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2542
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              860
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            282958)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          558
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      390
;  :arith-conflicts         245
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         256
;  :arith-pivots            774
;  :binary-propagations     16
;  :conflicts               656
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2542
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              861
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            282980)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          558
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      390
;  :arith-conflicts         245
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         256
;  :arith-pivots            774
;  :binary-propagations     16
;  :conflicts               656
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2542
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              862
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            283009)
(push) ; 7
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          558
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      390
;  :arith-conflicts         245
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         256
;  :arith-pivots            774
;  :binary-propagations     16
;  :conflicts               656
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2542
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              863
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            283020)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          560
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      391
;  :arith-conflicts         246
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         257
;  :arith-pivots            776
;  :binary-propagations     16
;  :conflicts               657
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2543
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              864
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            283222)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          563
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      392
;  :arith-conflicts         247
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         258
;  :arith-pivots            781
;  :binary-propagations     16
;  :conflicts               658
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2544
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              865
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            283452)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          566
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      393
;  :arith-conflicts         248
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         259
;  :arith-pivots            785
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2545
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              866
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            283684)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          566
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      393
;  :arith-conflicts         248
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         259
;  :arith-pivots            785
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2545
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              867
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            283706)
(push) ; 7
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5958
;  :arith-add-rows          566
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      393
;  :arith-conflicts         248
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         259
;  :arith-pivots            785
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1633
;  :datatype-occurs-check   140
;  :datatype-splits         1109
;  :decisions               1576
;  :del-clause              240
;  :final-checks            62
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2545
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              868
;  :propagations            199
;  :quant-instantiations    70
;  :rlimit-count            283735)
; [exec]
; inhale false
(pop) ; 6
(push) ; 6
; [else-branch: 30 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03))))))))))))))))))))))) != bit@10@03]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
    bit@10@03)))
(pop) ; 6
; [eval] !(diz.ALU_current_bit == bit)
; [eval] diz.ALU_current_bit == bit
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
  bit@10@03)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6189
;  :arith-add-rows          573
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      393
;  :arith-conflicts         248
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         259
;  :arith-pivots            793
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 1705
;  :datatype-occurs-check   147
;  :datatype-splits         1157
;  :decisions               1645
;  :del-clause              254
;  :final-checks            65
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2596
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              869
;  :propagations            202
;  :quant-instantiations    71
;  :rlimit-count            285770
;  :time                    0.00)
(push) ; 6
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
    bit@10@03))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6421
;  :arith-add-rows          573
;  :arith-assert-diseq      74
;  :arith-assert-lower      250
;  :arith-assert-upper      393
;  :arith-conflicts         248
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         259
;  :arith-pivots            793
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1777
;  :datatype-occurs-check   154
;  :datatype-splits         1205
;  :decisions               1714
;  :del-clause              254
;  :final-checks            68
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2647
;  :mk-clause               269
;  :num-allocs              4910481
;  :num-checks              870
;  :propagations            205
;  :quant-instantiations    72
;  :rlimit-count            287595
;  :time                    0.00)
; [then-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03))))))))))))))))))))))) != bit@10@03 | live]
; [else-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03))))))))))))))))))))))) == bit@10@03 | live]
(push) ; 6
; [then-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03))))))))))))))))))))))) != bit@10@03]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
    bit@10@03)))
; [eval] bit == 1
(push) ; 7
(assert (not (not (= bit@10@03 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6654
;  :arith-add-rows          573
;  :arith-assert-diseq      76
;  :arith-assert-lower      252
;  :arith-assert-upper      393
;  :arith-conflicts         248
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         259
;  :arith-pivots            793
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    238
;  :datatype-constructor-ax 1849
;  :datatype-occurs-check   161
;  :datatype-splits         1253
;  :decisions               1784
;  :del-clause              258
;  :final-checks            71
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2702
;  :mk-clause               273
;  :num-allocs              4910481
;  :num-checks              871
;  :propagations            209
;  :quant-instantiations    73
;  :rlimit-count            289496
;  :time                    0.00)
(push) ; 7
(assert (not (= bit@10@03 1)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6884
;  :arith-add-rows          573
;  :arith-assert-diseq      76
;  :arith-assert-lower      252
;  :arith-assert-upper      393
;  :arith-conflicts         248
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         259
;  :arith-pivots            793
;  :binary-propagations     16
;  :conflicts               659
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              258
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2752
;  :mk-clause               273
;  :num-allocs              4910481
;  :num-checks              872
;  :propagations            212
;  :quant-instantiations    73
;  :rlimit-count            291074
;  :time                    0.00)
; [then-branch: 40 | bit@10@03 == 1 | live]
; [else-branch: 40 | bit@10@03 != 1 | live]
(push) ; 7
; [then-branch: 40 | bit@10@03 == 1]
(assert (= bit@10@03 1))
; [exec]
; sys__local__result__11 := value + diz.ALU_divisor
; [eval] value + diz.ALU_divisor
(declare-const sys__local__result__11@91@03 Int)
(assert (=
  sys__local__result__11@91@03
  (+
    value@8@03
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__17: Int :: { diz.ALU_m.Main_process_state[i__17] } 0 <= i__17 && i__17 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__17] == -1 || 0 <= diz.ALU_m.Main_process_state[i__17] && diz.ALU_m.Main_process_state[i__17] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && diz.ALU_m.Main_alu == diz
(declare-const $k@92@03 $Perm)
(assert ($Perm.isReadVar $k@92@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@92@03 $Perm.No) (< $Perm.No $k@92@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6887
;  :arith-add-rows          573
;  :arith-assert-diseq      77
;  :arith-assert-lower      255
;  :arith-assert-upper      395
;  :arith-conflicts         248
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         259
;  :arith-pivots            794
;  :binary-propagations     16
;  :conflicts               660
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              258
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2761
;  :mk-clause               278
;  :num-allocs              4910481
;  :num-checks              873
;  :propagations            215
;  :quant-instantiations    74
;  :rlimit-count            291632)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (=
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6888
;  :arith-add-rows          575
;  :arith-assert-diseq      77
;  :arith-assert-lower      255
;  :arith-assert-upper      396
;  :arith-conflicts         249
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         259
;  :arith-pivots            796
;  :binary-propagations     16
;  :conflicts               661
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2763
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              874
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            291822)
(assert (<
  $k@92@03
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@92@03)))
(assert (<=
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@92@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@92@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6888
;  :arith-add-rows          582
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      398
;  :arith-conflicts         250
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         260
;  :arith-pivots            798
;  :binary-propagations     16
;  :conflicts               662
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2767
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              875
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            292276)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= $t@74@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6889
;  :arith-add-rows          582
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      398
;  :arith-conflicts         250
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         260
;  :arith-pivots            798
;  :binary-propagations     16
;  :conflicts               663
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2768
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              876
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            292324)
(assert (not (= $t@74@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          585
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      399
;  :arith-conflicts         251
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         261
;  :arith-pivots            803
;  :binary-propagations     16
;  :conflicts               664
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2770
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              877
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            292609)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          585
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      399
;  :arith-conflicts         251
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         261
;  :arith-pivots            803
;  :binary-propagations     16
;  :conflicts               665
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2771
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              878
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            292689)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          588
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      400
;  :arith-conflicts         252
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         262
;  :arith-pivots            807
;  :binary-propagations     16
;  :conflicts               666
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2772
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              879
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            292920)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          588
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      400
;  :arith-conflicts         252
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         262
;  :arith-pivots            807
;  :binary-propagations     16
;  :conflicts               667
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2773
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              880
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            293000)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          590
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      401
;  :arith-conflicts         253
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         263
;  :arith-pivots            809
;  :binary-propagations     16
;  :conflicts               668
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2774
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              881
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            293191)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          590
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      401
;  :arith-conflicts         253
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         263
;  :arith-pivots            809
;  :binary-propagations     16
;  :conflicts               669
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2775
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              882
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            293271)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          592
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      402
;  :arith-conflicts         254
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         264
;  :arith-pivots            811
;  :binary-propagations     16
;  :conflicts               670
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2776
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              883
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            293472)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          592
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      402
;  :arith-conflicts         254
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         264
;  :arith-pivots            811
;  :binary-propagations     16
;  :conflicts               671
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2777
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              884
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            293552)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          595
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      403
;  :arith-conflicts         255
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         265
;  :arith-pivots            816
;  :binary-propagations     16
;  :conflicts               672
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2778
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              885
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            293781)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          595
;  :arith-assert-diseq      77
;  :arith-assert-lower      257
;  :arith-assert-upper      403
;  :arith-conflicts         255
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         265
;  :arith-pivots            816
;  :binary-propagations     16
;  :conflicts               673
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2779
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              886
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            293861)
; [eval] (forall i__17: Int :: { diz.ALU_m.Main_process_state[i__17] } 0 <= i__17 && i__17 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__17] == -1 || 0 <= diz.ALU_m.Main_process_state[i__17] && diz.ALU_m.Main_process_state[i__17] < |diz.ALU_m.Main_event_state|)
(declare-const i__17@93@03 Int)
(push) ; 8
; [eval] 0 <= i__17 && i__17 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__17] == -1 || 0 <= diz.ALU_m.Main_process_state[i__17] && diz.ALU_m.Main_process_state[i__17] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__17 && i__17 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__17
(push) ; 9
; [then-branch: 41 | 0 <= i__17@93@03 | live]
; [else-branch: 41 | !(0 <= i__17@93@03) | live]
(push) ; 10
; [then-branch: 41 | 0 <= i__17@93@03]
(assert (<= 0 i__17@93@03))
; [eval] i__17 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          598
;  :arith-assert-diseq      77
;  :arith-assert-lower      258
;  :arith-assert-upper      404
;  :arith-conflicts         256
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         266
;  :arith-pivots            820
;  :binary-propagations     16
;  :conflicts               674
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2781
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              887
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            294145)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6890
;  :arith-add-rows          598
;  :arith-assert-diseq      77
;  :arith-assert-lower      258
;  :arith-assert-upper      404
;  :arith-conflicts         256
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         266
;  :arith-pivots            820
;  :binary-propagations     16
;  :conflicts               675
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2782
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              888
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            294225)
(pop) ; 10
(push) ; 10
; [else-branch: 41 | !(0 <= i__17@93@03)]
(assert (not (<= 0 i__17@93@03)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 42 | i__17@93@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__17@93@03 | live]
; [else-branch: 42 | !(i__17@93@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__17@93@03) | live]
(push) ; 10
; [then-branch: 42 | i__17@93@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__17@93@03]
(assert (and
  (<
    i__17@93@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (<= 0 i__17@93@03)))
; [eval] diz.ALU_m.Main_process_state[i__17] == -1 || 0 <= diz.ALU_m.Main_process_state[i__17] && diz.ALU_m.Main_process_state[i__17] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__17] == -1
; [eval] diz.ALU_m.Main_process_state[i__17]
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6891
;  :arith-add-rows          600
;  :arith-assert-diseq      77
;  :arith-assert-lower      259
;  :arith-assert-upper      406
;  :arith-conflicts         257
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         268
;  :arith-pivots            822
;  :binary-propagations     16
;  :conflicts               676
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2785
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              889
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            294529)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6891
;  :arith-add-rows          600
;  :arith-assert-diseq      77
;  :arith-assert-lower      259
;  :arith-assert-upper      406
;  :arith-conflicts         257
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         268
;  :arith-pivots            822
;  :binary-propagations     16
;  :conflicts               677
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2786
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              890
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            294609)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__17@93@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6891
;  :arith-add-rows          600
;  :arith-assert-diseq      77
;  :arith-assert-lower      259
;  :arith-assert-upper      406
;  :arith-conflicts         257
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         268
;  :arith-pivots            822
;  :binary-propagations     16
;  :conflicts               677
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2786
;  :mk-clause               280
;  :num-allocs              4910481
;  :num-checks              891
;  :propagations            216
;  :quant-instantiations    74
;  :rlimit-count            294618)
; [eval] -1
(push) ; 11
; [then-branch: 43 | First:(Second:(Second:(Second:($t@51@03))))[i__17@93@03] == -1 | live]
; [else-branch: 43 | First:(Second:(Second:(Second:($t@51@03))))[i__17@93@03] != -1 | live]
(push) ; 12
; [then-branch: 43 | First:(Second:(Second:(Second:($t@51@03))))[i__17@93@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__17@93@03)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 43 | First:(Second:(Second:(Second:($t@51@03))))[i__17@93@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__17@93@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__17] && diz.ALU_m.Main_process_state[i__17] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__17]
; [eval] diz.ALU_m.Main_process_state[i__17]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6893
;  :arith-add-rows          602
;  :arith-assert-diseq      79
;  :arith-assert-lower      262
;  :arith-assert-upper      408
;  :arith-conflicts         258
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         269
;  :arith-pivots            824
;  :binary-propagations     16
;  :conflicts               678
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2794
;  :mk-clause               290
;  :num-allocs              4910481
;  :num-checks              892
;  :propagations            221
;  :quant-instantiations    75
;  :rlimit-count            295027)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6893
;  :arith-add-rows          602
;  :arith-assert-diseq      79
;  :arith-assert-lower      262
;  :arith-assert-upper      408
;  :arith-conflicts         258
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         269
;  :arith-pivots            824
;  :binary-propagations     16
;  :conflicts               679
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2795
;  :mk-clause               290
;  :num-allocs              4910481
;  :num-checks              893
;  :propagations            221
;  :quant-instantiations    75
;  :rlimit-count            295107)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__17@93@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6893
;  :arith-add-rows          602
;  :arith-assert-diseq      79
;  :arith-assert-lower      262
;  :arith-assert-upper      408
;  :arith-conflicts         258
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         269
;  :arith-pivots            824
;  :binary-propagations     16
;  :conflicts               679
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2795
;  :mk-clause               290
;  :num-allocs              4910481
;  :num-checks              894
;  :propagations            221
;  :quant-instantiations    75
;  :rlimit-count            295116)
(push) ; 13
; [then-branch: 44 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__17@93@03] | live]
; [else-branch: 44 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__17@93@03]) | live]
(push) ; 14
; [then-branch: 44 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__17@93@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__17@93@03)))
; [eval] diz.ALU_m.Main_process_state[i__17] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__17]
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          605
;  :arith-assert-diseq      79
;  :arith-assert-lower      264
;  :arith-assert-upper      410
;  :arith-conflicts         259
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         271
;  :arith-pivots            829
;  :binary-propagations     16
;  :conflicts               680
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2800
;  :mk-clause               290
;  :num-allocs              4910481
;  :num-checks              895
;  :propagations            221
;  :quant-instantiations    75
;  :rlimit-count            295467)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          605
;  :arith-assert-diseq      79
;  :arith-assert-lower      264
;  :arith-assert-upper      410
;  :arith-conflicts         259
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         271
;  :arith-pivots            829
;  :binary-propagations     16
;  :conflicts               681
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2801
;  :mk-clause               290
;  :num-allocs              4910481
;  :num-checks              896
;  :propagations            221
;  :quant-instantiations    75
;  :rlimit-count            295547)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__17@93@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          605
;  :arith-assert-diseq      79
;  :arith-assert-lower      264
;  :arith-assert-upper      410
;  :arith-conflicts         259
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         271
;  :arith-pivots            829
;  :binary-propagations     16
;  :conflicts               681
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2801
;  :mk-clause               290
;  :num-allocs              4910481
;  :num-checks              897
;  :propagations            221
;  :quant-instantiations    75
;  :rlimit-count            295556)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          608
;  :arith-assert-diseq      79
;  :arith-assert-lower      264
;  :arith-assert-upper      411
;  :arith-conflicts         260
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         272
;  :arith-pivots            833
;  :binary-propagations     16
;  :conflicts               682
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2802
;  :mk-clause               290
;  :num-allocs              4910481
;  :num-checks              898
;  :propagations            221
;  :quant-instantiations    75
;  :rlimit-count            295787)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          608
;  :arith-assert-diseq      79
;  :arith-assert-lower      264
;  :arith-assert-upper      411
;  :arith-conflicts         260
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         272
;  :arith-pivots            833
;  :binary-propagations     16
;  :conflicts               683
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              260
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2803
;  :mk-clause               290
;  :num-allocs              4910481
;  :num-checks              899
;  :propagations            221
;  :quant-instantiations    75
;  :rlimit-count            295867)
(pop) ; 14
(push) ; 14
; [else-branch: 44 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__17@93@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__17@93@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 42 | !(i__17@93@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__17@93@03)]
(assert (not
  (and
    (<
      i__17@93@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    (<= 0 i__17@93@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 8
(assert (not (forall ((i__17@93@03 Int)) (!
  (implies
    (and
      (<
        i__17@93@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__17@93@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__17@93@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__17@93@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__17@93@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__17@93@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          608
;  :arith-assert-diseq      80
;  :arith-assert-lower      265
;  :arith-assert-upper      412
;  :arith-conflicts         260
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         273
;  :arith-pivots            833
;  :binary-propagations     16
;  :conflicts               684
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2811
;  :mk-clause               302
;  :num-allocs              4910481
;  :num-checks              900
;  :propagations            223
;  :quant-instantiations    76
;  :rlimit-count            296313)
(assert (forall ((i__17@93@03 Int)) (!
  (implies
    (and
      (<
        i__17@93@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__17@93@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__17@93@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__17@93@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__17@93@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__17@93@03))
  :qid |prog.l<no position>|)))
(declare-const $k@94@03 $Perm)
(assert ($Perm.isReadVar $k@94@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          610
;  :arith-assert-diseq      81
;  :arith-assert-lower      267
;  :arith-assert-upper      414
;  :arith-conflicts         261
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         274
;  :arith-pivots            835
;  :binary-propagations     16
;  :conflicts               685
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2817
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              901
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297015)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@94@03 $Perm.No) (< $Perm.No $k@94@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          610
;  :arith-assert-diseq      81
;  :arith-assert-lower      267
;  :arith-assert-upper      414
;  :arith-conflicts         261
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         274
;  :arith-pivots            835
;  :binary-propagations     16
;  :conflicts               686
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2817
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              902
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297065)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          610
;  :arith-assert-diseq      81
;  :arith-assert-lower      267
;  :arith-assert-upper      414
;  :arith-conflicts         261
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         274
;  :arith-pivots            835
;  :binary-propagations     16
;  :conflicts               686
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2817
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              903
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297084)
(push) ; 8
(assert (not (not (= (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          610
;  :arith-assert-diseq      81
;  :arith-assert-lower      267
;  :arith-assert-upper      414
;  :arith-conflicts         261
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         274
;  :arith-pivots            835
;  :binary-propagations     16
;  :conflicts               687
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2818
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              904
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297176)
(assert (< $k@94@03 (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03)))
(assert (<= $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@94@03)))
(assert (<= (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@94@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@94@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          613
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      416
;  :arith-conflicts         262
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         275
;  :arith-pivots            837
;  :binary-propagations     16
;  :conflicts               688
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2822
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              905
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297582)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          613
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      416
;  :arith-conflicts         262
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         275
;  :arith-pivots            837
;  :binary-propagations     16
;  :conflicts               688
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2822
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              906
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297601)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          613
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      416
;  :arith-conflicts         262
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         275
;  :arith-pivots            837
;  :binary-propagations     16
;  :conflicts               688
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2822
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              907
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297630)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          616
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      417
;  :arith-conflicts         263
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         276
;  :arith-pivots            842
;  :binary-propagations     16
;  :conflicts               689
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2823
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              908
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297859)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          616
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      417
;  :arith-conflicts         263
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         276
;  :arith-pivots            842
;  :binary-propagations     16
;  :conflicts               689
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2823
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              909
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297878)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          616
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      417
;  :arith-conflicts         263
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         276
;  :arith-pivots            842
;  :binary-propagations     16
;  :conflicts               689
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2823
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              910
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297907)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          616
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      417
;  :arith-conflicts         263
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         276
;  :arith-pivots            842
;  :binary-propagations     16
;  :conflicts               689
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2823
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              911
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            297918)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          619
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      418
;  :arith-conflicts         264
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         277
;  :arith-pivots            846
;  :binary-propagations     16
;  :conflicts               690
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2824
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              912
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298149)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          619
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      418
;  :arith-conflicts         264
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         277
;  :arith-pivots            846
;  :binary-propagations     16
;  :conflicts               690
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2824
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              913
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298168)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          619
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      418
;  :arith-conflicts         264
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         277
;  :arith-pivots            846
;  :binary-propagations     16
;  :conflicts               690
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2824
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              914
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298197)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          619
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      418
;  :arith-conflicts         264
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         277
;  :arith-pivots            846
;  :binary-propagations     16
;  :conflicts               690
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2824
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              915
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298208)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          621
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      419
;  :arith-conflicts         265
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         278
;  :arith-pivots            848
;  :binary-propagations     16
;  :conflicts               691
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2825
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              916
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298399)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          621
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      419
;  :arith-conflicts         265
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         278
;  :arith-pivots            848
;  :binary-propagations     16
;  :conflicts               691
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2825
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              917
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298418)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          621
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      419
;  :arith-conflicts         265
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         278
;  :arith-pivots            848
;  :binary-propagations     16
;  :conflicts               691
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2825
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              918
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298447)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          621
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      419
;  :arith-conflicts         265
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         278
;  :arith-pivots            848
;  :binary-propagations     16
;  :conflicts               691
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2825
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              919
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298458)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          623
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      420
;  :arith-conflicts         266
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         279
;  :arith-pivots            850
;  :binary-propagations     16
;  :conflicts               692
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2826
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              920
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298659)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          623
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      420
;  :arith-conflicts         266
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         279
;  :arith-pivots            850
;  :binary-propagations     16
;  :conflicts               692
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2826
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              921
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298678)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          623
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      420
;  :arith-conflicts         266
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         279
;  :arith-pivots            850
;  :binary-propagations     16
;  :conflicts               692
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2826
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              922
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298707)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          623
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      420
;  :arith-conflicts         266
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         279
;  :arith-pivots            850
;  :binary-propagations     16
;  :conflicts               692
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2826
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              923
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298718)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          626
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      421
;  :arith-conflicts         267
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         280
;  :arith-pivots            855
;  :binary-propagations     16
;  :conflicts               693
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2827
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              924
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298947)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          626
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      421
;  :arith-conflicts         267
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         280
;  :arith-pivots            855
;  :binary-propagations     16
;  :conflicts               693
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2827
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              925
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298966)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          626
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      421
;  :arith-conflicts         267
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         280
;  :arith-pivots            855
;  :binary-propagations     16
;  :conflicts               693
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2827
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              926
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            298995)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          626
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      421
;  :arith-conflicts         267
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         280
;  :arith-pivots            855
;  :binary-propagations     16
;  :conflicts               693
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2827
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              927
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299006)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          629
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      422
;  :arith-conflicts         268
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         281
;  :arith-pivots            859
;  :binary-propagations     16
;  :conflicts               694
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2828
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              928
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299237)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          629
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      422
;  :arith-conflicts         268
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         281
;  :arith-pivots            859
;  :binary-propagations     16
;  :conflicts               694
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2828
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              929
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299256)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          629
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      422
;  :arith-conflicts         268
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         281
;  :arith-pivots            859
;  :binary-propagations     16
;  :conflicts               694
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2828
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              930
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299285)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          629
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      422
;  :arith-conflicts         268
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         281
;  :arith-pivots            859
;  :binary-propagations     16
;  :conflicts               694
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2828
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              931
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299296)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          633
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      423
;  :arith-conflicts         269
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         282
;  :arith-pivots            862
;  :binary-propagations     16
;  :conflicts               695
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2829
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              932
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299533)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          633
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      423
;  :arith-conflicts         269
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         282
;  :arith-pivots            862
;  :binary-propagations     16
;  :conflicts               695
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2829
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              933
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299552)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          633
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      423
;  :arith-conflicts         269
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         282
;  :arith-pivots            862
;  :binary-propagations     16
;  :conflicts               695
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2829
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              934
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299581)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          633
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      423
;  :arith-conflicts         269
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         282
;  :arith-pivots            862
;  :binary-propagations     16
;  :conflicts               695
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2829
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              935
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299592)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          635
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      424
;  :arith-conflicts         270
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         283
;  :arith-pivots            864
;  :binary-propagations     16
;  :conflicts               696
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2830
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              936
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299796)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          635
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      424
;  :arith-conflicts         270
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         283
;  :arith-pivots            864
;  :binary-propagations     16
;  :conflicts               696
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2830
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              937
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299815)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          635
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      424
;  :arith-conflicts         270
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         283
;  :arith-pivots            864
;  :binary-propagations     16
;  :conflicts               696
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2830
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              938
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299844)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          635
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      424
;  :arith-conflicts         270
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         283
;  :arith-pivots            864
;  :binary-propagations     16
;  :conflicts               696
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2830
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              939
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            299855)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          638
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      425
;  :arith-conflicts         271
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         284
;  :arith-pivots            869
;  :binary-propagations     16
;  :conflicts               697
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2831
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              940
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300084)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          638
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      425
;  :arith-conflicts         271
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         284
;  :arith-pivots            869
;  :binary-propagations     16
;  :conflicts               697
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2831
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              941
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300103)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          638
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      425
;  :arith-conflicts         271
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         284
;  :arith-pivots            869
;  :binary-propagations     16
;  :conflicts               697
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2831
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              942
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300132)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          638
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      425
;  :arith-conflicts         271
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         284
;  :arith-pivots            869
;  :binary-propagations     16
;  :conflicts               697
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2831
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              943
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300143)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          641
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      426
;  :arith-conflicts         272
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         285
;  :arith-pivots            873
;  :binary-propagations     16
;  :conflicts               698
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2832
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              944
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300374)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          641
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      426
;  :arith-conflicts         272
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         285
;  :arith-pivots            873
;  :binary-propagations     16
;  :conflicts               698
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2832
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              945
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300393)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          641
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      426
;  :arith-conflicts         272
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         285
;  :arith-pivots            873
;  :binary-propagations     16
;  :conflicts               698
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2832
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              946
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300422)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          641
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      426
;  :arith-conflicts         272
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         285
;  :arith-pivots            873
;  :binary-propagations     16
;  :conflicts               698
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2832
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              947
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300433)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          645
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      427
;  :arith-conflicts         273
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         286
;  :arith-pivots            876
;  :binary-propagations     16
;  :conflicts               699
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2833
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              948
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300670)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          645
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      427
;  :arith-conflicts         273
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         286
;  :arith-pivots            876
;  :binary-propagations     16
;  :conflicts               699
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2833
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              949
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300689)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          645
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      427
;  :arith-conflicts         273
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         286
;  :arith-pivots            876
;  :binary-propagations     16
;  :conflicts               699
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2833
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              950
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300718)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          645
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      427
;  :arith-conflicts         273
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         286
;  :arith-pivots            876
;  :binary-propagations     16
;  :conflicts               699
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2833
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              951
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300729)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          647
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      428
;  :arith-conflicts         274
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         287
;  :arith-pivots            878
;  :binary-propagations     16
;  :conflicts               700
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2834
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              952
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300933)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          647
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      428
;  :arith-conflicts         274
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         287
;  :arith-pivots            878
;  :binary-propagations     16
;  :conflicts               700
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2834
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              953
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300952)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          647
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      428
;  :arith-conflicts         274
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         287
;  :arith-pivots            878
;  :binary-propagations     16
;  :conflicts               700
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2834
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              954
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300981)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          647
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      428
;  :arith-conflicts         274
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         287
;  :arith-pivots            878
;  :binary-propagations     16
;  :conflicts               700
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2834
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              955
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            300992)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          650
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      429
;  :arith-conflicts         275
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         288
;  :arith-pivots            883
;  :binary-propagations     16
;  :conflicts               701
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2835
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              956
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            301221)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          650
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      429
;  :arith-conflicts         275
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         288
;  :arith-pivots            883
;  :binary-propagations     16
;  :conflicts               701
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2835
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              957
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            301240)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          650
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      429
;  :arith-conflicts         275
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         288
;  :arith-pivots            883
;  :binary-propagations     16
;  :conflicts               701
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2835
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              958
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            301269)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          650
;  :arith-assert-diseq      81
;  :arith-assert-lower      269
;  :arith-assert-upper      429
;  :arith-conflicts         275
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         288
;  :arith-pivots            883
;  :binary-propagations     16
;  :conflicts               701
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2835
;  :mk-clause               304
;  :num-allocs              4910481
;  :num-checks              959
;  :propagations            224
;  :quant-instantiations    76
;  :rlimit-count            301280)
(declare-const $k@95@03 $Perm)
(assert ($Perm.isReadVar $k@95@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          653
;  :arith-assert-diseq      82
;  :arith-assert-lower      271
;  :arith-assert-upper      431
;  :arith-conflicts         276
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         289
;  :arith-pivots            887
;  :binary-propagations     16
;  :conflicts               702
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2840
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              960
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            301660)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@95@03 $Perm.No) (< $Perm.No $k@95@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          653
;  :arith-assert-diseq      82
;  :arith-assert-lower      271
;  :arith-assert-upper      431
;  :arith-conflicts         276
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         289
;  :arith-pivots            887
;  :binary-propagations     16
;  :conflicts               703
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2840
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              961
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            301710)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          653
;  :arith-assert-diseq      82
;  :arith-assert-lower      271
;  :arith-assert-upper      431
;  :arith-conflicts         276
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         289
;  :arith-pivots            887
;  :binary-propagations     16
;  :conflicts               703
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2840
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              962
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            301729)
(push) ; 8
(assert (not (not (= (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          653
;  :arith-assert-diseq      82
;  :arith-assert-lower      271
;  :arith-assert-upper      431
;  :arith-conflicts         276
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         289
;  :arith-pivots            887
;  :binary-propagations     16
;  :conflicts               704
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2841
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              963
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            301821)
(assert (< $k@95@03 (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@95@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@95@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@95@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          658
;  :arith-assert-diseq      82
;  :arith-assert-lower      273
;  :arith-assert-upper      433
;  :arith-conflicts         277
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         290
;  :arith-pivots            890
;  :binary-propagations     16
;  :conflicts               705
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2845
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              964
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            302263)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          658
;  :arith-assert-diseq      82
;  :arith-assert-lower      273
;  :arith-assert-upper      433
;  :arith-conflicts         277
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         290
;  :arith-pivots            890
;  :binary-propagations     16
;  :conflicts               705
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2845
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              965
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            302282)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          658
;  :arith-assert-diseq      82
;  :arith-assert-lower      273
;  :arith-assert-upper      433
;  :arith-conflicts         277
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         290
;  :arith-pivots            890
;  :binary-propagations     16
;  :conflicts               705
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2845
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              966
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            302311)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          660
;  :arith-assert-diseq      82
;  :arith-assert-lower      273
;  :arith-assert-upper      434
;  :arith-conflicts         278
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         291
;  :arith-pivots            892
;  :binary-propagations     16
;  :conflicts               706
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2846
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              967
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            302515)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          660
;  :arith-assert-diseq      82
;  :arith-assert-lower      273
;  :arith-assert-upper      434
;  :arith-conflicts         278
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         291
;  :arith-pivots            892
;  :binary-propagations     16
;  :conflicts               706
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2846
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              968
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            302534)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6895
;  :arith-add-rows          660
;  :arith-assert-diseq      82
;  :arith-assert-lower      273
;  :arith-assert-upper      434
;  :arith-conflicts         278
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         291
;  :arith-pivots            892
;  :binary-propagations     16
;  :conflicts               706
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1921
;  :datatype-occurs-check   168
;  :datatype-splits         1301
;  :decisions               1853
;  :del-clause              282
;  :final-checks            74
;  :max-generation          1
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2846
;  :mk-clause               306
;  :num-allocs              4910481
;  :num-checks              969
;  :propagations            225
;  :quant-instantiations    76
;  :rlimit-count            302563)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7238
;  :arith-add-rows          666
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      436
;  :arith-conflicts         278
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         293
;  :arith-pivots            896
;  :binary-propagations     16
;  :conflicts               707
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 2038
;  :datatype-occurs-check   179
;  :datatype-splits         1394
;  :decisions               1965
;  :del-clause              293
;  :final-checks            78
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.77
;  :mk-bool-var             2956
;  :mk-clause               317
;  :num-allocs              5158026
;  :num-checks              970
;  :propagations            229
;  :quant-instantiations    76
;  :rlimit-count            305138
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 8
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7706
;  :arith-add-rows          672
;  :arith-assert-diseq      90
;  :arith-assert-lower      283
;  :arith-assert-upper      438
;  :arith-conflicts         278
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         295
;  :arith-pivots            900
;  :binary-propagations     16
;  :conflicts               707
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3066
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              973
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            308415)
(declare-const $t@96@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7706
;  :arith-add-rows          672
;  :arith-assert-diseq      90
;  :arith-assert-lower      283
;  :arith-assert-upper      438
;  :arith-conflicts         278
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         295
;  :arith-pivots            900
;  :binary-propagations     16
;  :conflicts               708
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3066
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              974
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            308490)
(declare-const $t@97@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7706
;  :arith-add-rows          672
;  :arith-assert-diseq      90
;  :arith-assert-lower      283
;  :arith-assert-upper      438
;  :arith-conflicts         278
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         295
;  :arith-pivots            900
;  :binary-propagations     16
;  :conflicts               709
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3066
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              975
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            308565)
(declare-const $t@98@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7706
;  :arith-add-rows          672
;  :arith-assert-diseq      90
;  :arith-assert-lower      283
;  :arith-assert-upper      438
;  :arith-conflicts         278
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         295
;  :arith-pivots            900
;  :binary-propagations     16
;  :conflicts               710
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3067
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              976
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            308650)
(declare-const $t@99@03 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@92@03))
    (= $t@96@03 $t@74@03))
  (implies
    (< $Perm.No $k@57@03)
    (=
      $t@96@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@95@03))
    (= $t@97@03 $t@44@03))
  (implies
    (< $Perm.No $k@55@03)
    (=
      $t@97@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@94@03))
    (= $t@98@03 $t@42@03))
  (implies
    (< $Perm.No $k@54@03)
    (=
      $t@98@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@56@03)
    (=
      $t@99@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))
    (= $t@99@03 $t@46@03))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@92@03)
    $k@57@03)))
(assert (<=
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@92@03)
    $k@57@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@92@03)
      $k@57@03))
  (not (= diz@6@03 $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@95@03) $k@55@03)))
(assert (<=
  (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@95@03) $k@55@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@95@03) $k@55@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@94@03) $k@54@03)))
(assert (<=
  (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@94@03) $k@54@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@94@03) $k@54@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(assert (<= (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          679
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      442
;  :arith-conflicts         278
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         295
;  :arith-pivots            902
;  :binary-propagations     16
;  :conflicts               711
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3083
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              977
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            310361)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          682
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      443
;  :arith-conflicts         279
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         296
;  :arith-pivots            907
;  :binary-propagations     16
;  :conflicts               712
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3084
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              978
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            310591)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          682
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      443
;  :arith-conflicts         279
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         296
;  :arith-pivots            907
;  :binary-propagations     16
;  :conflicts               712
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3084
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              979
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            310613)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          682
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      443
;  :arith-conflicts         279
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         296
;  :arith-pivots            907
;  :binary-propagations     16
;  :conflicts               712
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3084
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              980
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            310642)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          682
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      443
;  :arith-conflicts         279
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         296
;  :arith-pivots            907
;  :binary-propagations     16
;  :conflicts               713
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3085
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              981
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            310952)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          685
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      444
;  :arith-conflicts         280
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         297
;  :arith-pivots            911
;  :binary-propagations     16
;  :conflicts               714
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3086
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              982
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            311184)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          685
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      444
;  :arith-conflicts         280
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         297
;  :arith-pivots            911
;  :binary-propagations     16
;  :conflicts               714
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3086
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              983
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            311206)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          685
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      444
;  :arith-conflicts         280
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         297
;  :arith-pivots            911
;  :binary-propagations     16
;  :conflicts               714
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3086
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              984
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            311235)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          685
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      444
;  :arith-conflicts         280
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         297
;  :arith-pivots            911
;  :binary-propagations     16
;  :conflicts               715
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3087
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              985
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            311545)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          689
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      445
;  :arith-conflicts         281
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         298
;  :arith-pivots            914
;  :binary-propagations     16
;  :conflicts               716
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3088
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              986
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            311783)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          689
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      445
;  :arith-conflicts         281
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         298
;  :arith-pivots            914
;  :binary-propagations     16
;  :conflicts               716
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3088
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              987
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            311805)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          689
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      445
;  :arith-conflicts         281
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         298
;  :arith-pivots            914
;  :binary-propagations     16
;  :conflicts               716
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3088
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              988
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            311834)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          689
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      445
;  :arith-conflicts         281
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         298
;  :arith-pivots            914
;  :binary-propagations     16
;  :conflicts               717
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3089
;  :mk-clause               327
;  :num-allocs              5405952
;  :num-checks              989
;  :propagations            237
;  :quant-instantiations    76
;  :rlimit-count            312144)
(declare-const $k@100@03 $Perm)
(assert ($Perm.isReadVar $k@100@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          691
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      447
;  :arith-conflicts         282
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         299
;  :arith-pivots            916
;  :binary-propagations     16
;  :conflicts               718
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3094
;  :mk-clause               329
;  :num-allocs              5405952
;  :num-checks              990
;  :propagations            238
;  :quant-instantiations    76
;  :rlimit-count            312498)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@100@03 $Perm.No) (< $Perm.No $k@100@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          691
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      447
;  :arith-conflicts         282
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         299
;  :arith-pivots            916
;  :binary-propagations     16
;  :conflicts               719
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3094
;  :mk-clause               329
;  :num-allocs              5405952
;  :num-checks              991
;  :propagations            238
;  :quant-instantiations    76
;  :rlimit-count            312548)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7719
;  :arith-add-rows          691
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      447
;  :arith-conflicts         282
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         299
;  :arith-pivots            916
;  :binary-propagations     16
;  :conflicts               720
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              312
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3095
;  :mk-clause               329
;  :num-allocs              5405952
;  :num-checks              992
;  :propagations            238
;  :quant-instantiations    76
;  :rlimit-count            312628)
(push) ; 8
(assert (not (not (= (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          694
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      448
;  :arith-conflicts         283
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         299
;  :arith-pivots            919
;  :binary-propagations     16
;  :conflicts               721
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3097
;  :mk-clause               331
;  :num-allocs              5405952
;  :num-checks              993
;  :propagations            239
;  :quant-instantiations    76
;  :rlimit-count            312797)
(assert (< $k@100@03 (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(assert (<=
  $Perm.No
  (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@100@03)))
(assert (<=
  (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@100@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@100@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          699
;  :arith-assert-diseq      91
;  :arith-assert-lower      291
;  :arith-assert-upper      450
;  :arith-conflicts         284
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         300
;  :arith-pivots            924
;  :binary-propagations     16
;  :conflicts               722
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3101
;  :mk-clause               331
;  :num-allocs              5405952
;  :num-checks              994
;  :propagations            239
;  :quant-instantiations    76
;  :rlimit-count            313237)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          699
;  :arith-assert-diseq      91
;  :arith-assert-lower      291
;  :arith-assert-upper      450
;  :arith-conflicts         284
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         300
;  :arith-pivots            924
;  :binary-propagations     16
;  :conflicts               722
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3101
;  :mk-clause               331
;  :num-allocs              5405952
;  :num-checks              995
;  :propagations            239
;  :quant-instantiations    76
;  :rlimit-count            313259)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          699
;  :arith-assert-diseq      91
;  :arith-assert-lower      291
;  :arith-assert-upper      450
;  :arith-conflicts         284
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         300
;  :arith-pivots            924
;  :binary-propagations     16
;  :conflicts               722
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3101
;  :mk-clause               331
;  :num-allocs              5405952
;  :num-checks              996
;  :propagations            239
;  :quant-instantiations    76
;  :rlimit-count            313288)
(declare-const $k@101@03 $Perm)
(assert ($Perm.isReadVar $k@101@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          702
;  :arith-assert-diseq      92
;  :arith-assert-lower      293
;  :arith-assert-upper      452
;  :arith-conflicts         285
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         301
;  :arith-pivots            928
;  :binary-propagations     16
;  :conflicts               723
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3106
;  :mk-clause               333
;  :num-allocs              5405952
;  :num-checks              997
;  :propagations            240
;  :quant-instantiations    76
;  :rlimit-count            313668)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          702
;  :arith-assert-diseq      92
;  :arith-assert-lower      293
;  :arith-assert-upper      452
;  :arith-conflicts         285
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         301
;  :arith-pivots            928
;  :binary-propagations     16
;  :conflicts               723
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3106
;  :mk-clause               333
;  :num-allocs              5405952
;  :num-checks              998
;  :propagations            240
;  :quant-instantiations    76
;  :rlimit-count            313690)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          702
;  :arith-assert-diseq      92
;  :arith-assert-lower      293
;  :arith-assert-upper      452
;  :arith-conflicts         285
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         301
;  :arith-pivots            928
;  :binary-propagations     16
;  :conflicts               723
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3106
;  :mk-clause               333
;  :num-allocs              5405952
;  :num-checks              999
;  :propagations            240
;  :quant-instantiations    76
;  :rlimit-count            313719)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@101@03 $Perm.No) (< $Perm.No $k@101@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          702
;  :arith-assert-diseq      92
;  :arith-assert-lower      293
;  :arith-assert-upper      452
;  :arith-conflicts         285
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         301
;  :arith-pivots            928
;  :binary-propagations     16
;  :conflicts               724
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3106
;  :mk-clause               333
;  :num-allocs              5405952
;  :num-checks              1000
;  :propagations            240
;  :quant-instantiations    76
;  :rlimit-count            313769)
(set-option :timeout 10)
(push) ; 8
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7720
;  :arith-add-rows          702
;  :arith-assert-diseq      92
;  :arith-assert-lower      293
;  :arith-assert-upper      452
;  :arith-conflicts         285
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         301
;  :arith-pivots            928
;  :binary-propagations     16
;  :conflicts               724
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              314
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3106
;  :mk-clause               333
;  :num-allocs              5405952
;  :num-checks              1001
;  :propagations            240
;  :quant-instantiations    76
;  :rlimit-count            313780)
(push) ; 8
(assert (not (not
  (=
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@92@03)
      $k@57@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          706
;  :arith-assert-diseq      92
;  :arith-assert-lower      293
;  :arith-assert-upper      453
;  :arith-conflicts         286
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         301
;  :arith-pivots            930
;  :binary-propagations     16
;  :conflicts               725
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3108
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1002
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            314036)
(assert (<
  $k@101@03
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@92@03)
    $k@57@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@92@03)
      $k@57@03)
    $k@101@03)))
(assert (<=
  (-
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@92@03)
      $k@57@03)
    $k@101@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
            (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
          $k@92@03)
        $k@57@03)
      $k@101@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          716
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      455
;  :arith-conflicts         287
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         302
;  :arith-pivots            933
;  :binary-propagations     16
;  :conflicts               726
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3112
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1003
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            314569)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          716
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      455
;  :arith-conflicts         287
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         302
;  :arith-pivots            933
;  :binary-propagations     16
;  :conflicts               726
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3112
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1004
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            314591)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          716
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      455
;  :arith-conflicts         287
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         302
;  :arith-pivots            933
;  :binary-propagations     16
;  :conflicts               726
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3112
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1005
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            314620)
(push) ; 8
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          716
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      455
;  :arith-conflicts         287
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         302
;  :arith-pivots            933
;  :binary-propagations     16
;  :conflicts               726
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3112
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1006
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            314631)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          718
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      456
;  :arith-conflicts         288
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         303
;  :arith-pivots            935
;  :binary-propagations     16
;  :conflicts               727
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3113
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1007
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            314833)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          721
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      457
;  :arith-conflicts         289
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         304
;  :arith-pivots            940
;  :binary-propagations     16
;  :conflicts               728
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3114
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1008
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            315063)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          724
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      458
;  :arith-conflicts         290
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         305
;  :arith-pivots            944
;  :binary-propagations     16
;  :conflicts               729
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3115
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1009
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            315295)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          724
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      458
;  :arith-conflicts         290
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         305
;  :arith-pivots            944
;  :binary-propagations     16
;  :conflicts               729
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3115
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1010
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            315317)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          724
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      458
;  :arith-conflicts         290
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         305
;  :arith-pivots            944
;  :binary-propagations     16
;  :conflicts               729
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3115
;  :mk-clause               335
;  :num-allocs              5405952
;  :num-checks              1011
;  :propagations            241
;  :quant-instantiations    76
;  :rlimit-count            315346)
; [exec]
; label __return_set_bit
; [exec]
; sys__result := sys__local__result__11
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__19: Int :: { diz.ALU_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && diz.ALU_m.Main_alu == diz
(declare-const $k@102@03 $Perm)
(assert ($Perm.isReadVar $k@102@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@102@03 $Perm.No) (< $Perm.No $k@102@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7721
;  :arith-add-rows          724
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      459
;  :arith-conflicts         290
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         305
;  :arith-pivots            944
;  :binary-propagations     16
;  :conflicts               730
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              316
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3119
;  :mk-clause               337
;  :num-allocs              5405952
;  :num-checks              1012
;  :propagations            242
;  :quant-instantiations    76
;  :rlimit-count            315544)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (=
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          726
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      460
;  :arith-conflicts         291
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         305
;  :arith-pivots            946
;  :binary-propagations     16
;  :conflicts               731
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3121
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1013
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            315736)
(assert (<
  $k@102@03
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@102@03)))
(assert (<=
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@102@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@102@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          733
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      462
;  :arith-conflicts         292
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         306
;  :arith-pivots            948
;  :binary-propagations     16
;  :conflicts               732
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3125
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1014
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            316192)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          736
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      463
;  :arith-conflicts         293
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         307
;  :arith-pivots            953
;  :binary-propagations     16
;  :conflicts               733
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3126
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1015
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            316423)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          736
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      463
;  :arith-conflicts         293
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         307
;  :arith-pivots            953
;  :binary-propagations     16
;  :conflicts               734
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3127
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1016
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            316503)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          739
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      464
;  :arith-conflicts         294
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         308
;  :arith-pivots            957
;  :binary-propagations     16
;  :conflicts               735
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3128
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1017
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            316736)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          739
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      464
;  :arith-conflicts         294
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         308
;  :arith-pivots            957
;  :binary-propagations     16
;  :conflicts               736
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3129
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1018
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            316816)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          741
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      465
;  :arith-conflicts         295
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         309
;  :arith-pivots            959
;  :binary-propagations     16
;  :conflicts               737
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3130
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1019
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            317009)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          741
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      465
;  :arith-conflicts         295
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         309
;  :arith-pivots            959
;  :binary-propagations     16
;  :conflicts               738
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3131
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1020
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            317089)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          743
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      466
;  :arith-conflicts         296
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         310
;  :arith-pivots            961
;  :binary-propagations     16
;  :conflicts               739
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3132
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1021
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            317292)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          743
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      466
;  :arith-conflicts         296
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         310
;  :arith-pivots            961
;  :binary-propagations     16
;  :conflicts               740
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3133
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1022
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            317372)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          746
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      467
;  :arith-conflicts         297
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         311
;  :arith-pivots            966
;  :binary-propagations     16
;  :conflicts               741
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3134
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1023
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            317603)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          746
;  :arith-assert-diseq      93
;  :arith-assert-lower      299
;  :arith-assert-upper      467
;  :arith-conflicts         297
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         311
;  :arith-pivots            966
;  :binary-propagations     16
;  :conflicts               742
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3135
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1024
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            317683)
; [eval] (forall i__19: Int :: { diz.ALU_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|)
(declare-const i__19@103@03 Int)
(push) ; 8
; [eval] 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__19
(push) ; 9
; [then-branch: 45 | 0 <= i__19@103@03 | live]
; [else-branch: 45 | !(0 <= i__19@103@03) | live]
(push) ; 10
; [then-branch: 45 | 0 <= i__19@103@03]
(assert (<= 0 i__19@103@03))
; [eval] i__19 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          749
;  :arith-assert-diseq      93
;  :arith-assert-lower      300
;  :arith-assert-upper      468
;  :arith-conflicts         298
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         312
;  :arith-pivots            970
;  :binary-propagations     16
;  :conflicts               743
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3137
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1025
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            317968)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          749
;  :arith-assert-diseq      93
;  :arith-assert-lower      300
;  :arith-assert-upper      468
;  :arith-conflicts         298
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         312
;  :arith-pivots            970
;  :binary-propagations     16
;  :conflicts               744
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3138
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1026
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            318048)
(pop) ; 10
(push) ; 10
; [else-branch: 45 | !(0 <= i__19@103@03)]
(assert (not (<= 0 i__19@103@03)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 46 | i__19@103@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@103@03 | live]
; [else-branch: 46 | !(i__19@103@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@103@03) | live]
(push) ; 10
; [then-branch: 46 | i__19@103@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@103@03]
(assert (and
  (<
    i__19@103@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (<= 0 i__19@103@03)))
; [eval] diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__19] == -1
; [eval] diz.ALU_m.Main_process_state[i__19]
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          753
;  :arith-assert-diseq      93
;  :arith-assert-lower      301
;  :arith-assert-upper      470
;  :arith-conflicts         299
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         314
;  :arith-pivots            973
;  :binary-propagations     16
;  :conflicts               745
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3141
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1027
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            318400)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          753
;  :arith-assert-diseq      93
;  :arith-assert-lower      301
;  :arith-assert-upper      470
;  :arith-conflicts         299
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         314
;  :arith-pivots            973
;  :binary-propagations     16
;  :conflicts               746
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3142
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1028
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            318480)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__19@103@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7723
;  :arith-add-rows          753
;  :arith-assert-diseq      93
;  :arith-assert-lower      301
;  :arith-assert-upper      470
;  :arith-conflicts         299
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         314
;  :arith-pivots            973
;  :binary-propagations     16
;  :conflicts               746
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3142
;  :mk-clause               339
;  :num-allocs              5405952
;  :num-checks              1029
;  :propagations            243
;  :quant-instantiations    76
;  :rlimit-count            318489)
; [eval] -1
(push) ; 11
; [then-branch: 47 | First:(Second:(Second:(Second:($t@51@03))))[i__19@103@03] == -1 | live]
; [else-branch: 47 | First:(Second:(Second:(Second:($t@51@03))))[i__19@103@03] != -1 | live]
(push) ; 12
; [then-branch: 47 | First:(Second:(Second:(Second:($t@51@03))))[i__19@103@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@103@03)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 47 | First:(Second:(Second:(Second:($t@51@03))))[i__19@103@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__19@103@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__19]
; [eval] diz.ALU_m.Main_process_state[i__19]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7725
;  :arith-add-rows          755
;  :arith-assert-diseq      95
;  :arith-assert-lower      304
;  :arith-assert-upper      472
;  :arith-conflicts         300
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         315
;  :arith-pivots            975
;  :binary-propagations     16
;  :conflicts               747
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3150
;  :mk-clause               350
;  :num-allocs              5405952
;  :num-checks              1030
;  :propagations            248
;  :quant-instantiations    78
;  :rlimit-count            318927)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7725
;  :arith-add-rows          755
;  :arith-assert-diseq      95
;  :arith-assert-lower      304
;  :arith-assert-upper      472
;  :arith-conflicts         300
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         315
;  :arith-pivots            975
;  :binary-propagations     16
;  :conflicts               748
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3151
;  :mk-clause               350
;  :num-allocs              5405952
;  :num-checks              1031
;  :propagations            248
;  :quant-instantiations    78
;  :rlimit-count            319007)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__19@103@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7725
;  :arith-add-rows          755
;  :arith-assert-diseq      95
;  :arith-assert-lower      304
;  :arith-assert-upper      472
;  :arith-conflicts         300
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         315
;  :arith-pivots            975
;  :binary-propagations     16
;  :conflicts               748
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3151
;  :mk-clause               350
;  :num-allocs              5405952
;  :num-checks              1032
;  :propagations            248
;  :quant-instantiations    78
;  :rlimit-count            319016)
(push) ; 13
; [then-branch: 48 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@103@03] | live]
; [else-branch: 48 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@103@03]) | live]
(push) ; 14
; [then-branch: 48 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@103@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@103@03)))
; [eval] diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__19]
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          758
;  :arith-assert-diseq      95
;  :arith-assert-lower      306
;  :arith-assert-upper      474
;  :arith-conflicts         301
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         317
;  :arith-pivots            981
;  :binary-propagations     16
;  :conflicts               749
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3156
;  :mk-clause               350
;  :num-allocs              5405952
;  :num-checks              1033
;  :propagations            248
;  :quant-instantiations    78
;  :rlimit-count            319373)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          758
;  :arith-assert-diseq      95
;  :arith-assert-lower      306
;  :arith-assert-upper      474
;  :arith-conflicts         301
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         317
;  :arith-pivots            981
;  :binary-propagations     16
;  :conflicts               750
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3157
;  :mk-clause               350
;  :num-allocs              5405952
;  :num-checks              1034
;  :propagations            248
;  :quant-instantiations    78
;  :rlimit-count            319453)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__19@103@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          758
;  :arith-assert-diseq      95
;  :arith-assert-lower      306
;  :arith-assert-upper      474
;  :arith-conflicts         301
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         317
;  :arith-pivots            981
;  :binary-propagations     16
;  :conflicts               750
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3157
;  :mk-clause               350
;  :num-allocs              5405952
;  :num-checks              1035
;  :propagations            248
;  :quant-instantiations    78
;  :rlimit-count            319462)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          761
;  :arith-assert-diseq      95
;  :arith-assert-lower      306
;  :arith-assert-upper      475
;  :arith-conflicts         302
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         318
;  :arith-pivots            985
;  :binary-propagations     16
;  :conflicts               751
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3158
;  :mk-clause               350
;  :num-allocs              5405952
;  :num-checks              1036
;  :propagations            248
;  :quant-instantiations    78
;  :rlimit-count            319695)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          761
;  :arith-assert-diseq      95
;  :arith-assert-lower      306
;  :arith-assert-upper      475
;  :arith-conflicts         302
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         318
;  :arith-pivots            985
;  :binary-propagations     16
;  :conflicts               752
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              318
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3159
;  :mk-clause               350
;  :num-allocs              5405952
;  :num-checks              1037
;  :propagations            248
;  :quant-instantiations    78
;  :rlimit-count            319775)
(pop) ; 14
(push) ; 14
; [else-branch: 48 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@103@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__19@103@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 46 | !(i__19@103@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@103@03)]
(assert (not
  (and
    (<
      i__19@103@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    (<= 0 i__19@103@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 8
(assert (not (forall ((i__19@103@03 Int)) (!
  (implies
    (and
      (<
        i__19@103@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__19@103@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__19@103@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@103@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@103@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@103@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          761
;  :arith-assert-diseq      97
;  :arith-assert-lower      307
;  :arith-assert-upper      476
;  :arith-conflicts         302
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         319
;  :arith-pivots            986
;  :binary-propagations     16
;  :conflicts               753
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3167
;  :mk-clause               364
;  :num-allocs              5405952
;  :num-checks              1038
;  :propagations            250
;  :quant-instantiations    80
;  :rlimit-count            320249)
(assert (forall ((i__19@103@03 Int)) (!
  (implies
    (and
      (<
        i__19@103@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__19@103@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__19@103@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@103@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@103@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@103@03))
  :qid |prog.l<no position>|)))
(declare-const $k@104@03 $Perm)
(assert ($Perm.isReadVar $k@104@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          765
;  :arith-assert-diseq      98
;  :arith-assert-lower      309
;  :arith-assert-upper      478
;  :arith-conflicts         303
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         320
;  :arith-pivots            989
;  :binary-propagations     16
;  :conflicts               754
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3173
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1039
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            320999)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@104@03 $Perm.No) (< $Perm.No $k@104@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          765
;  :arith-assert-diseq      98
;  :arith-assert-lower      309
;  :arith-assert-upper      478
;  :arith-conflicts         303
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         320
;  :arith-pivots            989
;  :binary-propagations     16
;  :conflicts               755
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3173
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1040
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321049)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          765
;  :arith-assert-diseq      98
;  :arith-assert-lower      309
;  :arith-assert-upper      478
;  :arith-conflicts         303
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         320
;  :arith-pivots            989
;  :binary-propagations     16
;  :conflicts               755
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3173
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1041
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321071)
(push) ; 8
(assert (not (not (= (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          765
;  :arith-assert-diseq      98
;  :arith-assert-lower      309
;  :arith-assert-upper      478
;  :arith-conflicts         303
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         320
;  :arith-pivots            989
;  :binary-propagations     16
;  :conflicts               756
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3174
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1042
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321163)
(assert (< $k@104@03 (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03)))
(assert (<= $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@104@03)))
(assert (<= (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@104@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@104@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          768
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      480
;  :arith-conflicts         304
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         321
;  :arith-pivots            991
;  :binary-propagations     16
;  :conflicts               757
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3178
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1043
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321574)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          768
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      480
;  :arith-conflicts         304
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         321
;  :arith-pivots            991
;  :binary-propagations     16
;  :conflicts               757
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3178
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1044
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321596)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          768
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      480
;  :arith-conflicts         304
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         321
;  :arith-pivots            991
;  :binary-propagations     16
;  :conflicts               757
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3178
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1045
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321625)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          771
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      481
;  :arith-conflicts         305
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         322
;  :arith-pivots            996
;  :binary-propagations     16
;  :conflicts               758
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3179
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1046
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321856)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          771
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      481
;  :arith-conflicts         305
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         322
;  :arith-pivots            996
;  :binary-propagations     16
;  :conflicts               758
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3179
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1047
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321878)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          771
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      481
;  :arith-conflicts         305
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         322
;  :arith-pivots            996
;  :binary-propagations     16
;  :conflicts               758
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3179
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1048
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321907)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          771
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      481
;  :arith-conflicts         305
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         322
;  :arith-pivots            996
;  :binary-propagations     16
;  :conflicts               758
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3179
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1049
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            321918)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          774
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      482
;  :arith-conflicts         306
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         323
;  :arith-pivots            1000
;  :binary-propagations     16
;  :conflicts               759
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3180
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1050
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322151)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          774
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      482
;  :arith-conflicts         306
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         323
;  :arith-pivots            1000
;  :binary-propagations     16
;  :conflicts               759
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3180
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1051
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322173)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          774
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      482
;  :arith-conflicts         306
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         323
;  :arith-pivots            1000
;  :binary-propagations     16
;  :conflicts               759
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3180
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1052
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322202)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          774
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      482
;  :arith-conflicts         306
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         323
;  :arith-pivots            1000
;  :binary-propagations     16
;  :conflicts               759
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3180
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1053
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322213)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          776
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      483
;  :arith-conflicts         307
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         324
;  :arith-pivots            1002
;  :binary-propagations     16
;  :conflicts               760
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3181
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1054
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322406)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          776
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      483
;  :arith-conflicts         307
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         324
;  :arith-pivots            1002
;  :binary-propagations     16
;  :conflicts               760
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3181
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1055
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322428)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          776
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      483
;  :arith-conflicts         307
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         324
;  :arith-pivots            1002
;  :binary-propagations     16
;  :conflicts               760
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3181
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1056
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322457)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          776
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      483
;  :arith-conflicts         307
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         324
;  :arith-pivots            1002
;  :binary-propagations     16
;  :conflicts               760
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3181
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1057
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322468)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          778
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      484
;  :arith-conflicts         308
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         325
;  :arith-pivots            1004
;  :binary-propagations     16
;  :conflicts               761
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3182
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1058
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322671)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          778
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      484
;  :arith-conflicts         308
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         325
;  :arith-pivots            1004
;  :binary-propagations     16
;  :conflicts               761
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3182
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1059
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322693)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          778
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      484
;  :arith-conflicts         308
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         325
;  :arith-pivots            1004
;  :binary-propagations     16
;  :conflicts               761
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3182
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1060
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322722)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          778
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      484
;  :arith-conflicts         308
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         325
;  :arith-pivots            1004
;  :binary-propagations     16
;  :conflicts               761
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3182
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1061
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322733)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          781
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      485
;  :arith-conflicts         309
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         326
;  :arith-pivots            1009
;  :binary-propagations     16
;  :conflicts               762
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3183
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1062
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322964)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          781
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      485
;  :arith-conflicts         309
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         326
;  :arith-pivots            1009
;  :binary-propagations     16
;  :conflicts               762
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3183
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1063
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            322986)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          781
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      485
;  :arith-conflicts         309
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         326
;  :arith-pivots            1009
;  :binary-propagations     16
;  :conflicts               762
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3183
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1064
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323015)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          781
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      485
;  :arith-conflicts         309
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         326
;  :arith-pivots            1009
;  :binary-propagations     16
;  :conflicts               762
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3183
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1065
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323026)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          784
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      486
;  :arith-conflicts         310
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         327
;  :arith-pivots            1013
;  :binary-propagations     16
;  :conflicts               763
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3184
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1066
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323259)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          784
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      486
;  :arith-conflicts         310
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         327
;  :arith-pivots            1013
;  :binary-propagations     16
;  :conflicts               763
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3184
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1067
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323281)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          784
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      486
;  :arith-conflicts         310
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         327
;  :arith-pivots            1013
;  :binary-propagations     16
;  :conflicts               763
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3184
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1068
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323310)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          784
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      486
;  :arith-conflicts         310
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         327
;  :arith-pivots            1013
;  :binary-propagations     16
;  :conflicts               763
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3184
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1069
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323321)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          786
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      487
;  :arith-conflicts         311
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         328
;  :arith-pivots            1015
;  :binary-propagations     16
;  :conflicts               764
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3185
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1070
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323514)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          786
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      487
;  :arith-conflicts         311
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         328
;  :arith-pivots            1015
;  :binary-propagations     16
;  :conflicts               764
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3185
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1071
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323536)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          786
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      487
;  :arith-conflicts         311
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         328
;  :arith-pivots            1015
;  :binary-propagations     16
;  :conflicts               764
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3185
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1072
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323565)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          786
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      487
;  :arith-conflicts         311
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         328
;  :arith-pivots            1015
;  :binary-propagations     16
;  :conflicts               764
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3185
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1073
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323576)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          788
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      488
;  :arith-conflicts         312
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         329
;  :arith-pivots            1017
;  :binary-propagations     16
;  :conflicts               765
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3186
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1074
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323779)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          788
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      488
;  :arith-conflicts         312
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         329
;  :arith-pivots            1017
;  :binary-propagations     16
;  :conflicts               765
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3186
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1075
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323801)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          788
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      488
;  :arith-conflicts         312
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         329
;  :arith-pivots            1017
;  :binary-propagations     16
;  :conflicts               765
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3186
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1076
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323830)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          788
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      488
;  :arith-conflicts         312
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         329
;  :arith-pivots            1017
;  :binary-propagations     16
;  :conflicts               765
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3186
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1077
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            323841)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          791
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      489
;  :arith-conflicts         313
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         330
;  :arith-pivots            1022
;  :binary-propagations     16
;  :conflicts               766
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3187
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1078
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324072)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          791
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      489
;  :arith-conflicts         313
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         330
;  :arith-pivots            1022
;  :binary-propagations     16
;  :conflicts               766
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3187
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1079
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324094)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          791
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      489
;  :arith-conflicts         313
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         330
;  :arith-pivots            1022
;  :binary-propagations     16
;  :conflicts               766
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3187
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1080
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324123)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          791
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      489
;  :arith-conflicts         313
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         330
;  :arith-pivots            1022
;  :binary-propagations     16
;  :conflicts               766
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3187
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1081
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324134)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          794
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      490
;  :arith-conflicts         314
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         331
;  :arith-pivots            1026
;  :binary-propagations     16
;  :conflicts               767
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3188
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1082
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324367)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          794
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      490
;  :arith-conflicts         314
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         331
;  :arith-pivots            1026
;  :binary-propagations     16
;  :conflicts               767
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3188
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1083
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324389)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          794
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      490
;  :arith-conflicts         314
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         331
;  :arith-pivots            1026
;  :binary-propagations     16
;  :conflicts               767
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3188
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1084
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324418)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          794
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      490
;  :arith-conflicts         314
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         331
;  :arith-pivots            1026
;  :binary-propagations     16
;  :conflicts               767
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3188
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1085
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324429)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          798
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      491
;  :arith-conflicts         315
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         332
;  :arith-pivots            1029
;  :binary-propagations     16
;  :conflicts               768
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3189
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1086
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324668)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          798
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      491
;  :arith-conflicts         315
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         332
;  :arith-pivots            1029
;  :binary-propagations     16
;  :conflicts               768
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3189
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1087
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324690)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          798
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      491
;  :arith-conflicts         315
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         332
;  :arith-pivots            1029
;  :binary-propagations     16
;  :conflicts               768
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3189
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1088
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324719)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          798
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      491
;  :arith-conflicts         315
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         332
;  :arith-pivots            1029
;  :binary-propagations     16
;  :conflicts               768
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3189
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1089
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324730)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          800
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      492
;  :arith-conflicts         316
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         333
;  :arith-pivots            1031
;  :binary-propagations     16
;  :conflicts               769
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3190
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1090
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324936)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          800
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      492
;  :arith-conflicts         316
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         333
;  :arith-pivots            1031
;  :binary-propagations     16
;  :conflicts               769
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3190
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1091
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324958)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          800
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      492
;  :arith-conflicts         316
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         333
;  :arith-pivots            1031
;  :binary-propagations     16
;  :conflicts               769
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3190
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1092
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324987)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          800
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      492
;  :arith-conflicts         316
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         333
;  :arith-pivots            1031
;  :binary-propagations     16
;  :conflicts               769
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3190
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1093
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            324998)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          803
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      493
;  :arith-conflicts         317
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         334
;  :arith-pivots            1036
;  :binary-propagations     16
;  :conflicts               770
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3191
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1094
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            325229)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          803
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      493
;  :arith-conflicts         317
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         334
;  :arith-pivots            1036
;  :binary-propagations     16
;  :conflicts               770
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3191
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1095
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            325251)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          803
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      493
;  :arith-conflicts         317
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         334
;  :arith-pivots            1036
;  :binary-propagations     16
;  :conflicts               770
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3191
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1096
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            325280)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          803
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      493
;  :arith-conflicts         317
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         334
;  :arith-pivots            1036
;  :binary-propagations     16
;  :conflicts               770
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3191
;  :mk-clause               366
;  :num-allocs              5405952
;  :num-checks              1097
;  :propagations            251
;  :quant-instantiations    80
;  :rlimit-count            325291)
(declare-const $k@105@03 $Perm)
(assert ($Perm.isReadVar $k@105@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          806
;  :arith-assert-diseq      99
;  :arith-assert-lower      313
;  :arith-assert-upper      495
;  :arith-conflicts         318
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         335
;  :arith-pivots            1040
;  :binary-propagations     16
;  :conflicts               771
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3196
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1098
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            325673)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@105@03 $Perm.No) (< $Perm.No $k@105@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          806
;  :arith-assert-diseq      99
;  :arith-assert-lower      313
;  :arith-assert-upper      495
;  :arith-conflicts         318
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         335
;  :arith-pivots            1040
;  :binary-propagations     16
;  :conflicts               772
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3196
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1099
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            325723)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          806
;  :arith-assert-diseq      99
;  :arith-assert-lower      313
;  :arith-assert-upper      495
;  :arith-conflicts         318
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         335
;  :arith-pivots            1040
;  :binary-propagations     16
;  :conflicts               772
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3196
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1100
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            325745)
(push) ; 8
(assert (not (not (= (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          806
;  :arith-assert-diseq      99
;  :arith-assert-lower      313
;  :arith-assert-upper      495
;  :arith-conflicts         318
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         335
;  :arith-pivots            1040
;  :binary-propagations     16
;  :conflicts               773
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3197
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1101
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            325837)
(assert (< $k@105@03 (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@105@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@105@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@105@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          809
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      497
;  :arith-conflicts         319
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         336
;  :arith-pivots            1042
;  :binary-propagations     16
;  :conflicts               774
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3201
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1102
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            326235)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          809
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      497
;  :arith-conflicts         319
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         336
;  :arith-pivots            1042
;  :binary-propagations     16
;  :conflicts               774
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3201
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1103
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            326257)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          809
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      497
;  :arith-conflicts         319
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         336
;  :arith-pivots            1042
;  :binary-propagations     16
;  :conflicts               774
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3201
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1104
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            326286)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          811
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      498
;  :arith-conflicts         320
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         337
;  :arith-pivots            1044
;  :binary-propagations     16
;  :conflicts               775
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3202
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1105
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            326489)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          811
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      498
;  :arith-conflicts         320
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         337
;  :arith-pivots            1044
;  :binary-propagations     16
;  :conflicts               775
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3202
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1106
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            326511)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          811
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      498
;  :arith-conflicts         320
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         337
;  :arith-pivots            1044
;  :binary-propagations     16
;  :conflicts               775
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3202
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1107
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            326540)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          811
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      498
;  :arith-conflicts         320
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         337
;  :arith-pivots            1044
;  :binary-propagations     16
;  :conflicts               776
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3203
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1108
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            326850)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          814
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      499
;  :arith-conflicts         321
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         338
;  :arith-pivots            1049
;  :binary-propagations     16
;  :conflicts               777
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3204
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1109
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            327081)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          814
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      499
;  :arith-conflicts         321
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         338
;  :arith-pivots            1049
;  :binary-propagations     16
;  :conflicts               777
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3204
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1110
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            327103)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          814
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      499
;  :arith-conflicts         321
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         338
;  :arith-pivots            1049
;  :binary-propagations     16
;  :conflicts               777
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3204
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1111
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            327132)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          814
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      499
;  :arith-conflicts         321
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         338
;  :arith-pivots            1049
;  :binary-propagations     16
;  :conflicts               778
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3205
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1112
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            327442)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          817
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      500
;  :arith-conflicts         322
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         339
;  :arith-pivots            1053
;  :binary-propagations     16
;  :conflicts               779
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3206
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1113
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            327675)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          817
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      500
;  :arith-conflicts         322
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         339
;  :arith-pivots            1053
;  :binary-propagations     16
;  :conflicts               779
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3206
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1114
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            327697)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          817
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      500
;  :arith-conflicts         322
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         339
;  :arith-pivots            1053
;  :binary-propagations     16
;  :conflicts               779
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3206
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1115
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            327726)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          817
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      500
;  :arith-conflicts         322
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         339
;  :arith-pivots            1053
;  :binary-propagations     16
;  :conflicts               780
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3207
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1116
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            328036)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          821
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      501
;  :arith-conflicts         323
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         340
;  :arith-pivots            1056
;  :binary-propagations     16
;  :conflicts               781
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3208
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1117
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            328275)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          821
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      501
;  :arith-conflicts         323
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         340
;  :arith-pivots            1056
;  :binary-propagations     16
;  :conflicts               781
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3208
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1118
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            328297)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          821
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      501
;  :arith-conflicts         323
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         340
;  :arith-pivots            1056
;  :binary-propagations     16
;  :conflicts               781
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3208
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1119
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            328326)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          821
;  :arith-assert-diseq      99
;  :arith-assert-lower      315
;  :arith-assert-upper      501
;  :arith-conflicts         323
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         340
;  :arith-pivots            1056
;  :binary-propagations     16
;  :conflicts               782
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3209
;  :mk-clause               368
;  :num-allocs              5405952
;  :num-checks              1120
;  :propagations            252
;  :quant-instantiations    80
;  :rlimit-count            328636)
(declare-const $k@106@03 $Perm)
(assert ($Perm.isReadVar $k@106@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          823
;  :arith-assert-diseq      100
;  :arith-assert-lower      317
;  :arith-assert-upper      503
;  :arith-conflicts         324
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         341
;  :arith-pivots            1058
;  :binary-propagations     16
;  :conflicts               783
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3214
;  :mk-clause               370
;  :num-allocs              5405952
;  :num-checks              1121
;  :propagations            253
;  :quant-instantiations    80
;  :rlimit-count            328991)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@106@03 $Perm.No) (< $Perm.No $k@106@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          823
;  :arith-assert-diseq      100
;  :arith-assert-lower      317
;  :arith-assert-upper      503
;  :arith-conflicts         324
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         341
;  :arith-pivots            1058
;  :binary-propagations     16
;  :conflicts               784
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3214
;  :mk-clause               370
;  :num-allocs              5405952
;  :num-checks              1122
;  :propagations            253
;  :quant-instantiations    80
;  :rlimit-count            329041)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          823
;  :arith-assert-diseq      100
;  :arith-assert-lower      317
;  :arith-assert-upper      503
;  :arith-conflicts         324
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         341
;  :arith-pivots            1058
;  :binary-propagations     16
;  :conflicts               784
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3214
;  :mk-clause               370
;  :num-allocs              5405952
;  :num-checks              1123
;  :propagations            253
;  :quant-instantiations    80
;  :rlimit-count            329063)
(push) ; 8
(assert (not (not (= (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          823
;  :arith-assert-diseq      100
;  :arith-assert-lower      317
;  :arith-assert-upper      503
;  :arith-conflicts         324
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         341
;  :arith-pivots            1058
;  :binary-propagations     16
;  :conflicts               785
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3215
;  :mk-clause               370
;  :num-allocs              5405952
;  :num-checks              1124
;  :propagations            253
;  :quant-instantiations    80
;  :rlimit-count            329155)
(assert (< $k@106@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)))
(assert (<= $Perm.No (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@106@03)))
(assert (<= (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@106@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@106@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          828
;  :arith-assert-diseq      100
;  :arith-assert-lower      319
;  :arith-assert-upper      505
;  :arith-conflicts         325
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         342
;  :arith-pivots            1063
;  :binary-propagations     16
;  :conflicts               786
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3219
;  :mk-clause               370
;  :num-allocs              5405952
;  :num-checks              1125
;  :propagations            253
;  :quant-instantiations    80
;  :rlimit-count            329592)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          828
;  :arith-assert-diseq      100
;  :arith-assert-lower      319
;  :arith-assert-upper      505
;  :arith-conflicts         325
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         342
;  :arith-pivots            1063
;  :binary-propagations     16
;  :conflicts               786
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3219
;  :mk-clause               370
;  :num-allocs              5405952
;  :num-checks              1126
;  :propagations            253
;  :quant-instantiations    80
;  :rlimit-count            329614)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          828
;  :arith-assert-diseq      100
;  :arith-assert-lower      319
;  :arith-assert-upper      505
;  :arith-conflicts         325
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         342
;  :arith-pivots            1063
;  :binary-propagations     16
;  :conflicts               786
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3219
;  :mk-clause               370
;  :num-allocs              5405952
;  :num-checks              1127
;  :propagations            253
;  :quant-instantiations    80
;  :rlimit-count            329643)
(declare-const $k@107@03 $Perm)
(assert ($Perm.isReadVar $k@107@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          831
;  :arith-assert-diseq      101
;  :arith-assert-lower      321
;  :arith-assert-upper      507
;  :arith-conflicts         326
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         343
;  :arith-pivots            1067
;  :binary-propagations     16
;  :conflicts               787
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3224
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1128
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330024)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          831
;  :arith-assert-diseq      101
;  :arith-assert-lower      321
;  :arith-assert-upper      507
;  :arith-conflicts         326
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         343
;  :arith-pivots            1067
;  :binary-propagations     16
;  :conflicts               787
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3224
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1129
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330046)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          831
;  :arith-assert-diseq      101
;  :arith-assert-lower      321
;  :arith-assert-upper      507
;  :arith-conflicts         326
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         343
;  :arith-pivots            1067
;  :binary-propagations     16
;  :conflicts               787
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3224
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1130
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330075)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@107@03 $Perm.No) (< $Perm.No $k@107@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          831
;  :arith-assert-diseq      101
;  :arith-assert-lower      321
;  :arith-assert-upper      507
;  :arith-conflicts         326
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         343
;  :arith-pivots            1067
;  :binary-propagations     16
;  :conflicts               788
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3224
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1131
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330125)
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          831
;  :arith-assert-diseq      101
;  :arith-assert-lower      321
;  :arith-assert-upper      507
;  :arith-conflicts         326
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         343
;  :arith-pivots            1067
;  :binary-propagations     16
;  :conflicts               788
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3224
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1132
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330136)
(push) ; 8
(assert (not (not (= $k@57@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          831
;  :arith-assert-diseq      101
;  :arith-assert-lower      321
;  :arith-assert-upper      507
;  :arith-conflicts         326
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         343
;  :arith-pivots            1067
;  :binary-propagations     16
;  :conflicts               788
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3224
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1133
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330147)
(assert (< $k@107@03 $k@57@03))
(assert (<= $Perm.No (- $k@57@03 $k@107@03)))
(assert (<= (- $k@57@03 $k@107@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@57@03 $k@107@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          838
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      509
;  :arith-conflicts         327
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         344
;  :arith-pivots            1072
;  :binary-propagations     16
;  :conflicts               789
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3228
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1134
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330621)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          838
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      509
;  :arith-conflicts         327
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         344
;  :arith-pivots            1072
;  :binary-propagations     16
;  :conflicts               789
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3228
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1135
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330643)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          838
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      509
;  :arith-conflicts         327
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         344
;  :arith-pivots            1072
;  :binary-propagations     16
;  :conflicts               789
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3228
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1136
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330672)
(push) ; 8
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          838
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      509
;  :arith-conflicts         327
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         344
;  :arith-pivots            1072
;  :binary-propagations     16
;  :conflicts               789
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3228
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1137
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330683)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          840
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      510
;  :arith-conflicts         328
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         345
;  :arith-pivots            1074
;  :binary-propagations     16
;  :conflicts               790
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3229
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1138
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            330888)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          843
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      511
;  :arith-conflicts         329
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         346
;  :arith-pivots            1079
;  :binary-propagations     16
;  :conflicts               791
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3230
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1139
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            331118)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          846
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      512
;  :arith-conflicts         330
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         347
;  :arith-pivots            1083
;  :binary-propagations     16
;  :conflicts               792
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3231
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1140
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            331350)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          846
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      512
;  :arith-conflicts         330
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         347
;  :arith-pivots            1083
;  :binary-propagations     16
;  :conflicts               792
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3231
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1141
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            331372)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7727
;  :arith-add-rows          846
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      512
;  :arith-conflicts         330
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         347
;  :arith-pivots            1083
;  :binary-propagations     16
;  :conflicts               792
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 2182
;  :datatype-occurs-check   193
;  :datatype-splits         1490
;  :decisions               2105
;  :del-clause              343
;  :final-checks            84
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3231
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1142
;  :propagations            254
;  :quant-instantiations    80
;  :rlimit-count            331401)
; [exec]
; inhale false
(pop) ; 7
(push) ; 7
; [else-branch: 40 | bit@10@03 != 1]
(assert (not (= bit@10@03 1)))
(pop) ; 7
; [eval] !(bit == 1)
; [eval] bit == 1
(push) ; 7
(assert (not (= bit@10@03 1)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7957
;  :arith-add-rows          849
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      512
;  :arith-conflicts         330
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         347
;  :arith-pivots            1088
;  :binary-propagations     16
;  :conflicts               792
;  :datatype-accessor-ax    256
;  :datatype-constructor-ax 2254
;  :datatype-occurs-check   200
;  :datatype-splits         1538
;  :decisions               2174
;  :del-clause              357
;  :final-checks            87
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3281
;  :mk-clause               372
;  :num-allocs              5405952
;  :num-checks              1143
;  :propagations            257
;  :quant-instantiations    80
;  :rlimit-count            333058
;  :time                    0.00)
(push) ; 7
(assert (not (not (= bit@10@03 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8189
;  :arith-add-rows          849
;  :arith-assert-diseq      103
;  :arith-assert-lower      325
;  :arith-assert-upper      512
;  :arith-conflicts         330
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         347
;  :arith-pivots            1088
;  :binary-propagations     16
;  :conflicts               792
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              361
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3334
;  :mk-clause               376
;  :num-allocs              5405952
;  :num-checks              1144
;  :propagations            261
;  :quant-instantiations    80
;  :rlimit-count            334646
;  :time                    0.00)
; [then-branch: 49 | bit@10@03 != 1 | live]
; [else-branch: 49 | bit@10@03 == 1 | live]
(push) ; 7
; [then-branch: 49 | bit@10@03 != 1]
(assert (not (= bit@10@03 1)))
; [exec]
; sys__local__result__11 := value - diz.ALU_divisor
; [eval] value - diz.ALU_divisor
(declare-const sys__local__result__11@108@03 Int)
(assert (=
  sys__local__result__11@108@03
  (-
    value@8@03
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))))
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__18: Int :: { diz.ALU_m.Main_process_state[i__18] } 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && diz.ALU_m.Main_alu == diz
(declare-const $k@109@03 $Perm)
(assert ($Perm.isReadVar $k@109@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@109@03 $Perm.No) (< $Perm.No $k@109@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8191
;  :arith-add-rows          849
;  :arith-assert-diseq      104
;  :arith-assert-lower      328
;  :arith-assert-upper      514
;  :arith-conflicts         330
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         347
;  :arith-pivots            1089
;  :binary-propagations     16
;  :conflicts               793
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              361
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3343
;  :mk-clause               381
;  :num-allocs              5405952
;  :num-checks              1145
;  :propagations            264
;  :quant-instantiations    81
;  :rlimit-count            335226)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (=
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8192
;  :arith-add-rows          853
;  :arith-assert-diseq      104
;  :arith-assert-lower      328
;  :arith-assert-upper      515
;  :arith-conflicts         331
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         347
;  :arith-pivots            1092
;  :binary-propagations     16
;  :conflicts               794
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3345
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1146
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            335462)
(assert (<
  $k@109@03
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@109@03)))
(assert (<=
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@109@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@109@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8192
;  :arith-add-rows          859
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      517
;  :arith-conflicts         332
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         348
;  :arith-pivots            1094
;  :binary-propagations     16
;  :conflicts               795
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3349
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1147
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            335918)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= $t@74@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8193
;  :arith-add-rows          859
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      517
;  :arith-conflicts         332
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         348
;  :arith-pivots            1094
;  :binary-propagations     16
;  :conflicts               796
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3350
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1148
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            335966)
(assert (not (= $t@74@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          862
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      518
;  :arith-conflicts         333
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         349
;  :arith-pivots            1099
;  :binary-propagations     16
;  :conflicts               797
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3352
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1149
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            336251)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          862
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      518
;  :arith-conflicts         333
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         349
;  :arith-pivots            1099
;  :binary-propagations     16
;  :conflicts               798
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3353
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1150
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            336331)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          865
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      519
;  :arith-conflicts         334
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         350
;  :arith-pivots            1103
;  :binary-propagations     16
;  :conflicts               799
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3354
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1151
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            336562)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          865
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      519
;  :arith-conflicts         334
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         350
;  :arith-pivots            1103
;  :binary-propagations     16
;  :conflicts               800
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3355
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1152
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            336642)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          867
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      520
;  :arith-conflicts         335
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         351
;  :arith-pivots            1105
;  :binary-propagations     16
;  :conflicts               801
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3356
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1153
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            336833)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          867
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      520
;  :arith-conflicts         335
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         351
;  :arith-pivots            1105
;  :binary-propagations     16
;  :conflicts               802
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3357
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1154
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            336913)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          869
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      521
;  :arith-conflicts         336
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         352
;  :arith-pivots            1107
;  :binary-propagations     16
;  :conflicts               803
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3358
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1155
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            337114)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          869
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      521
;  :arith-conflicts         336
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         352
;  :arith-pivots            1107
;  :binary-propagations     16
;  :conflicts               804
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3359
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1156
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            337194)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          872
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      522
;  :arith-conflicts         337
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         353
;  :arith-pivots            1112
;  :binary-propagations     16
;  :conflicts               805
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3360
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1157
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            337423)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          872
;  :arith-assert-diseq      104
;  :arith-assert-lower      330
;  :arith-assert-upper      522
;  :arith-conflicts         337
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         353
;  :arith-pivots            1112
;  :binary-propagations     16
;  :conflicts               806
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3361
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1158
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            337503)
; [eval] (forall i__18: Int :: { diz.ALU_m.Main_process_state[i__18] } 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|)
(declare-const i__18@110@03 Int)
(push) ; 8
; [eval] 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__18 && i__18 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__18
(push) ; 9
; [then-branch: 50 | 0 <= i__18@110@03 | live]
; [else-branch: 50 | !(0 <= i__18@110@03) | live]
(push) ; 10
; [then-branch: 50 | 0 <= i__18@110@03]
(assert (<= 0 i__18@110@03))
; [eval] i__18 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          875
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      523
;  :arith-conflicts         338
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         354
;  :arith-pivots            1116
;  :binary-propagations     16
;  :conflicts               807
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3363
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1159
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            337786)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8194
;  :arith-add-rows          875
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      523
;  :arith-conflicts         338
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         354
;  :arith-pivots            1116
;  :binary-propagations     16
;  :conflicts               808
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3364
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1160
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            337866)
(pop) ; 10
(push) ; 10
; [else-branch: 50 | !(0 <= i__18@110@03)]
(assert (not (<= 0 i__18@110@03)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 51 | i__18@110@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__18@110@03 | live]
; [else-branch: 51 | !(i__18@110@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__18@110@03) | live]
(push) ; 10
; [then-branch: 51 | i__18@110@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__18@110@03]
(assert (and
  (<
    i__18@110@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (<= 0 i__18@110@03)))
; [eval] diz.ALU_m.Main_process_state[i__18] == -1 || 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__18] == -1
; [eval] diz.ALU_m.Main_process_state[i__18]
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8195
;  :arith-add-rows          879
;  :arith-assert-diseq      104
;  :arith-assert-lower      332
;  :arith-assert-upper      525
;  :arith-conflicts         339
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         356
;  :arith-pivots            1119
;  :binary-propagations     16
;  :conflicts               809
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3367
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1161
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            338216)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8195
;  :arith-add-rows          879
;  :arith-assert-diseq      104
;  :arith-assert-lower      332
;  :arith-assert-upper      525
;  :arith-conflicts         339
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         356
;  :arith-pivots            1119
;  :binary-propagations     16
;  :conflicts               810
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3368
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1162
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            338296)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__18@110@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8195
;  :arith-add-rows          879
;  :arith-assert-diseq      104
;  :arith-assert-lower      332
;  :arith-assert-upper      525
;  :arith-conflicts         339
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         356
;  :arith-pivots            1119
;  :binary-propagations     16
;  :conflicts               810
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3368
;  :mk-clause               383
;  :num-allocs              5405952
;  :num-checks              1163
;  :propagations            265
;  :quant-instantiations    81
;  :rlimit-count            338305)
; [eval] -1
(push) ; 11
; [then-branch: 52 | First:(Second:(Second:(Second:($t@51@03))))[i__18@110@03] == -1 | live]
; [else-branch: 52 | First:(Second:(Second:(Second:($t@51@03))))[i__18@110@03] != -1 | live]
(push) ; 12
; [then-branch: 52 | First:(Second:(Second:(Second:($t@51@03))))[i__18@110@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__18@110@03)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 52 | First:(Second:(Second:(Second:($t@51@03))))[i__18@110@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__18@110@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__18] && diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__18]
; [eval] diz.ALU_m.Main_process_state[i__18]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8197
;  :arith-add-rows          881
;  :arith-assert-diseq      106
;  :arith-assert-lower      335
;  :arith-assert-upper      527
;  :arith-conflicts         340
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         357
;  :arith-pivots            1121
;  :binary-propagations     16
;  :conflicts               811
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3376
;  :mk-clause               393
;  :num-allocs              5405952
;  :num-checks              1164
;  :propagations            270
;  :quant-instantiations    82
;  :rlimit-count            338716)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8197
;  :arith-add-rows          881
;  :arith-assert-diseq      106
;  :arith-assert-lower      335
;  :arith-assert-upper      527
;  :arith-conflicts         340
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         357
;  :arith-pivots            1121
;  :binary-propagations     16
;  :conflicts               812
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3377
;  :mk-clause               393
;  :num-allocs              5405952
;  :num-checks              1165
;  :propagations            270
;  :quant-instantiations    82
;  :rlimit-count            338796)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__18@110@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8197
;  :arith-add-rows          881
;  :arith-assert-diseq      106
;  :arith-assert-lower      335
;  :arith-assert-upper      527
;  :arith-conflicts         340
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         357
;  :arith-pivots            1121
;  :binary-propagations     16
;  :conflicts               812
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3377
;  :mk-clause               393
;  :num-allocs              5405952
;  :num-checks              1166
;  :propagations            270
;  :quant-instantiations    82
;  :rlimit-count            338805)
(push) ; 13
; [then-branch: 53 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__18@110@03] | live]
; [else-branch: 53 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__18@110@03]) | live]
(push) ; 14
; [then-branch: 53 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__18@110@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__18@110@03)))
; [eval] diz.ALU_m.Main_process_state[i__18] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__18]
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          884
;  :arith-assert-diseq      106
;  :arith-assert-lower      337
;  :arith-assert-upper      529
;  :arith-conflicts         341
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         359
;  :arith-pivots            1127
;  :binary-propagations     16
;  :conflicts               813
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3382
;  :mk-clause               393
;  :num-allocs              5405952
;  :num-checks              1167
;  :propagations            270
;  :quant-instantiations    82
;  :rlimit-count            339162)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          884
;  :arith-assert-diseq      106
;  :arith-assert-lower      337
;  :arith-assert-upper      529
;  :arith-conflicts         341
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         359
;  :arith-pivots            1127
;  :binary-propagations     16
;  :conflicts               814
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3383
;  :mk-clause               393
;  :num-allocs              5405952
;  :num-checks              1168
;  :propagations            270
;  :quant-instantiations    82
;  :rlimit-count            339242)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__18@110@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          884
;  :arith-assert-diseq      106
;  :arith-assert-lower      337
;  :arith-assert-upper      529
;  :arith-conflicts         341
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         359
;  :arith-pivots            1127
;  :binary-propagations     16
;  :conflicts               814
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3383
;  :mk-clause               393
;  :num-allocs              5405952
;  :num-checks              1169
;  :propagations            270
;  :quant-instantiations    82
;  :rlimit-count            339251)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          887
;  :arith-assert-diseq      106
;  :arith-assert-lower      337
;  :arith-assert-upper      530
;  :arith-conflicts         342
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         360
;  :arith-pivots            1131
;  :binary-propagations     16
;  :conflicts               815
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3384
;  :mk-clause               393
;  :num-allocs              5405952
;  :num-checks              1170
;  :propagations            270
;  :quant-instantiations    82
;  :rlimit-count            339482)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          887
;  :arith-assert-diseq      106
;  :arith-assert-lower      337
;  :arith-assert-upper      530
;  :arith-conflicts         342
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         360
;  :arith-pivots            1131
;  :binary-propagations     16
;  :conflicts               816
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              363
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3385
;  :mk-clause               393
;  :num-allocs              5405952
;  :num-checks              1171
;  :propagations            270
;  :quant-instantiations    82
;  :rlimit-count            339562)
(pop) ; 14
(push) ; 14
; [else-branch: 53 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__18@110@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__18@110@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 51 | !(i__18@110@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__18@110@03)]
(assert (not
  (and
    (<
      i__18@110@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    (<= 0 i__18@110@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 8
(assert (not (forall ((i__18@110@03 Int)) (!
  (implies
    (and
      (<
        i__18@110@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__18@110@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__18@110@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__18@110@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__18@110@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__18@110@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          887
;  :arith-assert-diseq      108
;  :arith-assert-lower      338
;  :arith-assert-upper      531
;  :arith-conflicts         342
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         361
;  :arith-pivots            1132
;  :binary-propagations     16
;  :conflicts               817
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3393
;  :mk-clause               407
;  :num-allocs              5405952
;  :num-checks              1172
;  :propagations            272
;  :quant-instantiations    83
;  :rlimit-count            340011)
(assert (forall ((i__18@110@03 Int)) (!
  (implies
    (and
      (<
        i__18@110@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__18@110@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__18@110@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__18@110@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__18@110@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__18@110@03))
  :qid |prog.l<no position>|)))
(declare-const $k@111@03 $Perm)
(assert ($Perm.isReadVar $k@111@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          891
;  :arith-assert-diseq      109
;  :arith-assert-lower      340
;  :arith-assert-upper      533
;  :arith-conflicts         343
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         362
;  :arith-pivots            1135
;  :binary-propagations     16
;  :conflicts               818
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3399
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1173
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            340759)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@111@03 $Perm.No) (< $Perm.No $k@111@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          891
;  :arith-assert-diseq      109
;  :arith-assert-lower      340
;  :arith-assert-upper      533
;  :arith-conflicts         343
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         362
;  :arith-pivots            1135
;  :binary-propagations     16
;  :conflicts               819
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3399
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1174
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            340809)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          891
;  :arith-assert-diseq      109
;  :arith-assert-lower      340
;  :arith-assert-upper      533
;  :arith-conflicts         343
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         362
;  :arith-pivots            1135
;  :binary-propagations     16
;  :conflicts               819
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3399
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1175
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            340828)
(push) ; 8
(assert (not (not (= (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          891
;  :arith-assert-diseq      109
;  :arith-assert-lower      340
;  :arith-assert-upper      533
;  :arith-conflicts         343
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         362
;  :arith-pivots            1135
;  :binary-propagations     16
;  :conflicts               820
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3400
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1176
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            340920)
(assert (< $k@111@03 (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03)))
(assert (<= $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@111@03)))
(assert (<= (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@111@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@111@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          894
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      535
;  :arith-conflicts         344
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         363
;  :arith-pivots            1137
;  :binary-propagations     16
;  :conflicts               821
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3404
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1177
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341329)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          894
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      535
;  :arith-conflicts         344
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         363
;  :arith-pivots            1137
;  :binary-propagations     16
;  :conflicts               821
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3404
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1178
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341348)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          894
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      535
;  :arith-conflicts         344
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         363
;  :arith-pivots            1137
;  :binary-propagations     16
;  :conflicts               821
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3404
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1179
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341377)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          897
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      536
;  :arith-conflicts         345
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         364
;  :arith-pivots            1142
;  :binary-propagations     16
;  :conflicts               822
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3405
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1180
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341606)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          897
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      536
;  :arith-conflicts         345
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         364
;  :arith-pivots            1142
;  :binary-propagations     16
;  :conflicts               822
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3405
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1181
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341625)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          897
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      536
;  :arith-conflicts         345
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         364
;  :arith-pivots            1142
;  :binary-propagations     16
;  :conflicts               822
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3405
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1182
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341654)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          897
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      536
;  :arith-conflicts         345
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         364
;  :arith-pivots            1142
;  :binary-propagations     16
;  :conflicts               822
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3405
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1183
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341665)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          900
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      537
;  :arith-conflicts         346
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         365
;  :arith-pivots            1146
;  :binary-propagations     16
;  :conflicts               823
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3406
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1184
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341896)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          900
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      537
;  :arith-conflicts         346
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         365
;  :arith-pivots            1146
;  :binary-propagations     16
;  :conflicts               823
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3406
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1185
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341915)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          900
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      537
;  :arith-conflicts         346
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         365
;  :arith-pivots            1146
;  :binary-propagations     16
;  :conflicts               823
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3406
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1186
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341944)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          900
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      537
;  :arith-conflicts         346
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         365
;  :arith-pivots            1146
;  :binary-propagations     16
;  :conflicts               823
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3406
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1187
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            341955)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          902
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      538
;  :arith-conflicts         347
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         366
;  :arith-pivots            1148
;  :binary-propagations     16
;  :conflicts               824
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3407
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1188
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342146)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          902
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      538
;  :arith-conflicts         347
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         366
;  :arith-pivots            1148
;  :binary-propagations     16
;  :conflicts               824
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3407
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1189
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342165)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          902
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      538
;  :arith-conflicts         347
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         366
;  :arith-pivots            1148
;  :binary-propagations     16
;  :conflicts               824
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3407
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1190
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342194)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          902
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      538
;  :arith-conflicts         347
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         366
;  :arith-pivots            1148
;  :binary-propagations     16
;  :conflicts               824
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3407
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1191
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342205)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          904
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      539
;  :arith-conflicts         348
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         367
;  :arith-pivots            1150
;  :binary-propagations     16
;  :conflicts               825
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3408
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1192
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342406)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          904
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      539
;  :arith-conflicts         348
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         367
;  :arith-pivots            1150
;  :binary-propagations     16
;  :conflicts               825
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3408
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1193
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342425)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          904
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      539
;  :arith-conflicts         348
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         367
;  :arith-pivots            1150
;  :binary-propagations     16
;  :conflicts               825
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3408
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1194
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342454)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          904
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      539
;  :arith-conflicts         348
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         367
;  :arith-pivots            1150
;  :binary-propagations     16
;  :conflicts               825
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3408
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1195
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342465)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          907
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      540
;  :arith-conflicts         349
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         368
;  :arith-pivots            1155
;  :binary-propagations     16
;  :conflicts               826
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3409
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1196
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342694)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          907
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      540
;  :arith-conflicts         349
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         368
;  :arith-pivots            1155
;  :binary-propagations     16
;  :conflicts               826
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3409
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1197
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342713)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          907
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      540
;  :arith-conflicts         349
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         368
;  :arith-pivots            1155
;  :binary-propagations     16
;  :conflicts               826
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3409
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1198
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342742)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          907
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      540
;  :arith-conflicts         349
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         368
;  :arith-pivots            1155
;  :binary-propagations     16
;  :conflicts               826
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3409
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1199
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342753)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          910
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      541
;  :arith-conflicts         350
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         369
;  :arith-pivots            1159
;  :binary-propagations     16
;  :conflicts               827
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3410
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1200
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            342984)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          910
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      541
;  :arith-conflicts         350
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         369
;  :arith-pivots            1159
;  :binary-propagations     16
;  :conflicts               827
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3410
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1201
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343003)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          910
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      541
;  :arith-conflicts         350
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         369
;  :arith-pivots            1159
;  :binary-propagations     16
;  :conflicts               827
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3410
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1202
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343032)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          910
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      541
;  :arith-conflicts         350
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         369
;  :arith-pivots            1159
;  :binary-propagations     16
;  :conflicts               827
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3410
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1203
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343043)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          914
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      542
;  :arith-conflicts         351
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         370
;  :arith-pivots            1162
;  :binary-propagations     16
;  :conflicts               828
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3411
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1204
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343280)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          914
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      542
;  :arith-conflicts         351
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         370
;  :arith-pivots            1162
;  :binary-propagations     16
;  :conflicts               828
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3411
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1205
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343299)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          914
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      542
;  :arith-conflicts         351
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         370
;  :arith-pivots            1162
;  :binary-propagations     16
;  :conflicts               828
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3411
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1206
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343328)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          914
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      542
;  :arith-conflicts         351
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         370
;  :arith-pivots            1162
;  :binary-propagations     16
;  :conflicts               828
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3411
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1207
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343339)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          916
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      543
;  :arith-conflicts         352
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         371
;  :arith-pivots            1164
;  :binary-propagations     16
;  :conflicts               829
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3412
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1208
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343543)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          916
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      543
;  :arith-conflicts         352
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         371
;  :arith-pivots            1164
;  :binary-propagations     16
;  :conflicts               829
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3412
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1209
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343562)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          916
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      543
;  :arith-conflicts         352
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         371
;  :arith-pivots            1164
;  :binary-propagations     16
;  :conflicts               829
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3412
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1210
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343591)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          916
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      543
;  :arith-conflicts         352
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         371
;  :arith-pivots            1164
;  :binary-propagations     16
;  :conflicts               829
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3412
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1211
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343602)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          919
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      544
;  :arith-conflicts         353
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         372
;  :arith-pivots            1169
;  :binary-propagations     16
;  :conflicts               830
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3413
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1212
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343831)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          919
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      544
;  :arith-conflicts         353
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         372
;  :arith-pivots            1169
;  :binary-propagations     16
;  :conflicts               830
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3413
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1213
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343850)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          919
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      544
;  :arith-conflicts         353
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         372
;  :arith-pivots            1169
;  :binary-propagations     16
;  :conflicts               830
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3413
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1214
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343879)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          919
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      544
;  :arith-conflicts         353
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         372
;  :arith-pivots            1169
;  :binary-propagations     16
;  :conflicts               830
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3413
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1215
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            343890)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          922
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      545
;  :arith-conflicts         354
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         373
;  :arith-pivots            1173
;  :binary-propagations     16
;  :conflicts               831
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3414
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1216
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344121)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          922
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      545
;  :arith-conflicts         354
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         373
;  :arith-pivots            1173
;  :binary-propagations     16
;  :conflicts               831
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3414
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1217
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344140)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          922
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      545
;  :arith-conflicts         354
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         373
;  :arith-pivots            1173
;  :binary-propagations     16
;  :conflicts               831
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3414
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1218
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344169)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          922
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      545
;  :arith-conflicts         354
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         373
;  :arith-pivots            1173
;  :binary-propagations     16
;  :conflicts               831
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3414
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1219
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344180)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          924
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      546
;  :arith-conflicts         355
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         374
;  :arith-pivots            1175
;  :binary-propagations     16
;  :conflicts               832
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3415
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1220
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344371)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          924
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      546
;  :arith-conflicts         355
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         374
;  :arith-pivots            1175
;  :binary-propagations     16
;  :conflicts               832
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3415
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1221
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344390)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          924
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      546
;  :arith-conflicts         355
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         374
;  :arith-pivots            1175
;  :binary-propagations     16
;  :conflicts               832
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3415
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1222
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344419)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          924
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      546
;  :arith-conflicts         355
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         374
;  :arith-pivots            1175
;  :binary-propagations     16
;  :conflicts               832
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3415
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1223
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344430)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          926
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      547
;  :arith-conflicts         356
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         375
;  :arith-pivots            1177
;  :binary-propagations     16
;  :conflicts               833
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3416
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1224
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344631)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          926
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      547
;  :arith-conflicts         356
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         375
;  :arith-pivots            1177
;  :binary-propagations     16
;  :conflicts               833
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3416
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1225
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344650)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          926
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      547
;  :arith-conflicts         356
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         375
;  :arith-pivots            1177
;  :binary-propagations     16
;  :conflicts               833
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3416
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1226
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344679)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          926
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      547
;  :arith-conflicts         356
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         375
;  :arith-pivots            1177
;  :binary-propagations     16
;  :conflicts               833
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3416
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1227
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344690)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          929
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      548
;  :arith-conflicts         357
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         376
;  :arith-pivots            1182
;  :binary-propagations     16
;  :conflicts               834
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3417
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1228
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344919)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          929
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      548
;  :arith-conflicts         357
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         376
;  :arith-pivots            1182
;  :binary-propagations     16
;  :conflicts               834
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3417
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1229
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344938)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          929
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      548
;  :arith-conflicts         357
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         376
;  :arith-pivots            1182
;  :binary-propagations     16
;  :conflicts               834
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3417
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1230
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344967)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          929
;  :arith-assert-diseq      109
;  :arith-assert-lower      342
;  :arith-assert-upper      548
;  :arith-conflicts         357
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         376
;  :arith-pivots            1182
;  :binary-propagations     16
;  :conflicts               834
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3417
;  :mk-clause               409
;  :num-allocs              5405952
;  :num-checks              1231
;  :propagations            273
;  :quant-instantiations    83
;  :rlimit-count            344978)
(declare-const $k@112@03 $Perm)
(assert ($Perm.isReadVar $k@112@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          932
;  :arith-assert-diseq      110
;  :arith-assert-lower      344
;  :arith-assert-upper      550
;  :arith-conflicts         358
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         377
;  :arith-pivots            1186
;  :binary-propagations     16
;  :conflicts               835
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3422
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1232
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            345357)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@112@03 $Perm.No) (< $Perm.No $k@112@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          932
;  :arith-assert-diseq      110
;  :arith-assert-lower      344
;  :arith-assert-upper      550
;  :arith-conflicts         358
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         377
;  :arith-pivots            1186
;  :binary-propagations     16
;  :conflicts               836
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3422
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1233
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            345407)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          932
;  :arith-assert-diseq      110
;  :arith-assert-lower      344
;  :arith-assert-upper      550
;  :arith-conflicts         358
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         377
;  :arith-pivots            1186
;  :binary-propagations     16
;  :conflicts               836
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3422
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1234
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            345426)
(push) ; 8
(assert (not (not (= (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          932
;  :arith-assert-diseq      110
;  :arith-assert-lower      344
;  :arith-assert-upper      550
;  :arith-conflicts         358
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         377
;  :arith-pivots            1186
;  :binary-propagations     16
;  :conflicts               837
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3423
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1235
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            345518)
(assert (< $k@112@03 (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@112@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@112@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@112@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          935
;  :arith-assert-diseq      110
;  :arith-assert-lower      346
;  :arith-assert-upper      552
;  :arith-conflicts         359
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         378
;  :arith-pivots            1189
;  :binary-propagations     16
;  :conflicts               838
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3427
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1236
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            345922)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          935
;  :arith-assert-diseq      110
;  :arith-assert-lower      346
;  :arith-assert-upper      552
;  :arith-conflicts         359
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         378
;  :arith-pivots            1189
;  :binary-propagations     16
;  :conflicts               838
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3427
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1237
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            345941)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          935
;  :arith-assert-diseq      110
;  :arith-assert-lower      346
;  :arith-assert-upper      552
;  :arith-conflicts         359
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         378
;  :arith-pivots            1189
;  :binary-propagations     16
;  :conflicts               838
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3427
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1238
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            345970)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          937
;  :arith-assert-diseq      110
;  :arith-assert-lower      346
;  :arith-assert-upper      553
;  :arith-conflicts         360
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         379
;  :arith-pivots            1191
;  :binary-propagations     16
;  :conflicts               839
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3428
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1239
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            346171)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          937
;  :arith-assert-diseq      110
;  :arith-assert-lower      346
;  :arith-assert-upper      553
;  :arith-conflicts         360
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         379
;  :arith-pivots            1191
;  :binary-propagations     16
;  :conflicts               839
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3428
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1240
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            346190)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8199
;  :arith-add-rows          937
;  :arith-assert-diseq      110
;  :arith-assert-lower      346
;  :arith-assert-upper      553
;  :arith-conflicts         360
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         379
;  :arith-pivots            1191
;  :binary-propagations     16
;  :conflicts               839
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 2326
;  :datatype-occurs-check   207
;  :datatype-splits         1586
;  :decisions               2244
;  :del-clause              387
;  :final-checks            90
;  :max-generation          1
;  :max-memory              4.77
;  :memory                  4.67
;  :mk-bool-var             3428
;  :mk-clause               411
;  :num-allocs              5405952
;  :num-checks              1241
;  :propagations            274
;  :quant-instantiations    83
;  :rlimit-count            346219)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8540
;  :arith-add-rows          941
;  :arith-assert-diseq      110
;  :arith-assert-lower      348
;  :arith-assert-upper      555
;  :arith-conflicts         360
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         381
;  :arith-pivots            1195
;  :binary-propagations     16
;  :conflicts               840
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2443
;  :datatype-occurs-check   218
;  :datatype-splits         1679
;  :decisions               2355
;  :del-clause              390
;  :final-checks            94
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             3532
;  :mk-clause               414
;  :num-allocs              5680578
;  :num-checks              1242
;  :propagations            277
;  :quant-instantiations    83
;  :rlimit-count            348741
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 8
(assert (not (=
  diz@6@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9006
;  :arith-add-rows          945
;  :arith-assert-diseq      110
;  :arith-assert-lower      350
;  :arith-assert-upper      557
;  :arith-conflicts         360
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         383
;  :arith-pivots            1199
;  :binary-propagations     16
;  :conflicts               840
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3636
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1245
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            351952)
(declare-const $t@113@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9006
;  :arith-add-rows          945
;  :arith-assert-diseq      110
;  :arith-assert-lower      350
;  :arith-assert-upper      557
;  :arith-conflicts         360
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         383
;  :arith-pivots            1199
;  :binary-propagations     16
;  :conflicts               841
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3636
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1246
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            352027)
(declare-const $t@114@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9006
;  :arith-add-rows          945
;  :arith-assert-diseq      110
;  :arith-assert-lower      350
;  :arith-assert-upper      557
;  :arith-conflicts         360
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         383
;  :arith-pivots            1199
;  :binary-propagations     16
;  :conflicts               842
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3636
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1247
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            352102)
(declare-const $t@115@03 $Ref)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9006
;  :arith-add-rows          945
;  :arith-assert-diseq      110
;  :arith-assert-lower      350
;  :arith-assert-upper      557
;  :arith-conflicts         360
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         383
;  :arith-pivots            1199
;  :binary-propagations     16
;  :conflicts               843
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3637
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1248
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            352187)
(declare-const $t@116@03 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@109@03))
    (= $t@113@03 $t@74@03))
  (implies
    (< $Perm.No $k@57@03)
    (=
      $t@113@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@112@03))
    (= $t@114@03 $t@44@03))
  (implies
    (< $Perm.No $k@55@03)
    (=
      $t@114@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@111@03))
    (= $t@115@03 $t@42@03))
  (implies
    (< $Perm.No $k@54@03)
    (=
      $t@115@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@56@03)
    (=
      $t@116@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))
    (= $t@116@03 $t@46@03))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@109@03)
    $k@57@03)))
(assert (<=
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@109@03)
    $k@57@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@109@03)
      $k@57@03))
  (not (= diz@6@03 $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@112@03) $k@55@03)))
(assert (<=
  (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@112@03) $k@55@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@112@03) $k@55@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<=
  $Perm.No
  (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@111@03) $k@54@03)))
(assert (<=
  (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@111@03) $k@54@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@111@03) $k@54@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(assert (<= (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          953
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      561
;  :arith-conflicts         360
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         383
;  :arith-pivots            1200
;  :binary-propagations     16
;  :conflicts               844
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3652
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1249
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            353878)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          956
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      562
;  :arith-conflicts         361
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         384
;  :arith-pivots            1205
;  :binary-propagations     16
;  :conflicts               845
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3653
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1250
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            354108)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          956
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      562
;  :arith-conflicts         361
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         384
;  :arith-pivots            1205
;  :binary-propagations     16
;  :conflicts               845
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3653
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1251
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            354127)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          956
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      562
;  :arith-conflicts         361
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         384
;  :arith-pivots            1205
;  :binary-propagations     16
;  :conflicts               845
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3653
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1252
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            354156)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          956
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      562
;  :arith-conflicts         361
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         384
;  :arith-pivots            1205
;  :binary-propagations     16
;  :conflicts               846
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3654
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1253
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            354466)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          959
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      563
;  :arith-conflicts         362
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         385
;  :arith-pivots            1209
;  :binary-propagations     16
;  :conflicts               847
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3655
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1254
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            354698)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          959
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      563
;  :arith-conflicts         362
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         385
;  :arith-pivots            1209
;  :binary-propagations     16
;  :conflicts               847
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3655
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1255
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            354717)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          959
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      563
;  :arith-conflicts         362
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         385
;  :arith-pivots            1209
;  :binary-propagations     16
;  :conflicts               847
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3655
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1256
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            354746)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          959
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      563
;  :arith-conflicts         362
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         385
;  :arith-pivots            1209
;  :binary-propagations     16
;  :conflicts               848
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3656
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1257
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            355056)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          963
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      564
;  :arith-conflicts         363
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         386
;  :arith-pivots            1212
;  :binary-propagations     16
;  :conflicts               849
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3657
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1258
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            355294)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          963
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      564
;  :arith-conflicts         363
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         386
;  :arith-pivots            1212
;  :binary-propagations     16
;  :conflicts               849
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3657
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1259
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            355313)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          963
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      564
;  :arith-conflicts         363
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         386
;  :arith-pivots            1212
;  :binary-propagations     16
;  :conflicts               849
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3657
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1260
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            355342)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          963
;  :arith-assert-diseq      110
;  :arith-assert-lower      354
;  :arith-assert-upper      564
;  :arith-conflicts         363
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         386
;  :arith-pivots            1212
;  :binary-propagations     16
;  :conflicts               850
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3658
;  :mk-clause               416
;  :num-allocs              5955579
;  :num-checks              1261
;  :propagations            283
;  :quant-instantiations    83
;  :rlimit-count            355652)
(declare-const $k@117@03 $Perm)
(assert ($Perm.isReadVar $k@117@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          965
;  :arith-assert-diseq      111
;  :arith-assert-lower      356
;  :arith-assert-upper      566
;  :arith-conflicts         364
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         387
;  :arith-pivots            1214
;  :binary-propagations     16
;  :conflicts               851
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3663
;  :mk-clause               418
;  :num-allocs              5955579
;  :num-checks              1262
;  :propagations            284
;  :quant-instantiations    83
;  :rlimit-count            356005)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@117@03 $Perm.No) (< $Perm.No $k@117@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          965
;  :arith-assert-diseq      111
;  :arith-assert-lower      356
;  :arith-assert-upper      566
;  :arith-conflicts         364
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         387
;  :arith-pivots            1214
;  :binary-propagations     16
;  :conflicts               852
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3663
;  :mk-clause               418
;  :num-allocs              5955579
;  :num-checks              1263
;  :propagations            284
;  :quant-instantiations    83
;  :rlimit-count            356055)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9017
;  :arith-add-rows          965
;  :arith-assert-diseq      111
;  :arith-assert-lower      356
;  :arith-assert-upper      566
;  :arith-conflicts         364
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         387
;  :arith-pivots            1214
;  :binary-propagations     16
;  :conflicts               853
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              401
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3664
;  :mk-clause               418
;  :num-allocs              5955579
;  :num-checks              1264
;  :propagations            284
;  :quant-instantiations    83
;  :rlimit-count            356135)
(push) ; 8
(assert (not (not (= (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          966
;  :arith-assert-diseq      111
;  :arith-assert-lower      356
;  :arith-assert-upper      567
;  :arith-conflicts         365
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         387
;  :arith-pivots            1216
;  :binary-propagations     16
;  :conflicts               854
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3666
;  :mk-clause               420
;  :num-allocs              5955579
;  :num-checks              1265
;  :propagations            285
;  :quant-instantiations    83
;  :rlimit-count            356264)
(assert (< $k@117@03 (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(assert (<=
  $Perm.No
  (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@117@03)))
(assert (<=
  (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@117@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ $k@56@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)) $k@117@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          971
;  :arith-assert-diseq      111
;  :arith-assert-lower      358
;  :arith-assert-upper      569
;  :arith-conflicts         366
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         388
;  :arith-pivots            1221
;  :binary-propagations     16
;  :conflicts               855
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3670
;  :mk-clause               420
;  :num-allocs              5955579
;  :num-checks              1266
;  :propagations            285
;  :quant-instantiations    83
;  :rlimit-count            356704)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          971
;  :arith-assert-diseq      111
;  :arith-assert-lower      358
;  :arith-assert-upper      569
;  :arith-conflicts         366
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         388
;  :arith-pivots            1221
;  :binary-propagations     16
;  :conflicts               855
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3670
;  :mk-clause               420
;  :num-allocs              5955579
;  :num-checks              1267
;  :propagations            285
;  :quant-instantiations    83
;  :rlimit-count            356723)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          971
;  :arith-assert-diseq      111
;  :arith-assert-lower      358
;  :arith-assert-upper      569
;  :arith-conflicts         366
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         388
;  :arith-pivots            1221
;  :binary-propagations     16
;  :conflicts               855
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3670
;  :mk-clause               420
;  :num-allocs              5955579
;  :num-checks              1268
;  :propagations            285
;  :quant-instantiations    83
;  :rlimit-count            356752)
(declare-const $k@118@03 $Perm)
(assert ($Perm.isReadVar $k@118@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          974
;  :arith-assert-diseq      112
;  :arith-assert-lower      360
;  :arith-assert-upper      571
;  :arith-conflicts         367
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         389
;  :arith-pivots            1225
;  :binary-propagations     16
;  :conflicts               856
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3675
;  :mk-clause               422
;  :num-allocs              5955579
;  :num-checks              1269
;  :propagations            286
;  :quant-instantiations    83
;  :rlimit-count            357132)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          974
;  :arith-assert-diseq      112
;  :arith-assert-lower      360
;  :arith-assert-upper      571
;  :arith-conflicts         367
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         389
;  :arith-pivots            1225
;  :binary-propagations     16
;  :conflicts               856
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3675
;  :mk-clause               422
;  :num-allocs              5955579
;  :num-checks              1270
;  :propagations            286
;  :quant-instantiations    83
;  :rlimit-count            357151)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          974
;  :arith-assert-diseq      112
;  :arith-assert-lower      360
;  :arith-assert-upper      571
;  :arith-conflicts         367
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         389
;  :arith-pivots            1225
;  :binary-propagations     16
;  :conflicts               856
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3675
;  :mk-clause               422
;  :num-allocs              5955579
;  :num-checks              1271
;  :propagations            286
;  :quant-instantiations    83
;  :rlimit-count            357180)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@118@03 $Perm.No) (< $Perm.No $k@118@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          974
;  :arith-assert-diseq      112
;  :arith-assert-lower      360
;  :arith-assert-upper      571
;  :arith-conflicts         367
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         389
;  :arith-pivots            1225
;  :binary-propagations     16
;  :conflicts               857
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3675
;  :mk-clause               422
;  :num-allocs              5955579
;  :num-checks              1272
;  :propagations            286
;  :quant-instantiations    83
;  :rlimit-count            357230)
(set-option :timeout 10)
(push) ; 8
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          974
;  :arith-assert-diseq      112
;  :arith-assert-lower      360
;  :arith-assert-upper      571
;  :arith-conflicts         367
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         389
;  :arith-pivots            1225
;  :binary-propagations     16
;  :conflicts               857
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              403
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3675
;  :mk-clause               422
;  :num-allocs              5955579
;  :num-checks              1273
;  :propagations            286
;  :quant-instantiations    83
;  :rlimit-count            357241)
(push) ; 8
(assert (not (not
  (=
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@109@03)
      $k@57@03)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          978
;  :arith-assert-diseq      112
;  :arith-assert-lower      360
;  :arith-assert-upper      572
;  :arith-conflicts         368
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         389
;  :arith-pivots            1227
;  :binary-propagations     16
;  :conflicts               858
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3677
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1274
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            357497)
(assert (<
  $k@118@03
  (+
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@109@03)
    $k@57@03)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@109@03)
      $k@57@03)
    $k@118@03)))
(assert (<=
  (-
    (+
      (-
        (+
          (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
          (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
        $k@109@03)
      $k@57@03)
    $k@118@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
            (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
          $k@109@03)
        $k@57@03)
      $k@118@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          988
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      574
;  :arith-conflicts         369
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         390
;  :arith-pivots            1230
;  :binary-propagations     16
;  :conflicts               859
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3681
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1275
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358030)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          988
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      574
;  :arith-conflicts         369
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         390
;  :arith-pivots            1230
;  :binary-propagations     16
;  :conflicts               859
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3681
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1276
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358049)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          988
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      574
;  :arith-conflicts         369
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         390
;  :arith-pivots            1230
;  :binary-propagations     16
;  :conflicts               859
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3681
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1277
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358078)
(push) ; 8
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          988
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      574
;  :arith-conflicts         369
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         390
;  :arith-pivots            1230
;  :binary-propagations     16
;  :conflicts               859
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3681
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1278
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358089)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          990
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      575
;  :arith-conflicts         370
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         391
;  :arith-pivots            1232
;  :binary-propagations     16
;  :conflicts               860
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3682
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1279
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358291)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          993
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      576
;  :arith-conflicts         371
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         392
;  :arith-pivots            1237
;  :binary-propagations     16
;  :conflicts               861
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3683
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1280
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358521)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          996
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      577
;  :arith-conflicts         372
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         393
;  :arith-pivots            1241
;  :binary-propagations     16
;  :conflicts               862
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3684
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1281
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358753)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          996
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      577
;  :arith-conflicts         372
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         393
;  :arith-pivots            1241
;  :binary-propagations     16
;  :conflicts               862
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3684
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1282
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358772)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          996
;  :arith-assert-diseq      112
;  :arith-assert-lower      362
;  :arith-assert-upper      577
;  :arith-conflicts         372
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         393
;  :arith-pivots            1241
;  :binary-propagations     16
;  :conflicts               862
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3684
;  :mk-clause               424
;  :num-allocs              5955579
;  :num-checks              1283
;  :propagations            287
;  :quant-instantiations    83
;  :rlimit-count            358801)
; [exec]
; label __return_set_bit
; [exec]
; sys__result := sys__local__result__11
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__19: Int :: { diz.ALU_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && diz.ALU_m.Main_alu == diz
(declare-const $k@119@03 $Perm)
(assert ($Perm.isReadVar $k@119@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@119@03 $Perm.No) (< $Perm.No $k@119@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9019
;  :arith-add-rows          996
;  :arith-assert-diseq      113
;  :arith-assert-lower      364
;  :arith-assert-upper      578
;  :arith-conflicts         372
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         393
;  :arith-pivots            1241
;  :binary-propagations     16
;  :conflicts               863
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              405
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3688
;  :mk-clause               426
;  :num-allocs              5955579
;  :num-checks              1284
;  :propagations            288
;  :quant-instantiations    83
;  :rlimit-count            359000)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (=
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1000
;  :arith-assert-diseq      113
;  :arith-assert-lower      364
;  :arith-assert-upper      579
;  :arith-conflicts         373
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         393
;  :arith-pivots            1244
;  :binary-propagations     16
;  :conflicts               864
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3690
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1285
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            359238)
(assert (<
  $k@119@03
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))))
(assert (<=
  $Perm.No
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@119@03)))
(assert (<=
  (-
    (+
      (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
      (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
    $k@119@03)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
        (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03))
      $k@119@03))
  (not (= diz@6@03 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1006
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      581
;  :arith-conflicts         374
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         394
;  :arith-pivots            1246
;  :binary-propagations     16
;  :conflicts               865
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3694
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1286
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            359696)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1009
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      582
;  :arith-conflicts         375
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         395
;  :arith-pivots            1251
;  :binary-propagations     16
;  :conflicts               866
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3695
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1287
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            359927)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1009
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      582
;  :arith-conflicts         375
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         395
;  :arith-pivots            1251
;  :binary-propagations     16
;  :conflicts               867
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3696
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1288
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            360007)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1012
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      583
;  :arith-conflicts         376
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         396
;  :arith-pivots            1255
;  :binary-propagations     16
;  :conflicts               868
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3697
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1289
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            360240)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1012
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      583
;  :arith-conflicts         376
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         396
;  :arith-pivots            1255
;  :binary-propagations     16
;  :conflicts               869
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3698
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1290
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            360320)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1014
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      584
;  :arith-conflicts         377
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         397
;  :arith-pivots            1257
;  :binary-propagations     16
;  :conflicts               870
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3699
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1291
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            360513)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1014
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      584
;  :arith-conflicts         377
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         397
;  :arith-pivots            1257
;  :binary-propagations     16
;  :conflicts               871
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3700
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1292
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            360593)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1016
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      585
;  :arith-conflicts         378
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         398
;  :arith-pivots            1259
;  :binary-propagations     16
;  :conflicts               872
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3701
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1293
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            360796)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1016
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      585
;  :arith-conflicts         378
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         398
;  :arith-pivots            1259
;  :binary-propagations     16
;  :conflicts               873
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3702
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1294
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            360876)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1019
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      586
;  :arith-conflicts         379
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         399
;  :arith-pivots            1264
;  :binary-propagations     16
;  :conflicts               874
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3703
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1295
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            361107)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1019
;  :arith-assert-diseq      113
;  :arith-assert-lower      366
;  :arith-assert-upper      586
;  :arith-conflicts         379
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         399
;  :arith-pivots            1264
;  :binary-propagations     16
;  :conflicts               875
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3704
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1296
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            361187)
; [eval] (forall i__19: Int :: { diz.ALU_m.Main_process_state[i__19] } 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|)
(declare-const i__19@120@03 Int)
(push) ; 8
; [eval] 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__19 && i__19 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__19
(push) ; 9
; [then-branch: 54 | 0 <= i__19@120@03 | live]
; [else-branch: 54 | !(0 <= i__19@120@03) | live]
(push) ; 10
; [then-branch: 54 | 0 <= i__19@120@03]
(assert (<= 0 i__19@120@03))
; [eval] i__19 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1022
;  :arith-assert-diseq      113
;  :arith-assert-lower      367
;  :arith-assert-upper      587
;  :arith-conflicts         380
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         400
;  :arith-pivots            1268
;  :binary-propagations     16
;  :conflicts               876
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3706
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1297
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            361472)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9020
;  :arith-add-rows          1022
;  :arith-assert-diseq      113
;  :arith-assert-lower      367
;  :arith-assert-upper      587
;  :arith-conflicts         380
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         400
;  :arith-pivots            1268
;  :binary-propagations     16
;  :conflicts               877
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3707
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1298
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            361552)
(pop) ; 10
(push) ; 10
; [else-branch: 54 | !(0 <= i__19@120@03)]
(assert (not (<= 0 i__19@120@03)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 55 | i__19@120@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@120@03 | live]
; [else-branch: 55 | !(i__19@120@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@120@03) | live]
(push) ; 10
; [then-branch: 55 | i__19@120@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@120@03]
(assert (and
  (<
    i__19@120@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (<= 0 i__19@120@03)))
; [eval] diz.ALU_m.Main_process_state[i__19] == -1 || 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__19] == -1
; [eval] diz.ALU_m.Main_process_state[i__19]
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9021
;  :arith-add-rows          1024
;  :arith-assert-diseq      113
;  :arith-assert-lower      368
;  :arith-assert-upper      589
;  :arith-conflicts         381
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         402
;  :arith-pivots            1270
;  :binary-propagations     16
;  :conflicts               878
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3710
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1299
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            361858)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9021
;  :arith-add-rows          1024
;  :arith-assert-diseq      113
;  :arith-assert-lower      368
;  :arith-assert-upper      589
;  :arith-conflicts         381
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         402
;  :arith-pivots            1270
;  :binary-propagations     16
;  :conflicts               879
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3711
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1300
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            361938)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__19@120@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9021
;  :arith-add-rows          1024
;  :arith-assert-diseq      113
;  :arith-assert-lower      368
;  :arith-assert-upper      589
;  :arith-conflicts         381
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         402
;  :arith-pivots            1270
;  :binary-propagations     16
;  :conflicts               879
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3711
;  :mk-clause               428
;  :num-allocs              5955579
;  :num-checks              1301
;  :propagations            289
;  :quant-instantiations    83
;  :rlimit-count            361947)
; [eval] -1
(push) ; 11
; [then-branch: 56 | First:(Second:(Second:(Second:($t@51@03))))[i__19@120@03] == -1 | live]
; [else-branch: 56 | First:(Second:(Second:(Second:($t@51@03))))[i__19@120@03] != -1 | live]
(push) ; 12
; [then-branch: 56 | First:(Second:(Second:(Second:($t@51@03))))[i__19@120@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@120@03)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 56 | First:(Second:(Second:(Second:($t@51@03))))[i__19@120@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__19@120@03)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__19] && diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__19]
; [eval] diz.ALU_m.Main_process_state[i__19]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9023
;  :arith-add-rows          1026
;  :arith-assert-diseq      115
;  :arith-assert-lower      371
;  :arith-assert-upper      591
;  :arith-conflicts         382
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         403
;  :arith-pivots            1272
;  :binary-propagations     16
;  :conflicts               880
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3719
;  :mk-clause               439
;  :num-allocs              5955579
;  :num-checks              1302
;  :propagations            294
;  :quant-instantiations    85
;  :rlimit-count            362383)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9023
;  :arith-add-rows          1026
;  :arith-assert-diseq      115
;  :arith-assert-lower      371
;  :arith-assert-upper      591
;  :arith-conflicts         382
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         403
;  :arith-pivots            1272
;  :binary-propagations     16
;  :conflicts               881
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3720
;  :mk-clause               439
;  :num-allocs              5955579
;  :num-checks              1303
;  :propagations            294
;  :quant-instantiations    85
;  :rlimit-count            362463)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__19@120@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9023
;  :arith-add-rows          1026
;  :arith-assert-diseq      115
;  :arith-assert-lower      371
;  :arith-assert-upper      591
;  :arith-conflicts         382
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         403
;  :arith-pivots            1272
;  :binary-propagations     16
;  :conflicts               881
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3720
;  :mk-clause               439
;  :num-allocs              5955579
;  :num-checks              1304
;  :propagations            294
;  :quant-instantiations    85
;  :rlimit-count            362472)
(push) ; 13
; [then-branch: 57 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@120@03] | live]
; [else-branch: 57 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@120@03]) | live]
(push) ; 14
; [then-branch: 57 | 0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@120@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@120@03)))
; [eval] diz.ALU_m.Main_process_state[i__19] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__19]
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1029
;  :arith-assert-diseq      115
;  :arith-assert-lower      373
;  :arith-assert-upper      593
;  :arith-conflicts         383
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         405
;  :arith-pivots            1278
;  :binary-propagations     16
;  :conflicts               882
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3725
;  :mk-clause               439
;  :num-allocs              5955579
;  :num-checks              1305
;  :propagations            294
;  :quant-instantiations    85
;  :rlimit-count            362829)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1029
;  :arith-assert-diseq      115
;  :arith-assert-lower      373
;  :arith-assert-upper      593
;  :arith-conflicts         383
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         405
;  :arith-pivots            1278
;  :binary-propagations     16
;  :conflicts               883
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3726
;  :mk-clause               439
;  :num-allocs              5955579
;  :num-checks              1306
;  :propagations            294
;  :quant-instantiations    85
;  :rlimit-count            362909)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__19@120@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1029
;  :arith-assert-diseq      115
;  :arith-assert-lower      373
;  :arith-assert-upper      593
;  :arith-conflicts         383
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         405
;  :arith-pivots            1278
;  :binary-propagations     16
;  :conflicts               883
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3726
;  :mk-clause               439
;  :num-allocs              5955579
;  :num-checks              1307
;  :propagations            294
;  :quant-instantiations    85
;  :rlimit-count            362918)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1032
;  :arith-assert-diseq      115
;  :arith-assert-lower      373
;  :arith-assert-upper      594
;  :arith-conflicts         384
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         406
;  :arith-pivots            1282
;  :binary-propagations     16
;  :conflicts               884
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3727
;  :mk-clause               439
;  :num-allocs              5955579
;  :num-checks              1308
;  :propagations            294
;  :quant-instantiations    85
;  :rlimit-count            363151)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@51@03)) $t@74@03)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1032
;  :arith-assert-diseq      115
;  :arith-assert-lower      373
;  :arith-assert-upper      594
;  :arith-conflicts         384
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         406
;  :arith-pivots            1282
;  :binary-propagations     16
;  :conflicts               885
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              407
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3728
;  :mk-clause               439
;  :num-allocs              5955579
;  :num-checks              1309
;  :propagations            294
;  :quant-instantiations    85
;  :rlimit-count            363231)
(pop) ; 14
(push) ; 14
; [else-branch: 57 | !(0 <= First:(Second:(Second:(Second:($t@51@03))))[i__19@120@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
      i__19@120@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 55 | !(i__19@120@03 < |First:(Second:(Second:(Second:($t@51@03))))| && 0 <= i__19@120@03)]
(assert (not
  (and
    (<
      i__19@120@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
    (<= 0 i__19@120@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 8
(assert (not (forall ((i__19@120@03 Int)) (!
  (implies
    (and
      (<
        i__19@120@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__19@120@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__19@120@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@120@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@120@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@120@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1032
;  :arith-assert-diseq      117
;  :arith-assert-lower      374
;  :arith-assert-upper      595
;  :arith-conflicts         384
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         407
;  :arith-pivots            1283
;  :binary-propagations     16
;  :conflicts               886
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3736
;  :mk-clause               453
;  :num-allocs              5955579
;  :num-checks              1310
;  :propagations            296
;  :quant-instantiations    87
;  :rlimit-count            363705)
(assert (forall ((i__19@120@03 Int)) (!
  (implies
    (and
      (<
        i__19@120@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
      (<= 0 i__19@120@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
          i__19@120@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@120@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
            i__19@120@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    i__19@120@03))
  :qid |prog.l<no position>|)))
(declare-const $k@121@03 $Perm)
(assert ($Perm.isReadVar $k@121@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1036
;  :arith-assert-diseq      118
;  :arith-assert-lower      376
;  :arith-assert-upper      597
;  :arith-conflicts         385
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         408
;  :arith-pivots            1286
;  :binary-propagations     16
;  :conflicts               887
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3742
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1311
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            364455)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@121@03 $Perm.No) (< $Perm.No $k@121@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1036
;  :arith-assert-diseq      118
;  :arith-assert-lower      376
;  :arith-assert-upper      597
;  :arith-conflicts         385
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         408
;  :arith-pivots            1286
;  :binary-propagations     16
;  :conflicts               888
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3742
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1312
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            364505)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1036
;  :arith-assert-diseq      118
;  :arith-assert-lower      376
;  :arith-assert-upper      597
;  :arith-conflicts         385
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         408
;  :arith-pivots            1286
;  :binary-propagations     16
;  :conflicts               888
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3742
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1313
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            364524)
(push) ; 8
(assert (not (not (= (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1036
;  :arith-assert-diseq      118
;  :arith-assert-lower      376
;  :arith-assert-upper      597
;  :arith-conflicts         385
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         408
;  :arith-pivots            1286
;  :binary-propagations     16
;  :conflicts               889
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3743
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1314
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            364616)
(assert (< $k@121@03 (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03)))
(assert (<= $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@121@03)))
(assert (<= (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@121@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03) $k@121@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1039
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      599
;  :arith-conflicts         386
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         409
;  :arith-pivots            1288
;  :binary-propagations     16
;  :conflicts               890
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3747
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1315
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365027)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1039
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      599
;  :arith-conflicts         386
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         409
;  :arith-pivots            1288
;  :binary-propagations     16
;  :conflicts               890
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3747
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1316
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365046)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1039
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      599
;  :arith-conflicts         386
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         409
;  :arith-pivots            1288
;  :binary-propagations     16
;  :conflicts               890
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3747
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1317
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365075)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1042
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      600
;  :arith-conflicts         387
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         410
;  :arith-pivots            1293
;  :binary-propagations     16
;  :conflicts               891
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3748
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1318
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365306)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1042
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      600
;  :arith-conflicts         387
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         410
;  :arith-pivots            1293
;  :binary-propagations     16
;  :conflicts               891
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3748
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1319
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365325)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1042
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      600
;  :arith-conflicts         387
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         410
;  :arith-pivots            1293
;  :binary-propagations     16
;  :conflicts               891
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3748
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1320
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365354)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1042
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      600
;  :arith-conflicts         387
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         410
;  :arith-pivots            1293
;  :binary-propagations     16
;  :conflicts               891
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3748
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1321
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365365)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1045
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      601
;  :arith-conflicts         388
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         411
;  :arith-pivots            1297
;  :binary-propagations     16
;  :conflicts               892
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3749
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1322
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365598)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1045
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      601
;  :arith-conflicts         388
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         411
;  :arith-pivots            1297
;  :binary-propagations     16
;  :conflicts               892
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3749
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1323
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365617)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1045
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      601
;  :arith-conflicts         388
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         411
;  :arith-pivots            1297
;  :binary-propagations     16
;  :conflicts               892
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3749
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1324
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365646)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1045
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      601
;  :arith-conflicts         388
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         411
;  :arith-pivots            1297
;  :binary-propagations     16
;  :conflicts               892
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3749
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1325
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365657)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1049
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      602
;  :arith-conflicts         389
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         412
;  :arith-pivots            1300
;  :binary-propagations     16
;  :conflicts               893
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3750
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1326
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365896)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1049
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      602
;  :arith-conflicts         389
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         412
;  :arith-pivots            1300
;  :binary-propagations     16
;  :conflicts               893
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3750
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1327
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365915)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1049
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      602
;  :arith-conflicts         389
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         412
;  :arith-pivots            1300
;  :binary-propagations     16
;  :conflicts               893
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3750
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1328
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365944)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1049
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      602
;  :arith-conflicts         389
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         412
;  :arith-pivots            1300
;  :binary-propagations     16
;  :conflicts               893
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3750
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1329
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            365955)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1051
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      603
;  :arith-conflicts         390
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         413
;  :arith-pivots            1302
;  :binary-propagations     16
;  :conflicts               894
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3751
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1330
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366161)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1051
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      603
;  :arith-conflicts         390
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         413
;  :arith-pivots            1302
;  :binary-propagations     16
;  :conflicts               894
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3751
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1331
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366180)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1051
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      603
;  :arith-conflicts         390
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         413
;  :arith-pivots            1302
;  :binary-propagations     16
;  :conflicts               894
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3751
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1332
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366209)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1051
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      603
;  :arith-conflicts         390
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         413
;  :arith-pivots            1302
;  :binary-propagations     16
;  :conflicts               894
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3751
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1333
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366220)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1054
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      604
;  :arith-conflicts         391
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         414
;  :arith-pivots            1307
;  :binary-propagations     16
;  :conflicts               895
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3752
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1334
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366451)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1054
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      604
;  :arith-conflicts         391
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         414
;  :arith-pivots            1307
;  :binary-propagations     16
;  :conflicts               895
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3752
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1335
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366470)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1054
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      604
;  :arith-conflicts         391
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         414
;  :arith-pivots            1307
;  :binary-propagations     16
;  :conflicts               895
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3752
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1336
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366499)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1054
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      604
;  :arith-conflicts         391
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         414
;  :arith-pivots            1307
;  :binary-propagations     16
;  :conflicts               895
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3752
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1337
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366510)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1057
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      605
;  :arith-conflicts         392
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         415
;  :arith-pivots            1311
;  :binary-propagations     16
;  :conflicts               896
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3753
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1338
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366743)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1057
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      605
;  :arith-conflicts         392
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         415
;  :arith-pivots            1311
;  :binary-propagations     16
;  :conflicts               896
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3753
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1339
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366762)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1057
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      605
;  :arith-conflicts         392
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         415
;  :arith-pivots            1311
;  :binary-propagations     16
;  :conflicts               896
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3753
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1340
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366791)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1057
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      605
;  :arith-conflicts         392
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         415
;  :arith-pivots            1311
;  :binary-propagations     16
;  :conflicts               896
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3753
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1341
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            366802)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1061
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      606
;  :arith-conflicts         393
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         416
;  :arith-pivots            1314
;  :binary-propagations     16
;  :conflicts               897
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3754
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1342
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367041)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1061
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      606
;  :arith-conflicts         393
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         416
;  :arith-pivots            1314
;  :binary-propagations     16
;  :conflicts               897
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3754
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1343
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367060)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1061
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      606
;  :arith-conflicts         393
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         416
;  :arith-pivots            1314
;  :binary-propagations     16
;  :conflicts               897
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3754
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1344
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367089)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1061
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      606
;  :arith-conflicts         393
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         416
;  :arith-pivots            1314
;  :binary-propagations     16
;  :conflicts               897
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3754
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1345
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367100)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1063
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      607
;  :arith-conflicts         394
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         417
;  :arith-pivots            1316
;  :binary-propagations     16
;  :conflicts               898
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3755
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1346
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367306)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1063
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      607
;  :arith-conflicts         394
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         417
;  :arith-pivots            1316
;  :binary-propagations     16
;  :conflicts               898
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3755
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1347
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367325)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1063
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      607
;  :arith-conflicts         394
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         417
;  :arith-pivots            1316
;  :binary-propagations     16
;  :conflicts               898
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3755
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1348
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367354)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1063
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      607
;  :arith-conflicts         394
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         417
;  :arith-pivots            1316
;  :binary-propagations     16
;  :conflicts               898
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3755
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1349
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367365)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1066
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      608
;  :arith-conflicts         395
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         418
;  :arith-pivots            1321
;  :binary-propagations     16
;  :conflicts               899
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3756
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1350
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367596)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1066
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      608
;  :arith-conflicts         395
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         418
;  :arith-pivots            1321
;  :binary-propagations     16
;  :conflicts               899
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3756
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1351
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367615)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1066
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      608
;  :arith-conflicts         395
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         418
;  :arith-pivots            1321
;  :binary-propagations     16
;  :conflicts               899
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3756
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1352
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367644)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1066
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      608
;  :arith-conflicts         395
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         418
;  :arith-pivots            1321
;  :binary-propagations     16
;  :conflicts               899
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3756
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1353
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367655)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1069
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      609
;  :arith-conflicts         396
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         419
;  :arith-pivots            1325
;  :binary-propagations     16
;  :conflicts               900
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3757
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1354
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367888)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1069
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      609
;  :arith-conflicts         396
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         419
;  :arith-pivots            1325
;  :binary-propagations     16
;  :conflicts               900
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3757
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1355
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367907)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1069
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      609
;  :arith-conflicts         396
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         419
;  :arith-pivots            1325
;  :binary-propagations     16
;  :conflicts               900
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3757
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1356
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367936)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1069
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      609
;  :arith-conflicts         396
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         419
;  :arith-pivots            1325
;  :binary-propagations     16
;  :conflicts               900
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3757
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1357
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            367947)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1073
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      610
;  :arith-conflicts         397
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         420
;  :arith-pivots            1328
;  :binary-propagations     16
;  :conflicts               901
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3758
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1358
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368186)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1073
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      610
;  :arith-conflicts         397
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         420
;  :arith-pivots            1328
;  :binary-propagations     16
;  :conflicts               901
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3758
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1359
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368205)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1073
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      610
;  :arith-conflicts         397
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         420
;  :arith-pivots            1328
;  :binary-propagations     16
;  :conflicts               901
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3758
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1360
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368234)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1073
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      610
;  :arith-conflicts         397
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         420
;  :arith-pivots            1328
;  :binary-propagations     16
;  :conflicts               901
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3758
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1361
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368245)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1075
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      611
;  :arith-conflicts         398
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         421
;  :arith-pivots            1330
;  :binary-propagations     16
;  :conflicts               902
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3759
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1362
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368451)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1075
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      611
;  :arith-conflicts         398
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         421
;  :arith-pivots            1330
;  :binary-propagations     16
;  :conflicts               902
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3759
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1363
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368470)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1075
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      611
;  :arith-conflicts         398
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         421
;  :arith-pivots            1330
;  :binary-propagations     16
;  :conflicts               902
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3759
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1364
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368499)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1075
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      611
;  :arith-conflicts         398
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         421
;  :arith-pivots            1330
;  :binary-propagations     16
;  :conflicts               902
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3759
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1365
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368510)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1078
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      612
;  :arith-conflicts         399
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         422
;  :arith-pivots            1335
;  :binary-propagations     16
;  :conflicts               903
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3760
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1366
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368741)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1078
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      612
;  :arith-conflicts         399
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         422
;  :arith-pivots            1335
;  :binary-propagations     16
;  :conflicts               903
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3760
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1367
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368760)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1078
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      612
;  :arith-conflicts         399
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         422
;  :arith-pivots            1335
;  :binary-propagations     16
;  :conflicts               903
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3760
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1368
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368789
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1078
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      612
;  :arith-conflicts         399
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         422
;  :arith-pivots            1335
;  :binary-propagations     16
;  :conflicts               903
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3760
;  :mk-clause               455
;  :num-allocs              5955579
;  :num-checks              1369
;  :propagations            297
;  :quant-instantiations    87
;  :rlimit-count            368800)
(declare-const $k@122@03 $Perm)
(assert ($Perm.isReadVar $k@122@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1081
;  :arith-assert-diseq      119
;  :arith-assert-lower      380
;  :arith-assert-upper      614
;  :arith-conflicts         400
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         423
;  :arith-pivots            1339
;  :binary-propagations     16
;  :conflicts               904
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3765
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1370
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            369182)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@122@03 $Perm.No) (< $Perm.No $k@122@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1081
;  :arith-assert-diseq      119
;  :arith-assert-lower      380
;  :arith-assert-upper      614
;  :arith-conflicts         400
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         423
;  :arith-pivots            1339
;  :binary-propagations     16
;  :conflicts               905
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3765
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1371
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            369232)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1081
;  :arith-assert-diseq      119
;  :arith-assert-lower      380
;  :arith-assert-upper      614
;  :arith-conflicts         400
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         423
;  :arith-pivots            1339
;  :binary-propagations     16
;  :conflicts               905
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3765
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1372
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            369251)
(push) ; 8
(assert (not (not (= (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1081
;  :arith-assert-diseq      119
;  :arith-assert-lower      380
;  :arith-assert-upper      614
;  :arith-conflicts         400
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         423
;  :arith-pivots            1339
;  :binary-propagations     16
;  :conflicts               906
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3766
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1373
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            369343)
(assert (< $k@122@03 (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03)))
(assert (<= $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@122@03)))
(assert (<= (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@122@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03) $k@122@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1086
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      616
;  :arith-conflicts         401
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         424
;  :arith-pivots            1342
;  :binary-propagations     16
;  :conflicts               907
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3770
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1374
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            369787)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1086
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      616
;  :arith-conflicts         401
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         424
;  :arith-pivots            1342
;  :binary-propagations     16
;  :conflicts               907
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3770
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1375
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            369806)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1086
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      616
;  :arith-conflicts         401
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         424
;  :arith-pivots            1342
;  :binary-propagations     16
;  :conflicts               907
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3770
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1376
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            369835)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1088
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      617
;  :arith-conflicts         402
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         425
;  :arith-pivots            1344
;  :binary-propagations     16
;  :conflicts               908
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3771
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1377
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            370041)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1088
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      617
;  :arith-conflicts         402
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         425
;  :arith-pivots            1344
;  :binary-propagations     16
;  :conflicts               908
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3771
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1378
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            370060)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1088
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      617
;  :arith-conflicts         402
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         425
;  :arith-pivots            1344
;  :binary-propagations     16
;  :conflicts               908
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3771
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1379
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            370089)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1088
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      617
;  :arith-conflicts         402
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         425
;  :arith-pivots            1344
;  :binary-propagations     16
;  :conflicts               909
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3772
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1380
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            370399)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1091
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      618
;  :arith-conflicts         403
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         426
;  :arith-pivots            1349
;  :binary-propagations     16
;  :conflicts               910
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3773
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1381
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            370630)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1091
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      618
;  :arith-conflicts         403
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         426
;  :arith-pivots            1349
;  :binary-propagations     16
;  :conflicts               910
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3773
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1382
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            370649)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1091
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      618
;  :arith-conflicts         403
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         426
;  :arith-pivots            1349
;  :binary-propagations     16
;  :conflicts               910
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3773
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1383
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            370678)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1091
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      618
;  :arith-conflicts         403
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         426
;  :arith-pivots            1349
;  :binary-propagations     16
;  :conflicts               911
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3774
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1384
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            370988)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1094
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      619
;  :arith-conflicts         404
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         427
;  :arith-pivots            1353
;  :binary-propagations     16
;  :conflicts               912
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3775
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1385
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            371221)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1094
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      619
;  :arith-conflicts         404
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         427
;  :arith-pivots            1353
;  :binary-propagations     16
;  :conflicts               912
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3775
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1386
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            371240)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1094
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      619
;  :arith-conflicts         404
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         427
;  :arith-pivots            1353
;  :binary-propagations     16
;  :conflicts               912
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3775
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1387
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            371269)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1094
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      619
;  :arith-conflicts         404
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         427
;  :arith-pivots            1353
;  :binary-propagations     16
;  :conflicts               913
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3776
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1388
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            371579)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1098
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      620
;  :arith-conflicts         405
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         428
;  :arith-pivots            1356
;  :binary-propagations     16
;  :conflicts               914
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3777
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1389
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            371818)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1098
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      620
;  :arith-conflicts         405
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         428
;  :arith-pivots            1356
;  :binary-propagations     16
;  :conflicts               914
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3777
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1390
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            371837)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@16@03 $k@33@03) $k@43@03) $k@61@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1098
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      620
;  :arith-conflicts         405
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         428
;  :arith-pivots            1356
;  :binary-propagations     16
;  :conflicts               914
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3777
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1391
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            371866)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))))))
  $t@44@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1098
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      620
;  :arith-conflicts         405
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         428
;  :arith-pivots            1356
;  :binary-propagations     16
;  :conflicts               915
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3778
;  :mk-clause               457
;  :num-allocs              5955579
;  :num-checks              1392
;  :propagations            298
;  :quant-instantiations    87
;  :rlimit-count            372176)
(declare-const $k@123@03 $Perm)
(assert ($Perm.isReadVar $k@123@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1100
;  :arith-assert-diseq      120
;  :arith-assert-lower      384
;  :arith-assert-upper      622
;  :arith-conflicts         406
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         429
;  :arith-pivots            1358
;  :binary-propagations     16
;  :conflicts               916
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3783
;  :mk-clause               459
;  :num-allocs              5955579
;  :num-checks              1393
;  :propagations            299
;  :quant-instantiations    87
;  :rlimit-count            372530)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@123@03 $Perm.No) (< $Perm.No $k@123@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1100
;  :arith-assert-diseq      120
;  :arith-assert-lower      384
;  :arith-assert-upper      622
;  :arith-conflicts         406
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         429
;  :arith-pivots            1358
;  :binary-propagations     16
;  :conflicts               917
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3783
;  :mk-clause               459
;  :num-allocs              5955579
;  :num-checks              1394
;  :propagations            299
;  :quant-instantiations    87
;  :rlimit-count            372580)
(set-option :timeout 10)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1100
;  :arith-assert-diseq      120
;  :arith-assert-lower      384
;  :arith-assert-upper      622
;  :arith-conflicts         406
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         429
;  :arith-pivots            1358
;  :binary-propagations     16
;  :conflicts               917
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3783
;  :mk-clause               459
;  :num-allocs              5955579
;  :num-checks              1395
;  :propagations            299
;  :quant-instantiations    87
;  :rlimit-count            372599)
(push) ; 8
(assert (not (not (= (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1100
;  :arith-assert-diseq      120
;  :arith-assert-lower      384
;  :arith-assert-upper      622
;  :arith-conflicts         406
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         429
;  :arith-pivots            1358
;  :binary-propagations     16
;  :conflicts               918
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3784
;  :mk-clause               459
;  :num-allocs              5955579
;  :num-checks              1396
;  :propagations            299
;  :quant-instantiations    87
;  :rlimit-count            372691)
(assert (< $k@123@03 (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03)))
(assert (<= $Perm.No (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@123@03)))
(assert (<= (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@123@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03) $k@123@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1105
;  :arith-assert-diseq      120
;  :arith-assert-lower      386
;  :arith-assert-upper      624
;  :arith-conflicts         407
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         430
;  :arith-pivots            1364
;  :binary-propagations     16
;  :conflicts               919
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3788
;  :mk-clause               459
;  :num-allocs              5955579
;  :num-checks              1397
;  :propagations            299
;  :quant-instantiations    87
;  :rlimit-count            373135)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1105
;  :arith-assert-diseq      120
;  :arith-assert-lower      386
;  :arith-assert-upper      624
;  :arith-conflicts         407
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         430
;  :arith-pivots            1364
;  :binary-propagations     16
;  :conflicts               919
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3788
;  :mk-clause               459
;  :num-allocs              5955579
;  :num-checks              1398
;  :propagations            299
;  :quant-instantiations    87
;  :rlimit-count            373154)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@17@03 $k@34@03) $k@45@03) $k@62@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1105
;  :arith-assert-diseq      120
;  :arith-assert-lower      386
;  :arith-assert-upper      624
;  :arith-conflicts         407
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         430
;  :arith-pivots            1364
;  :binary-propagations     16
;  :conflicts               919
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3788
;  :mk-clause               459
;  :num-allocs              5955579
;  :num-checks              1399
;  :propagations            299
;  :quant-instantiations    87
;  :rlimit-count            373183)
(declare-const $k@124@03 $Perm)
(assert ($Perm.isReadVar $k@124@03 $Perm.Write))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1108
;  :arith-assert-diseq      121
;  :arith-assert-lower      388
;  :arith-assert-upper      626
;  :arith-conflicts         408
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         431
;  :arith-pivots            1368
;  :binary-propagations     16
;  :conflicts               920
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3793
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1400
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            373564)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1108
;  :arith-assert-diseq      121
;  :arith-assert-lower      388
;  :arith-assert-upper      626
;  :arith-conflicts         408
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         431
;  :arith-pivots            1368
;  :binary-propagations     16
;  :conflicts               920
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3793
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1401
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            373583)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1108
;  :arith-assert-diseq      121
;  :arith-assert-lower      388
;  :arith-assert-upper      626
;  :arith-conflicts         408
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         431
;  :arith-pivots            1368
;  :binary-propagations     16
;  :conflicts               920
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3793
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1402
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            373612)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@124@03 $Perm.No) (< $Perm.No $k@124@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1108
;  :arith-assert-diseq      121
;  :arith-assert-lower      388
;  :arith-assert-upper      626
;  :arith-conflicts         408
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         431
;  :arith-pivots            1368
;  :binary-propagations     16
;  :conflicts               921
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3793
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1403
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            373662)
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
  $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1108
;  :arith-assert-diseq      121
;  :arith-assert-lower      388
;  :arith-assert-upper      626
;  :arith-conflicts         408
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         431
;  :arith-pivots            1368
;  :binary-propagations     16
;  :conflicts               921
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3793
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1404
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            373673)
(push) ; 8
(assert (not (not (= $k@57@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1108
;  :arith-assert-diseq      121
;  :arith-assert-lower      388
;  :arith-assert-upper      626
;  :arith-conflicts         408
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         431
;  :arith-pivots            1368
;  :binary-propagations     16
;  :conflicts               921
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3793
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1405
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            373684)
(assert (< $k@124@03 $k@57@03))
(assert (<= $Perm.No (- $k@57@03 $k@124@03)))
(assert (<= (- $k@57@03 $k@124@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@57@03 $k@124@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1113
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      628
;  :arith-conflicts         409
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         432
;  :arith-pivots            1372
;  :binary-propagations     16
;  :conflicts               922
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3797
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1406
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374112)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1113
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      628
;  :arith-conflicts         409
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         432
;  :arith-pivots            1372
;  :binary-propagations     16
;  :conflicts               922
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3797
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1407
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374131)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1113
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      628
;  :arith-conflicts         409
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         432
;  :arith-pivots            1372
;  :binary-propagations     16
;  :conflicts               922
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3797
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1408
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374160)
(push) ; 8
(assert (not (= diz@6@03 $t@42@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1113
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      628
;  :arith-conflicts         409
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         432
;  :arith-pivots            1372
;  :binary-propagations     16
;  :conflicts               922
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3797
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1409
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374171)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1115
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      629
;  :arith-conflicts         410
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         433
;  :arith-pivots            1374
;  :binary-propagations     16
;  :conflicts               923
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3798
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1410
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374373)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1118
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      630
;  :arith-conflicts         411
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         434
;  :arith-pivots            1379
;  :binary-propagations     16
;  :conflicts               924
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3799
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1411
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374603)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+ $k@52@03 (- (- $k@18@03 $k@35@03) $k@63@03))
    (- (+ (+ (- $k@13@03 $k@30@03) $k@38@03) $k@47@03) $k@58@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1121
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      631
;  :arith-conflicts         412
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         435
;  :arith-pivots            1383
;  :binary-propagations     16
;  :conflicts               925
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3800
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1412
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374835)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@03))) $t@74@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1121
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      631
;  :arith-conflicts         412
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         435
;  :arith-pivots            1383
;  :binary-propagations     16
;  :conflicts               925
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3800
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1413
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374854)
(push) ; 8
(assert (not (< $Perm.No (- (+ (- $k@15@03 $k@32@03) $k@41@03) $k@60@03))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9025
;  :arith-add-rows          1121
;  :arith-assert-diseq      121
;  :arith-assert-lower      390
;  :arith-assert-upper      631
;  :arith-conflicts         412
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         435
;  :arith-pivots            1383
;  :binary-propagations     16
;  :conflicts               925
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 2587
;  :datatype-occurs-check   232
;  :datatype-splits         1775
;  :decisions               2493
;  :del-clause              432
;  :final-checks            100
;  :max-generation          1
;  :max-memory              4.78
;  :memory                  4.68
;  :mk-bool-var             3800
;  :mk-clause               461
;  :num-allocs              5955579
;  :num-checks              1414
;  :propagations            300
;  :quant-instantiations    87
;  :rlimit-count            374883)
; [exec]
; inhale false
(pop) ; 7
(push) ; 7
; [else-branch: 49 | bit@10@03 == 1]
(assert (= bit@10@03 1))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03))))))))))))))))))))))) == bit@10@03]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))))))))))))))))))
  bit@10@03))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 29 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@51@03)))))))))))))))))))) < pos@9@03]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))))))))))))))
  pos@9@03))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
