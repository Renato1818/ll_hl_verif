(get-info :version)
; (:version "4.8.6")
; Started: 2024-05-28 15:42:49
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Int>)
(declare-sort Set<Bool>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_ALU<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Driver<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_Monitor<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [ALU_m: Ref]
(declare-fun $FVF.domain_ALU_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_ALU_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_ALU_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_ALU_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_ALU_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_ALU_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Driver_m: Ref]
(declare-fun $FVF.domain_Driver_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Driver_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Driver_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Driver_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Driver_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Driver_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Monitor_m: Ref]
(declare-fun $FVF.domain_Monitor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Monitor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Monitor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Monitor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Monitor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Monitor_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Driver_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Driver_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_ALU<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Driver<TYPE> class_Main<TYPE> class_Monitor<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_ALU<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Driver<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Monitor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [ALU_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_ALU_m vs) ($FVF.domain_ALU_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_ALU_m vs))
            (= ($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x)))
          :pattern (($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_ALU_m pm r))
    :pattern ($FVF.perm_ALU_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_ALU_m f r) true)
    :pattern ($FVF.loc_ALU_m f r))))
; /field_value_functions_axioms.smt2 [Driver_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Driver_m vs) ($FVF.domain_Driver_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Driver_m vs))
            (= ($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x)))
          :pattern (($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Driver_m pm r))
    :pattern ($FVF.perm_Driver_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Driver_m f r) true)
    :pattern ($FVF.loc_Driver_m f r))))
; /field_value_functions_axioms.smt2 [Monitor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Monitor_m vs) ($FVF.domain_Monitor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Monitor_m vs))
            (= ($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x)))
          :pattern (($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Monitor_m pm r))
    :pattern ($FVF.perm_Monitor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Monitor_m f r) true)
    :pattern ($FVF.loc_Monitor_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 2))
    (and
      (and
        (or
          (< (Seq_index vals@8@00 0) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 0)))
        (or
          (< (Seq_index vals@8@00 1) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 1))))
      (and
        (implies
          (and
            (< (Seq_index vals@8@00 0) (- 0 1))
            (< (Seq_index vals@8@00 1) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (<= (- 0 1) (Seq_index vals@8@00 0))
            (<= (- 0 1) (Seq_index vals@8@00 1)))
          (or
            (and
              (<= (- 0 1) (Seq_index vals@8@00 0))
              (= result@9@00 (Seq_index vals@8@00 0)))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 1))
              (= result@9@00 (Seq_index vals@8@00 1)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- ALU_get_bit_EncodedGlobalVariables_Integer_Integer ----------
(declare-const diz@0@05 $Ref)
(declare-const globals@1@05 $Ref)
(declare-const value@2@05 Int)
(declare-const pos@3@05 Int)
(declare-const sys__result@4@05 Int)
(declare-const diz@5@05 $Ref)
(declare-const globals@6@05 $Ref)
(declare-const value@7@05 Int)
(declare-const pos@8@05 Int)
(declare-const sys__result@9@05 Int)
(push) ; 1
(declare-const $t@10@05 $Snap)
(assert (= $t@10@05 ($Snap.combine ($Snap.first $t@10@05) ($Snap.second $t@10@05))))
(assert (= ($Snap.first $t@10@05) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@5@05 $Ref.null)))
(assert (=
  ($Snap.second $t@10@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@10@05))
    ($Snap.second ($Snap.second $t@10@05)))))
(declare-const $k@11@05 $Perm)
(assert ($Perm.isReadVar $k@11@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@11@05 $Perm.No) (< $Perm.No $k@11@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            17
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   2
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            1
;  :datatype-accessor-ax 3
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          264
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           1
;  :propagations         17
;  :quant-instantiations 1
;  :rlimit-count         111756)
(assert (<= $Perm.No $k@11@05))
(assert (<= $k@11@05 $Perm.Write))
(assert (implies (< $Perm.No $k@11@05) (not (= diz@5@05 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@10@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@10@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@10@05))) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            23
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            2
;  :datatype-accessor-ax 4
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          267
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           2
;  :propagations         17
;  :quant-instantiations 1
;  :rlimit-count         112009
;  :time                 0.00)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@10@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@10@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            29
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            3
;  :datatype-accessor-ax 5
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          270
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           3
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112293)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            34
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            4
;  :datatype-accessor-ax 6
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          271
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           4
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112480
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            40
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  16
;  :conflicts            5
;  :datatype-accessor-ax 7
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          273
;  :mk-clause            3
;  :num-allocs           3554378
;  :num-checks           5
;  :propagations         17
;  :quant-instantiations 2
;  :rlimit-count         112709)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            47
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  16
;  :conflicts            6
;  :datatype-accessor-ax 8
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          282
;  :mk-clause            6
;  :num-allocs           3554378
;  :num-checks           6
;  :propagations         18
;  :quant-instantiations 5
;  :rlimit-count         113070)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            53
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  16
;  :conflicts            7
;  :datatype-accessor-ax 9
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          284
;  :mk-clause            6
;  :num-allocs           3554378
;  :num-checks           7
;  :propagations         18
;  :quant-instantiations 5
;  :rlimit-count         113319)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@12@05 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | 0 <= i@12@05 | live]
; [else-branch: 0 | !(0 <= i@12@05) | live]
(push) ; 4
; [then-branch: 0 | 0 <= i@12@05]
(assert (<= 0 i@12@05))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            61
;  :arith-assert-diseq   3
;  :arith-assert-lower   10
;  :arith-assert-upper   5
;  :arith-eq-adapter     6
;  :binary-propagations  16
;  :conflicts            8
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          295
;  :mk-clause            9
;  :num-allocs           3554378
;  :num-checks           8
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113791)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(0 <= i@12@05)]
(assert (not (<= 0 i@12@05)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 1 | i@12@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i@12@05 | live]
; [else-branch: 1 | !(i@12@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i@12@05) | live]
(push) ; 4
; [then-branch: 1 | i@12@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i@12@05]
(assert (and
  (<
    i@12@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
  (<= 0 i@12@05)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 5
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          297
;  :mk-clause            9
;  :num-allocs           3554378
;  :num-checks           9
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113952
;  :time                 0.00)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@12@05 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          297
;  :mk-clause            9
;  :num-allocs           3554378
;  :num-checks           10
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         113961)
; [eval] -1
(push) ; 5
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] != -1 | live]
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i@12@05)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
      i@12@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          298
;  :mk-clause            9
;  :num-allocs           3554378
;  :num-checks           11
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114187)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@12@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.78
;  :mk-bool-var          298
;  :mk-clause            9
;  :num-allocs           3554378
;  :num-checks           12
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114196)
(push) ; 7
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05]) | live]
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i@12@05)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3673370
;  :num-checks           13
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114369)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@12@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3673370
;  :num-checks           14
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114378)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            12
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          301
;  :mk-clause            10
;  :num-allocs           3673370
;  :num-checks           15
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         114426)
(pop) ; 8
(push) ; 8
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i@12@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
      i@12@05))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(i@12@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i@12@05)]
(assert (not
  (and
    (<
      i@12@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
    (<= 0 i@12@05))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@12@05 Int)) (!
  (implies
    (and
      (<
        i@12@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
      (<= 0 i@12@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
          i@12@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i@12@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i@12@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i@12@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            13
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          303
;  :mk-clause            10
;  :num-allocs           3673370
;  :num-checks           16
;  :propagations         19
;  :quant-instantiations 8
;  :rlimit-count         115081)
(declare-const $k@13@05 $Perm)
(assert ($Perm.isReadVar $k@13@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@13@05 $Perm.No) (< $Perm.No $k@13@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   7
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            14
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          307
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           17
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115279)
(assert (<= $Perm.No $k@13@05))
(assert (<= $k@13@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@13@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            15
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          310
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           18
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115612)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            16
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          310
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           19
;  :propagations         20
;  :quant-instantiations 8
;  :rlimit-count         115660)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            17
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          313
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           20
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116026)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            18
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          313
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           21
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116074
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            19
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          314
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           22
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116341)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            20
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          314
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           23
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116389)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            21
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          315
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           24
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116666)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            22
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          315
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           25
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         116714)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            23
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          316
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           26
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117001)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            24
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          316
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           27
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117049)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            25
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           28
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117346)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            26
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           29
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117394)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            27
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          318
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           30
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117701)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            28
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          318
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           31
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         117749)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            109
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            29
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          319
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           32
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118066)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            109
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            30
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          319
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           33
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118114)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            114
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            31
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           34
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118441)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            114
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            32
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           35
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118489)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            119
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            33
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          321
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           36
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118826)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            119
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            34
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          321
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           37
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         118874)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            124
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            35
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          322
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           38
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         119221)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            124
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            36
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          322
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           39
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         119269)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            129
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            37
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          323
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           40
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         119626)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            129
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            38
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          323
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           41
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         119674
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            39
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           42
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120041)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            134
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            40
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           43
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120089)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            139
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            41
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          325
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           44
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120466)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            139
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            42
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          325
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           45
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120514)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            144
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            43
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          326
;  :mk-clause            12
;  :num-allocs           3673370
;  :num-checks           46
;  :propagations         20
;  :quant-instantiations 9
;  :rlimit-count         120901)
(declare-const $k@14@05 $Perm)
(assert ($Perm.isReadVar $k@14@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@14@05 $Perm.No) (< $Perm.No $k@14@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            144
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   9
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            44
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          330
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           47
;  :propagations         21
;  :quant-instantiations 9
;  :rlimit-count         121100)
(assert (<= $Perm.No $k@14@05))
(assert (<= $k@14@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@14@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            150
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            45
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          333
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           48
;  :propagations         21
;  :quant-instantiations 9
;  :rlimit-count         121583)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            150
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            46
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          333
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           49
;  :propagations         21
;  :quant-instantiations 9
;  :rlimit-count         121631)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            156
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            47
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           50
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         122171)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            156
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            48
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          336
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           51
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         122219)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            161
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            49
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           52
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         122636)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            161
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            50
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           53
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         122684)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            166
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            51
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          338
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           54
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         123111)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            166
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            52
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          338
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           55
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         123159)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            53
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          339
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           56
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         123596)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            54
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          339
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           57
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         123644
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            55
;  :datatype-accessor-ax 32
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3673370
;  :num-checks           58
;  :propagations         21
;  :quant-instantiations 10
;  :rlimit-count         124091)
(declare-const $k@15@05 $Perm)
(assert ($Perm.isReadVar $k@15@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@15@05 $Perm.No) (< $Perm.No $k@15@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   11
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            56
;  :datatype-accessor-ax 32
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          344
;  :mk-clause            16
;  :num-allocs           3673370
;  :num-checks           59
;  :propagations         22
;  :quant-instantiations 10
;  :rlimit-count         124290)
(assert (<= $Perm.No $k@15@05))
(assert (<= $k@15@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@15@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            182
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            57
;  :datatype-accessor-ax 33
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          347
;  :mk-clause            16
;  :num-allocs           3673370
;  :num-checks           60
;  :propagations         22
;  :quant-instantiations 10
;  :rlimit-count         124833)
(push) ; 2
(assert (not (< $Perm.No $k@15@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            182
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            58
;  :datatype-accessor-ax 33
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.87
;  :mk-bool-var          347
;  :mk-clause            16
;  :num-allocs           3673370
;  :num-checks           61
;  :propagations         22
;  :quant-instantiations 10
;  :rlimit-count         124881)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            59
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          350
;  :mk-clause            16
;  :num-allocs           3799613
;  :num-checks           62
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         125463)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            60
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          350
;  :mk-clause            16
;  :num-allocs           3799613
;  :num-checks           63
;  :propagations         22
;  :quant-instantiations 11
;  :rlimit-count         125511
;  :time                 0.00)
(declare-const $k@16@05 $Perm)
(assert ($Perm.isReadVar $k@16@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@16@05 $Perm.No) (< $Perm.No $k@16@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   13
;  :arith-eq-adapter     11
;  :arith-fixed-eqs      1
;  :binary-propagations  16
;  :conflicts            61
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.12
;  :memory               3.97
;  :mk-bool-var          354
;  :mk-clause            18
;  :num-allocs           3799613
;  :num-checks           64
;  :propagations         23
;  :quant-instantiations 11
;  :rlimit-count         125709)
(set-option :timeout 10)
(push) ; 2
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               258
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      13
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               62
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               19
;  :num-allocs              3799613
;  :num-checks              65
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            126592)
(assert (<= $Perm.No $k@16@05))
(assert (<= $k@16@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@16@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               63
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3799613
;  :num-checks              66
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            127155)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               64
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3799613
;  :num-checks              67
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            127203)
(push) ; 2
(assert (not (< $Perm.No $k@16@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               65
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3799613
;  :num-checks              68
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            127251)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               66
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             387
;  :mk-clause               19
;  :num-allocs              3799613
;  :num-checks              69
;  :propagations            23
;  :quant-instantiations    11
;  :rlimit-count            127299)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               268
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               67
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             390
;  :mk-clause               19
;  :num-allocs              3799613
;  :num-checks              70
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            127840
;  :time                    0.01)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               268
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               68
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 29
;  :datatype-occurs-check   3
;  :datatype-splits         28
;  :decisions               28
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             390
;  :mk-clause               19
;  :num-allocs              3799613
;  :num-checks              71
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            127888)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
  diz@5@05))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@17@05 $Snap)
(assert (= $t@17@05 ($Snap.combine ($Snap.first $t@17@05) ($Snap.second $t@17@05))))
(declare-const $k@18@05 $Perm)
(assert ($Perm.isReadVar $k@18@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@18@05 $Perm.No) (< $Perm.No $k@18@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               341
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               70
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             423
;  :mk-clause               22
;  :num-allocs              3799613
;  :num-checks              73
;  :propagations            24
;  :quant-instantiations    12
;  :rlimit-count            129018)
(assert (<= $Perm.No $k@18@05))
(assert (<= $k@18@05 $Perm.Write))
(assert (implies (< $Perm.No $k@18@05) (not (= diz@5@05 $Ref.null))))
(assert (=
  ($Snap.second $t@17@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@17@05))
    ($Snap.second ($Snap.second $t@17@05)))))
(assert (= ($Snap.first ($Snap.second $t@17@05)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               347
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               71
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             426
;  :mk-clause               22
;  :num-allocs              3799613
;  :num-checks              74
;  :propagations            24
;  :quant-instantiations    12
;  :rlimit-count            129261)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@17@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@17@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@17@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               353
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               72
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             429
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              75
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            129533)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@17@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               358
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               73
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             430
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              76
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            129710)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               364
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             432
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              77
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            129929)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               371
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             438
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              78
;  :propagations            24
;  :quant-instantiations    15
;  :rlimit-count            130259)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               377
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             440
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              79
;  :propagations            24
;  :quant-instantiations    15
;  :rlimit-count            130498)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.ALU_m.Main_process_state[i] } 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|)
(declare-const i@19@05 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i && i < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@19@05 | live]
; [else-branch: 4 | !(0 <= i@19@05) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@19@05]
(assert (<= 0 i@19@05))
; [eval] i < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               385
;  :arith-assert-diseq      9
;  :arith-assert-lower      29
;  :arith-assert-upper      18
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               77
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             448
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              80
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            130938)
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@19@05)]
(assert (not (<= 0 i@19@05)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@19@05 < |First:(Second:(Second:(Second:($t@17@05))))| && 0 <= i@19@05 | live]
; [else-branch: 5 | !(i@19@05 < |First:(Second:(Second:(Second:($t@17@05))))| && 0 <= i@19@05) | live]
(push) ; 5
; [then-branch: 5 | i@19@05 < |First:(Second:(Second:(Second:($t@17@05))))| && 0 <= i@19@05]
(assert (and
  (<
    i@19@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))
  (<= 0 i@19@05)))
; [eval] diz.ALU_m.Main_process_state[i] == -1 || 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i] == -1
; [eval] diz.ALU_m.Main_process_state[i]
(push) ; 6
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      9
;  :arith-assert-lower      30
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               78
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             450
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              81
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131099)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@19@05 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      9
;  :arith-assert-lower      30
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               78
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             450
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              82
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131108)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@17@05))))[i@19@05] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@17@05))))[i@19@05] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@17@05))))[i@19@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
    i@19@05)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@17@05))))[i@19@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
      i@19@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i] && diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i]
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      9
;  :arith-assert-lower      30
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               79
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             451
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              83
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131322)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@19@05 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      9
;  :arith-assert-lower      30
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               79
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             451
;  :mk-clause               22
;  :num-allocs              3929365
;  :num-checks              84
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131331)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@17@05))))[i@19@05] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@17@05))))[i@19@05]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@17@05))))[i@19@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
    i@19@05)))
; [eval] diz.ALU_m.Main_process_state[i] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      19
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               80
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               23
;  :num-allocs              3929365
;  :num-checks              85
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131493)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@19@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      19
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               80
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               23
;  :num-allocs              3929365
;  :num-checks              86
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131502)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      19
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               81
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              18
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               23
;  :num-allocs              3929365
;  :num-checks              87
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            131550)
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@17@05))))[i@19@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
      i@19@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@19@05 < |First:(Second:(Second:(Second:($t@17@05))))| && 0 <= i@19@05)]
(assert (not
  (and
    (<
      i@19@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))
    (<= 0 i@19@05))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@19@05 Int)) (!
  (implies
    (and
      (<
        i@19@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))
      (<= 0 i@19@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
          i@19@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
            i@19@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
            i@19@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))
    i@19@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               391
;  :arith-assert-diseq      10
;  :arith-assert-lower      33
;  :arith-assert-upper      19
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               82
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             456
;  :mk-clause               23
;  :num-allocs              3929365
;  :num-checks              88
;  :propagations            24
;  :quant-instantiations    17
;  :rlimit-count            132175)
(declare-const $k@20@05 $Perm)
(assert ($Perm.isReadVar $k@20@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@20@05 $Perm.No) (< $Perm.No $k@20@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               391
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      20
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               83
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             460
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              89
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            132373)
(assert (<= $Perm.No $k@20@05))
(assert (<= $k@20@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@20@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@17@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               397
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               84
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              90
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            132696)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               397
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               85
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              91
;  :propagations            25
;  :quant-instantiations    17
;  :rlimit-count            132744)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               403
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               86
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             466
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              92
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133100)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               403
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               87
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             466
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              93
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133148)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               408
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               88
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             467
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              94
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133405)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               408
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               89
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             467
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              95
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133453)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               413
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               90
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             468
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              96
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133720)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               413
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               91
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             468
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              97
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            133768)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               92
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             469
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              98
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134045)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               93
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             469
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              99
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134093)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               423
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             470
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              100
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134380)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               423
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               95
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             470
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              101
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134428)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               428
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               96
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             471
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              102
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134725)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               428
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               97
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             471
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              103
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            134773)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               433
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               98
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             472
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              104
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135080)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               433
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               99
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             472
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              105
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135128)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               438
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               100
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             473
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              106
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135445)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               438
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               101
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             473
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              107
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135493)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               443
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               102
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             474
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              108
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135820)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               443
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               103
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             474
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              109
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            135868)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               448
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               104
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             475
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              110
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            136205)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               448
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               105
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             475
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              111
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            136253)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               453
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               106
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             476
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              112
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            136600)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               453
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               107
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             476
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              113
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            136648)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               458
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               108
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             477
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              114
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137005)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               458
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               109
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             477
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              115
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137053)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               463
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               110
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             478
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              116
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137420)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               463
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               111
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             478
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              117
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137468)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               468
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               112
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             479
;  :mk-clause               25
;  :num-allocs              3929365
;  :num-checks              118
;  :propagations            25
;  :quant-instantiations    18
;  :rlimit-count            137845)
(declare-const $k@21@05 $Perm)
(assert ($Perm.isReadVar $k@21@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@21@05 $Perm.No) (< $Perm.No $k@21@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               468
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      22
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               113
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             483
;  :mk-clause               27
;  :num-allocs              3929365
;  :num-checks              119
;  :propagations            26
;  :quant-instantiations    18
;  :rlimit-count            138044)
(assert (<= $Perm.No $k@21@05))
(assert (<= $k@21@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@21@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@17@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               114
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             486
;  :mk-clause               27
;  :num-allocs              3929365
;  :num-checks              120
;  :propagations            26
;  :quant-instantiations    18
;  :rlimit-count            138517)
(push) ; 3
(assert (not (< $Perm.No $k@21@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               115
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             486
;  :mk-clause               27
;  :num-allocs              3929365
;  :num-checks              121
;  :propagations            26
;  :quant-instantiations    18
;  :rlimit-count            138565)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               480
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               116
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             489
;  :mk-clause               27
;  :num-allocs              3929365
;  :num-checks              122
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            139095)
(push) ; 3
(assert (not (< $Perm.No $k@21@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               480
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               117
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             489
;  :mk-clause               27
;  :num-allocs              3929365
;  :num-checks              123
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            139143)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               485
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               118
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             490
;  :mk-clause               27
;  :num-allocs              3929365
;  :num-checks              124
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            139550)
(push) ; 3
(assert (not (< $Perm.No $k@21@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               485
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.07
;  :mk-bool-var             490
;  :mk-clause               27
;  :num-allocs              3929365
;  :num-checks              125
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            139598)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               120
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             491
;  :mk-clause               27
;  :num-allocs              4066749
;  :num-checks              126
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140015)
(push) ; 3
(assert (not (< $Perm.No $k@21@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               121
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             491
;  :mk-clause               27
;  :num-allocs              4066749
;  :num-checks              127
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140063)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               495
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               122
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             492
;  :mk-clause               27
;  :num-allocs              4066749
;  :num-checks              128
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140490)
(push) ; 3
(assert (not (< $Perm.No $k@21@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               495
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               123
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             492
;  :mk-clause               27
;  :num-allocs              4066749
;  :num-checks              129
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140538)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               500
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               124
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             493
;  :mk-clause               27
;  :num-allocs              4066749
;  :num-checks              130
;  :propagations            26
;  :quant-instantiations    19
;  :rlimit-count            140975)
(declare-const $k@22@05 $Perm)
(assert ($Perm.isReadVar $k@22@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@22@05 $Perm.No) (< $Perm.No $k@22@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               500
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      24
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               125
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             497
;  :mk-clause               29
;  :num-allocs              4066749
;  :num-checks              131
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            141173)
(assert (<= $Perm.No $k@22@05))
(assert (<= $k@22@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@22@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@17@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               506
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               126
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             500
;  :mk-clause               29
;  :num-allocs              4066749
;  :num-checks              132
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            141706)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               506
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               127
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             500
;  :mk-clause               29
;  :num-allocs              4066749
;  :num-checks              133
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            141754)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               128
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             503
;  :mk-clause               29
;  :num-allocs              4066749
;  :num-checks              134
;  :propagations            27
;  :quant-instantiations    20
;  :rlimit-count            142326)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               129
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             503
;  :mk-clause               29
;  :num-allocs              4066749
;  :num-checks              135
;  :propagations            27
;  :quant-instantiations    20
;  :rlimit-count            142374)
(declare-const $k@23@05 $Perm)
(assert ($Perm.isReadVar $k@23@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@23@05 $Perm.No) (< $Perm.No $k@23@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      26
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               130
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 56
;  :datatype-occurs-check   6
;  :datatype-splits         54
;  :decisions               54
;  :del-clause              19
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             507
;  :mk-clause               31
;  :num-allocs              4066749
;  :num-checks              136
;  :propagations            28
;  :quant-instantiations    20
;  :rlimit-count            142573)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      26
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               132
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             602
;  :mk-clause               33
;  :num-allocs              4206723
;  :num-checks              137
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            144505
;  :time                    0.00)
(assert (<= $Perm.No $k@23@05))
(assert (<= $k@23@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@23@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             605
;  :mk-clause               33
;  :num-allocs              4206723
;  :num-checks              138
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            145058)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               134
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             605
;  :mk-clause               33
;  :num-allocs              4206723
;  :num-checks              139
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            145106)
(push) ; 3
(assert (not (< $Perm.No $k@23@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               135
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             605
;  :mk-clause               33
;  :num-allocs              4206723
;  :num-checks              140
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            145154)
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               136
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             605
;  :mk-clause               33
;  :num-allocs              4206723
;  :num-checks              141
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            145202)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@17@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 3
(assert (not (< $Perm.No $k@18@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             608
;  :mk-clause               33
;  :num-allocs              4206723
;  :num-checks              142
;  :propagations            29
;  :quant-instantiations    21
;  :rlimit-count            145734)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               803
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               138
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              21
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             608
;  :mk-clause               33
;  :num-allocs              4206723
;  :num-checks              143
;  :propagations            29
;  :quant-instantiations    21
;  :rlimit-count            145782)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@05))))))))))
  diz@5@05))
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__3: Int
(declare-const sys__local__result__3@24@05 Int)
; [exec]
; var __flatten_1__4: Int
(declare-const __flatten_1__4@25@05 Int)
; [exec]
; var __flatten_2__5: Int
(declare-const __flatten_2__5@26@05 Int)
; [exec]
; diz.ALU_divisor := 1
; [exec]
; diz.ALU_i := 0
(declare-const __flatten_1__4@27@05 Int)
(declare-const __flatten_2__5@28@05 Int)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@29@05 $Snap)
(assert (= $t@29@05 ($Snap.combine ($Snap.first $t@29@05) ($Snap.second $t@29@05))))
(declare-const $k@30@05 $Perm)
(assert ($Perm.isReadVar $k@30@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@30@05 $Perm.No) (< $Perm.No $k@30@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               808
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      28
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             613
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              144
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146102)
(assert (<= $Perm.No $k@30@05))
(assert (<= $k@30@05 $Perm.Write))
(assert (implies (< $Perm.No $k@30@05) (not (= diz@5@05 $Ref.null))))
(assert (=
  ($Snap.second $t@29@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@29@05))
    ($Snap.second ($Snap.second $t@29@05)))))
(assert (= ($Snap.first ($Snap.second $t@29@05)) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               814
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             616
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              145
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            146345)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@29@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@29@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               820
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             619
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              146
;  :propagations            30
;  :quant-instantiations    22
;  :rlimit-count            146617)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@29@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               825
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             620
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              147
;  :propagations            30
;  :quant-instantiations    22
;  :rlimit-count            146794)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               831
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             622
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              148
;  :propagations            30
;  :quant-instantiations    22
;  :rlimit-count            147013)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               838
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      30
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               144
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             628
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              149
;  :propagations            30
;  :quant-instantiations    24
;  :rlimit-count            147342)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               844
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      30
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             630
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              150
;  :propagations            30
;  :quant-instantiations    24
;  :rlimit-count            147581)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
  $Snap.unit))
; [eval] (forall i__6: Int :: { diz.ALU_m.Main_process_state[i__6] } 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|)
(declare-const i__6@31@05 Int)
(push) ; 4
; [eval] 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__6
(push) ; 5
; [then-branch: 8 | 0 <= i__6@31@05 | live]
; [else-branch: 8 | !(0 <= i__6@31@05) | live]
(push) ; 6
; [then-branch: 8 | 0 <= i__6@31@05]
(assert (<= 0 i__6@31@05))
; [eval] i__6 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               852
;  :arith-assert-diseq      15
;  :arith-assert-lower      48
;  :arith-assert-upper      31
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               146
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             638
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              151
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            148021)
(pop) ; 6
(push) ; 6
; [else-branch: 8 | !(0 <= i__6@31@05)]
(assert (not (<= 0 i__6@31@05)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 9 | i__6@31@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__6@31@05 | live]
; [else-branch: 9 | !(i__6@31@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__6@31@05) | live]
(push) ; 6
; [then-branch: 9 | i__6@31@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__6@31@05]
(assert (and
  (<
    i__6@31@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  (<= 0 i__6@31@05)))
; [eval] diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__6] == -1
; [eval] diz.ALU_m.Main_process_state[i__6]
(push) ; 7
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               853
;  :arith-assert-diseq      15
;  :arith-assert-lower      49
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              152
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            148182)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__6@31@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               853
;  :arith-assert-diseq      15
;  :arith-assert-lower      49
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              153
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            148191)
; [eval] -1
(push) ; 7
; [then-branch: 10 | First:(Second:(Second:(Second:($t@29@05))))[i__6@31@05] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:(Second:($t@29@05))))[i__6@31@05] != -1 | live]
(push) ; 8
; [then-branch: 10 | First:(Second:(Second:(Second:($t@29@05))))[i__6@31@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__6@31@05)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 10 | First:(Second:(Second:(Second:($t@29@05))))[i__6@31@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__6@31@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__6]
; [eval] diz.ALU_m.Main_process_state[i__6]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               853
;  :arith-assert-diseq      15
;  :arith-assert-lower      49
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             641
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              154
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            148405)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__6@31@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               853
;  :arith-assert-diseq      15
;  :arith-assert-lower      49
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             641
;  :mk-clause               35
;  :num-allocs              4206723
;  :num-checks              155
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            148414)
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__6@31@05] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__6@31@05]) | live]
(push) ; 10
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__6@31@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__6@31@05)))
; [eval] diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__6]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               853
;  :arith-assert-diseq      16
;  :arith-assert-lower      52
;  :arith-assert-upper      32
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               36
;  :num-allocs              4206723
;  :num-checks              156
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            148577)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__6@31@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               853
;  :arith-assert-diseq      16
;  :arith-assert-lower      52
;  :arith-assert-upper      32
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               36
;  :num-allocs              4206723
;  :num-checks              157
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            148586)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               853
;  :arith-assert-diseq      16
;  :arith-assert-lower      52
;  :arith-assert-upper      32
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               150
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              31
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               36
;  :num-allocs              4206723
;  :num-checks              158
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            148634)
(pop) ; 10
(push) ; 10
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__6@31@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__6@31@05))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 9 | !(i__6@31@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__6@31@05)]
(assert (not
  (and
    (<
      i__6@31@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
    (<= 0 i__6@31@05))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__6@31@05 Int)) (!
  (implies
    (and
      (<
        i__6@31@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__6@31@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__6@31@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__6@31@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__6@31@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__6@31@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               858
;  :arith-assert-diseq      16
;  :arith-assert-lower      52
;  :arith-assert-upper      32
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               151
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             646
;  :mk-clause               36
;  :num-allocs              4206723
;  :num-checks              159
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            149259)
(declare-const $k@32@05 $Perm)
(assert ($Perm.isReadVar $k@32@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@32@05 $Perm.No) (< $Perm.No $k@32@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               858
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      33
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               152
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              160
;  :propagations            31
;  :quant-instantiations    26
;  :rlimit-count            149458)
(assert (<= $Perm.No $k@32@05))
(assert (<= $k@32@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@32@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               864
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               153
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              161
;  :propagations            31
;  :quant-instantiations    26
;  :rlimit-count            149781)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               864
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               154
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              162
;  :propagations            31
;  :quant-instantiations    26
;  :rlimit-count            149829)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               870
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               155
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             656
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              163
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            150185)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               870
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             656
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              164
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            150233)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              165
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            150490)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               158
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              166
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            150538)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               880
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             658
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              167
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            150805)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               880
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               160
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             658
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              168
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            150853)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               885
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               161
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             659
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              169
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            151130)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               885
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             659
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              170
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            151178)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               890
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               163
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              171
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            151465)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               890
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             660
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              172
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            151513)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               895
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               165
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             661
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              173
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            151810)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               895
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               166
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             661
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              174
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            151858)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               900
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               167
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             662
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              175
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            152165)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               900
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               168
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             662
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              176
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            152213)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               905
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               169
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             663
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              177
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            152530)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               905
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               170
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             663
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              178
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            152578)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               910
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               171
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             664
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              179
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            152905)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               910
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               172
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             664
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              180
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            152953)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               915
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               173
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             665
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              181
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            153290)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               915
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             665
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              182
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            153338)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               920
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               175
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             666
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              183
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            153685)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               920
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             666
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              184
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            153733)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               925
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               177
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             667
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              185
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            154090)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               925
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             667
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              186
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            154138)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               930
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               179
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             668
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              187
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            154505)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               930
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               180
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             668
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              188
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            154553)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               935
;  :arith-assert-diseq      17
;  :arith-assert-lower      54
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               181
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             669
;  :mk-clause               38
;  :num-allocs              4206723
;  :num-checks              189
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            154930)
(declare-const $k@33@05 $Perm)
(assert ($Perm.isReadVar $k@33@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@33@05 $Perm.No) (< $Perm.No $k@33@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               935
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      35
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               182
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             673
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              190
;  :propagations            32
;  :quant-instantiations    27
;  :rlimit-count            155128)
(assert (<= $Perm.No $k@33@05))
(assert (<= $k@33@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@33@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               941
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               183
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             676
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              191
;  :propagations            32
;  :quant-instantiations    27
;  :rlimit-count            155601)
(push) ; 4
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               941
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               184
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             676
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              192
;  :propagations            32
;  :quant-instantiations    27
;  :rlimit-count            155649)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               947
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               185
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             679
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              193
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            156179)
(push) ; 4
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               947
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               186
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             679
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              194
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            156227)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               187
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             680
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              195
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            156634)
(push) ; 4
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               188
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             680
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              196
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            156682)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               957
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             681
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              197
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            157099)
(push) ; 4
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               957
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             681
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              198
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            157147)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               962
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             682
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              199
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            157574)
(push) ; 4
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               962
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             682
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              200
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            157622)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               967
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               193
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             683
;  :mk-clause               40
;  :num-allocs              4206723
;  :num-checks              201
;  :propagations            32
;  :quant-instantiations    28
;  :rlimit-count            158059)
(declare-const $k@34@05 $Perm)
(assert ($Perm.isReadVar $k@34@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@34@05 $Perm.No) (< $Perm.No $k@34@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               967
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      37
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             687
;  :mk-clause               42
;  :num-allocs              4206723
;  :num-checks              202
;  :propagations            33
;  :quant-instantiations    28
;  :rlimit-count            158257)
(assert (<= $Perm.No $k@34@05))
(assert (<= $k@34@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@34@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               973
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             690
;  :mk-clause               42
;  :num-allocs              4206723
;  :num-checks              203
;  :propagations            33
;  :quant-instantiations    28
;  :rlimit-count            158790)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               973
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               196
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             690
;  :mk-clause               42
;  :num-allocs              4206723
;  :num-checks              204
;  :propagations            33
;  :quant-instantiations    28
;  :rlimit-count            158838)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               979
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               197
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             693
;  :mk-clause               42
;  :num-allocs              4206723
;  :num-checks              205
;  :propagations            33
;  :quant-instantiations    29
;  :rlimit-count            159410)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               979
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               198
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             693
;  :mk-clause               42
;  :num-allocs              4206723
;  :num-checks              206
;  :propagations            33
;  :quant-instantiations    29
;  :rlimit-count            159458)
(declare-const $k@35@05 $Perm)
(assert ($Perm.isReadVar $k@35@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@35@05 $Perm.No) (< $Perm.No $k@35@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               979
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      39
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   14
;  :datatype-splits         141
;  :decisions               156
;  :del-clause              32
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             697
;  :mk-clause               44
;  :num-allocs              4206723
;  :num-checks              207
;  :propagations            34
;  :quant-instantiations    29
;  :rlimit-count            159657)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1259
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      39
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               201
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              34
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             792
;  :mk-clause               46
;  :num-allocs              4206723
;  :num-checks              208
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            161589
;  :time                    0.00)
(assert (<= $Perm.No $k@35@05))
(assert (<= $k@35@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@35@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1265
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              34
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             795
;  :mk-clause               46
;  :num-allocs              4206723
;  :num-checks              209
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            162142)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1265
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              34
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             795
;  :mk-clause               46
;  :num-allocs              4206723
;  :num-checks              210
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            162190)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1265
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               204
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              34
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             795
;  :mk-clause               46
;  :num-allocs              4206723
;  :num-checks              211
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            162238)
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1265
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              34
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             795
;  :mk-clause               46
;  :num-allocs              4206723
;  :num-checks              212
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            162286)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 4
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1270
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               206
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              34
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             798
;  :mk-clause               46
;  :num-allocs              4206723
;  :num-checks              213
;  :propagations            35
;  :quant-instantiations    30
;  :rlimit-count            162818)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1270
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               207
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              34
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             798
;  :mk-clause               46
;  :num-allocs              4206723
;  :num-checks              214
;  :propagations            35
;  :quant-instantiations    30
;  :rlimit-count            162866)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  diz@5@05))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.ALU_i < pos
(pop) ; 4
(push) ; 4
; [eval] !(diz.ALU_i < pos)
; [eval] diz.ALU_i < pos
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@36@05 $Perm)
(assert ($Perm.isReadVar $k@36@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@36@05 $Perm.No) (< $Perm.No $k@36@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      41
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               208
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             803
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              215
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163219)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@11@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      41
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               208
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             803
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              216
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163230)
(assert (< $k@36@05 $k@11@05))
(assert (<= $Perm.No (- $k@11@05 $k@36@05)))
(assert (<= (- $k@11@05 $k@36@05) $Perm.Write))
(assert (implies (< $Perm.No (- $k@11@05 $k@36@05)) (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               209
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              217
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163438)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               210
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              218
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163486)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               211
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              219
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163534)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               212
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              220
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163582)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               213
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              221
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163630)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      64
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               214
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             806
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              222
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163678)
; [eval] (forall i__6: Int :: { diz.ALU_m.Main_process_state[i__6] } 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|)
(declare-const i__6@37@05 Int)
(push) ; 4
; [eval] 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__6
(push) ; 5
; [then-branch: 12 | 0 <= i__6@37@05 | live]
; [else-branch: 12 | !(0 <= i__6@37@05) | live]
(push) ; 6
; [then-branch: 12 | 0 <= i__6@37@05]
(assert (<= 0 i__6@37@05))
; [eval] i__6 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1273
;  :arith-assert-diseq      21
;  :arith-assert-lower      65
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               215
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             807
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              223
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163779)
(pop) ; 6
(push) ; 6
; [else-branch: 12 | !(0 <= i__6@37@05)]
(assert (not (<= 0 i__6@37@05)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 13 | i__6@37@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i__6@37@05 | live]
; [else-branch: 13 | !(i__6@37@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i__6@37@05) | live]
(push) ; 6
; [then-branch: 13 | i__6@37@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i__6@37@05]
(assert (and
  (<
    i__6@37@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
  (<= 0 i__6@37@05)))
; [eval] diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__6] == -1
; [eval] diz.ALU_m.Main_process_state[i__6]
(push) ; 7
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1274
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      43
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         4
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              224
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163940)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__6@37@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1274
;  :arith-assert-diseq      21
;  :arith-assert-lower      66
;  :arith-assert-upper      43
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         4
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             809
;  :mk-clause               48
;  :num-allocs              4206723
;  :num-checks              225
;  :propagations            36
;  :quant-instantiations    30
;  :rlimit-count            163949)
; [eval] -1
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__6@37@05] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__6@37@05] != -1 | live]
(push) ; 8
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__6@37@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i__6@37@05)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 14 | First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__6@37@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
      i__6@37@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__6]
; [eval] diz.ALU_m.Main_process_state[i__6]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1276
;  :arith-assert-diseq      23
;  :arith-assert-lower      69
;  :arith-assert-upper      44
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         4
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             816
;  :mk-clause               60
;  :num-allocs              4206723
;  :num-checks              226
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            164236)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__6@37@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1276
;  :arith-assert-diseq      23
;  :arith-assert-lower      69
;  :arith-assert-upper      44
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         4
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             816
;  :mk-clause               60
;  :num-allocs              4206723
;  :num-checks              227
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            164245)
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__6@37@05] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__6@37@05]) | live]
(push) ; 10
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__6@37@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i__6@37@05)))
; [eval] diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__6]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      23
;  :arith-assert-lower      71
;  :arith-assert-upper      45
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               218
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             820
;  :mk-clause               60
;  :num-allocs              4206723
;  :num-checks              228
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            164431)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__6@37@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      23
;  :arith-assert-lower      71
;  :arith-assert-upper      45
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               218
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             820
;  :mk-clause               60
;  :num-allocs              4206723
;  :num-checks              229
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            164440)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      23
;  :arith-assert-lower      71
;  :arith-assert-upper      45
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               219
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              44
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             820
;  :mk-clause               60
;  :num-allocs              4206723
;  :num-checks              230
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            164488)
(pop) ; 10
(push) ; 10
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:(Second:($t@10@05)))))[i__6@37@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
      i__6@37@05))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 13 | !(i__6@37@05 < |First:(Second:(Second:(Second:(Second:($t@10@05)))))| && 0 <= i__6@37@05)]
(assert (not
  (and
    (<
      i__6@37@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
    (<= 0 i__6@37@05))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__6@37@05 Int)) (!
  (implies
    (and
      (<
        i__6@37@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
      (<= 0 i__6@37@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
          i__6@37@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i__6@37@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i__6@37@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i__6@37@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      24
;  :arith-assert-lower      72
;  :arith-assert-upper      46
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         6
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               220
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             828
;  :mk-clause               72
;  :num-allocs              4206723
;  :num-checks              231
;  :propagations            43
;  :quant-instantiations    32
;  :rlimit-count            164949)
(assert (forall ((i__6@37@05 Int)) (!
  (implies
    (and
      (<
        i__6@37@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))
      (<= 0 i__6@37@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
          i__6@37@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i__6@37@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
            i__6@37@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))
    i__6@37@05))
  :qid |prog.l<no position>|)))
(declare-const $k@38@05 $Perm)
(assert ($Perm.isReadVar $k@38@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      74
;  :arith-assert-upper      47
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               221
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             833
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              232
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            165525)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@38@05 $Perm.No) (< $Perm.No $k@38@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      74
;  :arith-assert-upper      47
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               222
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             833
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              233
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            165575)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@13@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      74
;  :arith-assert-upper      47
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               222
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             833
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              234
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            165586)
(assert (< $k@38@05 $k@13@05))
(assert (<= $Perm.No (- $k@13@05 $k@38@05)))
(assert (<= (- $k@13@05 $k@38@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@13@05 $k@38@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              235
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            165800)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              236
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            165848)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              237
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            165896)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              238
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            165944)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               227
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              239
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            165992)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              240
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166040)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               229
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              241
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166088)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               230
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              242
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166136)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               231
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              243
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166184)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               232
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              244
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166232)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               233
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              245
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166280)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               234
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              246
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166328)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               235
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              247
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166376)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               236
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              248
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166424)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               237
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              249
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166472)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               238
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              250
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166520)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               239
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              251
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166568)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               240
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              252
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166616)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              253
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166664)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              254
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166712)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              255
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166760)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               244
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              256
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166808)
(push) ; 4
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               244
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              257
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166819)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               245
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              258
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166867)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               246
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              259
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166915)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               247
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              260
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            166963)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               248
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              261
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            167011)
(push) ; 4
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               248
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              262
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            167022)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               249
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              263
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            167070)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      25
;  :arith-assert-lower      76
;  :arith-assert-upper      48
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               250
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             836
;  :mk-clause               74
;  :num-allocs              4206723
;  :num-checks              264
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            167118)
(declare-const $k@39@05 $Perm)
(assert ($Perm.isReadVar $k@39@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      78
;  :arith-assert-upper      49
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             840
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              265
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167314)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@39@05 $Perm.No) (< $Perm.No $k@39@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      78
;  :arith-assert-upper      49
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               252
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             840
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              266
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167364)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@14@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      78
;  :arith-assert-upper      49
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               252
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             840
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              267
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167375)
(assert (< $k@39@05 $k@14@05))
(assert (<= $Perm.No (- $k@14@05 $k@39@05)))
(assert (<= (- $k@14@05 $k@39@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@14@05 $k@39@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              268
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167595)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               254
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              269
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167643)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              270
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167691)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               256
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              271
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167739)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               257
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              272
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167787)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               258
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              273
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167835)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               259
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              274
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167883)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               260
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              275
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167931)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               261
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              276
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            167979)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      26
;  :arith-assert-lower      80
;  :arith-assert-upper      50
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               262
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             843
;  :mk-clause               76
;  :num-allocs              4206723
;  :num-checks              277
;  :propagations            45
;  :quant-instantiations    32
;  :rlimit-count            168027)
(declare-const $k@40@05 $Perm)
(assert ($Perm.isReadVar $k@40@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      27
;  :arith-assert-lower      82
;  :arith-assert-upper      51
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               263
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             847
;  :mk-clause               78
;  :num-allocs              4206723
;  :num-checks              278
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            168224)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@40@05 $Perm.No) (< $Perm.No $k@40@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      27
;  :arith-assert-lower      82
;  :arith-assert-upper      51
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               264
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             847
;  :mk-clause               78
;  :num-allocs              4206723
;  :num-checks              279
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            168274)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@15@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      27
;  :arith-assert-lower      82
;  :arith-assert-upper      51
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               264
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             847
;  :mk-clause               78
;  :num-allocs              4206723
;  :num-checks              280
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            168285)
(assert (< $k@40@05 $k@15@05))
(assert (<= $Perm.No (- $k@15@05 $k@40@05)))
(assert (<= (- $k@15@05 $k@40@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@15@05 $k@40@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      27
;  :arith-assert-lower      84
;  :arith-assert-upper      52
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               265
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             850
;  :mk-clause               78
;  :num-allocs              4206723
;  :num-checks              281
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            168499)
(push) ; 4
(assert (not (< $Perm.No $k@15@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      27
;  :arith-assert-lower      84
;  :arith-assert-upper      52
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             850
;  :mk-clause               78
;  :num-allocs              4206723
;  :num-checks              282
;  :propagations            46
;  :quant-instantiations    32
;  :rlimit-count            168547)
(declare-const $k@41@05 $Perm)
(assert ($Perm.isReadVar $k@41@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      86
;  :arith-assert-upper      53
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             854
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              283
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            168744)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      86
;  :arith-assert-upper      53
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               268
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             854
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              284
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            168792)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@41@05 $Perm.No) (< $Perm.No $k@41@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      86
;  :arith-assert-upper      53
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             854
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              285
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            168842)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@16@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      86
;  :arith-assert-upper      53
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             854
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              286
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            168853)
(assert (< $k@41@05 $k@16@05))
(assert (<= $Perm.No (- $k@16@05 $k@41@05)))
(assert (<= (- $k@16@05 $k@41@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@16@05 $k@41@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      88
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               270
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             857
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              287
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            169061)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      88
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               271
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             857
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              288
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            169109)
(push) ; 4
(assert (not (< $Perm.No $k@16@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      88
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               272
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             857
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              289
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            169157)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      88
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               273
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             857
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              290
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            169205)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      88
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               274
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             857
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              291
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            169253)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      28
;  :arith-assert-lower      88
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               275
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   22
;  :datatype-splits         228
;  :decisions               258
;  :del-clause              68
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             857
;  :mk-clause               80
;  :num-allocs              4206723
;  :num-checks              292
;  :propagations            47
;  :quant-instantiations    32
;  :rlimit-count            169301)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@30@05 $Perm.Write))
(assert ($Perm.isReadVar $k@32@05 $Perm.Write))
(assert ($Perm.isReadVar $k@33@05 $Perm.Write))
(assert ($Perm.isReadVar $k@34@05 $Perm.Write))
(assert ($Perm.isReadVar $k@35@05 $Perm.Write))
(assert (= $t@29@05 ($Snap.combine ($Snap.first $t@29@05) ($Snap.second $t@29@05))))
(assert (<= $Perm.No $k@30@05))
(assert (<= $k@30@05 $Perm.Write))
(assert (implies (< $Perm.No $k@30@05) (not (= diz@5@05 $Ref.null))))
(assert (=
  ($Snap.second $t@29@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@29@05))
    ($Snap.second ($Snap.second $t@29@05)))))
(assert (= ($Snap.first ($Snap.second $t@29@05)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@29@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@29@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@29@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
  $Snap.unit))
(assert (forall ((i__6@31@05 Int)) (!
  (implies
    (and
      (<
        i__6@31@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__6@31@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__6@31@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__6@31@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__6@31@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__6@31@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))
(assert (<= $Perm.No $k@32@05))
(assert (<= $k@32@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@32@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))
(assert (<= $Perm.No $k@33@05))
(assert (<= $k@33@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@33@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@34@05))
(assert (<= $k@34@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@34@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@35@05))
(assert (<= $k@35@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@35@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  diz@5@05))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.ALU_i < pos
(push) ; 5
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
    pos@8@05))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1994
;  :arith-assert-diseq      33
;  :arith-assert-lower      102
;  :arith-assert-upper      67
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            8
;  :binary-propagations     16
;  :conflicts               276
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 443
;  :datatype-occurs-check   37
;  :datatype-splits         333
;  :decisions               429
;  :del-clause              80
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1058
;  :mk-clause               93
;  :num-allocs              4368910
;  :num-checks              295
;  :propagations            57
;  :quant-instantiations    42
;  :rlimit-count            178396
;  :time                    0.00)
(push) ; 5
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
  pos@8@05)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2151
;  :arith-assert-diseq      33
;  :arith-assert-lower      103
;  :arith-assert-upper      67
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            10
;  :binary-propagations     16
;  :conflicts               276
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1088
;  :mk-clause               93
;  :num-allocs              4368910
;  :num-checks              296
;  :propagations            59
;  :quant-instantiations    43
;  :rlimit-count            179830
;  :time                    0.00)
; [then-branch: 16 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))) < pos@8@05 | live]
; [else-branch: 16 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))) < pos@8@05) | live]
(push) ; 5
; [then-branch: 16 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))) < pos@8@05]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
  pos@8@05))
; [exec]
; __flatten_1__4 := diz.ALU_divisor * 2
; [eval] diz.ALU_divisor * 2
(declare-const __flatten_1__4@42@05 Int)
(assert (=
  __flatten_1__4@42@05
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
    2)))
; [exec]
; diz.ALU_divisor := __flatten_1__4
; [exec]
; __flatten_2__5 := diz.ALU_i
(declare-const __flatten_2__5@43@05 Int)
(assert (=
  __flatten_2__5@43@05
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
; [exec]
; diz.ALU_i := diz.ALU_i + 1
; [eval] diz.ALU_i + 1
(declare-const ALU_i@44@05 Int)
(assert (=
  ALU_i@44@05
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
    1)))
; Loop head block: Re-establish invariant
(declare-const $k@45@05 $Perm)
(assert ($Perm.isReadVar $k@45@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@45@05 $Perm.No) (< $Perm.No $k@45@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      108
;  :arith-assert-upper      70
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               277
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1102
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              297
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            180646)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@30@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      108
;  :arith-assert-upper      70
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               277
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1102
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              298
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            180657)
(assert (< $k@45@05 $k@30@05))
(assert (<= $Perm.No (- $k@30@05 $k@45@05)))
(assert (<= (- $k@30@05 $k@45@05) $Perm.Write))
(assert (implies (< $Perm.No (- $k@30@05 $k@45@05)) (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      110
;  :arith-assert-upper      71
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               278
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1105
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              299
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            180871)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      110
;  :arith-assert-upper      71
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               279
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1105
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              300
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            180919)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      110
;  :arith-assert-upper      71
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1105
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              301
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            180967)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      110
;  :arith-assert-upper      71
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               281
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1105
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              302
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            181015)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      110
;  :arith-assert-upper      71
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               282
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1105
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              303
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            181063)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      110
;  :arith-assert-upper      71
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               283
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1105
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              304
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            181111)
; [eval] (forall i__6: Int :: { diz.ALU_m.Main_process_state[i__6] } 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|)
(declare-const i__6@46@05 Int)
(push) ; 6
; [eval] 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__6 && i__6 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__6
(push) ; 7
; [then-branch: 17 | 0 <= i__6@46@05 | live]
; [else-branch: 17 | !(0 <= i__6@46@05) | live]
(push) ; 8
; [then-branch: 17 | 0 <= i__6@46@05]
(assert (<= 0 i__6@46@05))
; [eval] i__6 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-assert-diseq      34
;  :arith-assert-lower      111
;  :arith-assert-upper      71
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               284
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1106
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              305
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            181212)
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(0 <= i__6@46@05)]
(assert (not (<= 0 i__6@46@05)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 18 | i__6@46@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__6@46@05 | live]
; [else-branch: 18 | !(i__6@46@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__6@46@05) | live]
(push) ; 8
; [then-branch: 18 | i__6@46@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__6@46@05]
(assert (and
  (<
    i__6@46@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  (<= 0 i__6@46@05)))
; [eval] diz.ALU_m.Main_process_state[i__6] == -1 || 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__6] == -1
; [eval] diz.ALU_m.Main_process_state[i__6]
(push) ; 9
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2157
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      72
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         7
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               285
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1108
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              306
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            181373)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__6@46@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2157
;  :arith-assert-diseq      34
;  :arith-assert-lower      112
;  :arith-assert-upper      72
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         7
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               285
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1108
;  :mk-clause               101
;  :num-allocs              4368910
;  :num-checks              307
;  :propagations            64
;  :quant-instantiations    45
;  :rlimit-count            181382)
; [eval] -1
(push) ; 9
; [then-branch: 19 | First:(Second:(Second:(Second:($t@29@05))))[i__6@46@05] == -1 | live]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@29@05))))[i__6@46@05] != -1 | live]
(push) ; 10
; [then-branch: 19 | First:(Second:(Second:(Second:($t@29@05))))[i__6@46@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__6@46@05)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 19 | First:(Second:(Second:(Second:($t@29@05))))[i__6@46@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__6@46@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__6] && diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__6]
; [eval] diz.ALU_m.Main_process_state[i__6]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2159
;  :arith-assert-diseq      36
;  :arith-assert-lower      115
;  :arith-assert-upper      73
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         7
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               286
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1115
;  :mk-clause               111
;  :num-allocs              4368910
;  :num-checks              308
;  :propagations            69
;  :quant-instantiations    46
;  :rlimit-count            181651)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__6@46@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2159
;  :arith-assert-diseq      36
;  :arith-assert-lower      115
;  :arith-assert-upper      73
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         7
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               286
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1115
;  :mk-clause               111
;  :num-allocs              4368910
;  :num-checks              309
;  :propagations            69
;  :quant-instantiations    46
;  :rlimit-count            181660)
(push) ; 11
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__6@46@05] | live]
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__6@46@05]) | live]
(push) ; 12
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__6@46@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__6@46@05)))
; [eval] diz.ALU_m.Main_process_state[i__6] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__6]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      74
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         8
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1119
;  :mk-clause               111
;  :num-allocs              4368910
;  :num-checks              310
;  :propagations            69
;  :quant-instantiations    46
;  :rlimit-count            181836)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__6@46@05 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      74
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         8
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1119
;  :mk-clause               111
;  :num-allocs              4368910
;  :num-checks              311
;  :propagations            69
;  :quant-instantiations    46
;  :rlimit-count            181845)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      74
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         8
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               288
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1119
;  :mk-clause               111
;  :num-allocs              4368910
;  :num-checks              312
;  :propagations            69
;  :quant-instantiations    46
;  :rlimit-count            181893)
(pop) ; 12
(push) ; 12
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__6@46@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__6@46@05))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 18 | !(i__6@46@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__6@46@05)]
(assert (not
  (and
    (<
      i__6@46@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
    (<= 0 i__6@46@05))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__6@46@05 Int)) (!
  (implies
    (and
      (<
        i__6@46@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__6@46@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__6@46@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__6@46@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__6@46@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__6@46@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      38
;  :arith-assert-lower      118
;  :arith-assert-upper      75
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         9
;  :arith-pivots            15
;  :binary-propagations     16
;  :conflicts               289
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1127
;  :mk-clause               125
;  :num-allocs              4368910
;  :num-checks              313
;  :propagations            71
;  :quant-instantiations    47
;  :rlimit-count            182342)
(assert (forall ((i__6@46@05 Int)) (!
  (implies
    (and
      (<
        i__6@46@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__6@46@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__6@46@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__6@46@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__6@46@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__6@46@05))
  :qid |prog.l<no position>|)))
(declare-const $k@47@05 $Perm)
(assert ($Perm.isReadVar $k@47@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      120
;  :arith-assert-upper      76
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            15
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1132
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              314
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            182900)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@47@05 $Perm.No) (< $Perm.No $k@47@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      120
;  :arith-assert-upper      76
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            15
;  :binary-propagations     16
;  :conflicts               291
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1132
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              315
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            182950)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@32@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      120
;  :arith-assert-upper      76
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            15
;  :binary-propagations     16
;  :conflicts               291
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1132
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              316
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            182961)
(assert (< $k@47@05 $k@32@05))
(assert (<= $Perm.No (- $k@32@05 $k@47@05)))
(assert (<= (- $k@32@05 $k@47@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@32@05 $k@47@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               292
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              317
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183181)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               293
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              318
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183229)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               294
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              319
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183277)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               295
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              320
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183325)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               296
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              321
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183373)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               297
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              322
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183421)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               298
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              323
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183469)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               299
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              324
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183517)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               300
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              325
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183565)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               301
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              326
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183613)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               302
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              327
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183661)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               303
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              328
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183709)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               304
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              329
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183757)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               305
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              330
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183805)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               306
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              331
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183853)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              332
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183901)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               308
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              333
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183949)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               309
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              334
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            183997)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               310
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              335
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184045)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               311
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              336
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184093)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               312
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              337
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184141)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               313
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              338
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184189)
(push) ; 6
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               313
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              339
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184200)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               314
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              340
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184248)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               315
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              341
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184296)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               316
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              342
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184344)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               317
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              343
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184392)
(push) ; 6
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               317
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              344
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184403)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              345
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184451)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      39
;  :arith-assert-lower      122
;  :arith-assert-upper      77
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1135
;  :mk-clause               127
;  :num-allocs              4368910
;  :num-checks              346
;  :propagations            72
;  :quant-instantiations    47
;  :rlimit-count            184499)
(declare-const $k@48@05 $Perm)
(assert ($Perm.isReadVar $k@48@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      124
;  :arith-assert-upper      78
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               320
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1139
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              347
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            184696)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@48@05 $Perm.No) (< $Perm.No $k@48@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      124
;  :arith-assert-upper      78
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               321
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1139
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              348
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            184746)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@33@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      124
;  :arith-assert-upper      78
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               321
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1139
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              349
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            184757)
(assert (< $k@48@05 $k@33@05))
(assert (<= $Perm.No (- $k@33@05 $k@48@05)))
(assert (<= (- $k@33@05 $k@48@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@33@05 $k@48@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               322
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              350
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            184971)
(push) ; 6
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               323
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              351
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185019)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               324
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              352
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185067)
(push) ; 6
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               325
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              353
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185115)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               326
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              354
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185163)
(push) ; 6
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               327
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              355
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185211)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               328
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              356
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185259)
(push) ; 6
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               329
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              357
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185307)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               330
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              358
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185355)
(push) ; 6
(assert (not (< $Perm.No $k@33@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      40
;  :arith-assert-lower      126
;  :arith-assert-upper      79
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               331
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1142
;  :mk-clause               129
;  :num-allocs              4368910
;  :num-checks              359
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            185403)
(declare-const $k@49@05 $Perm)
(assert ($Perm.isReadVar $k@49@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      41
;  :arith-assert-lower      128
;  :arith-assert-upper      80
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1146
;  :mk-clause               131
;  :num-allocs              4368910
;  :num-checks              360
;  :propagations            74
;  :quant-instantiations    47
;  :rlimit-count            185599)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@49@05 $Perm.No) (< $Perm.No $k@49@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      41
;  :arith-assert-lower      128
;  :arith-assert-upper      80
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               333
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1146
;  :mk-clause               131
;  :num-allocs              4368910
;  :num-checks              361
;  :propagations            74
;  :quant-instantiations    47
;  :rlimit-count            185649)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@34@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      41
;  :arith-assert-lower      128
;  :arith-assert-upper      80
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         9
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               333
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1146
;  :mk-clause               131
;  :num-allocs              4368910
;  :num-checks              362
;  :propagations            74
;  :quant-instantiations    47
;  :rlimit-count            185660)
(assert (< $k@49@05 $k@34@05))
(assert (<= $Perm.No (- $k@34@05 $k@49@05)))
(assert (<= (- $k@34@05 $k@49@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@34@05 $k@49@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      41
;  :arith-assert-lower      130
;  :arith-assert-upper      81
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         9
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               334
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1149
;  :mk-clause               131
;  :num-allocs              4368910
;  :num-checks              363
;  :propagations            74
;  :quant-instantiations    47
;  :rlimit-count            185874)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      41
;  :arith-assert-lower      130
;  :arith-assert-upper      81
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         9
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               335
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1149
;  :mk-clause               131
;  :num-allocs              4368910
;  :num-checks              364
;  :propagations            74
;  :quant-instantiations    47
;  :rlimit-count            185922)
(declare-const $k@50@05 $Perm)
(assert ($Perm.isReadVar $k@50@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      132
;  :arith-assert-upper      82
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               336
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1153
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              365
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186118)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      132
;  :arith-assert-upper      82
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1153
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              366
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186166)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@50@05 $Perm.No) (< $Perm.No $k@50@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      132
;  :arith-assert-upper      82
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               338
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1153
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              367
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186216)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@35@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      132
;  :arith-assert-upper      82
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               338
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1153
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              368
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186227)
(assert (< $k@50@05 $k@35@05))
(assert (<= $Perm.No (- $k@35@05 $k@50@05)))
(assert (<= (- $k@35@05 $k@50@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@35@05 $k@50@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            20
;  :binary-propagations     16
;  :conflicts               339
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1156
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              369
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186464)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            20
;  :binary-propagations     16
;  :conflicts               340
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1156
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              370
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186512)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            20
;  :binary-propagations     16
;  :conflicts               341
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1156
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              371
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186560)
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            20
;  :binary-propagations     16
;  :conflicts               342
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1156
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              372
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186608)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 6
(assert (not (< $Perm.No $k@30@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            20
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1156
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              373
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186656)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            20
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              104
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1156
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              374
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186704)
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))) < pos@8@05)]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
    pos@8@05)))
(pop) ; 5
(push) ; 5
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2161
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 494
;  :datatype-occurs-check   42
;  :datatype-splits         360
;  :decisions               478
;  :del-clause              120
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1156
;  :mk-clause               133
;  :num-allocs              4368910
;  :num-checks              375
;  :propagations            75
;  :quant-instantiations    47
;  :rlimit-count            186792)
(declare-const $t@51@05 $Ref)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2341
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               345
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 569
;  :datatype-occurs-check   48
;  :datatype-splits         389
;  :decisions               550
;  :del-clause              121
;  :final-checks            29
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1189
;  :mk-clause               134
;  :num-allocs              4368910
;  :num-checks              376
;  :propagations            77
;  :quant-instantiations    47
;  :rlimit-count            188281
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2521
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 644
;  :datatype-occurs-check   54
;  :datatype-splits         418
;  :decisions               622
;  :del-clause              122
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1222
;  :mk-clause               135
;  :num-allocs              4368910
;  :num-checks              377
;  :propagations            79
;  :quant-instantiations    47
;  :rlimit-count            189770
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2701
;  :arith-assert-diseq      42
;  :arith-assert-lower      134
;  :arith-assert-upper      83
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            27
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 719
;  :datatype-occurs-check   60
;  :datatype-splits         447
;  :decisions               694
;  :del-clause              123
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1255
;  :mk-clause               136
;  :num-allocs              4368910
;  :num-checks              378
;  :propagations            81
;  :quant-instantiations    47
;  :rlimit-count            191259
;  :time                    0.00)
(declare-const $t@52@05 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@30@05)
    (= $t@51@05 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05))))
  (implies
    (< $Perm.No (- $k@16@05 $k@41@05))
    (=
      $t@51@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies (< $Perm.No (+ $k@30@05 (- $k@16@05 $k@41@05))) (= $t@52@05 $t@51@05))
  (implies
    (< $Perm.No (- $k@11@05 $k@36@05))
    (=
      $t@52@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))))))
(assert (<= $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05))))
(assert (<= (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))
  (not (= diz@5@05 $Ref.null))))
(assert (<= $Perm.No (+ $k@30@05 (- $k@16@05 $k@41@05))))
(assert (<= (+ $k@30@05 (- $k@16@05 $k@41@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@30@05 (- $k@16@05 $k@41@05)))
  (not (= diz@5@05 $Ref.null))))
; [eval] !(diz.ALU_i < pos)
; [eval] diz.ALU_i < pos
(push) ; 5
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
  pos@8@05)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2859
;  :arith-add-rows          2
;  :arith-assert-diseq      42
;  :arith-assert-lower      137
;  :arith-assert-upper      85
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            31
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 769
;  :datatype-occurs-check   65
;  :datatype-splits         473
;  :decisions               742
;  :del-clause              123
;  :final-checks            38
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1291
;  :mk-clause               136
;  :num-allocs              4368910
;  :num-checks              379
;  :propagations            83
;  :quant-instantiations    48
;  :rlimit-count            193206
;  :time                    0.00)
(push) ; 5
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
    pos@8@05))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3010
;  :arith-add-rows          2
;  :arith-assert-diseq      42
;  :arith-assert-lower      137
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         9
;  :arith-pivots            31
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   70
;  :datatype-splits         499
;  :decisions               790
;  :del-clause              123
;  :final-checks            41
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1320
;  :mk-clause               136
;  :num-allocs              4368910
;  :num-checks              380
;  :propagations            85
;  :quant-instantiations    49
;  :rlimit-count            194640
;  :time                    0.00)
; [then-branch: 21 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))) < pos@8@05) | live]
; [else-branch: 21 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))) < pos@8@05 | live]
(push) ; 5
; [then-branch: 21 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))) < pos@8@05)]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
    pos@8@05)))
; [eval] diz.ALU_divisor != 0
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
  0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3164
;  :arith-add-rows          2
;  :arith-assert-diseq      44
;  :arith-assert-lower      140
;  :arith-assert-upper      86
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         9
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 869
;  :datatype-occurs-check   75
;  :datatype-splits         525
;  :decisions               839
;  :del-clause              127
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1354
;  :mk-clause               140
;  :num-allocs              4368910
;  :num-checks              381
;  :propagations            88
;  :quant-instantiations    51
;  :rlimit-count            196391
;  :time                    0.00)
(push) ; 6
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3318
;  :arith-add-rows          2
;  :arith-assert-diseq      44
;  :arith-assert-lower      141
;  :arith-assert-upper      87
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         9
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              128
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1386
;  :mk-clause               141
;  :num-allocs              4368910
;  :num-checks              382
;  :propagations            90
;  :quant-instantiations    52
;  :rlimit-count            197807
;  :time                    0.00)
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))))) != 0 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))))) == 0 | live]
(push) ; 6
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))))) != 0]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
    0)))
; [exec]
; sys__local__result__3 := value / diz.ALU_divisor % 2
; [eval] value / diz.ALU_divisor % 2
; [eval] value / diz.ALU_divisor
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3319
;  :arith-add-rows          2
;  :arith-assert-diseq      44
;  :arith-assert-lower      141
;  :arith-assert-upper      87
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         9
;  :arith-pivots            32
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              128
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1388
;  :mk-clause               141
;  :num-allocs              4368910
;  :num-checks              383
;  :propagations            90
;  :quant-instantiations    53
;  :rlimit-count            198123)
(declare-const sys__local__result__3@53@05 Int)
(assert (=
  sys__local__result__3@53@05
  (mod
    (div
      value@7@05
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))))))))))))
    2)))
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__7: Int :: { diz.ALU_m.Main_process_state[i__7] } 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && diz.ALU_m.Main_alu == diz
(declare-const $k@54@05 $Perm)
(assert ($Perm.isReadVar $k@54@05 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@54@05 $Perm.No) (< $Perm.No $k@54@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3333
;  :arith-add-rows          5
;  :arith-assert-diseq      46
;  :arith-assert-lower      148
;  :arith-assert-upper      93
;  :arith-bound-prop        1
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         11
;  :arith-offset-eqs        2
;  :arith-pivots            35
;  :binary-propagations     16
;  :conflicts               348
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              128
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1410
;  :mk-clause               155
;  :num-allocs              4368910
;  :num-checks              384
;  :propagations            95
;  :quant-instantiations    53
;  :rlimit-count            198813)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3334
;  :arith-add-rows          11
;  :arith-assert-diseq      46
;  :arith-assert-lower      148
;  :arith-assert-upper      94
;  :arith-bound-prop        1
;  :arith-conflicts         1
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         11
;  :arith-offset-eqs        2
;  :arith-pivots            39
;  :binary-propagations     16
;  :conflicts               349
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1412
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              385
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            199055)
(assert (< $k@54@05 (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)))
(assert (<=
  (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3334
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      96
;  :arith-bound-prop        1
;  :arith-conflicts         2
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        2
;  :arith-pivots            40
;  :binary-propagations     16
;  :conflicts               350
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1416
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              386
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            199373)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@52@05 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3335
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      96
;  :arith-bound-prop        1
;  :arith-conflicts         2
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        2
;  :arith-pivots            40
;  :binary-propagations     16
;  :conflicts               351
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1417
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              387
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            199421)
(assert (not (= $t@52@05 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      97
;  :arith-bound-prop        1
;  :arith-conflicts         3
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         13
;  :arith-offset-eqs        2
;  :arith-pivots            41
;  :binary-propagations     16
;  :conflicts               352
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1419
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              388
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            199587)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      97
;  :arith-bound-prop        1
;  :arith-conflicts         3
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         13
;  :arith-offset-eqs        2
;  :arith-pivots            41
;  :binary-propagations     16
;  :conflicts               353
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1420
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              389
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            199667)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      98
;  :arith-bound-prop        1
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         14
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               354
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1421
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              390
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            199777)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      98
;  :arith-bound-prop        1
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         14
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1422
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              391
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            199857)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      99
;  :arith-bound-prop        1
;  :arith-conflicts         5
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        2
;  :arith-pivots            43
;  :binary-propagations     16
;  :conflicts               356
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1423
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              392
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            199967)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      99
;  :arith-bound-prop        1
;  :arith-conflicts         5
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        2
;  :arith-pivots            43
;  :binary-propagations     16
;  :conflicts               357
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1424
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              393
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200047)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      100
;  :arith-bound-prop        1
;  :arith-conflicts         6
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        2
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1425
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              394
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200157)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      100
;  :arith-bound-prop        1
;  :arith-conflicts         6
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        2
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1426
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              395
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200237)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      101
;  :arith-bound-prop        1
;  :arith-conflicts         7
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        2
;  :arith-pivots            45
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1427
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              396
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200347)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      150
;  :arith-assert-upper      101
;  :arith-bound-prop        1
;  :arith-conflicts         7
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        2
;  :arith-pivots            45
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1428
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              397
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200427)
; [eval] (forall i__7: Int :: { diz.ALU_m.Main_process_state[i__7] } 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|)
(declare-const i__7@55@05 Int)
(push) ; 7
; [eval] 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__7 && i__7 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__7
(push) ; 8
; [then-branch: 23 | 0 <= i__7@55@05 | live]
; [else-branch: 23 | !(0 <= i__7@55@05) | live]
(push) ; 9
; [then-branch: 23 | 0 <= i__7@55@05]
(assert (<= 0 i__7@55@05))
; [eval] i__7 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      102
;  :arith-bound-prop        1
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         18
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1430
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              398
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200589)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3336
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      102
;  :arith-bound-prop        1
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         18
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1431
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              399
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200669)
(pop) ; 9
(push) ; 9
; [else-branch: 23 | !(0 <= i__7@55@05)]
(assert (not (<= 0 i__7@55@05)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 24 | i__7@55@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__7@55@05 | live]
; [else-branch: 24 | !(i__7@55@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__7@55@05) | live]
(push) ; 9
; [then-branch: 24 | i__7@55@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__7@55@05]
(assert (and
  (<
    i__7@55@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  (<= 0 i__7@55@05)))
; [eval] diz.ALU_m.Main_process_state[i__7] == -1 || 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__7] == -1
; [eval] diz.ALU_m.Main_process_state[i__7]
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3337
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      152
;  :arith-assert-upper      104
;  :arith-bound-prop        1
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        2
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1434
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              400
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200892)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3337
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      152
;  :arith-assert-upper      104
;  :arith-bound-prop        1
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        2
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1435
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              401
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200972)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__7@55@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3337
;  :arith-add-rows          13
;  :arith-assert-diseq      46
;  :arith-assert-lower      152
;  :arith-assert-upper      104
;  :arith-bound-prop        1
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        2
;  :arith-pivots            47
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1435
;  :mk-clause               157
;  :num-allocs              4368910
;  :num-checks              402
;  :propagations            96
;  :quant-instantiations    53
;  :rlimit-count            200981)
; [eval] -1
(push) ; 10
; [then-branch: 25 | First:(Second:(Second:(Second:($t@29@05))))[i__7@55@05] == -1 | live]
; [else-branch: 25 | First:(Second:(Second:(Second:($t@29@05))))[i__7@55@05] != -1 | live]
(push) ; 11
; [then-branch: 25 | First:(Second:(Second:(Second:($t@29@05))))[i__7@55@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__7@55@05)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 25 | First:(Second:(Second:(Second:($t@29@05))))[i__7@55@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__7@55@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__7] && diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__7]
; [eval] diz.ALU_m.Main_process_state[i__7]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3339
;  :arith-add-rows          13
;  :arith-assert-diseq      48
;  :arith-assert-lower      155
;  :arith-assert-upper      106
;  :arith-bound-prop        1
;  :arith-conflicts         10
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         21
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1443
;  :mk-clause               167
;  :num-allocs              4368910
;  :num-checks              403
;  :propagations            101
;  :quant-instantiations    54
;  :rlimit-count            201298)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3339
;  :arith-add-rows          13
;  :arith-assert-diseq      48
;  :arith-assert-lower      155
;  :arith-assert-upper      106
;  :arith-bound-prop        1
;  :arith-conflicts         10
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         21
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1444
;  :mk-clause               167
;  :num-allocs              4368910
;  :num-checks              404
;  :propagations            101
;  :quant-instantiations    54
;  :rlimit-count            201378)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__7@55@05 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3339
;  :arith-add-rows          13
;  :arith-assert-diseq      48
;  :arith-assert-lower      155
;  :arith-assert-upper      106
;  :arith-bound-prop        1
;  :arith-conflicts         10
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         21
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1444
;  :mk-clause               167
;  :num-allocs              4368910
;  :num-checks              405
;  :propagations            101
;  :quant-instantiations    54
;  :rlimit-count            201387)
(push) ; 12
; [then-branch: 26 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__7@55@05] | live]
; [else-branch: 26 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__7@55@05]) | live]
(push) ; 13
; [then-branch: 26 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__7@55@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__7@55@05)))
; [eval] diz.ALU_m.Main_process_state[i__7] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__7]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      108
;  :arith-bound-prop        1
;  :arith-conflicts         11
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         23
;  :arith-offset-eqs        2
;  :arith-pivots            50
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1449
;  :mk-clause               167
;  :num-allocs              4368910
;  :num-checks              406
;  :propagations            101
;  :quant-instantiations    54
;  :rlimit-count            201623)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      108
;  :arith-bound-prop        1
;  :arith-conflicts         11
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         23
;  :arith-offset-eqs        2
;  :arith-pivots            50
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1450
;  :mk-clause               167
;  :num-allocs              4368910
;  :num-checks              407
;  :propagations            101
;  :quant-instantiations    54
;  :rlimit-count            201703)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__7@55@05 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      108
;  :arith-bound-prop        1
;  :arith-conflicts         11
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         23
;  :arith-offset-eqs        2
;  :arith-pivots            50
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1450
;  :mk-clause               167
;  :num-allocs              4368910
;  :num-checks              408
;  :propagations            101
;  :quant-instantiations    54
;  :rlimit-count            201712)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      109
;  :arith-bound-prop        1
;  :arith-conflicts         12
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        2
;  :arith-pivots            51
;  :binary-propagations     16
;  :conflicts               370
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1451
;  :mk-clause               167
;  :num-allocs              4368910
;  :num-checks              409
;  :propagations            101
;  :quant-instantiations    54
;  :rlimit-count            201822)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      109
;  :arith-bound-prop        1
;  :arith-conflicts         12
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        2
;  :arith-pivots            51
;  :binary-propagations     16
;  :conflicts               371
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              130
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1452
;  :mk-clause               167
;  :num-allocs              4368910
;  :num-checks              410
;  :propagations            101
;  :quant-instantiations    54
;  :rlimit-count            201902)
(pop) ; 13
(push) ; 13
; [else-branch: 26 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__7@55@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__7@55@05))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 24 | !(i__7@55@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__7@55@05)]
(assert (not
  (and
    (<
      i__7@55@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
    (<= 0 i__7@55@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__7@55@05 Int)) (!
  (implies
    (and
      (<
        i__7@55@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__7@55@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__7@55@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__7@55@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__7@55@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__7@55@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      50
;  :arith-assert-lower      158
;  :arith-assert-upper      110
;  :arith-bound-prop        1
;  :arith-conflicts         12
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         25
;  :arith-offset-eqs        2
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               372
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1460
;  :mk-clause               181
;  :num-allocs              4368910
;  :num-checks              411
;  :propagations            103
;  :quant-instantiations    55
;  :rlimit-count            202351)
(assert (forall ((i__7@55@05 Int)) (!
  (implies
    (and
      (<
        i__7@55@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__7@55@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__7@55@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__7@55@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__7@55@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__7@55@05))
  :qid |prog.l<no position>|)))
(declare-const $k@56@05 $Perm)
(assert ($Perm.isReadVar $k@56@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      51
;  :arith-assert-lower      160
;  :arith-assert-upper      112
;  :arith-bound-prop        1
;  :arith-conflicts         13
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-offset-eqs        2
;  :arith-pivots            53
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1466
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              412
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            202971)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@56@05 $Perm.No) (< $Perm.No $k@56@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      51
;  :arith-assert-lower      160
;  :arith-assert-upper      112
;  :arith-bound-prop        1
;  :arith-conflicts         13
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-offset-eqs        2
;  :arith-pivots            53
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1466
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              413
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203021)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      51
;  :arith-assert-lower      160
;  :arith-assert-upper      112
;  :arith-bound-prop        1
;  :arith-conflicts         13
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-offset-eqs        2
;  :arith-pivots            53
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1466
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              414
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203032)
(push) ; 7
(assert (not (not (= (- $k@13@05 $k@38@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          13
;  :arith-assert-diseq      51
;  :arith-assert-lower      160
;  :arith-assert-upper      112
;  :arith-bound-prop        1
;  :arith-conflicts         13
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         26
;  :arith-offset-eqs        2
;  :arith-pivots            53
;  :binary-propagations     16
;  :conflicts               375
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1467
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              415
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203100)
(assert (< $k@56@05 (- $k@13@05 $k@38@05)))
(assert (<= $Perm.No (- (- $k@13@05 $k@38@05) $k@56@05)))
(assert (<= (- (- $k@13@05 $k@38@05) $k@56@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@13@05 $k@38@05) $k@56@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      114
;  :arith-bound-prop        1
;  :arith-conflicts         14
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         27
;  :arith-offset-eqs        2
;  :arith-pivots            56
;  :binary-propagations     16
;  :conflicts               376
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1471
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              416
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203422)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      114
;  :arith-bound-prop        1
;  :arith-conflicts         14
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         27
;  :arith-offset-eqs        2
;  :arith-pivots            56
;  :binary-propagations     16
;  :conflicts               376
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1471
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              417
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203433)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      114
;  :arith-bound-prop        1
;  :arith-conflicts         14
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         27
;  :arith-offset-eqs        2
;  :arith-pivots            56
;  :binary-propagations     16
;  :conflicts               376
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1471
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              418
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203452)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      115
;  :arith-bound-prop        1
;  :arith-conflicts         15
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         28
;  :arith-offset-eqs        2
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               377
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1472
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              419
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203562)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      115
;  :arith-bound-prop        1
;  :arith-conflicts         15
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         28
;  :arith-offset-eqs        2
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               377
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1472
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              420
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203573)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      115
;  :arith-bound-prop        1
;  :arith-conflicts         15
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         28
;  :arith-offset-eqs        2
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               377
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1472
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              421
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203592)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      115
;  :arith-bound-prop        1
;  :arith-conflicts         15
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         28
;  :arith-offset-eqs        2
;  :arith-pivots            57
;  :binary-propagations     16
;  :conflicts               377
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1472
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              422
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203603)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      116
;  :arith-bound-prop        1
;  :arith-conflicts         16
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        2
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               378
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1473
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              423
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203713)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      116
;  :arith-bound-prop        1
;  :arith-conflicts         16
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        2
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               378
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1473
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              424
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203724)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      116
;  :arith-bound-prop        1
;  :arith-conflicts         16
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        2
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               378
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1473
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              425
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203743)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      116
;  :arith-bound-prop        1
;  :arith-conflicts         16
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        2
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               378
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1473
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              426
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203754)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      117
;  :arith-bound-prop        1
;  :arith-conflicts         17
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        2
;  :arith-pivots            59
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1474
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              427
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203864)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      117
;  :arith-bound-prop        1
;  :arith-conflicts         17
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        2
;  :arith-pivots            59
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1474
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              428
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203875)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      117
;  :arith-bound-prop        1
;  :arith-conflicts         17
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        2
;  :arith-pivots            59
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1474
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              429
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203894)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      117
;  :arith-bound-prop        1
;  :arith-conflicts         17
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        2
;  :arith-pivots            59
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1474
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              430
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            203905)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      118
;  :arith-bound-prop        1
;  :arith-conflicts         18
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        2
;  :arith-pivots            60
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1475
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              431
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204015)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      118
;  :arith-bound-prop        1
;  :arith-conflicts         18
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        2
;  :arith-pivots            60
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1475
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              432
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204026)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      118
;  :arith-bound-prop        1
;  :arith-conflicts         18
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        2
;  :arith-pivots            60
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1475
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              433
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204045)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      118
;  :arith-bound-prop        1
;  :arith-conflicts         18
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        2
;  :arith-pivots            60
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1475
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              434
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204056)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      119
;  :arith-bound-prop        1
;  :arith-conflicts         19
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        2
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1476
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              435
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204166)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      119
;  :arith-bound-prop        1
;  :arith-conflicts         19
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        2
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1476
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              436
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204177)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      119
;  :arith-bound-prop        1
;  :arith-conflicts         19
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        2
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1476
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              437
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204196)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      119
;  :arith-bound-prop        1
;  :arith-conflicts         19
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        2
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1476
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              438
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204207)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      120
;  :arith-bound-prop        1
;  :arith-conflicts         20
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        2
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1477
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              439
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204317)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      120
;  :arith-bound-prop        1
;  :arith-conflicts         20
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        2
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1477
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              440
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204328)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      120
;  :arith-bound-prop        1
;  :arith-conflicts         20
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        2
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1477
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              441
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204347)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      120
;  :arith-bound-prop        1
;  :arith-conflicts         20
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        2
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1477
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              442
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204358)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      121
;  :arith-bound-prop        1
;  :arith-conflicts         21
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         34
;  :arith-offset-eqs        2
;  :arith-pivots            63
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1478
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              443
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204468)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      121
;  :arith-bound-prop        1
;  :arith-conflicts         21
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         34
;  :arith-offset-eqs        2
;  :arith-pivots            63
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1478
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              444
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204479)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      121
;  :arith-bound-prop        1
;  :arith-conflicts         21
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         34
;  :arith-offset-eqs        2
;  :arith-pivots            63
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1478
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              445
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204498)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      121
;  :arith-bound-prop        1
;  :arith-conflicts         21
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         34
;  :arith-offset-eqs        2
;  :arith-pivots            63
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1478
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              446
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204509)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      122
;  :arith-bound-prop        1
;  :arith-conflicts         22
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        2
;  :arith-pivots            64
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1479
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              447
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204619)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      122
;  :arith-bound-prop        1
;  :arith-conflicts         22
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        2
;  :arith-pivots            64
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1479
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              448
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204630)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      122
;  :arith-bound-prop        1
;  :arith-conflicts         22
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        2
;  :arith-pivots            64
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1479
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              449
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204649)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      122
;  :arith-bound-prop        1
;  :arith-conflicts         22
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        2
;  :arith-pivots            64
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1479
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              450
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204660)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      123
;  :arith-bound-prop        1
;  :arith-conflicts         23
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         36
;  :arith-offset-eqs        2
;  :arith-pivots            65
;  :binary-propagations     16
;  :conflicts               385
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1480
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              451
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204770)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      123
;  :arith-bound-prop        1
;  :arith-conflicts         23
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         36
;  :arith-offset-eqs        2
;  :arith-pivots            65
;  :binary-propagations     16
;  :conflicts               385
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1480
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              452
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204781)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      123
;  :arith-bound-prop        1
;  :arith-conflicts         23
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         36
;  :arith-offset-eqs        2
;  :arith-pivots            65
;  :binary-propagations     16
;  :conflicts               385
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1480
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              453
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204800)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      123
;  :arith-bound-prop        1
;  :arith-conflicts         23
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         36
;  :arith-offset-eqs        2
;  :arith-pivots            65
;  :binary-propagations     16
;  :conflicts               385
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1480
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              454
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204811)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      124
;  :arith-bound-prop        1
;  :arith-conflicts         24
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            66
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1481
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              455
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204921)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      124
;  :arith-bound-prop        1
;  :arith-conflicts         24
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            66
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1481
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              456
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204932)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      124
;  :arith-bound-prop        1
;  :arith-conflicts         24
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            66
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1481
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              457
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204951)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      124
;  :arith-bound-prop        1
;  :arith-conflicts         24
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            66
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1481
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              458
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            204962)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      125
;  :arith-bound-prop        1
;  :arith-conflicts         25
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         38
;  :arith-offset-eqs        2
;  :arith-pivots            67
;  :binary-propagations     16
;  :conflicts               387
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1482
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              459
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205072)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      125
;  :arith-bound-prop        1
;  :arith-conflicts         25
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         38
;  :arith-offset-eqs        2
;  :arith-pivots            67
;  :binary-propagations     16
;  :conflicts               387
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1482
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              460
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205083)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      125
;  :arith-bound-prop        1
;  :arith-conflicts         25
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         38
;  :arith-offset-eqs        2
;  :arith-pivots            67
;  :binary-propagations     16
;  :conflicts               387
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1482
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              461
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205102)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      125
;  :arith-bound-prop        1
;  :arith-conflicts         25
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         38
;  :arith-offset-eqs        2
;  :arith-pivots            67
;  :binary-propagations     16
;  :conflicts               387
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1482
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              462
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205113)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      126
;  :arith-bound-prop        1
;  :arith-conflicts         26
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        2
;  :arith-pivots            68
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1483
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              463
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205223)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      126
;  :arith-bound-prop        1
;  :arith-conflicts         26
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        2
;  :arith-pivots            68
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1483
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              464
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205234)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      126
;  :arith-bound-prop        1
;  :arith-conflicts         26
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        2
;  :arith-pivots            68
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1483
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              465
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205253)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      126
;  :arith-bound-prop        1
;  :arith-conflicts         26
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        2
;  :arith-pivots            68
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1483
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              466
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205264)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      127
;  :arith-bound-prop        1
;  :arith-conflicts         27
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         40
;  :arith-offset-eqs        2
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1484
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              467
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205374)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      127
;  :arith-bound-prop        1
;  :arith-conflicts         27
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         40
;  :arith-offset-eqs        2
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1484
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              468
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205385)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      127
;  :arith-bound-prop        1
;  :arith-conflicts         27
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         40
;  :arith-offset-eqs        2
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1484
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              469
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205404)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      127
;  :arith-bound-prop        1
;  :arith-conflicts         27
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         40
;  :arith-offset-eqs        2
;  :arith-pivots            69
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1484
;  :mk-clause               183
;  :num-allocs              4368910
;  :num-checks              470
;  :propagations            104
;  :quant-instantiations    55
;  :rlimit-count            205415)
(declare-const $k@57@05 $Perm)
(assert ($Perm.isReadVar $k@57@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      52
;  :arith-assert-lower      164
;  :arith-assert-upper      129
;  :arith-bound-prop        1
;  :arith-conflicts         28
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        2
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               390
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1489
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              471
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            205674)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@57@05 $Perm.No) (< $Perm.No $k@57@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      52
;  :arith-assert-lower      164
;  :arith-assert-upper      129
;  :arith-bound-prop        1
;  :arith-conflicts         28
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        2
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1489
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              472
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            205724)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      52
;  :arith-assert-lower      164
;  :arith-assert-upper      129
;  :arith-bound-prop        1
;  :arith-conflicts         28
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        2
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1489
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              473
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            205735)
(push) ; 7
(assert (not (not (= (- $k@14@05 $k@39@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          15
;  :arith-assert-diseq      52
;  :arith-assert-lower      164
;  :arith-assert-upper      129
;  :arith-bound-prop        1
;  :arith-conflicts         28
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        2
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1490
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              474
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            205803)
(assert (< $k@57@05 (- $k@14@05 $k@39@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@39@05) $k@57@05)))
(assert (<= (- (- $k@14@05 $k@39@05) $k@57@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@39@05) $k@57@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          17
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      131
;  :arith-bound-prop        1
;  :arith-conflicts         29
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            72
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1494
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              475
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            206119)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          17
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      131
;  :arith-bound-prop        1
;  :arith-conflicts         29
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            72
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1494
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              476
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            206130)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          17
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      131
;  :arith-bound-prop        1
;  :arith-conflicts         29
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            72
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1494
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              477
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            206149)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          17
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      132
;  :arith-bound-prop        1
;  :arith-conflicts         30
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        2
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               394
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1495
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              478
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            206259)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          17
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      132
;  :arith-bound-prop        1
;  :arith-conflicts         30
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        2
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               394
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1495
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              479
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            206270)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3341
;  :arith-add-rows          17
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      132
;  :arith-bound-prop        1
;  :arith-conflicts         30
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        2
;  :arith-pivots            73
;  :binary-propagations     16
;  :conflicts               394
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   80
;  :datatype-splits         551
;  :decisions               887
;  :del-clause              154
;  :final-checks            47
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             1495
;  :mk-clause               185
;  :num-allocs              4368910
;  :num-checks              480
;  :propagations            105
;  :quant-instantiations    55
;  :rlimit-count            206289)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3553
;  :arith-add-rows          36
;  :arith-assert-diseq      52
;  :arith-assert-lower      179
;  :arith-assert-upper      140
;  :arith-bound-prop        1
;  :arith-conflicts         30
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         50
;  :arith-grobner           16
;  :arith-max-min           11
;  :arith-nonlinear-horner  6
;  :arith-offset-eqs        8
;  :arith-pivots            86
;  :arith-pseudo-nonlinear  2
;  :binary-propagations     16
;  :conflicts               395
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 994
;  :datatype-occurs-check   88
;  :datatype-splits         602
;  :decisions               962
;  :del-clause              163
;  :final-checks            53
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1565
;  :mk-clause               194
;  :num-allocs              4558361
;  :num-checks              481
;  :propagations            113
;  :quant-instantiations    55
;  :rlimit-count            209581
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3887
;  :arith-add-rows          88
;  :arith-assert-diseq      52
;  :arith-assert-lower      193
;  :arith-assert-upper      150
;  :arith-bound-prop        3
;  :arith-conflicts         30
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         64
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            103
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               395
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1638
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              484
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            213557)
(declare-const $t@58@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3887
;  :arith-add-rows          88
;  :arith-assert-diseq      52
;  :arith-assert-lower      193
;  :arith-assert-upper      150
;  :arith-bound-prop        3
;  :arith-conflicts         30
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         64
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            103
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               396
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1638
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              485
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            213629)
(declare-const $t@59@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3887
;  :arith-add-rows          88
;  :arith-assert-diseq      52
;  :arith-assert-lower      193
;  :arith-assert-upper      150
;  :arith-bound-prop        3
;  :arith-conflicts         30
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         64
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            103
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               397
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1638
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              486
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            213701)
(declare-const $t@60@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3887
;  :arith-add-rows          88
;  :arith-assert-diseq      52
;  :arith-assert-lower      193
;  :arith-assert-upper      150
;  :arith-bound-prop        3
;  :arith-conflicts         30
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         64
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            103
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1639
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              487
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            213781)
(declare-const $t@61@05 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05))
    (= $t@58@05 $t@52@05))
  (implies
    (< $Perm.No $k@35@05)
    (=
      $t@58@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- $k@14@05 $k@39@05) $k@57@05))
    (=
      $t@59@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@33@05)
    (=
      $t@59@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- $k@13@05 $k@38@05) $k@56@05))
    (=
      $t@60@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
  (implies
    (< $Perm.No $k@32@05)
    (=
      $t@60@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@34@05)
    (=
      $t@61@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@15@05 $k@40@05))
    (=
      $t@61@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
    $k@35@05)))
(assert (<=
  (+
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
    $k@35@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
      $k@35@05))
  (not (= diz@5@05 $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@14@05 $k@39@05) $k@57@05) $k@33@05)))
(assert (<= (+ (- (- $k@14@05 $k@39@05) $k@57@05) $k@33@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@14@05 $k@39@05) $k@57@05) $k@33@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@13@05 $k@38@05) $k@56@05) $k@32@05)))
(assert (<= (+ (- (- $k@13@05 $k@38@05) $k@56@05) $k@32@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@13@05 $k@38@05) $k@56@05) $k@32@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@34@05 (- $k@15@05 $k@40@05))))
(assert (<= (+ $k@34@05 (- $k@15@05 $k@40@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@34@05 (- $k@15@05 $k@40@05)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      154
;  :arith-bound-prop        3
;  :arith-conflicts         30
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         64
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            104
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1655
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              488
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            215722)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      155
;  :arith-bound-prop        3
;  :arith-conflicts         31
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         65
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            105
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1656
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              489
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            215833)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      155
;  :arith-bound-prop        3
;  :arith-conflicts         31
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         65
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            105
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1656
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              490
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            215844)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      155
;  :arith-bound-prop        3
;  :arith-conflicts         31
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         65
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            105
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1656
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              491
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            215863)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      155
;  :arith-bound-prop        3
;  :arith-conflicts         31
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         65
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            105
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               401
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1657
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              492
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            216173)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      156
;  :arith-bound-prop        3
;  :arith-conflicts         32
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         66
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1658
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              493
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            216284)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      156
;  :arith-bound-prop        3
;  :arith-conflicts         32
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         66
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1658
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              494
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            216295)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      156
;  :arith-bound-prop        3
;  :arith-conflicts         32
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         66
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1658
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              495
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            216314)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      156
;  :arith-bound-prop        3
;  :arith-conflicts         32
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         66
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            106
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               403
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1659
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              496
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            216624)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      157
;  :arith-bound-prop        3
;  :arith-conflicts         33
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         67
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1660
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              497
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            216735)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      157
;  :arith-bound-prop        3
;  :arith-conflicts         33
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         67
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1660
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              498
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            216746)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      157
;  :arith-bound-prop        3
;  :arith-conflicts         33
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         67
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1660
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              499
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            216765)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      52
;  :arith-assert-lower      197
;  :arith-assert-upper      157
;  :arith-bound-prop        3
;  :arith-conflicts         33
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         67
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            107
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1661
;  :mk-clause               209
;  :num-allocs              4558361
;  :num-checks              500
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            217075)
(declare-const $k@62@05 $Perm)
(assert ($Perm.isReadVar $k@62@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      53
;  :arith-assert-lower      199
;  :arith-assert-upper      159
;  :arith-bound-prop        3
;  :arith-conflicts         34
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         68
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               406
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1666
;  :mk-clause               211
;  :num-allocs              4558361
;  :num-checks              501
;  :propagations            125
;  :quant-instantiations    55
;  :rlimit-count            217335)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@62@05 $Perm.No) (< $Perm.No $k@62@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      53
;  :arith-assert-lower      199
;  :arith-assert-upper      159
;  :arith-bound-prop        3
;  :arith-conflicts         34
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         68
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               407
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1666
;  :mk-clause               211
;  :num-allocs              4558361
;  :num-checks              502
;  :propagations            125
;  :quant-instantiations    55
;  :rlimit-count            217385)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3900
;  :arith-add-rows          93
;  :arith-assert-diseq      53
;  :arith-assert-lower      199
;  :arith-assert-upper      159
;  :arith-bound-prop        3
;  :arith-conflicts         34
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         68
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            108
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               408
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              187
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1667
;  :mk-clause               211
;  :num-allocs              4558361
;  :num-checks              503
;  :propagations            125
;  :quant-instantiations    55
;  :rlimit-count            217470)
(push) ; 7
(assert (not (not (= (+ $k@34@05 (- $k@15@05 $k@40@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          93
;  :arith-assert-diseq      53
;  :arith-assert-lower      199
;  :arith-assert-upper      160
;  :arith-bound-prop        3
;  :arith-conflicts         35
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         68
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            109
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               409
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1669
;  :mk-clause               213
;  :num-allocs              4558361
;  :num-checks              504
;  :propagations            126
;  :quant-instantiations    55
;  :rlimit-count            217554)
(assert (< $k@62@05 (+ $k@34@05 (- $k@15@05 $k@40@05))))
(assert (<= $Perm.No (- (+ $k@34@05 (- $k@15@05 $k@40@05)) $k@62@05)))
(assert (<= (- (+ $k@34@05 (- $k@15@05 $k@40@05)) $k@62@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@34@05 (- $k@15@05 $k@40@05)) $k@62@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          95
;  :arith-assert-diseq      53
;  :arith-assert-lower      201
;  :arith-assert-upper      162
;  :arith-bound-prop        3
;  :arith-conflicts         36
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         69
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            110
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               410
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1673
;  :mk-clause               213
;  :num-allocs              4558361
;  :num-checks              505
;  :propagations            126
;  :quant-instantiations    55
;  :rlimit-count            217853)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          95
;  :arith-assert-diseq      53
;  :arith-assert-lower      201
;  :arith-assert-upper      162
;  :arith-bound-prop        3
;  :arith-conflicts         36
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         69
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            110
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               410
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1673
;  :mk-clause               213
;  :num-allocs              4558361
;  :num-checks              506
;  :propagations            126
;  :quant-instantiations    55
;  :rlimit-count            217864)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@40@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          95
;  :arith-assert-diseq      53
;  :arith-assert-lower      201
;  :arith-assert-upper      162
;  :arith-bound-prop        3
;  :arith-conflicts         36
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         69
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            110
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               410
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1673
;  :mk-clause               213
;  :num-allocs              4558361
;  :num-checks              507
;  :propagations            126
;  :quant-instantiations    55
;  :rlimit-count            217883)
(declare-const $k@63@05 $Perm)
(assert ($Perm.isReadVar $k@63@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          95
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      164
;  :arith-bound-prop        3
;  :arith-conflicts         37
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         70
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               411
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1678
;  :mk-clause               215
;  :num-allocs              4558361
;  :num-checks              508
;  :propagations            127
;  :quant-instantiations    55
;  :rlimit-count            218142)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          95
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      164
;  :arith-bound-prop        3
;  :arith-conflicts         37
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         70
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               411
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1678
;  :mk-clause               215
;  :num-allocs              4558361
;  :num-checks              509
;  :propagations            127
;  :quant-instantiations    55
;  :rlimit-count            218153)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          95
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      164
;  :arith-bound-prop        3
;  :arith-conflicts         37
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         70
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               411
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1678
;  :mk-clause               215
;  :num-allocs              4558361
;  :num-checks              510
;  :propagations            127
;  :quant-instantiations    55
;  :rlimit-count            218172)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@63@05 $Perm.No) (< $Perm.No $k@63@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          95
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      164
;  :arith-bound-prop        3
;  :arith-conflicts         37
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         70
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1678
;  :mk-clause               215
;  :num-allocs              4558361
;  :num-checks              511
;  :propagations            127
;  :quant-instantiations    55
;  :rlimit-count            218222)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3901
;  :arith-add-rows          95
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      164
;  :arith-bound-prop        3
;  :arith-conflicts         37
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         70
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            111
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              189
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1678
;  :mk-clause               215
;  :num-allocs              4558361
;  :num-checks              512
;  :propagations            127
;  :quant-instantiations    55
;  :rlimit-count            218233)
(push) ; 7
(assert (not (not
  (=
    (+
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
      $k@35@05)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          98
;  :arith-assert-diseq      54
;  :arith-assert-lower      203
;  :arith-assert-upper      165
;  :arith-bound-prop        3
;  :arith-conflicts         38
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         70
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            113
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               413
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1680
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              513
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            218428)
(assert (<
  $k@63@05
  (+
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
    $k@35@05)))
(assert (<=
  $Perm.No
  (-
    (+
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
      $k@35@05)
    $k@63@05)))
(assert (<=
  (-
    (+
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
      $k@35@05)
    $k@63@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@54@05)
        $k@35@05)
      $k@63@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      167
;  :arith-bound-prop        3
;  :arith-conflicts         39
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         71
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            115
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1684
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              514
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            218822)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      167
;  :arith-bound-prop        3
;  :arith-conflicts         39
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         71
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            115
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1684
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              515
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            218833)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      167
;  :arith-bound-prop        3
;  :arith-conflicts         39
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         71
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            115
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1684
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              516
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            218852)
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      167
;  :arith-bound-prop        3
;  :arith-conflicts         39
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         71
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            115
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1684
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              517
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            218863)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      168
;  :arith-bound-prop        3
;  :arith-conflicts         40
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         72
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            116
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               415
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1685
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              518
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            218974)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      169
;  :arith-bound-prop        3
;  :arith-conflicts         41
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         73
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            117
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               416
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1686
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              519
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            219085)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      170
;  :arith-bound-prop        3
;  :arith-conflicts         42
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         74
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            118
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               417
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1687
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              520
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            219196)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      170
;  :arith-bound-prop        3
;  :arith-conflicts         42
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         74
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            118
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               417
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1687
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              521
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            219207)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      54
;  :arith-assert-lower      205
;  :arith-assert-upper      170
;  :arith-bound-prop        3
;  :arith-conflicts         42
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         74
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            118
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               417
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1687
;  :mk-clause               217
;  :num-allocs              4558361
;  :num-checks              522
;  :propagations            128
;  :quant-instantiations    55
;  :rlimit-count            219226)
; [exec]
; label __return_get_bit
; [exec]
; sys__result := sys__local__result__3
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__9: Int :: { diz.ALU_m.Main_process_state[i__9] } 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && diz.ALU_m.Main_alu == diz
(declare-const $k@64@05 $Perm)
(assert ($Perm.isReadVar $k@64@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@64@05 $Perm.No) (< $Perm.No $k@64@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3902
;  :arith-add-rows          103
;  :arith-assert-diseq      55
;  :arith-assert-lower      207
;  :arith-assert-upper      171
;  :arith-bound-prop        3
;  :arith-conflicts         42
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         74
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            118
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               418
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              191
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1691
;  :mk-clause               219
;  :num-allocs              4558361
;  :num-checks              523
;  :propagations            129
;  :quant-instantiations    55
;  :rlimit-count            219425)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          103
;  :arith-assert-diseq      55
;  :arith-assert-lower      207
;  :arith-assert-upper      172
;  :arith-bound-prop        3
;  :arith-conflicts         43
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         74
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            119
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               419
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1693
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              524
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            219536)
(assert (< $k@64@05 (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@64@05)))
(assert (<=
  (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@64@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@64@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      174
;  :arith-bound-prop        3
;  :arith-conflicts         44
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         75
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            120
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               420
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1697
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              525
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            219856)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      175
;  :arith-bound-prop        3
;  :arith-conflicts         45
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         76
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            121
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               421
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1698
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              526
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            219968)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      175
;  :arith-bound-prop        3
;  :arith-conflicts         45
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         76
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            121
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               422
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1699
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              527
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220053)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      176
;  :arith-bound-prop        3
;  :arith-conflicts         46
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         77
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            122
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               423
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1700
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              528
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220165)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      176
;  :arith-bound-prop        3
;  :arith-conflicts         46
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         77
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            122
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               424
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1701
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              529
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220250)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      177
;  :arith-bound-prop        3
;  :arith-conflicts         47
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         78
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            123
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               425
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1702
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              530
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220362)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      177
;  :arith-bound-prop        3
;  :arith-conflicts         47
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         78
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            123
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               426
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1703
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              531
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220447)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      178
;  :arith-bound-prop        3
;  :arith-conflicts         48
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         79
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            124
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               427
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1704
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              532
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220559)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      178
;  :arith-bound-prop        3
;  :arith-conflicts         48
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         79
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            124
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               428
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1705
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              533
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220644)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      179
;  :arith-bound-prop        3
;  :arith-conflicts         49
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         80
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            125
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1706
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              534
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220756)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      209
;  :arith-assert-upper      179
;  :arith-bound-prop        3
;  :arith-conflicts         49
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         80
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            125
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               430
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1707
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              535
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            220841)
; [eval] (forall i__9: Int :: { diz.ALU_m.Main_process_state[i__9] } 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|)
(declare-const i__9@65@05 Int)
(push) ; 7
; [eval] 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__9
(push) ; 8
; [then-branch: 27 | 0 <= i__9@65@05 | live]
; [else-branch: 27 | !(0 <= i__9@65@05) | live]
(push) ; 9
; [then-branch: 27 | 0 <= i__9@65@05]
(assert (<= 0 i__9@65@05))
; [eval] i__9 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      210
;  :arith-assert-upper      180
;  :arith-bound-prop        3
;  :arith-conflicts         50
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         81
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            126
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               431
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1709
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              536
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            221005)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3903
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      210
;  :arith-assert-upper      180
;  :arith-bound-prop        3
;  :arith-conflicts         50
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         81
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            126
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               432
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1710
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              537
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            221090)
(pop) ; 9
(push) ; 9
; [else-branch: 27 | !(0 <= i__9@65@05)]
(assert (not (<= 0 i__9@65@05)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 28 | i__9@65@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__9@65@05 | live]
; [else-branch: 28 | !(i__9@65@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__9@65@05) | live]
(push) ; 9
; [then-branch: 28 | i__9@65@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__9@65@05]
(assert (and
  (<
    i__9@65@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  (<= 0 i__9@65@05)))
; [eval] diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__9] == -1
; [eval] diz.ALU_m.Main_process_state[i__9]
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3904
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      211
;  :arith-assert-upper      182
;  :arith-bound-prop        3
;  :arith-conflicts         51
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         83
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            127
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               433
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1713
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              538
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            221315
;  :time                    0.00)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3904
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      211
;  :arith-assert-upper      182
;  :arith-bound-prop        3
;  :arith-conflicts         51
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         83
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            127
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               434
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1714
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              539
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            221400)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__9@65@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3904
;  :arith-add-rows          105
;  :arith-assert-diseq      55
;  :arith-assert-lower      211
;  :arith-assert-upper      182
;  :arith-bound-prop        3
;  :arith-conflicts         51
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         83
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            127
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               434
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1714
;  :mk-clause               221
;  :num-allocs              4558361
;  :num-checks              540
;  :propagations            130
;  :quant-instantiations    55
;  :rlimit-count            221409)
; [eval] -1
(push) ; 10
; [then-branch: 29 | First:(Second:(Second:(Second:($t@29@05))))[i__9@65@05] == -1 | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@29@05))))[i__9@65@05] != -1 | live]
(push) ; 11
; [then-branch: 29 | First:(Second:(Second:(Second:($t@29@05))))[i__9@65@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__9@65@05)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 29 | First:(Second:(Second:(Second:($t@29@05))))[i__9@65@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__9@65@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__9]
; [eval] diz.ALU_m.Main_process_state[i__9]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3906
;  :arith-add-rows          105
;  :arith-assert-diseq      57
;  :arith-assert-lower      214
;  :arith-assert-upper      184
;  :arith-bound-prop        3
;  :arith-conflicts         52
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         84
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            128
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               435
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1722
;  :mk-clause               232
;  :num-allocs              4558361
;  :num-checks              541
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            221753)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3906
;  :arith-add-rows          105
;  :arith-assert-diseq      57
;  :arith-assert-lower      214
;  :arith-assert-upper      184
;  :arith-bound-prop        3
;  :arith-conflicts         52
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         84
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            128
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               436
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1723
;  :mk-clause               232
;  :num-allocs              4558361
;  :num-checks              542
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            221838)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__9@65@05 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3906
;  :arith-add-rows          105
;  :arith-assert-diseq      57
;  :arith-assert-lower      214
;  :arith-assert-upper      184
;  :arith-bound-prop        3
;  :arith-conflicts         52
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         84
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            128
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               436
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1723
;  :mk-clause               232
;  :num-allocs              4558361
;  :num-checks              543
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            221847)
(push) ; 12
; [then-branch: 30 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__9@65@05] | live]
; [else-branch: 30 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__9@65@05]) | live]
(push) ; 13
; [then-branch: 30 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__9@65@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__9@65@05)))
; [eval] diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__9]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      57
;  :arith-assert-lower      216
;  :arith-assert-upper      186
;  :arith-bound-prop        3
;  :arith-conflicts         53
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         86
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            130
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               437
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1728
;  :mk-clause               232
;  :num-allocs              4558361
;  :num-checks              544
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            222087)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      57
;  :arith-assert-lower      216
;  :arith-assert-upper      186
;  :arith-bound-prop        3
;  :arith-conflicts         53
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         86
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            130
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               438
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1729
;  :mk-clause               232
;  :num-allocs              4558361
;  :num-checks              545
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            222172)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__9@65@05 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      57
;  :arith-assert-lower      216
;  :arith-assert-upper      186
;  :arith-bound-prop        3
;  :arith-conflicts         53
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         86
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            130
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               438
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1729
;  :mk-clause               232
;  :num-allocs              4558361
;  :num-checks              546
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            222181)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      57
;  :arith-assert-lower      216
;  :arith-assert-upper      187
;  :arith-bound-prop        3
;  :arith-conflicts         54
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         87
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            131
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               439
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1730
;  :mk-clause               232
;  :num-allocs              4558361
;  :num-checks              547
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            222293)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      57
;  :arith-assert-lower      216
;  :arith-assert-upper      187
;  :arith-bound-prop        3
;  :arith-conflicts         54
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         87
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            131
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               440
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              193
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1731
;  :mk-clause               232
;  :num-allocs              4558361
;  :num-checks              548
;  :propagations            135
;  :quant-instantiations    57
;  :rlimit-count            222378)
(pop) ; 13
(push) ; 13
; [else-branch: 30 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__9@65@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__9@65@05))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 28 | !(i__9@65@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__9@65@05)]
(assert (not
  (and
    (<
      i__9@65@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
    (<= 0 i__9@65@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__9@65@05 Int)) (!
  (implies
    (and
      (<
        i__9@65@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__9@65@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__9@65@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__9@65@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__9@65@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__9@65@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      59
;  :arith-assert-lower      217
;  :arith-assert-upper      188
;  :arith-bound-prop        3
;  :arith-conflicts         54
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         88
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            132
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1739
;  :mk-clause               246
;  :num-allocs              4558361
;  :num-checks              549
;  :propagations            137
;  :quant-instantiations    59
;  :rlimit-count            222852)
(assert (forall ((i__9@65@05 Int)) (!
  (implies
    (and
      (<
        i__9@65@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__9@65@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__9@65@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__9@65@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__9@65@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__9@65@05))
  :qid |prog.l<no position>|)))
(declare-const $k@66@05 $Perm)
(assert ($Perm.isReadVar $k@66@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      60
;  :arith-assert-lower      219
;  :arith-assert-upper      190
;  :arith-bound-prop        3
;  :arith-conflicts         55
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         89
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               442
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1745
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              550
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            223474)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@66@05 $Perm.No) (< $Perm.No $k@66@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      60
;  :arith-assert-lower      219
;  :arith-assert-upper      190
;  :arith-bound-prop        3
;  :arith-conflicts         55
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         89
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               443
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1745
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              551
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            223524)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      60
;  :arith-assert-lower      219
;  :arith-assert-upper      190
;  :arith-bound-prop        3
;  :arith-conflicts         55
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         89
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               443
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1745
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              552
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            223535)
(push) ; 7
(assert (not (not (= (- $k@13@05 $k@38@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          105
;  :arith-assert-diseq      60
;  :arith-assert-lower      219
;  :arith-assert-upper      190
;  :arith-bound-prop        3
;  :arith-conflicts         55
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         89
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            133
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               444
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1746
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              553
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            223603)
(assert (< $k@66@05 (- $k@13@05 $k@38@05)))
(assert (<= $Perm.No (- (- $k@13@05 $k@38@05) $k@66@05)))
(assert (<= (- (- $k@13@05 $k@38@05) $k@66@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@13@05 $k@38@05) $k@66@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      192
;  :arith-bound-prop        3
;  :arith-conflicts         56
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         90
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               445
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1750
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              554
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            223903)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      192
;  :arith-bound-prop        3
;  :arith-conflicts         56
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         90
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               445
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1750
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              555
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            223914)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      192
;  :arith-bound-prop        3
;  :arith-conflicts         56
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         90
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            135
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               445
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1750
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              556
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            223933)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      193
;  :arith-bound-prop        3
;  :arith-conflicts         57
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         91
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            136
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1751
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              557
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224045)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      193
;  :arith-bound-prop        3
;  :arith-conflicts         57
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         91
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            136
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1751
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              558
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224056)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      193
;  :arith-bound-prop        3
;  :arith-conflicts         57
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         91
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            136
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1751
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              559
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224075)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      193
;  :arith-bound-prop        3
;  :arith-conflicts         57
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         91
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            136
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               446
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1751
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              560
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224086)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      194
;  :arith-bound-prop        3
;  :arith-conflicts         58
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         92
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            137
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1752
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              561
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224198)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      194
;  :arith-bound-prop        3
;  :arith-conflicts         58
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         92
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            137
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1752
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              562
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224209)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      194
;  :arith-bound-prop        3
;  :arith-conflicts         58
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         92
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            137
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1752
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              563
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224228)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      194
;  :arith-bound-prop        3
;  :arith-conflicts         58
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         92
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            137
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1752
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              564
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224239)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      195
;  :arith-bound-prop        3
;  :arith-conflicts         59
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         93
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            138
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               448
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1753
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              565
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224351)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      195
;  :arith-bound-prop        3
;  :arith-conflicts         59
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         93
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            138
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               448
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1753
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              566
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224362)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      195
;  :arith-bound-prop        3
;  :arith-conflicts         59
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         93
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            138
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               448
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1753
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              567
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224381)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      195
;  :arith-bound-prop        3
;  :arith-conflicts         59
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         93
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            138
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               448
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1753
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              568
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224392)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      196
;  :arith-bound-prop        3
;  :arith-conflicts         60
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         94
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            139
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1754
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              569
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224504)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      196
;  :arith-bound-prop        3
;  :arith-conflicts         60
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         94
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            139
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1754
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              570
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224515)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      196
;  :arith-bound-prop        3
;  :arith-conflicts         60
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         94
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            139
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1754
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              571
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224534)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      196
;  :arith-bound-prop        3
;  :arith-conflicts         60
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         94
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            139
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               449
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1754
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              572
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224545)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      197
;  :arith-bound-prop        3
;  :arith-conflicts         61
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         95
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            140
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1755
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              573
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224657)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      197
;  :arith-bound-prop        3
;  :arith-conflicts         61
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         95
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            140
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1755
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              574
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224668)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      197
;  :arith-bound-prop        3
;  :arith-conflicts         61
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         95
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            140
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1755
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              575
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224687)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      197
;  :arith-bound-prop        3
;  :arith-conflicts         61
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         95
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            140
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               450
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1755
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              576
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224698)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      198
;  :arith-bound-prop        3
;  :arith-conflicts         62
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         96
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            141
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1756
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              577
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224810)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      198
;  :arith-bound-prop        3
;  :arith-conflicts         62
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         96
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            141
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1756
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              578
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224821)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      198
;  :arith-bound-prop        3
;  :arith-conflicts         62
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         96
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            141
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1756
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              579
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224840)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      198
;  :arith-bound-prop        3
;  :arith-conflicts         62
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         96
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            141
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               451
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1756
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              580
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224851)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      199
;  :arith-bound-prop        3
;  :arith-conflicts         63
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         97
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            142
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               452
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1757
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              581
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224963)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      199
;  :arith-bound-prop        3
;  :arith-conflicts         63
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         97
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            142
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               452
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1757
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              582
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224974)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      199
;  :arith-bound-prop        3
;  :arith-conflicts         63
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         97
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            142
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               452
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1757
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              583
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            224993)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      199
;  :arith-bound-prop        3
;  :arith-conflicts         63
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         97
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            142
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               452
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1757
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              584
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225004)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      200
;  :arith-bound-prop        3
;  :arith-conflicts         64
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         98
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            143
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1758
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              585
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225116)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      200
;  :arith-bound-prop        3
;  :arith-conflicts         64
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         98
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            143
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1758
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              586
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225127)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      200
;  :arith-bound-prop        3
;  :arith-conflicts         64
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         98
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            143
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1758
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              587
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225146)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      200
;  :arith-bound-prop        3
;  :arith-conflicts         64
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         98
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            143
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1758
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              588
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225157)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      201
;  :arith-bound-prop        3
;  :arith-conflicts         65
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         99
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               454
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1759
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              589
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225269)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      201
;  :arith-bound-prop        3
;  :arith-conflicts         65
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         99
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               454
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1759
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              590
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225280)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      201
;  :arith-bound-prop        3
;  :arith-conflicts         65
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         99
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               454
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1759
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              591
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225299)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      201
;  :arith-bound-prop        3
;  :arith-conflicts         65
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         99
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            144
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               454
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1759
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              592
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225310)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      202
;  :arith-bound-prop        3
;  :arith-conflicts         66
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         100
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            145
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1760
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              593
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225422)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      202
;  :arith-bound-prop        3
;  :arith-conflicts         66
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         100
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            145
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1760
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              594
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225433)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      202
;  :arith-bound-prop        3
;  :arith-conflicts         66
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         100
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            145
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1760
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              595
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225452)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      202
;  :arith-bound-prop        3
;  :arith-conflicts         66
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         100
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            145
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               455
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1760
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              596
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225463)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         67
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         101
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               456
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1761
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              597
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225575)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         67
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         101
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               456
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1761
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              598
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225586)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         67
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         101
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               456
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1761
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              599
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225605)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         67
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         101
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            146
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               456
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1761
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              600
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225616)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      204
;  :arith-bound-prop        3
;  :arith-conflicts         68
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         102
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            147
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               457
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1762
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              601
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225728)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      204
;  :arith-bound-prop        3
;  :arith-conflicts         68
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         102
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            147
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               457
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1762
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              602
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225739)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      204
;  :arith-bound-prop        3
;  :arith-conflicts         68
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         102
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            147
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               457
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1762
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              603
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225758)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      204
;  :arith-bound-prop        3
;  :arith-conflicts         68
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         102
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            147
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               457
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1762
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              604
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225769)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         69
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         103
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            148
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               458
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1763
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              605
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225881)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         69
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         103
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            148
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               458
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1763
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              606
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225892)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         69
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         103
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            148
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               458
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1763
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              607
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225911)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      60
;  :arith-assert-lower      221
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         69
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         103
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            148
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               458
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1763
;  :mk-clause               248
;  :num-allocs              4558361
;  :num-checks              608
;  :propagations            138
;  :quant-instantiations    59
;  :rlimit-count            225922)
(declare-const $k@67@05 $Perm)
(assert ($Perm.isReadVar $k@67@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      61
;  :arith-assert-lower      223
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         70
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         104
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               459
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1768
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              609
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226182)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@67@05 $Perm.No) (< $Perm.No $k@67@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      61
;  :arith-assert-lower      223
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         70
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         104
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1768
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              610
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226232)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      61
;  :arith-assert-lower      223
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         70
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         104
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               460
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1768
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              611
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226243)
(push) ; 7
(assert (not (not (= (- $k@14@05 $k@39@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          106
;  :arith-assert-diseq      61
;  :arith-assert-lower      223
;  :arith-assert-upper      207
;  :arith-bound-prop        3
;  :arith-conflicts         70
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         104
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            149
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               461
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1769
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              612
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226311)
(assert (< $k@67@05 (- $k@14@05 $k@39@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@39@05) $k@67@05)))
(assert (<= (- (- $k@14@05 $k@39@05) $k@67@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@39@05) $k@67@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      209
;  :arith-bound-prop        3
;  :arith-conflicts         71
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         105
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               462
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1773
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              613
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226611)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      209
;  :arith-bound-prop        3
;  :arith-conflicts         71
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         105
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               462
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1773
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              614
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226622)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      209
;  :arith-bound-prop        3
;  :arith-conflicts         71
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         105
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            151
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               462
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1773
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              615
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226641)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      210
;  :arith-bound-prop        3
;  :arith-conflicts         72
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         106
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            152
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               463
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1774
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              616
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226753)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      210
;  :arith-bound-prop        3
;  :arith-conflicts         72
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         106
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            152
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               463
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1774
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              617
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226764)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      210
;  :arith-bound-prop        3
;  :arith-conflicts         72
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         106
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            152
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               463
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1774
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              618
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            226783)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      210
;  :arith-bound-prop        3
;  :arith-conflicts         72
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         106
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            152
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               464
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1775
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              619
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227093)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      211
;  :arith-bound-prop        3
;  :arith-conflicts         73
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         107
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1776
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              620
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227205)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      211
;  :arith-bound-prop        3
;  :arith-conflicts         73
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         107
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1776
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              621
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227216)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      211
;  :arith-bound-prop        3
;  :arith-conflicts         73
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         107
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1776
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              622
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227235)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      211
;  :arith-bound-prop        3
;  :arith-conflicts         73
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         107
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            153
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               466
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1777
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              623
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227545)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      212
;  :arith-bound-prop        3
;  :arith-conflicts         74
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         108
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               467
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1778
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              624
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227657)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      212
;  :arith-bound-prop        3
;  :arith-conflicts         74
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         108
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               467
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1778
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              625
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227668)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      212
;  :arith-bound-prop        3
;  :arith-conflicts         74
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         108
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               467
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1778
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              626
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227687)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      212
;  :arith-bound-prop        3
;  :arith-conflicts         74
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         108
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            154
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               468
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1779
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              627
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            227997)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      213
;  :arith-bound-prop        3
;  :arith-conflicts         75
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         109
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               469
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1780
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              628
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            228109)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      213
;  :arith-bound-prop        3
;  :arith-conflicts         75
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         109
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               469
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1780
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              629
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            228120)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      213
;  :arith-bound-prop        3
;  :arith-conflicts         75
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         109
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               469
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1780
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              630
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            228139)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      61
;  :arith-assert-lower      225
;  :arith-assert-upper      213
;  :arith-bound-prop        3
;  :arith-conflicts         75
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         109
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            155
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               470
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1781
;  :mk-clause               250
;  :num-allocs              4558361
;  :num-checks              631
;  :propagations            139
;  :quant-instantiations    59
;  :rlimit-count            228449)
(declare-const $k@68@05 $Perm)
(assert ($Perm.isReadVar $k@68@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      62
;  :arith-assert-lower      227
;  :arith-assert-upper      215
;  :arith-bound-prop        3
;  :arith-conflicts         76
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         110
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1786
;  :mk-clause               252
;  :num-allocs              4558361
;  :num-checks              632
;  :propagations            140
;  :quant-instantiations    59
;  :rlimit-count            228710)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@68@05 $Perm.No) (< $Perm.No $k@68@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      62
;  :arith-assert-lower      227
;  :arith-assert-upper      215
;  :arith-bound-prop        3
;  :arith-conflicts         76
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         110
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               472
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1786
;  :mk-clause               252
;  :num-allocs              4558361
;  :num-checks              633
;  :propagations            140
;  :quant-instantiations    59
;  :rlimit-count            228760)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      62
;  :arith-assert-lower      227
;  :arith-assert-upper      215
;  :arith-bound-prop        3
;  :arith-conflicts         76
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         110
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               472
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1786
;  :mk-clause               252
;  :num-allocs              4558361
;  :num-checks              634
;  :propagations            140
;  :quant-instantiations    59
;  :rlimit-count            228771)
(push) ; 7
(assert (not (not (= (- $k@15@05 $k@40@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          107
;  :arith-assert-diseq      62
;  :arith-assert-lower      227
;  :arith-assert-upper      215
;  :arith-bound-prop        3
;  :arith-conflicts         76
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         110
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            156
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               473
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1787
;  :mk-clause               252
;  :num-allocs              4558361
;  :num-checks              635
;  :propagations            140
;  :quant-instantiations    59
;  :rlimit-count            228839)
(assert (< $k@68@05 (- $k@15@05 $k@40@05)))
(assert (<= $Perm.No (- (- $k@15@05 $k@40@05) $k@68@05)))
(assert (<= (- (- $k@15@05 $k@40@05) $k@68@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@15@05 $k@40@05) $k@68@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      62
;  :arith-assert-lower      229
;  :arith-assert-upper      217
;  :arith-bound-prop        3
;  :arith-conflicts         77
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         111
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            158
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               474
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1791
;  :mk-clause               252
;  :num-allocs              4558361
;  :num-checks              636
;  :propagations            140
;  :quant-instantiations    59
;  :rlimit-count            229168)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      62
;  :arith-assert-lower      229
;  :arith-assert-upper      217
;  :arith-bound-prop        3
;  :arith-conflicts         77
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         111
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            158
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               474
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1791
;  :mk-clause               252
;  :num-allocs              4558361
;  :num-checks              637
;  :propagations            140
;  :quant-instantiations    59
;  :rlimit-count            229179)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@40@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      62
;  :arith-assert-lower      229
;  :arith-assert-upper      217
;  :arith-bound-prop        3
;  :arith-conflicts         77
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         111
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            158
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               474
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1791
;  :mk-clause               252
;  :num-allocs              4558361
;  :num-checks              638
;  :propagations            140
;  :quant-instantiations    59
;  :rlimit-count            229198)
(declare-const $k@69@05 $Perm)
(assert ($Perm.isReadVar $k@69@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      63
;  :arith-assert-lower      231
;  :arith-assert-upper      219
;  :arith-bound-prop        3
;  :arith-conflicts         78
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         112
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               475
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1796
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              639
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229459)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      63
;  :arith-assert-lower      231
;  :arith-assert-upper      219
;  :arith-bound-prop        3
;  :arith-conflicts         78
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         112
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               475
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1796
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              640
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229470)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      63
;  :arith-assert-lower      231
;  :arith-assert-upper      219
;  :arith-bound-prop        3
;  :arith-conflicts         78
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         112
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               475
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1796
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              641
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229489)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@69@05 $Perm.No) (< $Perm.No $k@69@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      63
;  :arith-assert-lower      231
;  :arith-assert-upper      219
;  :arith-bound-prop        3
;  :arith-conflicts         78
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         112
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               476
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1796
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              642
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229539)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      63
;  :arith-assert-lower      231
;  :arith-assert-upper      219
;  :arith-bound-prop        3
;  :arith-conflicts         78
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         112
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               476
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1796
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              643
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229550)
(push) ; 7
(assert (not (not (= $k@35@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          110
;  :arith-assert-diseq      63
;  :arith-assert-lower      231
;  :arith-assert-upper      219
;  :arith-bound-prop        3
;  :arith-conflicts         78
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         112
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            159
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               476
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1796
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              644
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229561)
(assert (< $k@69@05 $k@35@05))
(assert (<= $Perm.No (- $k@35@05 $k@69@05)))
(assert (<= (- $k@35@05 $k@69@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@35@05 $k@69@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      221
;  :arith-bound-prop        3
;  :arith-conflicts         79
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         113
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            161
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               477
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1800
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              645
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229900)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      221
;  :arith-bound-prop        3
;  :arith-conflicts         79
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         113
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            161
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               477
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1800
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              646
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229911)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      221
;  :arith-bound-prop        3
;  :arith-conflicts         79
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         113
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            161
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               477
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1800
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              647
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229930)
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      221
;  :arith-bound-prop        3
;  :arith-conflicts         79
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         113
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            161
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               477
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1800
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              648
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            229941)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      222
;  :arith-bound-prop        3
;  :arith-conflicts         80
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         114
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            162
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               478
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1801
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              649
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            230052)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      223
;  :arith-bound-prop        3
;  :arith-conflicts         81
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         115
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            163
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               479
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1802
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              650
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            230163)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      224
;  :arith-bound-prop        3
;  :arith-conflicts         82
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         116
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            164
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1803
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              651
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            230274)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      224
;  :arith-bound-prop        3
;  :arith-conflicts         82
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         116
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            164
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1803
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              652
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            230285)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3908
;  :arith-add-rows          113
;  :arith-assert-diseq      63
;  :arith-assert-lower      233
;  :arith-assert-upper      224
;  :arith-bound-prop        3
;  :arith-conflicts         82
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         116
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            164
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 1094
;  :datatype-occurs-check   98
;  :datatype-splits         654
;  :decisions               1063
;  :del-clause              218
;  :final-checks            64
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1803
;  :mk-clause               254
;  :num-allocs              4558361
;  :num-checks              653
;  :propagations            141
;  :quant-instantiations    59
;  :rlimit-count            230304)
; [exec]
; inhale false
(pop) ; 6
(push) ; 6
; [else-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))))) == 0]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
  0))
(pop) ; 6
; [eval] !(diz.ALU_divisor != 0)
; [eval] diz.ALU_divisor != 0
(push) ; 6
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4062
;  :arith-add-rows          126
;  :arith-assert-diseq      63
;  :arith-assert-lower      234
;  :arith-assert-upper      225
;  :arith-bound-prop        3
;  :arith-conflicts         82
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         116
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            179
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 1144
;  :datatype-occurs-check   103
;  :datatype-splits         680
;  :decisions               1111
;  :del-clause              242
;  :final-checks            67
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1835
;  :mk-clause               255
;  :num-allocs              4558361
;  :num-checks              654
;  :propagations            143
;  :quant-instantiations    60
;  :rlimit-count            232009
;  :time                    0.00)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
  0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4215
;  :arith-add-rows          126
;  :arith-assert-diseq      65
;  :arith-assert-lower      236
;  :arith-assert-upper      225
;  :arith-bound-prop        3
;  :arith-conflicts         82
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         116
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            179
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              246
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1867
;  :mk-clause               259
;  :num-allocs              4558361
;  :num-checks              655
;  :propagations            146
;  :quant-instantiations    61
;  :rlimit-count            233456
;  :time                    0.00)
; [then-branch: 31 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))))) == 0 | live]
; [else-branch: 31 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))))) != 0 | live]
(push) ; 6
; [then-branch: 31 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))))) == 0]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
  0))
; [exec]
; sys__local__result__3 := 0
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__8: Int :: { diz.ALU_m.Main_process_state[i__8] } 0 <= i__8 && i__8 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__8] == -1 || 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && diz.ALU_m.Main_alu == diz
(declare-const $k@70@05 $Perm)
(assert ($Perm.isReadVar $k@70@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@70@05 $Perm.No) (< $Perm.No $k@70@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4217
;  :arith-add-rows          126
;  :arith-assert-diseq      66
;  :arith-assert-lower      238
;  :arith-assert-upper      226
;  :arith-bound-prop        3
;  :arith-conflicts         82
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         116
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            179
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               481
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              246
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1873
;  :mk-clause               261
;  :num-allocs              4558361
;  :num-checks              656
;  :propagations            147
;  :quant-instantiations    62
;  :rlimit-count            233933)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4218
;  :arith-add-rows          126
;  :arith-assert-diseq      66
;  :arith-assert-lower      238
;  :arith-assert-upper      227
;  :arith-bound-prop        3
;  :arith-conflicts         83
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         116
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            180
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               482
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1875
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              657
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            234042)
(assert (< $k@70@05 (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)))
(assert (<=
  (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4218
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      229
;  :arith-bound-prop        3
;  :arith-conflicts         84
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         117
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            181
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               483
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1879
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              658
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            234360)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@52@05 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4219
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      229
;  :arith-bound-prop        3
;  :arith-conflicts         84
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         117
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            181
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               484
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1880
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              659
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            234408)
(assert (not (= $t@52@05 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      230
;  :arith-bound-prop        3
;  :arith-conflicts         85
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         118
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            182
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               485
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1882
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              660
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            234574)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      230
;  :arith-bound-prop        3
;  :arith-conflicts         85
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         118
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            182
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               486
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1883
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              661
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            234654)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      231
;  :arith-bound-prop        3
;  :arith-conflicts         86
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         119
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            183
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               487
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1884
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              662
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            234764)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      231
;  :arith-bound-prop        3
;  :arith-conflicts         86
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         119
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            183
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               488
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1885
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              663
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            234844)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      232
;  :arith-bound-prop        3
;  :arith-conflicts         87
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         120
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            184
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               489
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1886
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              664
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            234954)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      232
;  :arith-bound-prop        3
;  :arith-conflicts         87
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         120
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            184
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               490
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1887
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              665
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235034)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      233
;  :arith-bound-prop        3
;  :arith-conflicts         88
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         121
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            185
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               491
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1888
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              666
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235144)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      233
;  :arith-bound-prop        3
;  :arith-conflicts         88
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         121
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            185
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               492
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1889
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              667
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235224)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      234
;  :arith-bound-prop        3
;  :arith-conflicts         89
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         122
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            186
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               493
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1890
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              668
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235334)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      240
;  :arith-assert-upper      234
;  :arith-bound-prop        3
;  :arith-conflicts         89
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         122
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            186
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               494
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1891
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              669
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235414)
; [eval] (forall i__8: Int :: { diz.ALU_m.Main_process_state[i__8] } 0 <= i__8 && i__8 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__8] == -1 || 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|)
(declare-const i__8@71@05 Int)
(push) ; 7
; [eval] 0 <= i__8 && i__8 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__8] == -1 || 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__8 && i__8 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__8
(push) ; 8
; [then-branch: 32 | 0 <= i__8@71@05 | live]
; [else-branch: 32 | !(0 <= i__8@71@05) | live]
(push) ; 9
; [then-branch: 32 | 0 <= i__8@71@05]
(assert (<= 0 i__8@71@05))
; [eval] i__8 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      241
;  :arith-assert-upper      235
;  :arith-bound-prop        3
;  :arith-conflicts         90
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         123
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            187
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               495
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1893
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              670
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235577)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4220
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      241
;  :arith-assert-upper      235
;  :arith-bound-prop        3
;  :arith-conflicts         90
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         123
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            187
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               496
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1894
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              671
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235657)
(pop) ; 9
(push) ; 9
; [else-branch: 32 | !(0 <= i__8@71@05)]
(assert (not (<= 0 i__8@71@05)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 33 | i__8@71@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__8@71@05 | live]
; [else-branch: 33 | !(i__8@71@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__8@71@05) | live]
(push) ; 9
; [then-branch: 33 | i__8@71@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__8@71@05]
(assert (and
  (<
    i__8@71@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  (<= 0 i__8@71@05)))
; [eval] diz.ALU_m.Main_process_state[i__8] == -1 || 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__8] == -1
; [eval] diz.ALU_m.Main_process_state[i__8]
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4221
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      242
;  :arith-assert-upper      237
;  :arith-bound-prop        3
;  :arith-conflicts         91
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         125
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            188
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               497
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1897
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              672
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235880)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4221
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      242
;  :arith-assert-upper      237
;  :arith-bound-prop        3
;  :arith-conflicts         91
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         125
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            188
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               498
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1898
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              673
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235960)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__8@71@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4221
;  :arith-add-rows          128
;  :arith-assert-diseq      66
;  :arith-assert-lower      242
;  :arith-assert-upper      237
;  :arith-bound-prop        3
;  :arith-conflicts         91
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         125
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            188
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               498
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1898
;  :mk-clause               263
;  :num-allocs              4558361
;  :num-checks              674
;  :propagations            148
;  :quant-instantiations    62
;  :rlimit-count            235969)
; [eval] -1
(push) ; 10
; [then-branch: 34 | First:(Second:(Second:(Second:($t@29@05))))[i__8@71@05] == -1 | live]
; [else-branch: 34 | First:(Second:(Second:(Second:($t@29@05))))[i__8@71@05] != -1 | live]
(push) ; 11
; [then-branch: 34 | First:(Second:(Second:(Second:($t@29@05))))[i__8@71@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__8@71@05)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 34 | First:(Second:(Second:(Second:($t@29@05))))[i__8@71@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__8@71@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__8] && diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__8]
; [eval] diz.ALU_m.Main_process_state[i__8]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4223
;  :arith-add-rows          128
;  :arith-assert-diseq      68
;  :arith-assert-lower      245
;  :arith-assert-upper      239
;  :arith-bound-prop        3
;  :arith-conflicts         92
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         126
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            189
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               499
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1906
;  :mk-clause               273
;  :num-allocs              4558361
;  :num-checks              675
;  :propagations            153
;  :quant-instantiations    63
;  :rlimit-count            236287)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4223
;  :arith-add-rows          128
;  :arith-assert-diseq      68
;  :arith-assert-lower      245
;  :arith-assert-upper      239
;  :arith-bound-prop        3
;  :arith-conflicts         92
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         126
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            189
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1907
;  :mk-clause               273
;  :num-allocs              4558361
;  :num-checks              676
;  :propagations            153
;  :quant-instantiations    63
;  :rlimit-count            236367)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__8@71@05 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4223
;  :arith-add-rows          128
;  :arith-assert-diseq      68
;  :arith-assert-lower      245
;  :arith-assert-upper      239
;  :arith-bound-prop        3
;  :arith-conflicts         92
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         126
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            189
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               500
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1907
;  :mk-clause               273
;  :num-allocs              4558361
;  :num-checks              677
;  :propagations            153
;  :quant-instantiations    63
;  :rlimit-count            236376)
(push) ; 12
; [then-branch: 35 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__8@71@05] | live]
; [else-branch: 35 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__8@71@05]) | live]
(push) ; 13
; [then-branch: 35 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__8@71@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__8@71@05)))
; [eval] diz.ALU_m.Main_process_state[i__8] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__8]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      68
;  :arith-assert-lower      247
;  :arith-assert-upper      241
;  :arith-bound-prop        3
;  :arith-conflicts         93
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         128
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            190
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1912
;  :mk-clause               273
;  :num-allocs              4558361
;  :num-checks              678
;  :propagations            153
;  :quant-instantiations    63
;  :rlimit-count            236608)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      68
;  :arith-assert-lower      247
;  :arith-assert-upper      241
;  :arith-bound-prop        3
;  :arith-conflicts         93
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         128
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            190
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1913
;  :mk-clause               273
;  :num-allocs              4558361
;  :num-checks              679
;  :propagations            153
;  :quant-instantiations    63
;  :rlimit-count            236688)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__8@71@05 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      68
;  :arith-assert-lower      247
;  :arith-assert-upper      241
;  :arith-bound-prop        3
;  :arith-conflicts         93
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         128
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            190
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1913
;  :mk-clause               273
;  :num-allocs              4558361
;  :num-checks              680
;  :propagations            153
;  :quant-instantiations    63
;  :rlimit-count            236697)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      68
;  :arith-assert-lower      247
;  :arith-assert-upper      242
;  :arith-bound-prop        3
;  :arith-conflicts         94
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         129
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            191
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1914
;  :mk-clause               273
;  :num-allocs              4558361
;  :num-checks              681
;  :propagations            153
;  :quant-instantiations    63
;  :rlimit-count            236807)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      68
;  :arith-assert-lower      247
;  :arith-assert-upper      242
;  :arith-bound-prop        3
;  :arith-conflicts         94
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         129
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            191
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              248
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1915
;  :mk-clause               273
;  :num-allocs              4558361
;  :num-checks              682
;  :propagations            153
;  :quant-instantiations    63
;  :rlimit-count            236887)
(pop) ; 13
(push) ; 13
; [else-branch: 35 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__8@71@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__8@71@05))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 33 | !(i__8@71@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__8@71@05)]
(assert (not
  (and
    (<
      i__8@71@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
    (<= 0 i__8@71@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__8@71@05 Int)) (!
  (implies
    (and
      (<
        i__8@71@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__8@71@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__8@71@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__8@71@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__8@71@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__8@71@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      69
;  :arith-assert-lower      248
;  :arith-assert-upper      243
;  :arith-bound-prop        3
;  :arith-conflicts         94
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         130
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            191
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1923
;  :mk-clause               285
;  :num-allocs              4558361
;  :num-checks              683
;  :propagations            155
;  :quant-instantiations    64
;  :rlimit-count            237333)
(assert (forall ((i__8@71@05 Int)) (!
  (implies
    (and
      (<
        i__8@71@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__8@71@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__8@71@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__8@71@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__8@71@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__8@71@05))
  :qid |prog.l<no position>|)))
(declare-const $k@72@05 $Perm)
(assert ($Perm.isReadVar $k@72@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      70
;  :arith-assert-lower      250
;  :arith-assert-upper      245
;  :arith-bound-prop        3
;  :arith-conflicts         95
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         131
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            192
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1929
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              684
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            237953)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@72@05 $Perm.No) (< $Perm.No $k@72@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      70
;  :arith-assert-lower      250
;  :arith-assert-upper      245
;  :arith-bound-prop        3
;  :arith-conflicts         95
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         131
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            192
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1929
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              685
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238003)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      70
;  :arith-assert-lower      250
;  :arith-assert-upper      245
;  :arith-bound-prop        3
;  :arith-conflicts         95
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         131
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            192
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1929
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              686
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238014)
(push) ; 7
(assert (not (not (= (- $k@13@05 $k@38@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          128
;  :arith-assert-diseq      70
;  :arith-assert-lower      250
;  :arith-assert-upper      245
;  :arith-bound-prop        3
;  :arith-conflicts         95
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         131
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            192
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1930
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              687
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238082)
(assert (< $k@72@05 (- $k@13@05 $k@38@05)))
(assert (<= $Perm.No (- (- $k@13@05 $k@38@05) $k@72@05)))
(assert (<= (- (- $k@13@05 $k@38@05) $k@72@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@13@05 $k@38@05) $k@72@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      247
;  :arith-bound-prop        3
;  :arith-conflicts         96
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         132
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            194
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               509
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1934
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              688
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238379)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      247
;  :arith-bound-prop        3
;  :arith-conflicts         96
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         132
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            194
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               509
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1934
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              689
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238390)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      247
;  :arith-bound-prop        3
;  :arith-conflicts         96
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         132
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            194
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               509
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1934
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              690
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238409)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      248
;  :arith-bound-prop        3
;  :arith-conflicts         97
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         133
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            195
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1935
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              691
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238519)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      248
;  :arith-bound-prop        3
;  :arith-conflicts         97
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         133
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            195
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1935
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              692
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238530)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      248
;  :arith-bound-prop        3
;  :arith-conflicts         97
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         133
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            195
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1935
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              693
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238549)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      248
;  :arith-bound-prop        3
;  :arith-conflicts         97
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         133
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            195
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1935
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              694
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238560)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      249
;  :arith-bound-prop        3
;  :arith-conflicts         98
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         134
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            196
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1936
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              695
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238670)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      249
;  :arith-bound-prop        3
;  :arith-conflicts         98
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         134
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            196
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1936
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              696
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238681)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      249
;  :arith-bound-prop        3
;  :arith-conflicts         98
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         134
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            196
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1936
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              697
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238700)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      249
;  :arith-bound-prop        3
;  :arith-conflicts         98
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         134
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            196
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1936
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              698
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238711)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      250
;  :arith-bound-prop        3
;  :arith-conflicts         99
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         135
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            197
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1937
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              699
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238821)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      250
;  :arith-bound-prop        3
;  :arith-conflicts         99
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         135
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            197
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1937
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              700
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238832)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      250
;  :arith-bound-prop        3
;  :arith-conflicts         99
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         135
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            197
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1937
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              701
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238851)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      250
;  :arith-bound-prop        3
;  :arith-conflicts         99
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         135
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            197
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1937
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              702
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238862)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      251
;  :arith-bound-prop        3
;  :arith-conflicts         100
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         136
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            198
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1938
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              703
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238972)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      251
;  :arith-bound-prop        3
;  :arith-conflicts         100
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         136
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            198
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1938
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              704
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            238983)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      251
;  :arith-bound-prop        3
;  :arith-conflicts         100
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         136
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            198
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1938
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              705
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239002)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      251
;  :arith-bound-prop        3
;  :arith-conflicts         100
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         136
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            198
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1938
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              706
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239013)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      252
;  :arith-bound-prop        3
;  :arith-conflicts         101
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         137
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            199
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1939
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              707
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239123)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      252
;  :arith-bound-prop        3
;  :arith-conflicts         101
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         137
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            199
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1939
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              708
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239134)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      252
;  :arith-bound-prop        3
;  :arith-conflicts         101
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         137
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            199
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1939
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              709
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239153)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      252
;  :arith-bound-prop        3
;  :arith-conflicts         101
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         137
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            199
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1939
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              710
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239164)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      253
;  :arith-bound-prop        3
;  :arith-conflicts         102
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         138
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            200
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1940
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              711
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239274)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      253
;  :arith-bound-prop        3
;  :arith-conflicts         102
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         138
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            200
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1940
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              712
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239285)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      253
;  :arith-bound-prop        3
;  :arith-conflicts         102
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         138
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            200
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1940
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              713
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239304)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      253
;  :arith-bound-prop        3
;  :arith-conflicts         102
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         138
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            200
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1940
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              714
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239315)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      254
;  :arith-bound-prop        3
;  :arith-conflicts         103
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         139
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            201
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1941
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              715
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239425)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      254
;  :arith-bound-prop        3
;  :arith-conflicts         103
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         139
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            201
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1941
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              716
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239436)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      254
;  :arith-bound-prop        3
;  :arith-conflicts         103
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         139
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            201
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1941
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              717
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239455)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      254
;  :arith-bound-prop        3
;  :arith-conflicts         103
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         139
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            201
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1941
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              718
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239466)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      255
;  :arith-bound-prop        3
;  :arith-conflicts         104
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         140
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            202
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1942
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              719
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239576)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      255
;  :arith-bound-prop        3
;  :arith-conflicts         104
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         140
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            202
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1942
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              720
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239587)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      255
;  :arith-bound-prop        3
;  :arith-conflicts         104
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         140
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            202
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1942
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              721
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239606)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      255
;  :arith-bound-prop        3
;  :arith-conflicts         104
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         140
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            202
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1942
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              722
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239617)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      256
;  :arith-bound-prop        3
;  :arith-conflicts         105
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         141
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            203
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               518
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1943
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              723
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239727)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      256
;  :arith-bound-prop        3
;  :arith-conflicts         105
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         141
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            203
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               518
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1943
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              724
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239738)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      256
;  :arith-bound-prop        3
;  :arith-conflicts         105
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         141
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            203
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               518
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1943
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              725
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239757)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      256
;  :arith-bound-prop        3
;  :arith-conflicts         105
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         141
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            203
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               518
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1943
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              726
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239768)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      257
;  :arith-bound-prop        3
;  :arith-conflicts         106
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         142
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            204
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1944
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              727
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239878)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      257
;  :arith-bound-prop        3
;  :arith-conflicts         106
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         142
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            204
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1944
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              728
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239889)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      257
;  :arith-bound-prop        3
;  :arith-conflicts         106
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         142
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            204
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1944
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              729
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239908)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      257
;  :arith-bound-prop        3
;  :arith-conflicts         106
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         142
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            204
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1944
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              730
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            239919)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      258
;  :arith-bound-prop        3
;  :arith-conflicts         107
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         143
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            205
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               520
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1945
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              731
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240029)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      258
;  :arith-bound-prop        3
;  :arith-conflicts         107
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         143
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            205
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               520
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1945
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              732
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240040)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      258
;  :arith-bound-prop        3
;  :arith-conflicts         107
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         143
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            205
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               520
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1945
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              733
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240059)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      258
;  :arith-bound-prop        3
;  :arith-conflicts         107
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         143
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            205
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               520
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1945
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              734
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240070)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      259
;  :arith-bound-prop        3
;  :arith-conflicts         108
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         144
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            206
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1946
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              735
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240180)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      259
;  :arith-bound-prop        3
;  :arith-conflicts         108
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         144
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            206
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1946
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              736
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240191)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      259
;  :arith-bound-prop        3
;  :arith-conflicts         108
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         144
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            206
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1946
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              737
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240210)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      259
;  :arith-bound-prop        3
;  :arith-conflicts         108
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         144
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            206
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1946
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              738
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240221)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      260
;  :arith-bound-prop        3
;  :arith-conflicts         109
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         145
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            207
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1947
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              739
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240331)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      260
;  :arith-bound-prop        3
;  :arith-conflicts         109
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         145
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            207
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1947
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              740
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240342)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      260
;  :arith-bound-prop        3
;  :arith-conflicts         109
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         145
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            207
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1947
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              741
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240361)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      70
;  :arith-assert-lower      252
;  :arith-assert-upper      260
;  :arith-bound-prop        3
;  :arith-conflicts         109
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         145
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            207
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1947
;  :mk-clause               287
;  :num-allocs              4558361
;  :num-checks              742
;  :propagations            156
;  :quant-instantiations    64
;  :rlimit-count            240372)
(declare-const $k@73@05 $Perm)
(assert ($Perm.isReadVar $k@73@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      71
;  :arith-assert-lower      254
;  :arith-assert-upper      262
;  :arith-bound-prop        3
;  :arith-conflicts         110
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         146
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            208
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1952
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              743
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            240630)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@73@05 $Perm.No) (< $Perm.No $k@73@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      71
;  :arith-assert-lower      254
;  :arith-assert-upper      262
;  :arith-bound-prop        3
;  :arith-conflicts         110
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         146
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            208
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               524
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1952
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              744
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            240680)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      71
;  :arith-assert-lower      254
;  :arith-assert-upper      262
;  :arith-bound-prop        3
;  :arith-conflicts         110
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         146
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            208
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               524
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1952
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              745
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            240691)
(push) ; 7
(assert (not (not (= (- $k@14@05 $k@39@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          129
;  :arith-assert-diseq      71
;  :arith-assert-lower      254
;  :arith-assert-upper      262
;  :arith-bound-prop        3
;  :arith-conflicts         110
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         146
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            208
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               525
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1953
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              746
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            240759)
(assert (< $k@73@05 (- $k@14@05 $k@39@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@39@05) $k@73@05)))
(assert (<= (- (- $k@14@05 $k@39@05) $k@73@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@39@05) $k@73@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      256
;  :arith-assert-upper      264
;  :arith-bound-prop        3
;  :arith-conflicts         111
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         147
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            210
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1957
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              747
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            241056)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      256
;  :arith-assert-upper      264
;  :arith-bound-prop        3
;  :arith-conflicts         111
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         147
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            210
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1957
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              748
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            241067)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      256
;  :arith-assert-upper      264
;  :arith-bound-prop        3
;  :arith-conflicts         111
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         147
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            210
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1957
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              749
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            241086)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      256
;  :arith-assert-upper      265
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            211
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               527
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1958
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              750
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            241196)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      256
;  :arith-assert-upper      265
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            211
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               527
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1958
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              751
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            241207)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4225
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      256
;  :arith-assert-upper      265
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            211
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               527
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 1194
;  :datatype-occurs-check   108
;  :datatype-splits         706
;  :decisions               1160
;  :del-clause              270
;  :final-checks            70
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1958
;  :mk-clause               289
;  :num-allocs              4558361
;  :num-checks              752
;  :propagations            157
;  :quant-instantiations    64
;  :rlimit-count            241226)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4416
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      258
;  :arith-assert-upper      267
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            211
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               528
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 1269
;  :datatype-occurs-check   116
;  :datatype-splits         757
;  :decisions               1231
;  :del-clause              273
;  :final-checks            74
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2020
;  :mk-clause               292
;  :num-allocs              4558361
;  :num-checks              753
;  :propagations            159
;  :quant-instantiations    64
;  :rlimit-count            243246
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4720
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      260
;  :arith-assert-upper      269
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            211
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               528
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2080
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              756
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            245543)
(declare-const $t@74@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4720
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      260
;  :arith-assert-upper      269
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            211
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               529
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2080
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              757
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            245615)
(declare-const $t@75@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4720
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      260
;  :arith-assert-upper      269
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            211
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               530
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2080
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              758
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            245687)
(declare-const $t@76@05 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4720
;  :arith-add-rows          130
;  :arith-assert-diseq      71
;  :arith-assert-lower      260
;  :arith-assert-upper      269
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            211
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               531
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2081
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              759
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            245767)
(declare-const $t@77@05 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05))
    (= $t@74@05 $t@52@05))
  (implies
    (< $Perm.No $k@35@05)
    (=
      $t@74@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- $k@14@05 $k@39@05) $k@73@05))
    (=
      $t@75@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@33@05)
    (=
      $t@75@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- $k@13@05 $k@38@05) $k@72@05))
    (=
      $t@76@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))
  (implies
    (< $Perm.No $k@32@05)
    (=
      $t@76@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@34@05)
    (=
      $t@77@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@15@05 $k@40@05))
    (=
      $t@77@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
    $k@35@05)))
(assert (<=
  (+
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
    $k@35@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
      $k@35@05))
  (not (= diz@5@05 $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@14@05 $k@39@05) $k@73@05) $k@33@05)))
(assert (<= (+ (- (- $k@14@05 $k@39@05) $k@73@05) $k@33@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@14@05 $k@39@05) $k@73@05) $k@33@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@13@05 $k@38@05) $k@72@05) $k@32@05)))
(assert (<= (+ (- (- $k@13@05 $k@38@05) $k@72@05) $k@32@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@13@05 $k@38@05) $k@72@05) $k@32@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@34@05 (- $k@15@05 $k@40@05))))
(assert (<= (+ $k@34@05 (- $k@15@05 $k@40@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@34@05 (- $k@15@05 $k@40@05)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      273
;  :arith-bound-prop        3
;  :arith-conflicts         112
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         148
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            212
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               532
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2097
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              760
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            247686)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         113
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         149
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            213
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               533
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2098
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              761
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            247797)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         113
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         149
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            213
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               533
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2098
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              762
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            247808)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         113
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         149
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            213
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               533
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2098
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              763
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            247827)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         113
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         149
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            213
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               534
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2099
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              764
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            248137)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      275
;  :arith-bound-prop        3
;  :arith-conflicts         114
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         150
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            214
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2100
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              765
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            248248)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      275
;  :arith-bound-prop        3
;  :arith-conflicts         114
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         150
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            214
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2100
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              766
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            248259)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      275
;  :arith-bound-prop        3
;  :arith-conflicts         114
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         150
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            214
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               535
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2100
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              767
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            248278)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      275
;  :arith-bound-prop        3
;  :arith-conflicts         114
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         150
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            214
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               536
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2101
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              768
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            248588)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         115
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         151
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            215
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2102
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              769
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            248699)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         115
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         151
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            215
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2102
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              770
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            248710)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         115
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         151
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            215
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               537
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2102
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              771
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            248729)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      71
;  :arith-assert-lower      264
;  :arith-assert-upper      276
;  :arith-bound-prop        3
;  :arith-conflicts         115
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         151
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            215
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               538
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2103
;  :mk-clause               294
;  :num-allocs              4558361
;  :num-checks              772
;  :propagations            163
;  :quant-instantiations    64
;  :rlimit-count            249039)
(declare-const $k@78@05 $Perm)
(assert ($Perm.isReadVar $k@78@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      72
;  :arith-assert-lower      266
;  :arith-assert-upper      278
;  :arith-bound-prop        3
;  :arith-conflicts         116
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         152
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            216
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               539
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2108
;  :mk-clause               296
;  :num-allocs              4558361
;  :num-checks              773
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            249298)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@78@05 $Perm.No) (< $Perm.No $k@78@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      72
;  :arith-assert-lower      266
;  :arith-assert-upper      278
;  :arith-bound-prop        3
;  :arith-conflicts         116
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         152
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            216
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               540
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2108
;  :mk-clause               296
;  :num-allocs              4558361
;  :num-checks              774
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            249348)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4733
;  :arith-add-rows          137
;  :arith-assert-diseq      72
;  :arith-assert-lower      266
;  :arith-assert-upper      278
;  :arith-bound-prop        3
;  :arith-conflicts         116
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         152
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            216
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               541
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              281
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2109
;  :mk-clause               296
;  :num-allocs              4558361
;  :num-checks              775
;  :propagations            164
;  :quant-instantiations    64
;  :rlimit-count            249433)
(push) ; 7
(assert (not (not (= (+ $k@34@05 (- $k@15@05 $k@40@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          138
;  :arith-assert-diseq      72
;  :arith-assert-lower      266
;  :arith-assert-upper      279
;  :arith-bound-prop        3
;  :arith-conflicts         117
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         152
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            219
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               542
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2111
;  :mk-clause               298
;  :num-allocs              4558361
;  :num-checks              776
;  :propagations            165
;  :quant-instantiations    64
;  :rlimit-count            249545)
(assert (< $k@78@05 (+ $k@34@05 (- $k@15@05 $k@40@05))))
(assert (<= $Perm.No (- (+ $k@34@05 (- $k@15@05 $k@40@05)) $k@78@05)))
(assert (<= (- (+ $k@34@05 (- $k@15@05 $k@40@05)) $k@78@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@34@05 (- $k@15@05 $k@40@05)) $k@78@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          139
;  :arith-assert-diseq      72
;  :arith-assert-lower      268
;  :arith-assert-upper      281
;  :arith-bound-prop        3
;  :arith-conflicts         118
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         153
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            220
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               543
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2115
;  :mk-clause               298
;  :num-allocs              4558361
;  :num-checks              777
;  :propagations            165
;  :quant-instantiations    64
;  :rlimit-count            249843)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          139
;  :arith-assert-diseq      72
;  :arith-assert-lower      268
;  :arith-assert-upper      281
;  :arith-bound-prop        3
;  :arith-conflicts         118
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         153
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            220
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               543
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2115
;  :mk-clause               298
;  :num-allocs              4558361
;  :num-checks              778
;  :propagations            165
;  :quant-instantiations    64
;  :rlimit-count            249854)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@40@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          139
;  :arith-assert-diseq      72
;  :arith-assert-lower      268
;  :arith-assert-upper      281
;  :arith-bound-prop        3
;  :arith-conflicts         118
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         153
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            220
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               543
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2115
;  :mk-clause               298
;  :num-allocs              4558361
;  :num-checks              779
;  :propagations            165
;  :quant-instantiations    64
;  :rlimit-count            249873)
(declare-const $k@79@05 $Perm)
(assert ($Perm.isReadVar $k@79@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          139
;  :arith-assert-diseq      73
;  :arith-assert-lower      270
;  :arith-assert-upper      283
;  :arith-bound-prop        3
;  :arith-conflicts         119
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         154
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            221
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               544
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2120
;  :mk-clause               300
;  :num-allocs              4558361
;  :num-checks              780
;  :propagations            166
;  :quant-instantiations    64
;  :rlimit-count            250133)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          139
;  :arith-assert-diseq      73
;  :arith-assert-lower      270
;  :arith-assert-upper      283
;  :arith-bound-prop        3
;  :arith-conflicts         119
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         154
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            221
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               544
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2120
;  :mk-clause               300
;  :num-allocs              4558361
;  :num-checks              781
;  :propagations            166
;  :quant-instantiations    64
;  :rlimit-count            250144)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          139
;  :arith-assert-diseq      73
;  :arith-assert-lower      270
;  :arith-assert-upper      283
;  :arith-bound-prop        3
;  :arith-conflicts         119
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         154
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            221
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               544
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2120
;  :mk-clause               300
;  :num-allocs              4558361
;  :num-checks              782
;  :propagations            166
;  :quant-instantiations    64
;  :rlimit-count            250163)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@79@05 $Perm.No) (< $Perm.No $k@79@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          139
;  :arith-assert-diseq      73
;  :arith-assert-lower      270
;  :arith-assert-upper      283
;  :arith-bound-prop        3
;  :arith-conflicts         119
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         154
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            221
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               545
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2120
;  :mk-clause               300
;  :num-allocs              4558361
;  :num-checks              783
;  :propagations            166
;  :quant-instantiations    64
;  :rlimit-count            250213)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4734
;  :arith-add-rows          139
;  :arith-assert-diseq      73
;  :arith-assert-lower      270
;  :arith-assert-upper      283
;  :arith-bound-prop        3
;  :arith-conflicts         119
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         154
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            221
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               545
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              283
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2120
;  :mk-clause               300
;  :num-allocs              4558361
;  :num-checks              784
;  :propagations            166
;  :quant-instantiations    64
;  :rlimit-count            250224)
(push) ; 7
(assert (not (not
  (=
    (+
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
      $k@35@05)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          142
;  :arith-assert-diseq      73
;  :arith-assert-lower      270
;  :arith-assert-upper      284
;  :arith-bound-prop        3
;  :arith-conflicts         120
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         154
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            223
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               546
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2122
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              785
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            250419)
(assert (<
  $k@79@05
  (+
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
    $k@35@05)))
(assert (<=
  $Perm.No
  (-
    (+
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
      $k@35@05)
    $k@79@05)))
(assert (<=
  (-
    (+
      (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
      $k@35@05)
    $k@79@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@70@05)
        $k@35@05)
      $k@79@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      286
;  :arith-bound-prop        3
;  :arith-conflicts         121
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         155
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            225
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               547
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2126
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              786
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            250813)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      286
;  :arith-bound-prop        3
;  :arith-conflicts         121
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         155
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            225
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               547
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2126
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              787
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            250824)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      286
;  :arith-bound-prop        3
;  :arith-conflicts         121
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         155
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            225
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               547
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2126
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              788
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            250843)
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      286
;  :arith-bound-prop        3
;  :arith-conflicts         121
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         155
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            225
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               547
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2126
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              789
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            250854)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      287
;  :arith-bound-prop        3
;  :arith-conflicts         122
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         156
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            226
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               548
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2127
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              790
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            250965)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      288
;  :arith-bound-prop        3
;  :arith-conflicts         123
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         157
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            227
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               549
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2128
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              791
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            251076)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      289
;  :arith-bound-prop        3
;  :arith-conflicts         124
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         158
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            228
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               550
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2129
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              792
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            251187)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      289
;  :arith-bound-prop        3
;  :arith-conflicts         124
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         158
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            228
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               550
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2129
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              793
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            251198)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      73
;  :arith-assert-lower      272
;  :arith-assert-upper      289
;  :arith-bound-prop        3
;  :arith-conflicts         124
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         158
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            228
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               550
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2129
;  :mk-clause               302
;  :num-allocs              4558361
;  :num-checks              794
;  :propagations            167
;  :quant-instantiations    64
;  :rlimit-count            251217)
; [exec]
; label __return_get_bit
; [exec]
; sys__result := sys__local__result__3
; [exec]
; // assert
; assert acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__9: Int :: { diz.ALU_m.Main_process_state[i__9] } 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && acc(diz.ALU_m.Main_alu.ALU_data1, write) && acc(diz.ALU_m.Main_alu.ALU_data2, write) && acc(diz.ALU_m.Main_alu.ALU_result, write) && acc(diz.ALU_m.Main_alu.ALU_i, write) && acc(diz.ALU_m.Main_alu.ALU_bit, write) && acc(diz.ALU_m.Main_alu.ALU_divisor, write) && acc(diz.ALU_m.Main_alu.ALU_current_bit, write) && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m && diz.ALU_m.Main_alu == diz
(declare-const $k@80@05 $Perm)
(assert ($Perm.isReadVar $k@80@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@80@05 $Perm.No) (< $Perm.No $k@80@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4735
;  :arith-add-rows          147
;  :arith-assert-diseq      74
;  :arith-assert-lower      274
;  :arith-assert-upper      290
;  :arith-bound-prop        3
;  :arith-conflicts         124
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         158
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            228
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               551
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              285
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2133
;  :mk-clause               304
;  :num-allocs              4558361
;  :num-checks              795
;  :propagations            168
;  :quant-instantiations    64
;  :rlimit-count            251416)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          147
;  :arith-assert-diseq      74
;  :arith-assert-lower      274
;  :arith-assert-upper      291
;  :arith-bound-prop        3
;  :arith-conflicts         125
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         158
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            229
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               552
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2135
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              796
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            251527)
(assert (< $k@80@05 (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@80@05)))
(assert (<=
  (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@80@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)) $k@80@05))
  (not (= diz@5@05 $Ref.null))))
; [eval] diz.ALU_m != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      293
;  :arith-bound-prop        3
;  :arith-conflicts         126
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         159
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            230
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               553
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2139
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              797
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            251847)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      294
;  :arith-bound-prop        3
;  :arith-conflicts         127
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         160
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            231
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               554
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2140
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              798
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            251959)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      294
;  :arith-bound-prop        3
;  :arith-conflicts         127
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         160
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            231
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               555
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2141
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              799
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252044)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      295
;  :arith-bound-prop        3
;  :arith-conflicts         128
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         161
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            232
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               556
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2142
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              800
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252156)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      295
;  :arith-bound-prop        3
;  :arith-conflicts         128
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         161
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            232
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               557
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2143
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              801
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252241)
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      296
;  :arith-bound-prop        3
;  :arith-conflicts         129
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         162
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            233
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               558
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2144
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              802
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252353)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      296
;  :arith-bound-prop        3
;  :arith-conflicts         129
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         162
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            233
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               559
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2145
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              803
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252438)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      297
;  :arith-bound-prop        3
;  :arith-conflicts         130
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         163
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            234
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               560
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2146
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              804
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252550)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      297
;  :arith-bound-prop        3
;  :arith-conflicts         130
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         163
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            234
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               561
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2147
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              805
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252635)
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      298
;  :arith-bound-prop        3
;  :arith-conflicts         131
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         164
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            235
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               562
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2148
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              806
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252747)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      276
;  :arith-assert-upper      298
;  :arith-bound-prop        3
;  :arith-conflicts         131
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         164
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            235
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               563
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2149
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              807
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252832)
; [eval] (forall i__9: Int :: { diz.ALU_m.Main_process_state[i__9] } 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|)
(declare-const i__9@81@05 Int)
(push) ; 7
; [eval] 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__9 && i__9 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__9
(push) ; 8
; [then-branch: 36 | 0 <= i__9@81@05 | live]
; [else-branch: 36 | !(0 <= i__9@81@05) | live]
(push) ; 9
; [then-branch: 36 | 0 <= i__9@81@05]
(assert (<= 0 i__9@81@05))
; [eval] i__9 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      277
;  :arith-assert-upper      299
;  :arith-bound-prop        3
;  :arith-conflicts         132
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         165
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            236
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               564
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2151
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              808
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            252996)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4736
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      277
;  :arith-assert-upper      299
;  :arith-bound-prop        3
;  :arith-conflicts         132
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         165
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            236
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               565
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2152
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              809
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            253081)
(pop) ; 9
(push) ; 9
; [else-branch: 36 | !(0 <= i__9@81@05)]
(assert (not (<= 0 i__9@81@05)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 37 | i__9@81@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__9@81@05 | live]
; [else-branch: 37 | !(i__9@81@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__9@81@05) | live]
(push) ; 9
; [then-branch: 37 | i__9@81@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__9@81@05]
(assert (and
  (<
    i__9@81@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
  (<= 0 i__9@81@05)))
; [eval] diz.ALU_m.Main_process_state[i__9] == -1 || 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__9] == -1
; [eval] diz.ALU_m.Main_process_state[i__9]
(push) ; 10
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4737
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      278
;  :arith-assert-upper      301
;  :arith-bound-prop        3
;  :arith-conflicts         133
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         167
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            237
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               566
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2155
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              810
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            253306)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4737
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      278
;  :arith-assert-upper      301
;  :arith-bound-prop        3
;  :arith-conflicts         133
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         167
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            237
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2156
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              811
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            253391)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__9@81@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4737
;  :arith-add-rows          149
;  :arith-assert-diseq      74
;  :arith-assert-lower      278
;  :arith-assert-upper      301
;  :arith-bound-prop        3
;  :arith-conflicts         133
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         167
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            237
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               567
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2156
;  :mk-clause               306
;  :num-allocs              4558361
;  :num-checks              812
;  :propagations            169
;  :quant-instantiations    64
;  :rlimit-count            253400)
; [eval] -1
(push) ; 10
; [then-branch: 38 | First:(Second:(Second:(Second:($t@29@05))))[i__9@81@05] == -1 | live]
; [else-branch: 38 | First:(Second:(Second:(Second:($t@29@05))))[i__9@81@05] != -1 | live]
(push) ; 11
; [then-branch: 38 | First:(Second:(Second:(Second:($t@29@05))))[i__9@81@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__9@81@05)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 38 | First:(Second:(Second:(Second:($t@29@05))))[i__9@81@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__9@81@05)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__9] && diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__9]
; [eval] diz.ALU_m.Main_process_state[i__9]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4739
;  :arith-add-rows          149
;  :arith-assert-diseq      76
;  :arith-assert-lower      281
;  :arith-assert-upper      303
;  :arith-bound-prop        3
;  :arith-conflicts         134
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         168
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            238
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               568
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2164
;  :mk-clause               317
;  :num-allocs              4558361
;  :num-checks              813
;  :propagations            174
;  :quant-instantiations    66
;  :rlimit-count            253745)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4739
;  :arith-add-rows          149
;  :arith-assert-diseq      76
;  :arith-assert-lower      281
;  :arith-assert-upper      303
;  :arith-bound-prop        3
;  :arith-conflicts         134
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         168
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            238
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               569
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2165
;  :mk-clause               317
;  :num-allocs              4558361
;  :num-checks              814
;  :propagations            174
;  :quant-instantiations    66
;  :rlimit-count            253830)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__9@81@05 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4739
;  :arith-add-rows          149
;  :arith-assert-diseq      76
;  :arith-assert-lower      281
;  :arith-assert-upper      303
;  :arith-bound-prop        3
;  :arith-conflicts         134
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         168
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            238
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               569
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2165
;  :mk-clause               317
;  :num-allocs              4558361
;  :num-checks              815
;  :propagations            174
;  :quant-instantiations    66
;  :rlimit-count            253839)
(push) ; 12
; [then-branch: 39 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__9@81@05] | live]
; [else-branch: 39 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__9@81@05]) | live]
(push) ; 13
; [then-branch: 39 | 0 <= First:(Second:(Second:(Second:($t@29@05))))[i__9@81@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__9@81@05)))
; [eval] diz.ALU_m.Main_process_state[i__9] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__9]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      76
;  :arith-assert-lower      283
;  :arith-assert-upper      305
;  :arith-bound-prop        3
;  :arith-conflicts         135
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         170
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            239
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               570
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2170
;  :mk-clause               317
;  :num-allocs              4558361
;  :num-checks              816
;  :propagations            174
;  :quant-instantiations    66
;  :rlimit-count            254073)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      76
;  :arith-assert-lower      283
;  :arith-assert-upper      305
;  :arith-bound-prop        3
;  :arith-conflicts         135
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         170
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            239
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2171
;  :mk-clause               317
;  :num-allocs              4558361
;  :num-checks              817
;  :propagations            174
;  :quant-instantiations    66
;  :rlimit-count            254158)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__9@81@05 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      76
;  :arith-assert-lower      283
;  :arith-assert-upper      305
;  :arith-bound-prop        3
;  :arith-conflicts         135
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         170
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            239
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               571
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2171
;  :mk-clause               317
;  :num-allocs              4558361
;  :num-checks              818
;  :propagations            174
;  :quant-instantiations    66
;  :rlimit-count            254167)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      76
;  :arith-assert-lower      283
;  :arith-assert-upper      306
;  :arith-bound-prop        3
;  :arith-conflicts         136
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         171
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            240
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               572
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2172
;  :mk-clause               317
;  :num-allocs              4558361
;  :num-checks              819
;  :propagations            174
;  :quant-instantiations    66
;  :rlimit-count            254279)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@29@05)) $t@52@05)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      76
;  :arith-assert-lower      283
;  :arith-assert-upper      306
;  :arith-bound-prop        3
;  :arith-conflicts         136
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         171
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            240
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               573
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              287
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2173
;  :mk-clause               317
;  :num-allocs              4558361
;  :num-checks              820
;  :propagations            174
;  :quant-instantiations    66
;  :rlimit-count            254364)
(pop) ; 13
(push) ; 13
; [else-branch: 39 | !(0 <= First:(Second:(Second:(Second:($t@29@05))))[i__9@81@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
      i__9@81@05))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 37 | !(i__9@81@05 < |First:(Second:(Second:(Second:($t@29@05))))| && 0 <= i__9@81@05)]
(assert (not
  (and
    (<
      i__9@81@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
    (<= 0 i__9@81@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__9@81@05 Int)) (!
  (implies
    (and
      (<
        i__9@81@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__9@81@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__9@81@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__9@81@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__9@81@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__9@81@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      77
;  :arith-assert-lower      284
;  :arith-assert-upper      307
;  :arith-bound-prop        3
;  :arith-conflicts         136
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         172
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            240
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               574
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2181
;  :mk-clause               329
;  :num-allocs              4558361
;  :num-checks              821
;  :propagations            176
;  :quant-instantiations    68
;  :rlimit-count            254835)
(assert (forall ((i__9@81@05 Int)) (!
  (implies
    (and
      (<
        i__9@81@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))
      (<= 0 i__9@81@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
          i__9@81@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__9@81@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
            i__9@81@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))
    i__9@81@05))
  :qid |prog.l<no position>|)))
(declare-const $k@82@05 $Perm)
(assert ($Perm.isReadVar $k@82@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      78
;  :arith-assert-lower      286
;  :arith-assert-upper      309
;  :arith-bound-prop        3
;  :arith-conflicts         137
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         173
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            241
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               575
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2187
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              822
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            255457)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@82@05 $Perm.No) (< $Perm.No $k@82@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      78
;  :arith-assert-lower      286
;  :arith-assert-upper      309
;  :arith-bound-prop        3
;  :arith-conflicts         137
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         173
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            241
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2187
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              823
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            255507)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      78
;  :arith-assert-lower      286
;  :arith-assert-upper      309
;  :arith-bound-prop        3
;  :arith-conflicts         137
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         173
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            241
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               576
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2187
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              824
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            255518)
(push) ; 7
(assert (not (not (= (- $k@13@05 $k@38@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          149
;  :arith-assert-diseq      78
;  :arith-assert-lower      286
;  :arith-assert-upper      309
;  :arith-bound-prop        3
;  :arith-conflicts         137
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         173
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            241
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               577
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2188
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              825
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            255586)
(assert (< $k@82@05 (- $k@13@05 $k@38@05)))
(assert (<= $Perm.No (- (- $k@13@05 $k@38@05) $k@82@05)))
(assert (<= (- (- $k@13@05 $k@38@05) $k@82@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@13@05 $k@38@05) $k@82@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      311
;  :arith-bound-prop        3
;  :arith-conflicts         138
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         174
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            243
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2192
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              826
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            255885)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      311
;  :arith-bound-prop        3
;  :arith-conflicts         138
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         174
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            243
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2192
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              827
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            255896)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      311
;  :arith-bound-prop        3
;  :arith-conflicts         138
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         174
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            243
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               578
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2192
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              828
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            255915)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      312
;  :arith-bound-prop        3
;  :arith-conflicts         139
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         175
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            244
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2193
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              829
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256027)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      312
;  :arith-bound-prop        3
;  :arith-conflicts         139
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         175
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            244
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2193
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              830
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256038)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      312
;  :arith-bound-prop        3
;  :arith-conflicts         139
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         175
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            244
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2193
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              831
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256057)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      312
;  :arith-bound-prop        3
;  :arith-conflicts         139
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         175
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            244
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               579
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2193
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              832
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256068)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      313
;  :arith-bound-prop        3
;  :arith-conflicts         140
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         176
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            245
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               580
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2194
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              833
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256180)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      313
;  :arith-bound-prop        3
;  :arith-conflicts         140
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         176
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            245
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               580
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2194
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              834
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256191)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      313
;  :arith-bound-prop        3
;  :arith-conflicts         140
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         176
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            245
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               580
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2194
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              835
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256210)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      313
;  :arith-bound-prop        3
;  :arith-conflicts         140
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         176
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            245
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               580
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2194
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              836
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256221)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      314
;  :arith-bound-prop        3
;  :arith-conflicts         141
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         177
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            246
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2195
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              837
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256333)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      314
;  :arith-bound-prop        3
;  :arith-conflicts         141
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         177
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            246
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2195
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              838
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256344)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      314
;  :arith-bound-prop        3
;  :arith-conflicts         141
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         177
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            246
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2195
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              839
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256363)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      314
;  :arith-bound-prop        3
;  :arith-conflicts         141
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         177
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            246
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               581
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2195
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              840
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256374)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      315
;  :arith-bound-prop        3
;  :arith-conflicts         142
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         178
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            247
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2196
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              841
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256486)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      315
;  :arith-bound-prop        3
;  :arith-conflicts         142
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         178
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            247
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2196
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              842
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256497)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      315
;  :arith-bound-prop        3
;  :arith-conflicts         142
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         178
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            247
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2196
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              843
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256516)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      315
;  :arith-bound-prop        3
;  :arith-conflicts         142
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         178
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            247
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               582
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2196
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              844
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256527)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      316
;  :arith-bound-prop        3
;  :arith-conflicts         143
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         179
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            248
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2197
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              845
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256639)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      316
;  :arith-bound-prop        3
;  :arith-conflicts         143
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         179
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            248
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2197
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              846
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256650)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      316
;  :arith-bound-prop        3
;  :arith-conflicts         143
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         179
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            248
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2197
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              847
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256669)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      316
;  :arith-bound-prop        3
;  :arith-conflicts         143
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         179
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            248
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               583
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2197
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              848
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256680)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      317
;  :arith-bound-prop        3
;  :arith-conflicts         144
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         180
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            249
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2198
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              849
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256792)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      317
;  :arith-bound-prop        3
;  :arith-conflicts         144
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         180
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            249
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2198
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              850
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256803)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      317
;  :arith-bound-prop        3
;  :arith-conflicts         144
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         180
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            249
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2198
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              851
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256822)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      317
;  :arith-bound-prop        3
;  :arith-conflicts         144
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         180
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            249
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               584
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2198
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              852
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256833)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      318
;  :arith-bound-prop        3
;  :arith-conflicts         145
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         181
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            250
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               585
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2199
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              853
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256945)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      318
;  :arith-bound-prop        3
;  :arith-conflicts         145
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         181
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            250
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               585
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2199
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              854
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256956)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      318
;  :arith-bound-prop        3
;  :arith-conflicts         145
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         181
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            250
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               585
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2199
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              855
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256975)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      318
;  :arith-bound-prop        3
;  :arith-conflicts         145
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         181
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            250
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               585
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2199
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              856
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            256986)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      319
;  :arith-bound-prop        3
;  :arith-conflicts         146
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         182
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            251
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2200
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              857
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257098)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      319
;  :arith-bound-prop        3
;  :arith-conflicts         146
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         182
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            251
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2200
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              858
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257109)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      319
;  :arith-bound-prop        3
;  :arith-conflicts         146
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         182
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            251
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2200
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              859
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257128)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      319
;  :arith-bound-prop        3
;  :arith-conflicts         146
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         182
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            251
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               586
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2200
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              860
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257139)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      320
;  :arith-bound-prop        3
;  :arith-conflicts         147
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         183
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            252
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               587
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2201
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              861
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257251)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      320
;  :arith-bound-prop        3
;  :arith-conflicts         147
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         183
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            252
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               587
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2201
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              862
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257262)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      320
;  :arith-bound-prop        3
;  :arith-conflicts         147
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         183
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            252
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               587
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2201
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              863
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257281)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      320
;  :arith-bound-prop        3
;  :arith-conflicts         147
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         183
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            252
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               587
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2201
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              864
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257292)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      321
;  :arith-bound-prop        3
;  :arith-conflicts         148
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         184
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            253
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2202
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              865
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257404)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      321
;  :arith-bound-prop        3
;  :arith-conflicts         148
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         184
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            253
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2202
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              866
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257415)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      321
;  :arith-bound-prop        3
;  :arith-conflicts         148
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         184
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            253
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2202
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              867
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257434)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      321
;  :arith-bound-prop        3
;  :arith-conflicts         148
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         184
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            253
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               588
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2202
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              868
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257445)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      322
;  :arith-bound-prop        3
;  :arith-conflicts         149
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         185
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            254
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2203
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              869
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257557)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      322
;  :arith-bound-prop        3
;  :arith-conflicts         149
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         185
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            254
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2203
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              870
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257568)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      322
;  :arith-bound-prop        3
;  :arith-conflicts         149
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         185
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            254
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2203
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              871
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257587)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      322
;  :arith-bound-prop        3
;  :arith-conflicts         149
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         185
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            254
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               589
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2203
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              872
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257598)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      323
;  :arith-bound-prop        3
;  :arith-conflicts         150
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         186
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            255
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2204
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              873
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257710)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      323
;  :arith-bound-prop        3
;  :arith-conflicts         150
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         186
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            255
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2204
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              874
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257721)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      323
;  :arith-bound-prop        3
;  :arith-conflicts         150
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         186
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            255
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2204
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              875
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257740)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      323
;  :arith-bound-prop        3
;  :arith-conflicts         150
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         186
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            255
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               590
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2204
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              876
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257751)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      324
;  :arith-bound-prop        3
;  :arith-conflicts         151
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         187
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            256
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               591
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2205
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              877
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257863)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      324
;  :arith-bound-prop        3
;  :arith-conflicts         151
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         187
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            256
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               591
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2205
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              878
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257874)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      324
;  :arith-bound-prop        3
;  :arith-conflicts         151
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         187
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            256
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               591
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2205
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              879
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257893)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      78
;  :arith-assert-lower      288
;  :arith-assert-upper      324
;  :arith-bound-prop        3
;  :arith-conflicts         151
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         187
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            256
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               591
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2205
;  :mk-clause               331
;  :num-allocs              4558361
;  :num-checks              880
;  :propagations            177
;  :quant-instantiations    68
;  :rlimit-count            257904)
(declare-const $k@83@05 $Perm)
(assert ($Perm.isReadVar $k@83@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      79
;  :arith-assert-lower      290
;  :arith-assert-upper      326
;  :arith-bound-prop        3
;  :arith-conflicts         152
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         188
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            257
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               592
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2210
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              881
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258164)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@83@05 $Perm.No) (< $Perm.No $k@83@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      79
;  :arith-assert-lower      290
;  :arith-assert-upper      326
;  :arith-bound-prop        3
;  :arith-conflicts         152
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         188
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            257
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2210
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              882
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258214)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      79
;  :arith-assert-lower      290
;  :arith-assert-upper      326
;  :arith-bound-prop        3
;  :arith-conflicts         152
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         188
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            257
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               593
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2210
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              883
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258225)
(push) ; 7
(assert (not (not (= (- $k@14@05 $k@39@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          150
;  :arith-assert-diseq      79
;  :arith-assert-lower      290
;  :arith-assert-upper      326
;  :arith-bound-prop        3
;  :arith-conflicts         152
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         188
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            257
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               594
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2211
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              884
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258293)
(assert (< $k@83@05 (- $k@14@05 $k@39@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@39@05) $k@83@05)))
(assert (<= (- (- $k@14@05 $k@39@05) $k@83@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@39@05) $k@83@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      328
;  :arith-bound-prop        3
;  :arith-conflicts         153
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         189
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            259
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2215
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              885
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258592)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      328
;  :arith-bound-prop        3
;  :arith-conflicts         153
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         189
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            259
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2215
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              886
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258603)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      328
;  :arith-bound-prop        3
;  :arith-conflicts         153
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         189
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            259
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               595
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2215
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              887
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258622)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      329
;  :arith-bound-prop        3
;  :arith-conflicts         154
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         190
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            260
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2216
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              888
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258734)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      329
;  :arith-bound-prop        3
;  :arith-conflicts         154
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         190
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            260
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2216
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              889
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258745)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      329
;  :arith-bound-prop        3
;  :arith-conflicts         154
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         190
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            260
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               596
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2216
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              890
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            258764)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      329
;  :arith-bound-prop        3
;  :arith-conflicts         154
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         190
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            260
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               597
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2217
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              891
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259074)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      330
;  :arith-bound-prop        3
;  :arith-conflicts         155
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         191
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            261
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2218
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              892
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259186)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      330
;  :arith-bound-prop        3
;  :arith-conflicts         155
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         191
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            261
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2218
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              893
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259197)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      330
;  :arith-bound-prop        3
;  :arith-conflicts         155
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         191
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            261
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               598
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2218
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              894
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259216)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      330
;  :arith-bound-prop        3
;  :arith-conflicts         155
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         191
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            261
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               599
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2219
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              895
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259526)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      331
;  :arith-bound-prop        3
;  :arith-conflicts         156
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         192
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            262
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2220
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              896
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259638)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      331
;  :arith-bound-prop        3
;  :arith-conflicts         156
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         192
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            262
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2220
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              897
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259649)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      331
;  :arith-bound-prop        3
;  :arith-conflicts         156
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         192
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            262
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               600
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2220
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              898
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259668)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      331
;  :arith-bound-prop        3
;  :arith-conflicts         156
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         192
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            262
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               601
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2221
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              899
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            259978)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      332
;  :arith-bound-prop        3
;  :arith-conflicts         157
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         193
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            263
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2222
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              900
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            260090)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      332
;  :arith-bound-prop        3
;  :arith-conflicts         157
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         193
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            263
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2222
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              901
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            260101)
(push) ; 7
(assert (not (< $Perm.No (- $k@14@05 $k@39@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      332
;  :arith-bound-prop        3
;  :arith-conflicts         157
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         193
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            263
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               602
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2222
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              902
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            260120)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05)))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      79
;  :arith-assert-lower      292
;  :arith-assert-upper      332
;  :arith-bound-prop        3
;  :arith-conflicts         157
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         193
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            263
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               603
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2223
;  :mk-clause               333
;  :num-allocs              4558361
;  :num-checks              903
;  :propagations            178
;  :quant-instantiations    68
;  :rlimit-count            260430)
(declare-const $k@84@05 $Perm)
(assert ($Perm.isReadVar $k@84@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      80
;  :arith-assert-lower      294
;  :arith-assert-upper      334
;  :arith-bound-prop        3
;  :arith-conflicts         158
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         194
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            264
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               604
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2228
;  :mk-clause               335
;  :num-allocs              4558361
;  :num-checks              904
;  :propagations            179
;  :quant-instantiations    68
;  :rlimit-count            260691)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@84@05 $Perm.No) (< $Perm.No $k@84@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      80
;  :arith-assert-lower      294
;  :arith-assert-upper      334
;  :arith-bound-prop        3
;  :arith-conflicts         158
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         194
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            264
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               605
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2228
;  :mk-clause               335
;  :num-allocs              4558361
;  :num-checks              905
;  :propagations            179
;  :quant-instantiations    68
;  :rlimit-count            260741)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      80
;  :arith-assert-lower      294
;  :arith-assert-upper      334
;  :arith-bound-prop        3
;  :arith-conflicts         158
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         194
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            264
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               605
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2228
;  :mk-clause               335
;  :num-allocs              4558361
;  :num-checks              906
;  :propagations            179
;  :quant-instantiations    68
;  :rlimit-count            260752)
(push) ; 7
(assert (not (not (= (- $k@15@05 $k@40@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          151
;  :arith-assert-diseq      80
;  :arith-assert-lower      294
;  :arith-assert-upper      334
;  :arith-bound-prop        3
;  :arith-conflicts         158
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         194
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            264
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               606
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2229
;  :mk-clause               335
;  :num-allocs              4558361
;  :num-checks              907
;  :propagations            179
;  :quant-instantiations    68
;  :rlimit-count            260820)
(assert (< $k@84@05 (- $k@15@05 $k@40@05)))
(assert (<= $Perm.No (- (- $k@15@05 $k@40@05) $k@84@05)))
(assert (<= (- (- $k@15@05 $k@40@05) $k@84@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@15@05 $k@40@05) $k@84@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05)))
      $Ref.null))))
; [eval] diz.ALU_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      80
;  :arith-assert-lower      296
;  :arith-assert-upper      336
;  :arith-bound-prop        3
;  :arith-conflicts         159
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         195
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            265
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               607
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2233
;  :mk-clause               335
;  :num-allocs              4558361
;  :num-checks              908
;  :propagations            179
;  :quant-instantiations    68
;  :rlimit-count            261113)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      80
;  :arith-assert-lower      296
;  :arith-assert-upper      336
;  :arith-bound-prop        3
;  :arith-conflicts         159
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         195
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            265
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               607
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2233
;  :mk-clause               335
;  :num-allocs              4558361
;  :num-checks              909
;  :propagations            179
;  :quant-instantiations    68
;  :rlimit-count            261124)
(push) ; 7
(assert (not (< $Perm.No (- $k@15@05 $k@40@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      80
;  :arith-assert-lower      296
;  :arith-assert-upper      336
;  :arith-bound-prop        3
;  :arith-conflicts         159
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         195
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            265
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               607
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2233
;  :mk-clause               335
;  :num-allocs              4558361
;  :num-checks              910
;  :propagations            179
;  :quant-instantiations    68
;  :rlimit-count            261143)
(declare-const $k@85@05 $Perm)
(assert ($Perm.isReadVar $k@85@05 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      81
;  :arith-assert-lower      298
;  :arith-assert-upper      338
;  :arith-bound-prop        3
;  :arith-conflicts         160
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         196
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            266
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               608
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2238
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              911
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261403)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      81
;  :arith-assert-lower      298
;  :arith-assert-upper      338
;  :arith-bound-prop        3
;  :arith-conflicts         160
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         196
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            266
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               608
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2238
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              912
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261414)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      81
;  :arith-assert-lower      298
;  :arith-assert-upper      338
;  :arith-bound-prop        3
;  :arith-conflicts         160
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         196
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            266
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               608
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2238
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              913
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261433)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@85@05 $Perm.No) (< $Perm.No $k@85@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      81
;  :arith-assert-lower      298
;  :arith-assert-upper      338
;  :arith-bound-prop        3
;  :arith-conflicts         160
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         196
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            266
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               609
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2238
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              914
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261483)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      81
;  :arith-assert-lower      298
;  :arith-assert-upper      338
;  :arith-bound-prop        3
;  :arith-conflicts         160
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         196
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            266
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               609
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2238
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              915
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261494)
(push) ; 7
(assert (not (not (= $k@35@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          152
;  :arith-assert-diseq      81
;  :arith-assert-lower      298
;  :arith-assert-upper      338
;  :arith-bound-prop        3
;  :arith-conflicts         160
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         196
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            266
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               609
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2238
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              916
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261505)
(assert (< $k@85@05 $k@35@05))
(assert (<= $Perm.No (- $k@35@05 $k@85@05)))
(assert (<= (- $k@35@05 $k@85@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@35@05 $k@85@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05))))))))))
      $Ref.null))))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      340
;  :arith-bound-prop        3
;  :arith-conflicts         161
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         197
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            269
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               610
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2242
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              917
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261852)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      340
;  :arith-bound-prop        3
;  :arith-conflicts         161
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         197
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            269
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               610
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2242
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              918
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261863)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      340
;  :arith-bound-prop        3
;  :arith-conflicts         161
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         197
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            269
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               610
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2242
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              919
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261882)
(push) ; 7
(assert (not (=
  diz@5@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@05))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      340
;  :arith-bound-prop        3
;  :arith-conflicts         161
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         197
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            269
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               610
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2242
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              920
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            261893)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      341
;  :arith-bound-prop        3
;  :arith-conflicts         162
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         198
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            270
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               611
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2243
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              921
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            262004)
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      342
;  :arith-bound-prop        3
;  :arith-conflicts         163
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         199
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            271
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               612
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2244
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              922
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            262115)
; [eval] diz.ALU_m.Main_alu == diz
(push) ; 7
(assert (not (< $Perm.No (+ (+ $k@30@05 (- $k@16@05 $k@41@05)) (- $k@11@05 $k@36@05)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      343
;  :arith-bound-prop        3
;  :arith-conflicts         164
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         200
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            272
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               613
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2245
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              923
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            262226)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@10@05))) $t@52@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      343
;  :arith-bound-prop        3
;  :arith-conflicts         164
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         200
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            272
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               613
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2245
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              924
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            262237)
(push) ; 7
(assert (not (< $Perm.No (- $k@13@05 $k@38@05))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4741
;  :arith-add-rows          155
;  :arith-assert-diseq      81
;  :arith-assert-lower      300
;  :arith-assert-upper      343
;  :arith-bound-prop        3
;  :arith-conflicts         164
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         200
;  :arith-gcd-tests         3
;  :arith-grobner           26
;  :arith-max-min           21
;  :arith-nonlinear-horner  11
;  :arith-offset-eqs        14
;  :arith-patches           3
;  :arith-patches_succ      3
;  :arith-pivots            272
;  :arith-pseudo-nonlinear  4
;  :binary-propagations     16
;  :conflicts               613
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 1369
;  :datatype-occurs-check   126
;  :datatype-splits         809
;  :decisions               1327
;  :del-clause              310
;  :final-checks            80
;  :interface-eqs           2
;  :max-generation          1
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             2245
;  :mk-clause               337
;  :num-allocs              4558361
;  :num-checks              925
;  :propagations            180
;  :quant-instantiations    68
;  :rlimit-count            262256)
; [exec]
; inhale false
(pop) ; 6
(push) ; 6
; [else-branch: 31 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))))) != 0]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))))
    0)))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 21 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@29@05)))))))))))))))))))) < pos@8@05]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@05)))))))))))))))))))))
  pos@8@05))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
