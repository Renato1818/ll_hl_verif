(get-info :version)
; (:version "4.8.6")
; Started: 2024-05-21 12:59:28
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Nand_gate<TYPE> TYPE)
(declare-const class_Read<TYPE> TYPE)
(declare-const class_Write_a<TYPE> TYPE)
(declare-const class_Write_b<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Read_m: Ref]
(declare-fun $FVF.domain_Read_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Read_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Read_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Read_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Read_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Read_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Write_a_m: Ref]
(declare-fun $FVF.domain_Write_a_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Write_a_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Write_a_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Write_a_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Write_a_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Write_a_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Write_b_m: Ref]
(declare-fun $FVF.domain_Write_b_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Write_b_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Write_b_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Write_b_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Write_b_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Write_b_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Read_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Read_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_a_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_a_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_b_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_b_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Main<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Nand_gate<TYPE> class_Read<TYPE> class_Write_a<TYPE> class_Write_b<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Nand_gate<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Read<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Write_a<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Write_b<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Read_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Read_m vs) ($FVF.domain_Read_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Read_m vs))
            (= ($FVF.lookup_Read_m vs x) ($FVF.lookup_Read_m ws x)))
          :pattern (($FVF.lookup_Read_m vs x) ($FVF.lookup_Read_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Read_m pm r))
    :pattern ($FVF.perm_Read_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Read_m f r) true)
    :pattern ($FVF.loc_Read_m f r))))
; /field_value_functions_axioms.smt2 [Write_a_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Write_a_m vs) ($FVF.domain_Write_a_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Write_a_m vs))
            (= ($FVF.lookup_Write_a_m vs x) ($FVF.lookup_Write_a_m ws x)))
          :pattern (($FVF.lookup_Write_a_m vs x) ($FVF.lookup_Write_a_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Write_a_m pm r))
    :pattern ($FVF.perm_Write_a_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Write_a_m f r) true)
    :pattern ($FVF.loc_Write_a_m f r))))
; /field_value_functions_axioms.smt2 [Write_b_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Write_b_m vs) ($FVF.domain_Write_b_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Write_b_m vs))
            (= ($FVF.lookup_Write_b_m vs x) ($FVF.lookup_Write_b_m ws x)))
          :pattern (($FVF.lookup_Write_b_m vs x) ($FVF.lookup_Write_b_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Write_b_m pm r))
    :pattern ($FVF.perm_Write_b_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Write_b_m f r) true)
    :pattern ($FVF.loc_Write_b_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@0@00 vals@1@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (let ((result@2@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))) (implies
    (and (not (= diz@0@00 $Ref.null)) (= (Seq_length vals@1@00) 3))
    (and
      (and
        (and
          (or
            (< (Seq_index vals@1@00 0) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 0)))
          (or
            (< (Seq_index vals@1@00 1) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 1))))
        (or
          (< (Seq_index vals@1@00 2) (- 0 1))
          (<= result@2@00 (Seq_index vals@1@00 2))))
      (and
        (implies
          (and
            (and
              (< (Seq_index vals@1@00 0) (- 0 1))
              (< (Seq_index vals@1@00 1) (- 0 1)))
            (< (Seq_index vals@1@00 2) (- 0 1)))
          (= result@2@00 0))
        (implies
          (or
            (or
              (<= (- 0 1) (Seq_index vals@1@00 0))
              (<= (- 0 1) (Seq_index vals@1@00 1)))
            (<= (- 0 1) (Seq_index vals@1@00 2)))
          (or
            (or
              (and
                (<= (- 0 1) (Seq_index vals@1@00 0))
                (= result@2@00 (Seq_index vals@1@00 0)))
              (and
                (<= (- 0 1) (Seq_index vals@1@00 1))
                (= result@2@00 (Seq_index vals@1@00 1))))
            (and
              (<= (- 0 1) (Seq_index vals@1@00 2))
              (= result@2@00 (Seq_index vals@1@00 2)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00)
    (instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@3@00 u@4@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (let ((result@5@00 (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))) (=
    result@5@00
    (or (= t@3@00 u@4@00) (= (directSuperclass<TYPE> t@3@00) u@4@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (= (new_frac%limited s@$ x@6@00) (new_frac s@$ x@6@00))
  :pattern ((new_frac s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (new_frac%stateless x@6@00)
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (let ((result@7@00 (new_frac%limited s@$ x@6@00))) (implies
    (and (< $Perm.No x@6@00) (<= x@6@00 $Perm.Write))
    (= (frac_val<Perm> result@7@00) x@6@00)))
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@8@00) (new_zfrac s@$ x@8@00))
  :pattern ((new_zfrac s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (new_zfrac%stateless x@8@00)
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (let ((result@9@00 (new_zfrac%limited s@$ x@8@00))) (implies
    (and (<= $Perm.No x@8@00) (<= x@8@00 $Perm.Write))
    (= (zfrac_val<Perm> result@9@00) x@8@00)))
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Main___contract_unsatisfiable__Main_EncodedGlobalVariables ----------
(declare-const diz@0@03 $Ref)
(declare-const globals@1@03 $Ref)
(declare-const diz@2@03 $Ref)
(declare-const globals@3@03 $Ref)
(push) ; 1
(declare-const $t@4@03 $Snap)
(assert (= $t@4@03 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@2@03 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@5@03 $Snap)
(assert (= $t@5@03 ($Snap.combine ($Snap.first $t@5@03) ($Snap.second $t@5@03))))
(assert (= ($Snap.first $t@5@03) $Snap.unit))
(assert (= ($Snap.second $t@5@03) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Main_immediate_wakeup_EncodedGlobalVariables ----------
(declare-const diz@6@03 $Ref)
(declare-const globals@7@03 $Ref)
(declare-const diz@8@03 $Ref)
(declare-const globals@9@03 $Ref)
(push) ; 1
(declare-const $t@10@03 $Snap)
(assert (= $t@10@03 ($Snap.combine ($Snap.first $t@10@03) ($Snap.second $t@10@03))))
(assert (= ($Snap.first $t@10@03) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@8@03 $Ref.null)))
(assert (=
  ($Snap.second $t@10@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@10@03))
    ($Snap.second ($Snap.second $t@10@03)))))
(assert (=
  ($Snap.second ($Snap.second $t@10@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@10@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@10@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@10@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@10@03))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03)))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@11@03 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | 0 <= i@11@03 | live]
; [else-branch: 0 | !(0 <= i@11@03) | live]
(push) ; 4
; [then-branch: 0 | 0 <= i@11@03]
(assert (<= 0 i@11@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(0 <= i@11@03)]
(assert (not (<= 0 i@11@03)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 1 | i@11@03 < |First:(Second:(Second:($t@10@03)))| && 0 <= i@11@03 | live]
; [else-branch: 1 | !(i@11@03 < |First:(Second:(Second:($t@10@03)))| && 0 <= i@11@03) | live]
(push) ; 4
; [then-branch: 1 | i@11@03 < |First:(Second:(Second:($t@10@03)))| && 0 <= i@11@03]
(assert (and
  (<
    i@11@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))
  (<= 0 i@11@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@11@03 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             54
;  :arith-assert-diseq    2
;  :arith-assert-lower    8
;  :arith-assert-upper    4
;  :arith-eq-adapter      5
;  :binary-propagations   22
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.66
;  :mk-bool-var           268
;  :mk-clause             7
;  :num-allocs            3233364
;  :num-checks            6
;  :propagations          24
;  :quant-instantiations  7
;  :rlimit-count          100825)
; [eval] -1
(push) ; 5
; [then-branch: 2 | First:(Second:(Second:($t@10@03)))[i@11@03] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:($t@10@03)))[i@11@03] != -1 | live]
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:($t@10@03)))[i@11@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    i@11@03)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 2 | First:(Second:(Second:($t@10@03)))[i@11@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      i@11@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 7
(assert (not (>= i@11@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             54
;  :arith-assert-diseq    2
;  :arith-assert-lower    8
;  :arith-assert-upper    4
;  :arith-eq-adapter      5
;  :binary-propagations   22
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.76
;  :mk-bool-var           269
;  :mk-clause             7
;  :num-allocs            3343045
;  :num-checks            7
;  :propagations          24
;  :quant-instantiations  7
;  :rlimit-count          100988)
(push) ; 7
; [then-branch: 3 | 0 <= First:(Second:(Second:($t@10@03)))[i@11@03] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:($t@10@03)))[i@11@03]) | live]
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:($t@10@03)))[i@11@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    i@11@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@11@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             54
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    4
;  :arith-eq-adapter      6
;  :binary-propagations   22
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.76
;  :mk-bool-var           272
;  :mk-clause             8
;  :num-allocs            3343045
;  :num-checks            8
;  :propagations          24
;  :quant-instantiations  7
;  :rlimit-count          101102)
; [eval] |diz.Main_event_state|
(pop) ; 8
(push) ; 8
; [else-branch: 3 | !(0 <= First:(Second:(Second:($t@10@03)))[i@11@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      i@11@03))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(i@11@03 < |First:(Second:(Second:($t@10@03)))| && 0 <= i@11@03)]
(assert (not
  (and
    (<
      i@11@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))
    (<= 0 i@11@03))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@11@03 Int)) (!
  (implies
    (and
      (<
        i@11@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))
      (<= 0 i@11@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          i@11@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
            i@11@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
            i@11@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    i@11@03))
  :qid |prog.l<no position>|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@12@03 $Snap)
(assert (= $t@12@03 ($Snap.combine ($Snap.first $t@12@03) ($Snap.second $t@12@03))))
(assert (=
  ($Snap.second $t@12@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@03))
    ($Snap.second ($Snap.second $t@12@03)))))
(assert (=
  ($Snap.second ($Snap.second $t@12@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@03))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@13@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@13@03 | live]
; [else-branch: 4 | !(0 <= i@13@03) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@13@03]
(assert (<= 0 i@13@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@13@03)]
(assert (not (<= 0 i@13@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@13@03 < |First:(Second:($t@12@03))| && 0 <= i@13@03 | live]
; [else-branch: 5 | !(i@13@03 < |First:(Second:($t@12@03))| && 0 <= i@13@03) | live]
(push) ; 5
; [then-branch: 5 | i@13@03 < |First:(Second:($t@12@03))| && 0 <= i@13@03]
(assert (and
  (<
    i@13@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))
  (<= 0 i@13@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@13@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               99
;  :arith-assert-diseq      3
;  :arith-assert-lower      16
;  :arith-assert-upper      7
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              7
;  :final-checks            7
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.76
;  :mk-bool-var             297
;  :mk-clause               8
;  :num-allocs              3343045
;  :num-checks              10
;  :propagations            24
;  :quant-instantiations    11
;  :rlimit-count            102816)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:($t@12@03))[i@13@03] == -1 | live]
; [else-branch: 6 | First:(Second:($t@12@03))[i@13@03] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:($t@12@03))[i@13@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
    i@13@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:($t@12@03))[i@13@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
      i@13@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@13@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               99
;  :arith-assert-diseq      3
;  :arith-assert-lower      16
;  :arith-assert-upper      7
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              7
;  :final-checks            7
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.76
;  :mk-bool-var             298
;  :mk-clause               8
;  :num-allocs              3343045
;  :num-checks              11
;  :propagations            24
;  :quant-instantiations    11
;  :rlimit-count            102967)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:($t@12@03))[i@13@03] | live]
; [else-branch: 7 | !(0 <= First:(Second:($t@12@03))[i@13@03]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:($t@12@03))[i@13@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
    i@13@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@13@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               99
;  :arith-assert-diseq      4
;  :arith-assert-lower      19
;  :arith-assert-upper      7
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              7
;  :final-checks            7
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.76
;  :mk-bool-var             301
;  :mk-clause               9
;  :num-allocs              3343045
;  :num-checks              12
;  :propagations            24
;  :quant-instantiations    11
;  :rlimit-count            103070)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:($t@12@03))[i@13@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
      i@13@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@13@03 < |First:(Second:($t@12@03))| && 0 <= i@13@03)]
(assert (not
  (and
    (<
      i@13@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))
    (<= 0 i@13@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@13@03 Int)) (!
  (implies
    (and
      (<
        i@13@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))
      (<= 0 i@13@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
          i@13@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
            i@13@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
            i@13@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
    i@13@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               117
;  :arith-assert-diseq      4
;  :arith-assert-lower      20
;  :arith-assert-upper      8
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     22
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            7
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.76
;  :mk-bool-var             321
;  :mk-clause               19
;  :num-allocs              3343045
;  :num-checks              13
;  :propagations            28
;  :quant-instantiations    13
;  :rlimit-count            104131)
(push) ; 3
; [then-branch: 8 | 0 <= First:(Second:(Second:($t@10@03)))[0] | live]
; [else-branch: 8 | !(0 <= First:(Second:(Second:($t@10@03)))[0]) | live]
(push) ; 4
; [then-branch: 8 | 0 <= First:(Second:(Second:($t@10@03)))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               117
;  :arith-assert-diseq      4
;  :arith-assert-lower      21
;  :arith-assert-upper      8
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     22
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            7
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.76
;  :mk-bool-var             327
;  :mk-clause               25
;  :num-allocs              3343045
;  :num-checks              14
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            104294)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               117
;  :arith-assert-diseq      4
;  :arith-assert-lower      21
;  :arith-assert-upper      8
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     22
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            7
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.76
;  :mk-bool-var             327
;  :mk-clause               25
;  :num-allocs              3343045
;  :num-checks              15
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            104303)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               118
;  :arith-assert-diseq      4
;  :arith-assert-lower      22
;  :arith-assert-upper      9
;  :arith-conflicts         1
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     22
;  :conflicts               1
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            7
;  :max-generation          1
;  :max-memory              3.96
;  :memory                  3.76
;  :mk-bool-var             327
;  :mk-clause               25
;  :num-allocs              3343045
;  :num-checks              16
;  :propagations            32
;  :quant-instantiations    14
;  :rlimit-count            104411)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(0 <= First:(Second:(Second:($t@10@03)))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               149
;  :arith-assert-diseq      7
;  :arith-assert-lower      32
;  :arith-assert-upper      15
;  :arith-conflicts         1
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 9
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               11
;  :del-clause              31
;  :final-checks            10
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             357
;  :mk-clause               42
;  :num-allocs              3455346
;  :num-checks              17
;  :propagations            39
;  :quant-instantiations    17
;  :rlimit-count            105233
;  :time                    0.01)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               177
;  :arith-assert-diseq      11
;  :arith-assert-lower      40
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   19
;  :datatype-splits         9
;  :decisions               20
;  :del-clause              64
;  :final-checks            12
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             384
;  :mk-clause               75
;  :num-allocs              3455346
;  :num-checks              18
;  :propagations            51
;  :quant-instantiations    20
;  :rlimit-count            105990
;  :time                    0.00)
; [then-branch: 9 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[0]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[0] | live]
; [else-branch: 9 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[0]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[0]) | live]
(push) ; 4
; [then-branch: 9 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[0]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[0]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               178
;  :arith-assert-diseq      11
;  :arith-assert-lower      41
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         3
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   19
;  :datatype-splits         9
;  :decisions               20
;  :del-clause              64
;  :final-checks            12
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             391
;  :mk-clause               81
;  :num-allocs              3455346
;  :num-checks              19
;  :propagations            51
;  :quant-instantiations    21
;  :rlimit-count            106194)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[0]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               184
;  :arith-assert-diseq      11
;  :arith-assert-lower      41
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         3
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   19
;  :datatype-splits         9
;  :decisions               20
;  :del-clause              70
;  :final-checks            12
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             396
;  :mk-clause               82
;  :num-allocs              3455346
;  :num-checks              20
;  :propagations            51
;  :quant-instantiations    21
;  :rlimit-count            106687)
(push) ; 3
; [then-branch: 10 | 0 <= First:(Second:(Second:($t@10@03)))[1] | live]
; [else-branch: 10 | !(0 <= First:(Second:(Second:($t@10@03)))[1]) | live]
(push) ; 4
; [then-branch: 10 | 0 <= First:(Second:(Second:($t@10@03)))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               184
;  :arith-assert-diseq      11
;  :arith-assert-lower      42
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   19
;  :datatype-splits         9
;  :decisions               20
;  :del-clause              70
;  :final-checks            12
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             402
;  :mk-clause               88
;  :num-allocs              3455346
;  :num-checks              21
;  :propagations            51
;  :quant-instantiations    22
;  :rlimit-count            106850)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               184
;  :arith-assert-diseq      11
;  :arith-assert-lower      42
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   19
;  :datatype-splits         9
;  :decisions               20
;  :del-clause              70
;  :final-checks            12
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             402
;  :mk-clause               88
;  :num-allocs              3455346
;  :num-checks              22
;  :propagations            51
;  :quant-instantiations    22
;  :rlimit-count            106859)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               185
;  :arith-assert-diseq      11
;  :arith-assert-lower      43
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               3
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   19
;  :datatype-splits         9
;  :decisions               20
;  :del-clause              70
;  :final-checks            12
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             402
;  :mk-clause               88
;  :num-allocs              3455346
;  :num-checks              23
;  :propagations            55
;  :quant-instantiations    22
;  :rlimit-count            106967)
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(0 <= First:(Second:(Second:($t@10@03)))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               220
;  :arith-assert-diseq      15
;  :arith-assert-lower      58
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         4
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 21
;  :datatype-occurs-check   23
;  :datatype-splits         12
;  :decisions               29
;  :del-clause              101
;  :final-checks            14
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             448
;  :mk-clause               113
;  :num-allocs              3455346
;  :num-checks              24
;  :propagations            65
;  :quant-instantiations    28
;  :rlimit-count            107916
;  :time                    0.00)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               246
;  :arith-assert-diseq      15
;  :arith-assert-lower      60
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         4
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   27
;  :datatype-splits         15
;  :decisions               37
;  :del-clause              106
;  :final-checks            16
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             463
;  :mk-clause               118
;  :num-allocs              3455346
;  :num-checks              25
;  :propagations            67
;  :quant-instantiations    30
;  :rlimit-count            108592
;  :time                    0.01)
; [then-branch: 11 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[1]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[1] | live]
; [else-branch: 11 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[1]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[1]) | live]
(push) ; 4
; [then-branch: 11 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[1]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[1]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               247
;  :arith-assert-diseq      15
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         4
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   27
;  :datatype-splits         15
;  :decisions               37
;  :del-clause              106
;  :final-checks            16
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             470
;  :mk-clause               124
;  :num-allocs              3455346
;  :num-checks              26
;  :propagations            67
;  :quant-instantiations    31
;  :rlimit-count            108796)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 11 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[1]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 ==> diz.Main_process_state[2] == -1
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               253
;  :arith-assert-diseq      15
;  :arith-assert-lower      61
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         4
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   27
;  :datatype-splits         15
;  :decisions               37
;  :del-clause              112
;  :final-checks            16
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             475
;  :mk-clause               125
;  :num-allocs              3455346
;  :num-checks              27
;  :propagations            67
;  :quant-instantiations    31
;  :rlimit-count            109299
;  :time                    0.00)
(push) ; 3
; [then-branch: 12 | 0 <= First:(Second:(Second:($t@10@03)))[2] | live]
; [else-branch: 12 | !(0 <= First:(Second:(Second:($t@10@03)))[2]) | live]
(push) ; 4
; [then-branch: 12 | 0 <= First:(Second:(Second:($t@10@03)))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               253
;  :arith-assert-diseq      15
;  :arith-assert-lower      62
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         4
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   27
;  :datatype-splits         15
;  :decisions               37
;  :del-clause              112
;  :final-checks            16
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             481
;  :mk-clause               131
;  :num-allocs              3455346
;  :num-checks              28
;  :propagations            67
;  :quant-instantiations    32
;  :rlimit-count            109462)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               253
;  :arith-assert-diseq      15
;  :arith-assert-lower      62
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         4
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   27
;  :datatype-splits         15
;  :decisions               37
;  :del-clause              112
;  :final-checks            16
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             481
;  :mk-clause               131
;  :num-allocs              3455346
;  :num-checks              29
;  :propagations            67
;  :quant-instantiations    32
;  :rlimit-count            109471)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               254
;  :arith-assert-diseq      15
;  :arith-assert-lower      63
;  :arith-assert-upper      38
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         4
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               5
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   27
;  :datatype-splits         15
;  :decisions               37
;  :del-clause              112
;  :final-checks            16
;  :interface-eqs           1
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             481
;  :mk-clause               131
;  :num-allocs              3455346
;  :num-checks              30
;  :propagations            71
;  :quant-instantiations    32
;  :rlimit-count            109579)
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !(0 <= First:(Second:(Second:($t@10@03)))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               332
;  :arith-assert-diseq      26
;  :arith-assert-lower      93
;  :arith-assert-upper      67
;  :arith-conflicts         3
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         7
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   33
;  :datatype-splits         21
;  :decisions               55
;  :del-clause              180
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             593
;  :mk-clause               193
;  :num-allocs              3455346
;  :num-checks              31
;  :propagations            94
;  :quant-instantiations    45
;  :rlimit-count            110960
;  :time                    0.00)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               368
;  :arith-assert-diseq      30
;  :arith-assert-lower      103
;  :arith-assert-upper      78
;  :arith-conflicts         3
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   37
;  :datatype-splits         24
;  :decisions               67
;  :del-clause              219
;  :final-checks            24
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             632
;  :mk-clause               232
;  :num-allocs              3455346
;  :num-checks              32
;  :propagations            109
;  :quant-instantiations    50
;  :rlimit-count            111862
;  :time                    0.03)
; [then-branch: 13 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[2]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[2] | live]
; [else-branch: 13 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[2]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[2]) | live]
(push) ; 4
; [then-branch: 13 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[2]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[2]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      2))))
; [eval] diz.Main_process_state[2] == -1
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               369
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      78
;  :arith-conflicts         3
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   37
;  :datatype-splits         24
;  :decisions               67
;  :del-clause              219
;  :final-checks            24
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             639
;  :mk-clause               238
;  :num-allocs              3455346
;  :num-checks              33
;  :propagations            109
;  :quant-instantiations    51
;  :rlimit-count            112066)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 13 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[2]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[2])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
      2)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               375
;  :arith-assert-diseq      30
;  :arith-assert-lower      104
;  :arith-assert-upper      78
;  :arith-conflicts         3
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   37
;  :datatype-splits         24
;  :decisions               67
;  :del-clause              225
;  :final-checks            24
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             644
;  :mk-clause               239
;  :num-allocs              3455346
;  :num-checks              34
;  :propagations            109
;  :quant-instantiations    51
;  :rlimit-count            112579)
(push) ; 3
; [then-branch: 14 | 0 <= First:(Second:(Second:($t@10@03)))[0] | live]
; [else-branch: 14 | !(0 <= First:(Second:(Second:($t@10@03)))[0]) | live]
(push) ; 4
; [then-branch: 14 | 0 <= First:(Second:(Second:($t@10@03)))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               375
;  :arith-assert-diseq      30
;  :arith-assert-lower      105
;  :arith-assert-upper      78
;  :arith-conflicts         3
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   37
;  :datatype-splits         24
;  :decisions               67
;  :del-clause              225
;  :final-checks            24
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             649
;  :mk-clause               245
;  :num-allocs              3455346
;  :num-checks              35
;  :propagations            109
;  :quant-instantiations    52
;  :rlimit-count            112696)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               375
;  :arith-assert-diseq      30
;  :arith-assert-lower      105
;  :arith-assert-upper      78
;  :arith-conflicts         3
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   37
;  :datatype-splits         24
;  :decisions               67
;  :del-clause              225
;  :final-checks            24
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             649
;  :mk-clause               245
;  :num-allocs              3455346
;  :num-checks              36
;  :propagations            109
;  :quant-instantiations    52
;  :rlimit-count            112705)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               376
;  :arith-assert-diseq      30
;  :arith-assert-lower      106
;  :arith-assert-upper      79
;  :arith-conflicts         4
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   37
;  :datatype-splits         24
;  :decisions               67
;  :del-clause              225
;  :final-checks            24
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             649
;  :mk-clause               245
;  :num-allocs              3455346
;  :num-checks              37
;  :propagations            113
;  :quant-instantiations    52
;  :rlimit-count            112813)
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(0 <= First:(Second:(Second:($t@10@03)))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               407
;  :arith-assert-diseq      30
;  :arith-assert-lower      109
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   41
;  :datatype-splits         27
;  :decisions               76
;  :del-clause              238
;  :final-checks            26
;  :interface-eqs           4
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             667
;  :mk-clause               252
;  :num-allocs              3455346
;  :num-checks              38
;  :propagations            116
;  :quant-instantiations    55
;  :rlimit-count            113564
;  :time                    0.02)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               463
;  :arith-assert-diseq      33
;  :arith-assert-lower      122
;  :arith-assert-upper      100
;  :arith-conflicts         4
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 58
;  :datatype-occurs-check   47
;  :datatype-splits         32
;  :decisions               93
;  :del-clause              277
;  :final-checks            30
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             728
;  :mk-clause               291
;  :num-allocs              3455346
;  :num-checks              39
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            114580
;  :time                    0.00)
; [then-branch: 15 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[0]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[0]) | live]
; [else-branch: 15 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[0]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[0] | live]
(push) ; 4
; [then-branch: 15 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[0]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               463
;  :arith-assert-diseq      33
;  :arith-assert-lower      122
;  :arith-assert-upper      100
;  :arith-conflicts         4
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 58
;  :datatype-occurs-check   47
;  :datatype-splits         32
;  :decisions               93
;  :del-clause              277
;  :final-checks            30
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             728
;  :mk-clause               292
;  :num-allocs              3455346
;  :num-checks              40
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            114769)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               463
;  :arith-assert-diseq      33
;  :arith-assert-lower      122
;  :arith-assert-upper      100
;  :arith-conflicts         4
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 58
;  :datatype-occurs-check   47
;  :datatype-splits         32
;  :decisions               93
;  :del-clause              277
;  :final-checks            30
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             728
;  :mk-clause               292
;  :num-allocs              3455346
;  :num-checks              41
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            114784
;  :time                    0.01)
(pop) ; 4
(push) ; 4
; [else-branch: 15 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[0]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[0]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
            0))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               469
;  :arith-assert-diseq      33
;  :arith-assert-lower      122
;  :arith-assert-upper      100
;  :arith-conflicts         4
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 58
;  :datatype-occurs-check   47
;  :datatype-splits         32
;  :decisions               93
;  :del-clause              278
;  :final-checks            30
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             732
;  :mk-clause               296
;  :num-allocs              3455346
;  :num-checks              42
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            115297)
(push) ; 3
; [then-branch: 16 | 0 <= First:(Second:(Second:($t@10@03)))[1] | live]
; [else-branch: 16 | !(0 <= First:(Second:(Second:($t@10@03)))[1]) | live]
(push) ; 4
; [then-branch: 16 | 0 <= First:(Second:(Second:($t@10@03)))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               469
;  :arith-assert-diseq      33
;  :arith-assert-lower      123
;  :arith-assert-upper      100
;  :arith-conflicts         4
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 58
;  :datatype-occurs-check   47
;  :datatype-splits         32
;  :decisions               93
;  :del-clause              278
;  :final-checks            30
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             737
;  :mk-clause               302
;  :num-allocs              3455346
;  :num-checks              43
;  :propagations            129
;  :quant-instantiations    63
;  :rlimit-count            115414)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               469
;  :arith-assert-diseq      33
;  :arith-assert-lower      123
;  :arith-assert-upper      100
;  :arith-conflicts         4
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 58
;  :datatype-occurs-check   47
;  :datatype-splits         32
;  :decisions               93
;  :del-clause              278
;  :final-checks            30
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             737
;  :mk-clause               302
;  :num-allocs              3455346
;  :num-checks              44
;  :propagations            129
;  :quant-instantiations    63
;  :rlimit-count            115423)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               470
;  :arith-assert-diseq      33
;  :arith-assert-lower      124
;  :arith-assert-upper      101
;  :arith-conflicts         5
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               14
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 58
;  :datatype-occurs-check   47
;  :datatype-splits         32
;  :decisions               93
;  :del-clause              278
;  :final-checks            30
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             737
;  :mk-clause               302
;  :num-allocs              3455346
;  :num-checks              45
;  :propagations            133
;  :quant-instantiations    63
;  :rlimit-count            115531)
(pop) ; 4
(push) ; 4
; [else-branch: 16 | !(0 <= First:(Second:(Second:($t@10@03)))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-assert-diseq      33
;  :arith-assert-lower      128
;  :arith-assert-upper      108
;  :arith-bound-prop        2
;  :arith-conflicts         5
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         11
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               14
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   51
;  :datatype-splits         35
;  :decisions               102
;  :del-clause              299
;  :final-checks            32
;  :interface-eqs           5
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             765
;  :mk-clause               317
;  :num-allocs              3455346
;  :num-checks              46
;  :propagations            139
;  :quant-instantiations    67
;  :rlimit-count            116345
;  :time                    0.05)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               584
;  :arith-assert-diseq      39
;  :arith-assert-lower      150
;  :arith-assert-upper      131
;  :arith-bound-prop        4
;  :arith-conflicts         5
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         17
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 74
;  :datatype-occurs-check   57
;  :datatype-splits         40
;  :decisions               120
;  :del-clause              371
;  :final-checks            36
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             858
;  :mk-clause               389
;  :num-allocs              3455346
;  :num-checks              47
;  :propagations            174
;  :quant-instantiations    79
;  :rlimit-count            117569
;  :time                    0.01)
; [then-branch: 17 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[1]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[1]) | live]
; [else-branch: 17 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[1]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[1] | live]
(push) ; 4
; [then-branch: 17 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[1]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               584
;  :arith-assert-diseq      39
;  :arith-assert-lower      150
;  :arith-assert-upper      131
;  :arith-bound-prop        4
;  :arith-conflicts         5
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         17
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 74
;  :datatype-occurs-check   57
;  :datatype-splits         40
;  :decisions               120
;  :del-clause              371
;  :final-checks            36
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             858
;  :mk-clause               390
;  :num-allocs              3455346
;  :num-checks              48
;  :propagations            174
;  :quant-instantiations    79
;  :rlimit-count            117758)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               584
;  :arith-assert-diseq      39
;  :arith-assert-lower      150
;  :arith-assert-upper      131
;  :arith-bound-prop        4
;  :arith-conflicts         5
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         17
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 74
;  :datatype-occurs-check   57
;  :datatype-splits         40
;  :decisions               120
;  :del-clause              371
;  :final-checks            36
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             858
;  :mk-clause               390
;  :num-allocs              3455346
;  :num-checks              49
;  :propagations            174
;  :quant-instantiations    79
;  :rlimit-count            117773)
(pop) ; 4
(push) ; 4
; [else-branch: 17 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[1]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[1]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
            1))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@03))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0) ==> diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] !(0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-assert-diseq      39
;  :arith-assert-lower      150
;  :arith-assert-upper      131
;  :arith-bound-prop        4
;  :arith-conflicts         5
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         17
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 74
;  :datatype-occurs-check   57
;  :datatype-splits         40
;  :decisions               120
;  :del-clause              372
;  :final-checks            36
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             861
;  :mk-clause               394
;  :num-allocs              3455346
;  :num-checks              50
;  :propagations            174
;  :quant-instantiations    79
;  :rlimit-count            118200)
(push) ; 3
; [then-branch: 18 | 0 <= First:(Second:(Second:($t@10@03)))[2] | live]
; [else-branch: 18 | !(0 <= First:(Second:(Second:($t@10@03)))[2]) | live]
(push) ; 4
; [then-branch: 18 | 0 <= First:(Second:(Second:($t@10@03)))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-assert-diseq      39
;  :arith-assert-lower      151
;  :arith-assert-upper      131
;  :arith-bound-prop        4
;  :arith-conflicts         5
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         17
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 74
;  :datatype-occurs-check   57
;  :datatype-splits         40
;  :decisions               120
;  :del-clause              372
;  :final-checks            36
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             866
;  :mk-clause               400
;  :num-allocs              3455346
;  :num-checks              51
;  :propagations            174
;  :quant-instantiations    80
;  :rlimit-count            118316)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-assert-diseq      39
;  :arith-assert-lower      151
;  :arith-assert-upper      131
;  :arith-bound-prop        4
;  :arith-conflicts         5
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         17
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 74
;  :datatype-occurs-check   57
;  :datatype-splits         40
;  :decisions               120
;  :del-clause              372
;  :final-checks            36
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             866
;  :mk-clause               400
;  :num-allocs              3455346
;  :num-checks              52
;  :propagations            174
;  :quant-instantiations    80
;  :rlimit-count            118325)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               587
;  :arith-assert-diseq      39
;  :arith-assert-lower      152
;  :arith-assert-upper      132
;  :arith-bound-prop        4
;  :arith-conflicts         6
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         17
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 74
;  :datatype-occurs-check   57
;  :datatype-splits         40
;  :decisions               120
;  :del-clause              372
;  :final-checks            36
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             866
;  :mk-clause               400
;  :num-allocs              3455346
;  :num-checks              53
;  :propagations            178
;  :quant-instantiations    80
;  :rlimit-count            118433)
(pop) ; 4
(push) ; 4
; [else-branch: 18 | !(0 <= First:(Second:(Second:($t@10@03)))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               623
;  :arith-assert-diseq      39
;  :arith-assert-lower      157
;  :arith-assert-upper      140
;  :arith-bound-prop        8
;  :arith-conflicts         6
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         19
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 79
;  :datatype-occurs-check   61
;  :datatype-splits         42
;  :decisions               128
;  :del-clause              401
;  :final-checks            38
;  :interface-eqs           6
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             903
;  :mk-clause               423
;  :num-allocs              3455346
;  :num-checks              54
;  :propagations            187
;  :quant-instantiations    85
;  :rlimit-count            119294
;  :time                    0.00)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               743
;  :arith-assert-diseq      49
;  :arith-assert-lower      190
;  :arith-assert-upper      182
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   67
;  :datatype-splits         47
;  :decisions               148
;  :del-clause              526
;  :final-checks            43
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1061
;  :mk-clause               548
;  :num-allocs              3455346
;  :num-checks              55
;  :propagations            265
;  :quant-instantiations    106
;  :rlimit-count            120863
;  :time                    0.01)
; [then-branch: 19 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[2]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[2]) | live]
; [else-branch: 19 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[2]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[2] | live]
(push) ; 4
; [then-branch: 19 | !(First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[2]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[2])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2)))))
; [eval] diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               743
;  :arith-assert-diseq      49
;  :arith-assert-lower      190
;  :arith-assert-upper      182
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   67
;  :datatype-splits         47
;  :decisions               148
;  :del-clause              526
;  :final-checks            43
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1061
;  :mk-clause               549
;  :num-allocs              3455346
;  :num-checks              56
;  :propagations            265
;  :quant-instantiations    106
;  :rlimit-count            121052)
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               743
;  :arith-assert-diseq      49
;  :arith-assert-lower      190
;  :arith-assert-upper      182
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   67
;  :datatype-splits         47
;  :decisions               148
;  :del-clause              526
;  :final-checks            43
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1061
;  :mk-clause               549
;  :num-allocs              3455346
;  :num-checks              57
;  :propagations            265
;  :quant-instantiations    106
;  :rlimit-count            121067)
(pop) ; 4
(push) ; 4
; [else-branch: 19 | First:(Second:(Second:(Second:(Second:($t@10@03)))))[First:(Second:(Second:($t@10@03)))[2]] == 0 && 0 <= First:(Second:(Second:($t@10@03)))[2]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@03))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
            2))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
          2))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@12@03)))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@10@03))))
      2))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Nand_gate___contract_unsatisfiable__Nand_gate_EncodedGlobalVariables_Main ----------
(declare-const diz@14@03 $Ref)
(declare-const globals@15@03 $Ref)
(declare-const m_param@16@03 $Ref)
(declare-const diz@17@03 $Ref)
(declare-const globals@18@03 $Ref)
(declare-const m_param@19@03 $Ref)
(push) ; 1
(declare-const $t@20@03 $Snap)
(assert (= $t@20@03 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@17@03 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@21@03 $Snap)
(assert (= $t@21@03 ($Snap.combine ($Snap.first $t@21@03) ($Snap.second $t@21@03))))
(assert (= ($Snap.first $t@21@03) $Snap.unit))
(assert (= ($Snap.second $t@21@03) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Nand_gate_Nand_gate_EncodedGlobalVariables_Main ----------
(declare-const globals@22@03 $Ref)
(declare-const m_param@23@03 $Ref)
(declare-const sys__result@24@03 $Ref)
(declare-const globals@25@03 $Ref)
(declare-const m_param@26@03 $Ref)
(declare-const sys__result@27@03 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@28@03 $Snap)
(assert (= $t@28@03 ($Snap.combine ($Snap.first $t@28@03) ($Snap.second $t@28@03))))
(assert (= ($Snap.first $t@28@03) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@27@03 $Ref.null)))
(assert (=
  ($Snap.second $t@28@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@28@03))
    ($Snap.second ($Snap.second $t@28@03)))))
(assert (= ($Snap.first ($Snap.second $t@28@03)) $Snap.unit))
; [eval] type_of(sys__result) == class_Nand_gate()
; [eval] type_of(sys__result)
; [eval] class_Nand_gate()
(assert (= (type_of<TYPE> sys__result@27@03) (as class_Nand_gate<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@28@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@28@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@28@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@28@03))))
  m_param@26@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_A == true
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))
  true))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_B == false
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03))))))
  false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_out == false
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@03)))))))
  false))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__13: Ref
(declare-const diz__13@29@03 $Ref)
; [exec]
; diz__13 := new(Nand_gate_m, Nand_gate_A, Nand_gate_B, Nand_gate_out)
(declare-const diz__13@30@03 $Ref)
(assert (not (= diz__13@30@03 $Ref.null)))
(declare-const Nand_gate_m@31@03 $Ref)
(declare-const Nand_gate_A@32@03 Bool)
(declare-const Nand_gate_B@33@03 Bool)
(declare-const Nand_gate_out@34@03 Bool)
(assert (not (= diz__13@30@03 globals@25@03)))
(assert (not (= diz__13@30@03 m_param@26@03)))
(assert (not (= diz__13@30@03 sys__result@27@03)))
(assert (not (= diz__13@30@03 diz__13@29@03)))
; [exec]
; inhale type_of(diz__13) == class_Nand_gate()
(declare-const $t@35@03 $Snap)
(assert (= $t@35@03 $Snap.unit))
; [eval] type_of(diz__13) == class_Nand_gate()
; [eval] type_of(diz__13)
; [eval] class_Nand_gate()
(assert (= (type_of<TYPE> diz__13@30@03) (as class_Nand_gate<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__13.Nand_gate_m := m_param
; [exec]
; diz__13.Nand_gate_A := true
; [exec]
; diz__13.Nand_gate_B := false
; [exec]
; diz__13.Nand_gate_out := false
; [exec]
; sys__result := diz__13
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Nand_gate() && acc(sys__result.Nand_gate_m, write) && acc(sys__result.Nand_gate_A, write) && acc(sys__result.Nand_gate_B, write) && acc(sys__result.Nand_gate_out, write) && sys__result.Nand_gate_m == m_param && sys__result.Nand_gate_A == true && sys__result.Nand_gate_B == false && sys__result.Nand_gate_out == false
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Nand_gate()
; [eval] type_of(sys__result)
; [eval] class_Nand_gate()
; [eval] sys__result.Nand_gate_m == m_param
; [eval] sys__result.Nand_gate_A == true
; [eval] sys__result.Nand_gate_B == false
; [eval] sys__result.Nand_gate_out == false
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read___contract_unsatisfiable__Read_EncodedGlobalVariables_Main ----------
(declare-const diz@36@03 $Ref)
(declare-const globals@37@03 $Ref)
(declare-const m_param@38@03 $Ref)
(declare-const diz@39@03 $Ref)
(declare-const globals@40@03 $Ref)
(declare-const m_param@41@03 $Ref)
(push) ; 1
(declare-const $t@42@03 $Snap)
(assert (= $t@42@03 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@39@03 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@43@03 $Snap)
(assert (= $t@43@03 ($Snap.combine ($Snap.first $t@43@03) ($Snap.second $t@43@03))))
(assert (= ($Snap.first $t@43@03) $Snap.unit))
(assert (= ($Snap.second $t@43@03) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Read_Read_EncodedGlobalVariables_Main ----------
(declare-const globals@44@03 $Ref)
(declare-const m_param@45@03 $Ref)
(declare-const sys__result@46@03 $Ref)
(declare-const globals@47@03 $Ref)
(declare-const m_param@48@03 $Ref)
(declare-const sys__result@49@03 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@50@03 $Snap)
(assert (= $t@50@03 ($Snap.combine ($Snap.first $t@50@03) ($Snap.second $t@50@03))))
(assert (= ($Snap.first $t@50@03) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@49@03 $Ref.null)))
(assert (=
  ($Snap.second $t@50@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@50@03))
    ($Snap.second ($Snap.second $t@50@03)))))
(assert (= ($Snap.first ($Snap.second $t@50@03)) $Snap.unit))
; [eval] type_of(sys__result) == class_Read()
; [eval] type_of(sys__result)
; [eval] class_Read()
(assert (= (type_of<TYPE> sys__result@49@03) (as class_Read<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@50@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@50@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@50@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@50@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@03))))
  $Snap.unit))
; [eval] sys__result.Read_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@03)))))
  m_param@48@03))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__14: Ref
(declare-const diz__14@51@03 $Ref)
; [exec]
; diz__14 := new(Read_m)
(declare-const diz__14@52@03 $Ref)
(assert (not (= diz__14@52@03 $Ref.null)))
(declare-const Read_m@53@03 $Ref)
(assert (not (= diz__14@52@03 sys__result@49@03)))
(assert (not (= diz__14@52@03 m_param@48@03)))
(assert (not (= diz__14@52@03 diz__14@51@03)))
(assert (not (= diz__14@52@03 globals@47@03)))
; [exec]
; inhale type_of(diz__14) == class_Read()
(declare-const $t@54@03 $Snap)
(assert (= $t@54@03 $Snap.unit))
; [eval] type_of(diz__14) == class_Read()
; [eval] type_of(diz__14)
; [eval] class_Read()
(assert (= (type_of<TYPE> diz__14@52@03) (as class_Read<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__14.Read_m := m_param
; [exec]
; inhale acc(Read_idleToken_EncodedGlobalVariables(diz__14, globals), write)
(declare-const $t@55@03 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__14
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Read() && acc(Read_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Read_m, write) && sys__result.Read_m == m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Read()
; [eval] type_of(sys__result)
; [eval] class_Read()
; [eval] sys__result.Read_m == m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@56@03 $Ref)
(declare-const globals@57@03 $Ref)
(declare-const diz@58@03 $Ref)
(declare-const globals@59@03 $Ref)
(push) ; 1
(declare-const $t@60@03 $Snap)
(assert (= $t@60@03 ($Snap.combine ($Snap.first $t@60@03) ($Snap.second $t@60@03))))
(assert (= ($Snap.first $t@60@03) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@58@03 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@61@03 $Snap)
(assert (= $t@61@03 ($Snap.combine ($Snap.first $t@61@03) ($Snap.second $t@61@03))))
(assert (=
  ($Snap.second $t@61@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@61@03))
    ($Snap.second ($Snap.second $t@61@03)))))
(declare-const $k@62@03 $Perm)
(assert ($Perm.isReadVar $k@62@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@62@03 $Perm.No) (< $Perm.No $k@62@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               781
;  :arith-assert-diseq      50
;  :arith-assert-lower      192
;  :arith-assert-upper      183
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   90
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              548
;  :final-checks            60
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1095
;  :mk-clause               551
;  :num-allocs              3455346
;  :num-checks              74
;  :propagations            266
;  :quant-instantiations    106
;  :rlimit-count            126824)
(assert (<= $Perm.No $k@62@03))
(assert (<= $k@62@03 $Perm.Write))
(assert (implies (< $Perm.No $k@62@03) (not (= diz@58@03 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@61@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@61@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@61@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@61@03))) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@62@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               787
;  :arith-assert-diseq      50
;  :arith-assert-lower      192
;  :arith-assert-upper      184
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   90
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              548
;  :final-checks            60
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1098
;  :mk-clause               551
;  :num-allocs              3455346
;  :num-checks              75
;  :propagations            266
;  :quant-instantiations    106
;  :rlimit-count            127077
;  :time                    0.01)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@61@03))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@61@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@61@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@03)))))))
(push) ; 3
(assert (not (< $Perm.No $k@62@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               793
;  :arith-assert-diseq      50
;  :arith-assert-lower      192
;  :arith-assert-upper      184
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   90
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              548
;  :final-checks            60
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1101
;  :mk-clause               551
;  :num-allocs              3455346
;  :num-checks              76
;  :propagations            266
;  :quant-instantiations    107
;  :rlimit-count            127361)
(declare-const $k@63@03 $Perm)
(assert ($Perm.isReadVar $k@63@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@63@03 $Perm.No) (< $Perm.No $k@63@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               793
;  :arith-assert-diseq      51
;  :arith-assert-lower      194
;  :arith-assert-upper      185
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   90
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              548
;  :final-checks            60
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1105
;  :mk-clause               553
;  :num-allocs              3455346
;  :num-checks              77
;  :propagations            267
;  :quant-instantiations    107
;  :rlimit-count            127559)
(assert (<= $Perm.No $k@63@03))
(assert (<= $k@63@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@63@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@61@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@03))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@62@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               794
;  :arith-assert-diseq      51
;  :arith-assert-lower      194
;  :arith-assert-upper      186
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   90
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              548
;  :final-checks            60
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1107
;  :mk-clause               553
;  :num-allocs              3455346
;  :num-checks              78
;  :propagations            267
;  :quant-instantiations    107
;  :rlimit-count            127745
;  :time                    0.02)
(push) ; 3
(assert (not (< $Perm.No $k@63@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               794
;  :arith-assert-diseq      51
;  :arith-assert-lower      194
;  :arith-assert-upper      186
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   90
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              548
;  :final-checks            60
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1107
;  :mk-clause               553
;  :num-allocs              3455346
;  :num-checks              79
;  :propagations            267
;  :quant-instantiations    107
;  :rlimit-count            127793
;  :time                    0.03)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@61@03)))))
  diz@58@03))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@64@03 $Ref)
(declare-const globals@65@03 $Ref)
(declare-const sys__result@66@03 Int)
(declare-const diz@67@03 $Ref)
(declare-const globals@68@03 $Ref)
(declare-const sys__result@69@03 Int)
(push) ; 1
(declare-const $t@70@03 $Snap)
(assert (= $t@70@03 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@67@03 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.Read_m, wildcard) && diz.Read_m != null && acc(diz.Read_m.Main_nand_read, wildcard) && diz.Read_m.Main_nand_read == diz)
(declare-const $t@71@03 $Snap)
(assert (= $t@71@03 ($Snap.combine ($Snap.first $t@71@03) ($Snap.second $t@71@03))))
(assert (= ($Snap.first $t@71@03) $Snap.unit))
(assert (=
  ($Snap.second $t@71@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@71@03))
    ($Snap.second ($Snap.second $t@71@03)))))
(declare-const $k@72@03 $Perm)
(assert ($Perm.isReadVar $k@72@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@72@03 $Perm.No) (< $Perm.No $k@72@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               806
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      187
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   91
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              552
;  :final-checks            61
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1116
;  :mk-clause               555
;  :num-allocs              3455346
;  :num-checks              81
;  :propagations            268
;  :quant-instantiations    107
;  :rlimit-count            128568)
(assert (<= $Perm.No $k@72@03))
(assert (<= $k@72@03 $Perm.Write))
(assert (implies (< $Perm.No $k@72@03) (not (= diz@67@03 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@71@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@71@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@71@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@71@03))) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@72@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               812
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      188
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   91
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              552
;  :final-checks            61
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1119
;  :mk-clause               555
;  :num-allocs              3455346
;  :num-checks              82
;  :propagations            268
;  :quant-instantiations    107
;  :rlimit-count            128821)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@71@03))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@71@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@03)))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               818
;  :arith-assert-diseq      52
;  :arith-assert-lower      196
;  :arith-assert-upper      188
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   91
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              552
;  :final-checks            61
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1122
;  :mk-clause               555
;  :num-allocs              3455346
;  :num-checks              83
;  :propagations            268
;  :quant-instantiations    108
;  :rlimit-count            129105)
(declare-const $k@73@03 $Perm)
(assert ($Perm.isReadVar $k@73@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@73@03 $Perm.No) (< $Perm.No $k@73@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               818
;  :arith-assert-diseq      53
;  :arith-assert-lower      198
;  :arith-assert-upper      189
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   91
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              552
;  :final-checks            61
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1126
;  :mk-clause               557
;  :num-allocs              3455346
;  :num-checks              84
;  :propagations            269
;  :quant-instantiations    108
;  :rlimit-count            129304)
(assert (<= $Perm.No $k@73@03))
(assert (<= $k@73@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@73@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@71@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@03))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@72@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               819
;  :arith-assert-diseq      53
;  :arith-assert-lower      198
;  :arith-assert-upper      190
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   91
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              552
;  :final-checks            61
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1128
;  :mk-clause               557
;  :num-allocs              3455346
;  :num-checks              85
;  :propagations            269
;  :quant-instantiations    108
;  :rlimit-count            129490)
(push) ; 3
(assert (not (< $Perm.No $k@73@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               819
;  :arith-assert-diseq      53
;  :arith-assert-lower      198
;  :arith-assert-upper      190
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               37
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 90
;  :datatype-occurs-check   91
;  :datatype-splits         48
;  :decisions               149
;  :del-clause              552
;  :final-checks            61
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1128
;  :mk-clause               557
;  :num-allocs              3455346
;  :num-checks              86
;  :propagations            269
;  :quant-instantiations    108
;  :rlimit-count            129538
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@03)))))
  diz@67@03))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Write_a_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@74@03 $Ref)
(declare-const globals@75@03 $Ref)
(declare-const diz@76@03 $Ref)
(declare-const globals@77@03 $Ref)
(push) ; 1
(declare-const $t@78@03 $Snap)
(assert (= $t@78@03 ($Snap.combine ($Snap.first $t@78@03) ($Snap.second $t@78@03))))
(assert (= ($Snap.first $t@78@03) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@76@03 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@79@03 $Snap)
(assert (= $t@79@03 ($Snap.combine ($Snap.first $t@79@03) ($Snap.second $t@79@03))))
(assert (=
  ($Snap.second $t@79@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@79@03))
    ($Snap.second ($Snap.second $t@79@03)))))
(declare-const $k@80@03 $Perm)
(assert ($Perm.isReadVar $k@80@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@80@03 $Perm.No) (< $Perm.No $k@80@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               863
;  :arith-assert-diseq      54
;  :arith-assert-lower      200
;  :arith-assert-upper      191
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              556
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1142
;  :mk-clause               559
;  :num-allocs              3455346
;  :num-checks              92
;  :propagations            270
;  :quant-instantiations    109
;  :rlimit-count            131580)
(assert (<= $Perm.No $k@80@03))
(assert (<= $k@80@03 $Perm.Write))
(assert (implies (< $Perm.No $k@80@03) (not (= diz@76@03 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@79@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@79@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@79@03))) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@80@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               869
;  :arith-assert-diseq      54
;  :arith-assert-lower      200
;  :arith-assert-upper      192
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              556
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1145
;  :mk-clause               559
;  :num-allocs              3455346
;  :num-checks              93
;  :propagations            270
;  :quant-instantiations    109
;  :rlimit-count            131833)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@79@03))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@79@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
(push) ; 3
(assert (not (< $Perm.No $k@80@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      54
;  :arith-assert-lower      200
;  :arith-assert-upper      192
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              556
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1148
;  :mk-clause               559
;  :num-allocs              3455346
;  :num-checks              94
;  :propagations            270
;  :quant-instantiations    110
;  :rlimit-count            132117)
(declare-const $k@81@03 $Perm)
(assert ($Perm.isReadVar $k@81@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@81@03 $Perm.No) (< $Perm.No $k@81@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      55
;  :arith-assert-lower      202
;  :arith-assert-upper      193
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               41
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              556
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1152
;  :mk-clause               561
;  :num-allocs              3455346
;  :num-checks              95
;  :propagations            271
;  :quant-instantiations    110
;  :rlimit-count            132316)
(assert (<= $Perm.No $k@81@03))
(assert (<= $k@81@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@81@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@79@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@80@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-assert-diseq      55
;  :arith-assert-lower      202
;  :arith-assert-upper      194
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              556
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1154
;  :mk-clause               561
;  :num-allocs              3455346
;  :num-checks              96
;  :propagations            271
;  :quant-instantiations    110
;  :rlimit-count            132502)
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-assert-diseq      55
;  :arith-assert-lower      202
;  :arith-assert-upper      194
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              556
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1154
;  :mk-clause               561
;  :num-allocs              3455346
;  :num-checks              97
;  :propagations            271
;  :quant-instantiations    110
;  :rlimit-count            132550
;  :time                    0.01)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
  diz@76@03))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Write_a_run_EncodedGlobalVariables ----------
(declare-const diz@82@03 $Ref)
(declare-const globals@83@03 $Ref)
(declare-const diz@84@03 $Ref)
(declare-const globals@85@03 $Ref)
(push) ; 1
(declare-const $t@86@03 $Snap)
(assert (= $t@86@03 ($Snap.combine ($Snap.first $t@86@03) ($Snap.second $t@86@03))))
(assert (= ($Snap.first $t@86@03) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@84@03 $Ref.null)))
(assert (=
  ($Snap.second $t@86@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@86@03))
    ($Snap.second ($Snap.second $t@86@03)))))
(declare-const $k@87@03 $Perm)
(assert ($Perm.isReadVar $k@87@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@87@03 $Perm.No) (< $Perm.No $k@87@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               887
;  :arith-assert-diseq      56
;  :arith-assert-lower      204
;  :arith-assert-upper      195
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              560
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1162
;  :mk-clause               563
;  :num-allocs              3455346
;  :num-checks              98
;  :propagations            272
;  :quant-instantiations    110
;  :rlimit-count            133056)
(assert (<= $Perm.No $k@87@03))
(assert (<= $k@87@03 $Perm.Write))
(assert (implies (< $Perm.No $k@87@03) (not (= diz@84@03 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@86@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@86@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@86@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@86@03))) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               893
;  :arith-assert-diseq      56
;  :arith-assert-lower      204
;  :arith-assert-upper      196
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              560
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1165
;  :mk-clause               563
;  :num-allocs              3455346
;  :num-checks              99
;  :propagations            272
;  :quant-instantiations    110
;  :rlimit-count            133309)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@86@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@03)))))))
(push) ; 2
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-assert-diseq      56
;  :arith-assert-lower      204
;  :arith-assert-upper      196
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               46
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              560
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1168
;  :mk-clause               563
;  :num-allocs              3455346
;  :num-checks              100
;  :propagations            272
;  :quant-instantiations    111
;  :rlimit-count            133593
;  :time                    0.03)
(declare-const $k@88@03 $Perm)
(assert ($Perm.isReadVar $k@88@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@88@03 $Perm.No) (< $Perm.No $k@88@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-assert-diseq      57
;  :arith-assert-lower      206
;  :arith-assert-upper      197
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               47
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              560
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1172
;  :mk-clause               565
;  :num-allocs              3455346
;  :num-checks              101
;  :propagations            273
;  :quant-instantiations    111
;  :rlimit-count            133791)
(assert (<= $Perm.No $k@88@03))
(assert (<= $k@88@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@88@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@03))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               900
;  :arith-assert-diseq      57
;  :arith-assert-lower      206
;  :arith-assert-upper      198
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              560
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1174
;  :mk-clause               565
;  :num-allocs              3455346
;  :num-checks              102
;  :propagations            273
;  :quant-instantiations    111
;  :rlimit-count            133977
;  :time                    0.00)
(push) ; 2
(assert (not (< $Perm.No $k@88@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               900
;  :arith-assert-diseq      57
;  :arith-assert-lower      206
;  :arith-assert-upper      198
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   103
;  :datatype-splits         51
;  :decisions               158
;  :del-clause              560
;  :final-checks            68
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1174
;  :mk-clause               565
;  :num-allocs              3455346
;  :num-checks              103
;  :propagations            273
;  :quant-instantiations    111
;  :rlimit-count            134025)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@03)))))
  diz@84@03))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@89@03 $Snap)
(assert (= $t@89@03 ($Snap.combine ($Snap.first $t@89@03) ($Snap.second $t@89@03))))
(declare-const $k@90@03 $Perm)
(assert ($Perm.isReadVar $k@90@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@90@03 $Perm.No) (< $Perm.No $k@90@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-assert-diseq      58
;  :arith-assert-lower      208
;  :arith-assert-upper      199
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 101
;  :datatype-occurs-check   105
;  :datatype-splits         53
;  :decisions               160
;  :del-clause              564
;  :final-checks            70
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1183
;  :mk-clause               567
;  :num-allocs              3455346
;  :num-checks              105
;  :propagations            274
;  :quant-instantiations    112
;  :rlimit-count            134731)
(assert (<= $Perm.No $k@90@03))
(assert (<= $k@90@03 $Perm.Write))
(assert (implies (< $Perm.No $k@90@03) (not (= diz@84@03 $Ref.null))))
(assert (=
  ($Snap.second $t@89@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@89@03))
    ($Snap.second ($Snap.second $t@89@03)))))
(assert (= ($Snap.first ($Snap.second $t@89@03)) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@90@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               919
;  :arith-assert-diseq      58
;  :arith-assert-lower      208
;  :arith-assert-upper      200
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 101
;  :datatype-occurs-check   105
;  :datatype-splits         53
;  :decisions               160
;  :del-clause              564
;  :final-checks            70
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1186
;  :mk-clause               567
;  :num-allocs              3455346
;  :num-checks              106
;  :propagations            274
;  :quant-instantiations    112
;  :rlimit-count            134974)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@89@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@89@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@89@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@89@03))))))
(push) ; 3
(assert (not (< $Perm.No $k@90@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               925
;  :arith-assert-diseq      58
;  :arith-assert-lower      208
;  :arith-assert-upper      200
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               52
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 101
;  :datatype-occurs-check   105
;  :datatype-splits         53
;  :decisions               160
;  :del-clause              564
;  :final-checks            70
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1189
;  :mk-clause               567
;  :num-allocs              3455346
;  :num-checks              107
;  :propagations            274
;  :quant-instantiations    113
;  :rlimit-count            135246
;  :time                    0.02)
(declare-const $k@91@03 $Perm)
(assert ($Perm.isReadVar $k@91@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@91@03 $Perm.No) (< $Perm.No $k@91@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               925
;  :arith-assert-diseq      59
;  :arith-assert-lower      210
;  :arith-assert-upper      201
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               53
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 101
;  :datatype-occurs-check   105
;  :datatype-splits         53
;  :decisions               160
;  :del-clause              564
;  :final-checks            70
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1193
;  :mk-clause               569
;  :num-allocs              3455346
;  :num-checks              108
;  :propagations            275
;  :quant-instantiations    113
;  :rlimit-count            135444)
(assert (<= $Perm.No $k@91@03))
(assert (<= $k@91@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@91@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@89@03)) $Ref.null))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@89@03))) $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@90@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               926
;  :arith-assert-diseq      59
;  :arith-assert-lower      210
;  :arith-assert-upper      202
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 101
;  :datatype-occurs-check   105
;  :datatype-splits         53
;  :decisions               160
;  :del-clause              564
;  :final-checks            70
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1195
;  :mk-clause               569
;  :num-allocs              3455346
;  :num-checks              109
;  :propagations            275
;  :quant-instantiations    113
;  :rlimit-count            135620)
(push) ; 3
(assert (not (< $Perm.No $k@91@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               926
;  :arith-assert-diseq      59
;  :arith-assert-lower      210
;  :arith-assert-upper      202
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 101
;  :datatype-occurs-check   105
;  :datatype-splits         53
;  :decisions               160
;  :del-clause              564
;  :final-checks            70
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1195
;  :mk-clause               569
;  :num-allocs              3455346
;  :num-checks              110
;  :propagations            275
;  :quant-instantiations    113
;  :rlimit-count            135668
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@89@03))))
  diz@84@03))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_36__29: Ref
(declare-const __flatten_36__29@92@03 $Ref)
; [exec]
; var __flatten_37__30: Ref
(declare-const __flatten_37__30@93@03 $Ref)
; [exec]
; var __flatten_38__31: Bool
(declare-const __flatten_38__31@94@03 Bool)
; [exec]
; var __flatten_39__32: Bool
(declare-const __flatten_39__32@95@03 Bool)
; [exec]
; var __flatten_40__33: Ref
(declare-const __flatten_40__33@96@03 $Ref)
; [exec]
; var __flatten_41__34: Seq[Int]
(declare-const __flatten_41__34@97@03 Seq<Int>)
; [exec]
; var __flatten_42__35: Ref
(declare-const __flatten_42__35@98@03 $Ref)
; [exec]
; var __flatten_43__36: Ref
(declare-const __flatten_43__36@99@03 $Ref)
; [exec]
; var __flatten_44__37: Seq[Int]
(declare-const __flatten_44__37@100@03 Seq<Int>)
; [exec]
; var __flatten_45__38: Ref
(declare-const __flatten_45__38@101@03 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 3
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               926
;  :arith-assert-diseq      59
;  :arith-assert-lower      210
;  :arith-assert-upper      202
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 101
;  :datatype-occurs-check   105
;  :datatype-splits         53
;  :decisions               160
;  :del-clause              568
;  :final-checks            70
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1195
;  :mk-clause               569
;  :num-allocs              3455346
;  :num-checks              111
;  :propagations            275
;  :quant-instantiations    113
;  :rlimit-count            135732
;  :time                    0.00)
(declare-const $t@102@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               932
;  :arith-assert-diseq      59
;  :arith-assert-lower      210
;  :arith-assert-upper      202
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              568
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1195
;  :mk-clause               569
;  :num-allocs              3455346
;  :num-checks              113
;  :propagations            275
;  :quant-instantiations    113
;  :rlimit-count            136049)
(assert (= $t@102@03 ($Snap.combine ($Snap.first $t@102@03) ($Snap.second $t@102@03))))
(assert (= ($Snap.first $t@102@03) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@102@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@102@03))
    ($Snap.second ($Snap.second $t@102@03)))))
(assert (= ($Snap.first ($Snap.second $t@102@03)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@102@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@102@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@102@03))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@102@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@103@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 20 | 0 <= i@103@03 | live]
; [else-branch: 20 | !(0 <= i@103@03) | live]
(push) ; 5
; [then-branch: 20 | 0 <= i@103@03]
(assert (<= 0 i@103@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 20 | !(0 <= i@103@03)]
(assert (not (<= 0 i@103@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 21 | i@103@03 < |First:(Second:(Second:(Second:($t@102@03))))| && 0 <= i@103@03 | live]
; [else-branch: 21 | !(i@103@03 < |First:(Second:(Second:(Second:($t@102@03))))| && 0 <= i@103@03) | live]
(push) ; 5
; [then-branch: 21 | i@103@03 < |First:(Second:(Second:(Second:($t@102@03))))| && 0 <= i@103@03]
(assert (and
  (<
    i@103@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
  (<= 0 i@103@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@103@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               983
;  :arith-assert-diseq      61
;  :arith-assert-lower      217
;  :arith-assert-upper      205
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              568
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1227
;  :mk-clause               575
;  :num-allocs              3455346
;  :num-checks              114
;  :propagations            277
;  :quant-instantiations    119
;  :rlimit-count            137398)
; [eval] -1
(push) ; 6
; [then-branch: 22 | First:(Second:(Second:(Second:($t@102@03))))[i@103@03] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@102@03))))[i@103@03] != -1 | live]
(push) ; 7
; [then-branch: 22 | First:(Second:(Second:(Second:($t@102@03))))[i@103@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
    i@103@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 22 | First:(Second:(Second:(Second:($t@102@03))))[i@103@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
      i@103@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@103@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               983
;  :arith-assert-diseq      61
;  :arith-assert-lower      217
;  :arith-assert-upper      205
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              568
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1228
;  :mk-clause               575
;  :num-allocs              3455346
;  :num-checks              115
;  :propagations            277
;  :quant-instantiations    119
;  :rlimit-count            137573)
(push) ; 8
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@102@03))))[i@103@03] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@102@03))))[i@103@03]) | live]
(push) ; 9
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@102@03))))[i@103@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
    i@103@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@103@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               983
;  :arith-assert-diseq      62
;  :arith-assert-lower      220
;  :arith-assert-upper      205
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              568
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1231
;  :mk-clause               576
;  :num-allocs              3455346
;  :num-checks              116
;  :propagations            277
;  :quant-instantiations    119
;  :rlimit-count            137697)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@102@03))))[i@103@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
      i@103@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 21 | !(i@103@03 < |First:(Second:(Second:(Second:($t@102@03))))| && 0 <= i@103@03)]
(assert (not
  (and
    (<
      i@103@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
    (<= 0 i@103@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@103@03 Int)) (!
  (implies
    (and
      (<
        i@103@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
      (<= 0 i@103@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
          i@103@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
            i@103@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
            i@103@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
    i@103@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))
(declare-const $k@104@03 $Perm)
(assert ($Perm.isReadVar $k@104@03 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@104@03 $Perm.No) (< $Perm.No $k@104@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               988
;  :arith-assert-diseq      63
;  :arith-assert-lower      222
;  :arith-assert-upper      206
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1237
;  :mk-clause               578
;  :num-allocs              3455346
;  :num-checks              117
;  :propagations            278
;  :quant-instantiations    119
;  :rlimit-count            138465)
(assert (<= $Perm.No $k@104@03))
(assert (<= $k@104@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@104@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               994
;  :arith-assert-diseq      63
;  :arith-assert-lower      222
;  :arith-assert-upper      207
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1240
;  :mk-clause               578
;  :num-allocs              3455346
;  :num-checks              118
;  :propagations            278
;  :quant-instantiations    119
;  :rlimit-count            138788
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1000
;  :arith-assert-diseq      63
;  :arith-assert-lower      222
;  :arith-assert-upper      207
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1243
;  :mk-clause               578
;  :num-allocs              3455346
;  :num-checks              119
;  :propagations            278
;  :quant-instantiations    120
;  :rlimit-count            139144)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1005
;  :arith-assert-diseq      63
;  :arith-assert-lower      222
;  :arith-assert-upper      207
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               61
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1244
;  :mk-clause               578
;  :num-allocs              3455346
;  :num-checks              120
;  :propagations            278
;  :quant-instantiations    120
;  :rlimit-count            139401)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1010
;  :arith-assert-diseq      63
;  :arith-assert-lower      222
;  :arith-assert-upper      207
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               62
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1245
;  :mk-clause               578
;  :num-allocs              3455346
;  :num-checks              121
;  :propagations            278
;  :quant-instantiations    120
;  :rlimit-count            139668)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))
(declare-const $k@105@03 $Perm)
(assert ($Perm.isReadVar $k@105@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@105@03 $Perm.No) (< $Perm.No $k@105@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1015
;  :arith-assert-diseq      64
;  :arith-assert-lower      224
;  :arith-assert-upper      208
;  :arith-bound-prop        12
;  :arith-conflicts         6
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         29
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               63
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1250
;  :mk-clause               580
;  :num-allocs              3455346
;  :num-checks              122
;  :propagations            279
;  :quant-instantiations    120
;  :rlimit-count            140088)
(declare-const $t@106@03 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@88@03)
    (=
      $t@106@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@03)))))))
  (implies
    (< $Perm.No $k@105@03)
    (=
      $t@106@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))
(assert (<= $Perm.No (+ $k@88@03 $k@105@03)))
(assert (<= (+ $k@88@03 $k@105@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@88@03 $k@105@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@88@03 $k@105@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1025
;  :arith-assert-diseq      64
;  :arith-assert-lower      225
;  :arith-assert-upper      210
;  :arith-bound-prop        12
;  :arith-conflicts         7
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         30
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               64
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1258
;  :mk-clause               580
;  :num-allocs              3455346
;  :num-checks              123
;  :propagations            279
;  :quant-instantiations    121
;  :rlimit-count            140727)
(assert (not (= $t@106@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@88@03 $k@105@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1031
;  :arith-assert-diseq      64
;  :arith-assert-lower      225
;  :arith-assert-upper      211
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1261
;  :mk-clause               580
;  :num-allocs              3455346
;  :num-checks              124
;  :propagations            279
;  :quant-instantiations    121
;  :rlimit-count            141083
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))))
(declare-const $k@107@03 $Perm)
(assert ($Perm.isReadVar $k@107@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@107@03 $Perm.No) (< $Perm.No $k@107@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1036
;  :arith-assert-diseq      65
;  :arith-assert-lower      227
;  :arith-assert-upper      212
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1266
;  :mk-clause               582
;  :num-allocs              3455346
;  :num-checks              125
;  :propagations            280
;  :quant-instantiations    121
;  :rlimit-count            141534)
(assert (<= $Perm.No $k@107@03))
(assert (<= $k@107@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@107@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@107@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1042
;  :arith-assert-diseq      65
;  :arith-assert-lower      227
;  :arith-assert-upper      213
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1269
;  :mk-clause               582
;  :num-allocs              3455346
;  :num-checks              126
;  :propagations            280
;  :quant-instantiations    121
;  :rlimit-count            141937
;  :time                    0.04)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@107@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1048
;  :arith-assert-diseq      65
;  :arith-assert-lower      227
;  :arith-assert-upper      213
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1272
;  :mk-clause               582
;  :num-allocs              3455346
;  :num-checks              127
;  :propagations            280
;  :quant-instantiations    122
;  :rlimit-count            142373
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))))))
(declare-const $k@108@03 $Perm)
(assert ($Perm.isReadVar $k@108@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@108@03 $Perm.No) (< $Perm.No $k@108@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1053
;  :arith-assert-diseq      66
;  :arith-assert-lower      229
;  :arith-assert-upper      214
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1277
;  :mk-clause               584
;  :num-allocs              3455346
;  :num-checks              128
;  :propagations            281
;  :quant-instantiations    122
;  :rlimit-count            142854)
(assert (<= $Perm.No $k@108@03))
(assert (<= $k@108@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@108@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@108@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1059
;  :arith-assert-diseq      66
;  :arith-assert-lower      229
;  :arith-assert-upper      215
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1280
;  :mk-clause               584
;  :num-allocs              3455346
;  :num-checks              129
;  :propagations            281
;  :quant-instantiations    122
;  :rlimit-count            143287
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1065
;  :arith-assert-diseq      66
;  :arith-assert-lower      229
;  :arith-assert-upper      215
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1283
;  :mk-clause               584
;  :num-allocs              3455346
;  :num-checks              130
;  :propagations            281
;  :quant-instantiations    123
;  :rlimit-count            143753)
(declare-const $k@109@03 $Perm)
(assert ($Perm.isReadVar $k@109@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@109@03 $Perm.No) (< $Perm.No $k@109@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1065
;  :arith-assert-diseq      67
;  :arith-assert-lower      231
;  :arith-assert-upper      216
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1287
;  :mk-clause               586
;  :num-allocs              3455346
;  :num-checks              131
;  :propagations            282
;  :quant-instantiations    123
;  :rlimit-count            143951)
(assert (<= $Perm.No $k@109@03))
(assert (<= $k@109@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@109@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1066
;  :arith-assert-diseq      67
;  :arith-assert-lower      231
;  :arith-assert-upper      217
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1289
;  :mk-clause               586
;  :num-allocs              3455346
;  :num-checks              132
;  :propagations            282
;  :quant-instantiations    123
;  :rlimit-count            144317
;  :time                    0.01)
(push) ; 3
(assert (not (< $Perm.No $k@109@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1066
;  :arith-assert-diseq      67
;  :arith-assert-lower      231
;  :arith-assert-upper      217
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 103
;  :datatype-occurs-check   106
;  :datatype-splits         53
;  :decisions               162
;  :del-clause              569
;  :final-checks            71
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1289
;  :mk-clause               586
;  :num-allocs              3455346
;  :num-checks              133
;  :propagations            282
;  :quant-instantiations    123
;  :rlimit-count            144365)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@102@03 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03))) globals@85@03))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1107
;  :arith-assert-diseq      67
;  :arith-assert-lower      231
;  :arith-assert-upper      217
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   111
;  :datatype-splits         63
;  :decisions               174
;  :del-clause              585
;  :final-checks            73
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1302
;  :mk-clause               586
;  :num-allocs              3455346
;  :num-checks              135
;  :propagations            282
;  :quant-instantiations    124
;  :rlimit-count            145305
;  :time                    0.01)
(declare-const $t@110@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz.Write_a_a := true
(set-option :timeout 10)
(push) ; 3
(assert (not (= $t@106@03 diz@84@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-assert-diseq      67
;  :arith-assert-lower      231
;  :arith-assert-upper      217
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1312
;  :mk-clause               586
;  :num-allocs              3455346
;  :num-checks              137
;  :propagations            282
;  :quant-instantiations    124
;  :rlimit-count            145842
;  :time                    0.01)
(declare-const __flatten_37__30@111@03 $Ref)
(declare-const __flatten_36__29@112@03 $Ref)
(declare-const __flatten_38__31@113@03 Bool)
(declare-const __flatten_39__32@114@03 Bool)
(declare-const __flatten_40__33@115@03 $Ref)
(declare-const __flatten_42__35@116@03 $Ref)
(declare-const __flatten_41__34@117@03 Seq<Int>)
(declare-const __flatten_43__36@118@03 $Ref)
(declare-const __flatten_45__38@119@03 $Ref)
(declare-const __flatten_44__37@120@03 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@121@03 $Snap)
(assert (= $t@121@03 ($Snap.combine ($Snap.first $t@121@03) ($Snap.second $t@121@03))))
(declare-const $k@122@03 $Perm)
(assert ($Perm.isReadVar $k@122@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@122@03 $Perm.No) (< $Perm.No $k@122@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1150
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      218
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1317
;  :mk-clause               588
;  :num-allocs              3455346
;  :num-checks              138
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            146133)
(assert (<= $Perm.No $k@122@03))
(assert (<= $k@122@03 $Perm.Write))
(assert (implies (< $Perm.No $k@122@03) (not (= diz@84@03 $Ref.null))))
(assert (=
  ($Snap.second $t@121@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@121@03))
    ($Snap.second ($Snap.second $t@121@03)))))
(assert (= ($Snap.first ($Snap.second $t@121@03)) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1156
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      219
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1320
;  :mk-clause               588
;  :num-allocs              3455346
;  :num-checks              139
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            146376
;  :time                    0.00)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@121@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@121@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1162
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      219
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1323
;  :mk-clause               588
;  :num-allocs              3455346
;  :num-checks              140
;  :propagations            283
;  :quant-instantiations    125
;  :rlimit-count            146648)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@121@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1167
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      219
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1324
;  :mk-clause               588
;  :num-allocs              3455346
;  :num-checks              141
;  :propagations            283
;  :quant-instantiations    125
;  :rlimit-count            146825
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
  $Snap.unit))
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1173
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      219
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1326
;  :mk-clause               588
;  :num-allocs              3455346
;  :num-checks              142
;  :propagations            283
;  :quant-instantiations    125
;  :rlimit-count            147044
;  :time                    0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1180
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      220
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1332
;  :mk-clause               588
;  :num-allocs              3455346
;  :num-checks              143
;  :propagations            283
;  :quant-instantiations    127
;  :rlimit-count            147373)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
  $Snap.unit))
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1186
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      220
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1334
;  :mk-clause               588
;  :num-allocs              3455346
;  :num-checks              144
;  :propagations            283
;  :quant-instantiations    127
;  :rlimit-count            147612
;  :time                    0.01)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
  $Snap.unit))
; [eval] (forall i__39: Int :: { diz.Write_a_m.Main_process_state[i__39] } 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|)
(declare-const i__39@123@03 Int)
(push) ; 4
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__39
(push) ; 5
; [then-branch: 24 | 0 <= i__39@123@03 | live]
; [else-branch: 24 | !(0 <= i__39@123@03) | live]
(push) ; 6
; [then-branch: 24 | 0 <= i__39@123@03]
(assert (<= 0 i__39@123@03))
; [eval] i__39 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-assert-diseq      68
;  :arith-assert-lower      238
;  :arith-assert-upper      221
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             1342
;  :mk-clause               588
;  :num-allocs              3455346
;  :num-checks              145
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            148050
;  :time                    0.01)
(pop) ; 6
(push) ; 6
; [else-branch: 24 | !(0 <= i__39@123@03)]
(assert (not (<= 0 i__39@123@03)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 25 | i__39@123@03 < |First:(Second:(Second:(Second:($t@121@03))))| && 0 <= i__39@123@03 | live]
; [else-branch: 25 | !(i__39@123@03 < |First:(Second:(Second:(Second:($t@121@03))))| && 0 <= i__39@123@03) | live]
(push) ; 6
; [then-branch: 25 | i__39@123@03 < |First:(Second:(Second:(Second:($t@121@03))))| && 0 <= i__39@123@03]
(assert (and
  (<
    i__39@123@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
  (<= 0 i__39@123@03)))
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1
; [eval] diz.Write_a_m.Main_process_state[i__39]
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-assert-diseq      68
;  :arith-assert-lower      239
;  :arith-assert-upper      222
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1344
;  :mk-clause               588
;  :num-allocs              3605169
;  :num-checks              146
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            148207
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__39@123@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-assert-diseq      68
;  :arith-assert-lower      239
;  :arith-assert-upper      222
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1344
;  :mk-clause               588
;  :num-allocs              3605169
;  :num-checks              147
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            148216
;  :time                    0.04)
; [eval] -1
(push) ; 7
; [then-branch: 26 | First:(Second:(Second:(Second:($t@121@03))))[i__39@123@03] == -1 | live]
; [else-branch: 26 | First:(Second:(Second:(Second:($t@121@03))))[i__39@123@03] != -1 | live]
(push) ; 8
; [then-branch: 26 | First:(Second:(Second:(Second:($t@121@03))))[i__39@123@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
    i__39@123@03)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 26 | First:(Second:(Second:(Second:($t@121@03))))[i__39@123@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
      i__39@123@03)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39]
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-assert-diseq      68
;  :arith-assert-lower      239
;  :arith-assert-upper      222
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1345
;  :mk-clause               588
;  :num-allocs              3605169
;  :num-checks              148
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            148430
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__39@123@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-assert-diseq      68
;  :arith-assert-lower      239
;  :arith-assert-upper      222
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1345
;  :mk-clause               588
;  :num-allocs              3605169
;  :num-checks              149
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            148439)
(push) ; 9
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@121@03))))[i__39@123@03] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@121@03))))[i__39@123@03]) | live]
(push) ; 10
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@121@03))))[i__39@123@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
    i__39@123@03)))
; [eval] diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-assert-diseq      69
;  :arith-assert-lower      242
;  :arith-assert-upper      222
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1348
;  :mk-clause               589
;  :num-allocs              3605169
;  :num-checks              150
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            148601
;  :time                    0.04)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__39@123@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-assert-diseq      69
;  :arith-assert-lower      242
;  :arith-assert-upper      222
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1348
;  :mk-clause               589
;  :num-allocs              3605169
;  :num-checks              151
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            148610)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1194
;  :arith-assert-diseq      69
;  :arith-assert-lower      242
;  :arith-assert-upper      222
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              585
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1348
;  :mk-clause               589
;  :num-allocs              3605169
;  :num-checks              152
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            148658
;  :time                    0.04)
(pop) ; 10
(push) ; 10
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@121@03))))[i__39@123@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
      i__39@123@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 25 | !(i__39@123@03 < |First:(Second:(Second:(Second:($t@121@03))))| && 0 <= i__39@123@03)]
(assert (not
  (and
    (<
      i__39@123@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
    (<= 0 i__39@123@03))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__39@123@03 Int)) (!
  (implies
    (and
      (<
        i__39@123@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
      (<= 0 i__39@123@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
          i__39@123@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
            i__39@123@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
            i__39@123@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
    i__39@123@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1199
;  :arith-assert-diseq      69
;  :arith-assert-lower      242
;  :arith-assert-upper      222
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1350
;  :mk-clause               589
;  :num-allocs              3605169
;  :num-checks              153
;  :propagations            283
;  :quant-instantiations    129
;  :rlimit-count            149283)
(declare-const $k@124@03 $Perm)
(assert ($Perm.isReadVar $k@124@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@124@03 $Perm.No) (< $Perm.No $k@124@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1199
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      223
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1354
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              154
;  :propagations            284
;  :quant-instantiations    129
;  :rlimit-count            149482)
(assert (<= $Perm.No $k@124@03))
(assert (<= $k@124@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@124@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1205
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1357
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              155
;  :propagations            284
;  :quant-instantiations    129
;  :rlimit-count            149805)
(push) ; 4
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1205
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1357
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              156
;  :propagations            284
;  :quant-instantiations    129
;  :rlimit-count            149853)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1211
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1360
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              157
;  :propagations            284
;  :quant-instantiations    130
;  :rlimit-count            150209
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1211
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1360
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              158
;  :propagations            284
;  :quant-instantiations    130
;  :rlimit-count            150257
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1216
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1361
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              159
;  :propagations            284
;  :quant-instantiations    130
;  :rlimit-count            150514
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1216
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1361
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              160
;  :propagations            284
;  :quant-instantiations    130
;  :rlimit-count            150562
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1221
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1362
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              161
;  :propagations            284
;  :quant-instantiations    130
;  :rlimit-count            150829)
(push) ; 4
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1221
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1362
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              162
;  :propagations            284
;  :quant-instantiations    130
;  :rlimit-count            150877
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1226
;  :arith-assert-diseq      70
;  :arith-assert-lower      244
;  :arith-assert-upper      224
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1363
;  :mk-clause               591
;  :num-allocs              3605169
;  :num-checks              163
;  :propagations            284
;  :quant-instantiations    130
;  :rlimit-count            151154)
(declare-const $k@125@03 $Perm)
(assert ($Perm.isReadVar $k@125@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@125@03 $Perm.No) (< $Perm.No $k@125@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1226
;  :arith-assert-diseq      71
;  :arith-assert-lower      246
;  :arith-assert-upper      225
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1367
;  :mk-clause               593
;  :num-allocs              3605169
;  :num-checks              164
;  :propagations            285
;  :quant-instantiations    130
;  :rlimit-count            151353)
(assert (<= $Perm.No $k@125@03))
(assert (<= $k@125@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@125@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.12s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1232
;  :arith-assert-diseq      71
;  :arith-assert-lower      246
;  :arith-assert-upper      226
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1370
;  :mk-clause               593
;  :num-allocs              3605169
;  :num-checks              165
;  :propagations            285
;  :quant-instantiations    130
;  :rlimit-count            151726
;  :time                    0.12)
(push) ; 4
(assert (not (< $Perm.No $k@125@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1232
;  :arith-assert-diseq      71
;  :arith-assert-lower      246
;  :arith-assert-upper      226
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1370
;  :mk-clause               593
;  :num-allocs              3605169
;  :num-checks              166
;  :propagations            285
;  :quant-instantiations    130
;  :rlimit-count            151774
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.07s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1238
;  :arith-assert-diseq      71
;  :arith-assert-lower      246
;  :arith-assert-upper      226
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1373
;  :mk-clause               593
;  :num-allocs              3605169
;  :num-checks              167
;  :propagations            285
;  :quant-instantiations    131
;  :rlimit-count            152184
;  :time                    0.04)
(push) ; 4
(assert (not (< $Perm.No $k@125@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.13s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1238
;  :arith-assert-diseq      71
;  :arith-assert-lower      246
;  :arith-assert-upper      226
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1373
;  :mk-clause               593
;  :num-allocs              3605169
;  :num-checks              168
;  :propagations            285
;  :quant-instantiations    131
;  :rlimit-count            152232
;  :time                    0.13)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1243
;  :arith-assert-diseq      71
;  :arith-assert-lower      246
;  :arith-assert-upper      226
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1374
;  :mk-clause               593
;  :num-allocs              3605169
;  :num-checks              169
;  :propagations            285
;  :quant-instantiations    131
;  :rlimit-count            152539
;  :time                    0.04)
(declare-const $k@126@03 $Perm)
(assert ($Perm.isReadVar $k@126@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@126@03 $Perm.No) (< $Perm.No $k@126@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1243
;  :arith-assert-diseq      72
;  :arith-assert-lower      248
;  :arith-assert-upper      227
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1378
;  :mk-clause               595
;  :num-allocs              3605169
;  :num-checks              170
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            152737)
(assert (<= $Perm.No $k@126@03))
(assert (<= $k@126@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@126@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-assert-diseq      72
;  :arith-assert-lower      248
;  :arith-assert-upper      228
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1381
;  :mk-clause               595
;  :num-allocs              3605169
;  :num-checks              171
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            153140
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@126@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-assert-diseq      72
;  :arith-assert-lower      248
;  :arith-assert-upper      228
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1381
;  :mk-clause               595
;  :num-allocs              3605169
;  :num-checks              172
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            153188)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.18s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1255
;  :arith-assert-diseq      72
;  :arith-assert-lower      248
;  :arith-assert-upper      228
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1384
;  :mk-clause               595
;  :num-allocs              3605169
;  :num-checks              173
;  :propagations            286
;  :quant-instantiations    132
;  :rlimit-count            153624
;  :time                    0.18)
(push) ; 4
(assert (not (< $Perm.No $k@126@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.06s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1255
;  :arith-assert-diseq      72
;  :arith-assert-lower      248
;  :arith-assert-upper      228
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1384
;  :mk-clause               595
;  :num-allocs              3605169
;  :num-checks              174
;  :propagations            286
;  :quant-instantiations    132
;  :rlimit-count            153672
;  :time                    0.06)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1260
;  :arith-assert-diseq      72
;  :arith-assert-lower      248
;  :arith-assert-upper      228
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1385
;  :mk-clause               595
;  :num-allocs              3605169
;  :num-checks              175
;  :propagations            286
;  :quant-instantiations    132
;  :rlimit-count            154009)
(declare-const $k@127@03 $Perm)
(assert ($Perm.isReadVar $k@127@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@127@03 $Perm.No) (< $Perm.No $k@127@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1260
;  :arith-assert-diseq      73
;  :arith-assert-lower      250
;  :arith-assert-upper      229
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1389
;  :mk-clause               597
;  :num-allocs              3605169
;  :num-checks              176
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            154207)
(assert (<= $Perm.No $k@127@03))
(assert (<= $k@127@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@127@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-assert-diseq      73
;  :arith-assert-lower      250
;  :arith-assert-upper      230
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1392
;  :mk-clause               597
;  :num-allocs              3605169
;  :num-checks              177
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            154640
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@127@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-assert-diseq      73
;  :arith-assert-lower      250
;  :arith-assert-upper      230
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1392
;  :mk-clause               597
;  :num-allocs              3605169
;  :num-checks              178
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            154688
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1272
;  :arith-assert-diseq      73
;  :arith-assert-lower      250
;  :arith-assert-upper      230
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1395
;  :mk-clause               597
;  :num-allocs              3605169
;  :num-checks              179
;  :propagations            287
;  :quant-instantiations    133
;  :rlimit-count            155154)
(push) ; 4
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1272
;  :arith-assert-diseq      73
;  :arith-assert-lower      250
;  :arith-assert-upper      230
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.08
;  :memory                  4.08
;  :mk-bool-var             1395
;  :mk-clause               597
;  :num-allocs              3605169
;  :num-checks              180
;  :propagations            287
;  :quant-instantiations    133
;  :rlimit-count            155202
;  :time                    0.00)
(declare-const $k@128@03 $Perm)
(assert ($Perm.isReadVar $k@128@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@128@03 $Perm.No) (< $Perm.No $k@128@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1272
;  :arith-assert-diseq      74
;  :arith-assert-lower      252
;  :arith-assert-upper      231
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1399
;  :mk-clause               599
;  :num-allocs              3760451
;  :num-checks              181
;  :propagations            288
;  :quant-instantiations    133
;  :rlimit-count            155400)
(assert (<= $Perm.No $k@128@03))
(assert (<= $k@128@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@128@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      74
;  :arith-assert-lower      252
;  :arith-assert-upper      232
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1402
;  :mk-clause               599
;  :num-allocs              3760451
;  :num-checks              182
;  :propagations            288
;  :quant-instantiations    133
;  :rlimit-count            155853
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      74
;  :arith-assert-lower      252
;  :arith-assert-upper      232
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1402
;  :mk-clause               599
;  :num-allocs              3760451
;  :num-checks              183
;  :propagations            288
;  :quant-instantiations    133
;  :rlimit-count            155901
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@128@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      74
;  :arith-assert-lower      252
;  :arith-assert-upper      232
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1402
;  :mk-clause               599
;  :num-allocs              3760451
;  :num-checks              184
;  :propagations            288
;  :quant-instantiations    133
;  :rlimit-count            155949
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1278
;  :arith-assert-diseq      74
;  :arith-assert-lower      252
;  :arith-assert-upper      232
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1402
;  :mk-clause               599
;  :num-allocs              3760451
;  :num-checks              185
;  :propagations            288
;  :quant-instantiations    133
;  :rlimit-count            155997
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 4
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1282
;  :arith-assert-diseq      74
;  :arith-assert-lower      252
;  :arith-assert-upper      232
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1405
;  :mk-clause               599
;  :num-allocs              3760451
;  :num-checks              186
;  :propagations            288
;  :quant-instantiations    134
;  :rlimit-count            156428)
(push) ; 4
(assert (not (< $Perm.No $k@125@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1282
;  :arith-assert-diseq      74
;  :arith-assert-lower      252
;  :arith-assert-upper      232
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              586
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1405
;  :mk-clause               599
;  :num-allocs              3760451
;  :num-checks              187
;  :propagations            288
;  :quant-instantiations    134
;  :rlimit-count            156476
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
  diz@84@03))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@129@03 $Perm)
(assert ($Perm.isReadVar $k@129@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@129@03 $Perm.No) (< $Perm.No $k@129@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      254
;  :arith-assert-upper      233
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1410
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              188
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            156882)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@87@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      254
;  :arith-assert-upper      233
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1410
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              189
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            156893)
(assert (< $k@129@03 $k@87@03))
(assert (<= $Perm.No (- $k@87@03 $k@129@03)))
(assert (<= (- $k@87@03 $k@129@03) $Perm.Write))
(assert (implies (< $Perm.No (- $k@87@03 $k@129@03)) (not (= diz@84@03 $Ref.null))))
; [eval] diz.Write_a_m != null
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      256
;  :arith-assert-upper      234
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1413
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              190
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157107
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      256
;  :arith-assert-upper      234
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1413
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              191
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157155)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      256
;  :arith-assert-upper      234
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1413
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              192
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157203)
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      256
;  :arith-assert-upper      234
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1413
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              193
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157251)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      256
;  :arith-assert-upper      234
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1413
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              194
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157299)
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      256
;  :arith-assert-upper      234
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1413
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              195
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157347)
; [eval] (forall i__39: Int :: { diz.Write_a_m.Main_process_state[i__39] } 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|)
(declare-const i__39@130@03 Int)
(push) ; 4
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__39
(push) ; 5
; [then-branch: 28 | 0 <= i__39@130@03 | live]
; [else-branch: 28 | !(0 <= i__39@130@03) | live]
(push) ; 6
; [then-branch: 28 | 0 <= i__39@130@03]
(assert (<= 0 i__39@130@03))
; [eval] i__39 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      257
;  :arith-assert-upper      234
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1414
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              196
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157448
;  :time                    0.00)
(pop) ; 6
(push) ; 6
; [else-branch: 28 | !(0 <= i__39@130@03)]
(assert (not (<= 0 i__39@130@03)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 29 | i__39@130@03 < |First:(Second:(Second:(Second:($t@102@03))))| && 0 <= i__39@130@03 | live]
; [else-branch: 29 | !(i__39@130@03 < |First:(Second:(Second:(Second:($t@102@03))))| && 0 <= i__39@130@03) | live]
(push) ; 6
; [then-branch: 29 | i__39@130@03 < |First:(Second:(Second:(Second:($t@102@03))))| && 0 <= i__39@130@03]
(assert (and
  (<
    i__39@130@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
  (<= 0 i__39@130@03)))
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1
; [eval] diz.Write_a_m.Main_process_state[i__39]
(push) ; 7
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      258
;  :arith-assert-upper      235
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1416
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              197
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157605)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__39@130@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      75
;  :arith-assert-lower      258
;  :arith-assert-upper      235
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1416
;  :mk-clause               601
;  :num-allocs              3760451
;  :num-checks              198
;  :propagations            289
;  :quant-instantiations    134
;  :rlimit-count            157614)
; [eval] -1
(push) ; 7
; [then-branch: 30 | First:(Second:(Second:(Second:($t@102@03))))[i__39@130@03] == -1 | live]
; [else-branch: 30 | First:(Second:(Second:(Second:($t@102@03))))[i__39@130@03] != -1 | live]
(push) ; 8
; [then-branch: 30 | First:(Second:(Second:(Second:($t@102@03))))[i__39@130@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
    i__39@130@03)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 30 | First:(Second:(Second:(Second:($t@102@03))))[i__39@130@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
      i__39@130@03)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39]
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      76
;  :arith-assert-lower      261
;  :arith-assert-upper      236
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1422
;  :mk-clause               605
;  :num-allocs              3760451
;  :num-checks              199
;  :propagations            291
;  :quant-instantiations    135
;  :rlimit-count            157885)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__39@130@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      76
;  :arith-assert-lower      261
;  :arith-assert-upper      236
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1422
;  :mk-clause               605
;  :num-allocs              3760451
;  :num-checks              200
;  :propagations            291
;  :quant-instantiations    135
;  :rlimit-count            157894)
(push) ; 9
; [then-branch: 31 | 0 <= First:(Second:(Second:(Second:($t@102@03))))[i__39@130@03] | live]
; [else-branch: 31 | !(0 <= First:(Second:(Second:(Second:($t@102@03))))[i__39@130@03]) | live]
(push) ; 10
; [then-branch: 31 | 0 <= First:(Second:(Second:(Second:($t@102@03))))[i__39@130@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
    i__39@130@03)))
; [eval] diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      76
;  :arith-assert-lower      261
;  :arith-assert-upper      236
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1422
;  :mk-clause               605
;  :num-allocs              3760451
;  :num-checks              201
;  :propagations            291
;  :quant-instantiations    135
;  :rlimit-count            158047
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__39@130@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      76
;  :arith-assert-lower      261
;  :arith-assert-upper      236
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1422
;  :mk-clause               605
;  :num-allocs              3760451
;  :num-checks              202
;  :propagations            291
;  :quant-instantiations    135
;  :rlimit-count            158056)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      76
;  :arith-assert-lower      261
;  :arith-assert-upper      236
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              598
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1422
;  :mk-clause               605
;  :num-allocs              3760451
;  :num-checks              203
;  :propagations            291
;  :quant-instantiations    135
;  :rlimit-count            158104)
(pop) ; 10
(push) ; 10
; [else-branch: 31 | !(0 <= First:(Second:(Second:(Second:($t@102@03))))[i__39@130@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
      i__39@130@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 29 | !(i__39@130@03 < |First:(Second:(Second:(Second:($t@102@03))))| && 0 <= i__39@130@03)]
(assert (not
  (and
    (<
      i__39@130@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
    (<= 0 i__39@130@03))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__39@130@03 Int)) (!
  (implies
    (and
      (<
        i__39@130@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
      (<= 0 i__39@130@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
          i__39@130@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
            i__39@130@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
            i__39@130@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
    i__39@130@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      77
;  :arith-assert-lower      262
;  :arith-assert-upper      237
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1430
;  :mk-clause               617
;  :num-allocs              3760451
;  :num-checks              204
;  :propagations            293
;  :quant-instantiations    136
;  :rlimit-count            158550)
(assert (forall ((i__39@130@03 Int)) (!
  (implies
    (and
      (<
        i__39@130@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))
      (<= 0 i__39@130@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
          i__39@130@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
            i__39@130@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
            i__39@130@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))
    i__39@130@03))
  :qid |prog.l<no position>|)))
(declare-const $k@131@03 $Perm)
(assert ($Perm.isReadVar $k@131@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      264
;  :arith-assert-upper      238
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1435
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              205
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159108
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@131@03 $Perm.No) (< $Perm.No $k@131@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      264
;  :arith-assert-upper      238
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1435
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              206
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159158)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@104@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      264
;  :arith-assert-upper      238
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1435
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              207
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159169
;  :time                    0.00)
(assert (< $k@131@03 $k@104@03))
(assert (<= $Perm.No (- $k@104@03 $k@131@03)))
(assert (<= (- $k@104@03 $k@131@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@104@03 $k@131@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand != null
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      266
;  :arith-assert-upper      239
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1438
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              208
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159383
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      266
;  :arith-assert-upper      239
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1438
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              209
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159431
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      266
;  :arith-assert-upper      239
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1438
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              210
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159479)
(push) ; 4
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      266
;  :arith-assert-upper      239
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1438
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              211
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159527
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      266
;  :arith-assert-upper      239
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1438
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              212
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159575
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      266
;  :arith-assert-upper      239
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1438
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              213
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159623
;  :time                    0.03)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.06s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      266
;  :arith-assert-upper      239
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1438
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              214
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159671
;  :time                    0.06)
(push) ; 4
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      78
;  :arith-assert-lower      266
;  :arith-assert-upper      239
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1438
;  :mk-clause               619
;  :num-allocs              3760451
;  :num-checks              215
;  :propagations            294
;  :quant-instantiations    136
;  :rlimit-count            159719
;  :time                    0.00)
(declare-const $k@132@03 $Perm)
(assert ($Perm.isReadVar $k@132@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      79
;  :arith-assert-lower      268
;  :arith-assert-upper      240
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1442
;  :mk-clause               621
;  :num-allocs              3760451
;  :num-checks              216
;  :propagations            295
;  :quant-instantiations    136
;  :rlimit-count            159916)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@132@03 $Perm.No) (< $Perm.No $k@132@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-assert-diseq      79
;  :arith-assert-lower      268
;  :arith-assert-upper      240
;  :arith-bound-prop        12
;  :arith-conflicts         8
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              614
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1442
;  :mk-clause               621
;  :num-allocs              3760451
;  :num-checks              217
;  :propagations            295
;  :quant-instantiations    136
;  :rlimit-count            159966)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@88@03 $k@105@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-assert-diseq      79
;  :arith-assert-lower      268
;  :arith-assert-upper      241
;  :arith-bound-prop        12
;  :arith-conflicts         9
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1444
;  :mk-clause               623
;  :num-allocs              3760451
;  :num-checks              218
;  :propagations            296
;  :quant-instantiations    136
;  :rlimit-count            160028)
(assert (< $k@132@03 (+ $k@88@03 $k@105@03)))
(assert (<= $Perm.No (- (+ $k@88@03 $k@105@03) $k@132@03)))
(assert (<= (- (+ $k@88@03 $k@105@03) $k@132@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@88@03 $k@105@03) $k@132@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      79
;  :arith-assert-lower      270
;  :arith-assert-upper      242
;  :arith-bound-prop        12
;  :arith-conflicts         9
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         31
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1447
;  :mk-clause               623
;  :num-allocs              3760451
;  :num-checks              219
;  :propagations            296
;  :quant-instantiations    136
;  :rlimit-count            160245)
(push) ; 4
(assert (not (< $Perm.No (+ $k@88@03 $k@105@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      79
;  :arith-assert-lower      270
;  :arith-assert-upper      243
;  :arith-bound-prop        12
;  :arith-conflicts         10
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         32
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1448
;  :mk-clause               623
;  :num-allocs              3760451
;  :num-checks              220
;  :propagations            296
;  :quant-instantiations    136
;  :rlimit-count            160308)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      79
;  :arith-assert-lower      270
;  :arith-assert-upper      243
;  :arith-bound-prop        12
;  :arith-conflicts         10
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         32
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1448
;  :mk-clause               623
;  :num-allocs              3760451
;  :num-checks              221
;  :propagations            296
;  :quant-instantiations    136
;  :rlimit-count            160356)
(push) ; 4
(assert (not (< $Perm.No (+ $k@88@03 $k@105@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      79
;  :arith-assert-lower      270
;  :arith-assert-upper      244
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         33
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1449
;  :mk-clause               623
;  :num-allocs              3760451
;  :num-checks              222
;  :propagations            296
;  :quant-instantiations    136
;  :rlimit-count            160419
;  :time                    0.01)
(push) ; 4
(assert (not (= diz@84@03 $t@106@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      79
;  :arith-assert-lower      270
;  :arith-assert-upper      244
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         33
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1450
;  :mk-clause               623
;  :num-allocs              3760451
;  :num-checks              223
;  :propagations            296
;  :quant-instantiations    136
;  :rlimit-count            160479
;  :time                    0.00)
(declare-const $k@133@03 $Perm)
(assert ($Perm.isReadVar $k@133@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      80
;  :arith-assert-lower      272
;  :arith-assert-upper      245
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         33
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1454
;  :mk-clause               625
;  :num-allocs              3760451
;  :num-checks              224
;  :propagations            297
;  :quant-instantiations    136
;  :rlimit-count            160676
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@133@03 $Perm.No) (< $Perm.No $k@133@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      80
;  :arith-assert-lower      272
;  :arith-assert-upper      245
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         33
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1454
;  :mk-clause               625
;  :num-allocs              3760451
;  :num-checks              225
;  :propagations            297
;  :quant-instantiations    136
;  :rlimit-count            160726)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@107@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      80
;  :arith-assert-lower      272
;  :arith-assert-upper      245
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         33
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1454
;  :mk-clause               625
;  :num-allocs              3760451
;  :num-checks              226
;  :propagations            297
;  :quant-instantiations    136
;  :rlimit-count            160737)
(assert (< $k@133@03 $k@107@03))
(assert (<= $Perm.No (- $k@107@03 $k@133@03)))
(assert (<= (- $k@107@03 $k@133@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@107@03 $k@133@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      80
;  :arith-assert-lower      274
;  :arith-assert-upper      246
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         33
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1457
;  :mk-clause               625
;  :num-allocs              3760451
;  :num-checks              227
;  :propagations            297
;  :quant-instantiations    136
;  :rlimit-count            160951)
(push) ; 4
(assert (not (< $Perm.No $k@107@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      80
;  :arith-assert-lower      274
;  :arith-assert-upper      246
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         33
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1457
;  :mk-clause               625
;  :num-allocs              3760451
;  :num-checks              228
;  :propagations            297
;  :quant-instantiations    136
;  :rlimit-count            160999)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      80
;  :arith-assert-lower      274
;  :arith-assert-upper      246
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         33
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1457
;  :mk-clause               625
;  :num-allocs              3760451
;  :num-checks              229
;  :propagations            297
;  :quant-instantiations    136
;  :rlimit-count            161047)
(push) ; 4
(assert (not (< $Perm.No $k@107@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      80
;  :arith-assert-lower      274
;  :arith-assert-upper      246
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         33
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1457
;  :mk-clause               625
;  :num-allocs              3760451
;  :num-checks              230
;  :propagations            297
;  :quant-instantiations    136
;  :rlimit-count            161095)
(declare-const $k@134@03 $Perm)
(assert ($Perm.isReadVar $k@134@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      81
;  :arith-assert-lower      276
;  :arith-assert-upper      247
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         33
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1461
;  :mk-clause               627
;  :num-allocs              3760451
;  :num-checks              231
;  :propagations            298
;  :quant-instantiations    136
;  :rlimit-count            161291)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@134@03 $Perm.No) (< $Perm.No $k@134@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      81
;  :arith-assert-lower      276
;  :arith-assert-upper      247
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         33
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1461
;  :mk-clause               627
;  :num-allocs              3760451
;  :num-checks              232
;  :propagations            298
;  :quant-instantiations    136
;  :rlimit-count            161341)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@108@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      81
;  :arith-assert-lower      276
;  :arith-assert-upper      247
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         33
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1461
;  :mk-clause               627
;  :num-allocs              3760451
;  :num-checks              233
;  :propagations            298
;  :quant-instantiations    136
;  :rlimit-count            161352
;  :time                    0.00)
(assert (< $k@134@03 $k@108@03))
(assert (<= $Perm.No (- $k@108@03 $k@134@03)))
(assert (<= (- $k@108@03 $k@134@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@108@03 $k@134@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_read != null
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      81
;  :arith-assert-lower      278
;  :arith-assert-upper      248
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         33
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1464
;  :mk-clause               627
;  :num-allocs              3760451
;  :num-checks              234
;  :propagations            298
;  :quant-instantiations    136
;  :rlimit-count            161572
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@108@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      81
;  :arith-assert-lower      278
;  :arith-assert-upper      248
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         33
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1464
;  :mk-clause               627
;  :num-allocs              3760451
;  :num-checks              235
;  :propagations            298
;  :quant-instantiations    136
;  :rlimit-count            161620)
(declare-const $k@135@03 $Perm)
(assert ($Perm.isReadVar $k@135@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      280
;  :arith-assert-upper      249
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1468
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              236
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            161816
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      280
;  :arith-assert-upper      249
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1468
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              237
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            161864
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@135@03 $Perm.No) (< $Perm.No $k@135@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      280
;  :arith-assert-upper      249
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1468
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              238
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            161914)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@109@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      280
;  :arith-assert-upper      249
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1468
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              239
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            161925
;  :time                    0.01)
(assert (< $k@135@03 $k@109@03))
(assert (<= $Perm.No (- $k@109@03 $k@135@03)))
(assert (<= (- $k@109@03 $k@135@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@109@03 $k@135@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03))))))))))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      282
;  :arith-assert-upper      250
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1471
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              240
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            162139
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@104@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      282
;  :arith-assert-upper      250
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1471
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              241
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            162187
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@109@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      282
;  :arith-assert-upper      250
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1471
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              242
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            162235
;  :time                    0.02)
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      282
;  :arith-assert-upper      250
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1471
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              243
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            162283)
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 4
(assert (not (< $Perm.No $k@87@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      282
;  :arith-assert-upper      250
;  :arith-bound-prop        12
;  :arith-conflicts         11
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         33
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1471
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              244
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            162331)
(push) ; 4
(assert (not (< $Perm.No (+ $k@88@03 $k@105@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      282
;  :arith-assert-upper      251
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1472
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              245
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            162394)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@106@03 diz@84@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          1
;  :arith-assert-diseq      82
;  :arith-assert-lower      282
;  :arith-assert-upper      251
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 127
;  :datatype-occurs-check   116
;  :datatype-splits         73
;  :decisions               186
;  :del-clause              616
;  :final-checks            75
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             1472
;  :mk-clause               629
;  :num-allocs              3760451
;  :num-checks              246
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            162446)
(assert (= $t@106@03 diz@84@03))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@122@03 $Perm.Write))
(assert ($Perm.isReadVar $k@124@03 $Perm.Write))
(assert ($Perm.isReadVar $k@125@03 $Perm.Write))
(assert ($Perm.isReadVar $k@126@03 $Perm.Write))
(assert ($Perm.isReadVar $k@127@03 $Perm.Write))
(assert ($Perm.isReadVar $k@128@03 $Perm.Write))
(assert (= $t@121@03 ($Snap.combine ($Snap.first $t@121@03) ($Snap.second $t@121@03))))
(assert (<= $Perm.No $k@122@03))
(assert (<= $k@122@03 $Perm.Write))
(assert (implies (< $Perm.No $k@122@03) (not (= diz@84@03 $Ref.null))))
(assert (=
  ($Snap.second $t@121@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@121@03))
    ($Snap.second ($Snap.second $t@121@03)))))
(assert (= ($Snap.first ($Snap.second $t@121@03)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@121@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@121@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@121@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
  $Snap.unit))
(assert (forall ((i__39@123@03 Int)) (!
  (implies
    (and
      (<
        i__39@123@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
      (<= 0 i__39@123@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
          i__39@123@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
            i__39@123@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
            i__39@123@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
    i__39@123@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))
(assert (<= $Perm.No $k@124@03))
(assert (<= $k@124@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@124@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))
(assert (<= $Perm.No $k@125@03))
(assert (<= $k@125@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@125@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))
(assert (<= $Perm.No $k@126@03))
(assert (<= $k@126@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@126@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
(assert (<= $Perm.No $k@127@03))
(assert (<= $k@127@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@127@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))))
(assert (<= $Perm.No $k@128@03))
(assert (<= $k@128@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@128@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))
  diz@84@03))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1707
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1624
;  :mk-clause               643
;  :num-allocs              3925442
;  :num-checks              249
;  :propagations            305
;  :quant-instantiations    146
;  :rlimit-count            169310)
; [then-branch: 32 | True | live]
; [else-branch: 32 | False | dead]
(push) ; 5
; [then-branch: 32 | True]
; [exec]
; __flatten_37__30 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1707
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1624
;  :mk-clause               643
;  :num-allocs              3925442
;  :num-checks              250
;  :propagations            305
;  :quant-instantiations    146
;  :rlimit-count            169363)
(declare-const __flatten_37__30@136@03 $Ref)
(assert (= __flatten_37__30@136@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))
; [exec]
; __flatten_36__29 := __flatten_37__30.Main_nand
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) __flatten_37__30@136@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1708
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1625
;  :mk-clause               643
;  :num-allocs              3925442
;  :num-checks              251
;  :propagations            305
;  :quant-instantiations    146
;  :rlimit-count            169431)
(push) ; 6
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1708
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          1
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1625
;  :mk-clause               643
;  :num-allocs              3925442
;  :num-checks              252
;  :propagations            305
;  :quant-instantiations    146
;  :rlimit-count            169479)
(declare-const __flatten_36__29@137@03 $Ref)
(assert (=
  __flatten_36__29@137@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))
; [exec]
; __flatten_38__31 := diz.Write_a_a
(declare-const __flatten_38__31@138@03 Bool)
(assert (=
  __flatten_38__31@138@03
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))
; [exec]
; __flatten_36__29.Nand_gate_A := __flatten_38__31
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
  __flatten_36__29@137@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1711
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1631
;  :mk-clause               649
;  :num-allocs              3925442
;  :num-checks              253
;  :propagations            305
;  :quant-instantiations    148
;  :rlimit-count            169803)
(assert (not (= __flatten_36__29@137@03 $Ref.null)))
; [exec]
; __flatten_39__32 := !diz.Write_a_a
; [eval] !diz.Write_a_a
(declare-const __flatten_39__32@139@03 Bool)
(assert (=
  __flatten_39__32@139@03
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))
; [exec]
; diz.Write_a_a := __flatten_39__32
; [exec]
; __flatten_40__33 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1712
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1633
;  :mk-clause               651
;  :num-allocs              3925442
;  :num-checks              254
;  :propagations            305
;  :quant-instantiations    148
;  :rlimit-count            169953
;  :time                    0.00)
(declare-const __flatten_40__33@140@03 $Ref)
(assert (= __flatten_40__33@140@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))
; [exec]
; __flatten_42__35 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1713
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1634
;  :mk-clause               651
;  :num-allocs              3925442
;  :num-checks              255
;  :propagations            305
;  :quant-instantiations    148
;  :rlimit-count            170038
;  :time                    0.00)
(declare-const __flatten_42__35@141@03 $Ref)
(assert (= __flatten_42__35@141@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))
; [exec]
; __flatten_41__34 := __flatten_42__35.Main_process_state[0 := 0]
; [eval] __flatten_42__35.Main_process_state[0 := 0]
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) __flatten_42__35@141@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1714
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1635
;  :mk-clause               651
;  :num-allocs              3925442
;  :num-checks              256
;  :propagations            305
;  :quant-instantiations    148
;  :rlimit-count            170086
;  :time                    0.03)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1714
;  :arith-add-rows          1
;  :arith-assert-diseq      88
;  :arith-assert-lower      298
;  :arith-assert-upper      265
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         34
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1635
;  :mk-clause               651
;  :num-allocs              3925442
;  :num-checks              257
;  :propagations            305
;  :quant-instantiations    148
;  :rlimit-count            170101)
(declare-const __flatten_41__34@142@03 Seq<Int>)
(assert (Seq_equal
  __flatten_41__34@142@03
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))
    0
    0)))
; [exec]
; __flatten_40__33.Main_process_state := __flatten_41__34
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) __flatten_40__33@140@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1724
;  :arith-add-rows          4
;  :arith-assert-diseq      89
;  :arith-assert-lower      302
;  :arith-assert-upper      267
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         36
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1658
;  :mk-clause               670
;  :num-allocs              3925442
;  :num-checks              258
;  :propagations            314
;  :quant-instantiations    153
;  :rlimit-count            170582)
(assert (not (= __flatten_40__33@140@03 $Ref.null)))
; [exec]
; __flatten_43__36 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1725
;  :arith-add-rows          4
;  :arith-assert-diseq      89
;  :arith-assert-lower      302
;  :arith-assert-upper      267
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         36
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1659
;  :mk-clause               670
;  :num-allocs              3925442
;  :num-checks              259
;  :propagations            314
;  :quant-instantiations    153
;  :rlimit-count            170686)
(declare-const __flatten_43__36@143@03 $Ref)
(assert (= __flatten_43__36@143@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))
; [exec]
; __flatten_45__38 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1726
;  :arith-add-rows          4
;  :arith-assert-diseq      89
;  :arith-assert-lower      302
;  :arith-assert-upper      267
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         36
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1660
;  :mk-clause               670
;  :num-allocs              3925442
;  :num-checks              260
;  :propagations            314
;  :quant-instantiations    153
;  :rlimit-count            170771)
(declare-const __flatten_45__38@144@03 $Ref)
(assert (= __flatten_45__38@144@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))
; [exec]
; __flatten_44__37 := __flatten_45__38.Main_event_state[0 := 5000]
; [eval] __flatten_45__38.Main_event_state[0 := 5000]
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) __flatten_45__38@144@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1727
;  :arith-add-rows          4
;  :arith-assert-diseq      89
;  :arith-assert-lower      302
;  :arith-assert-upper      267
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         36
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1661
;  :mk-clause               670
;  :num-allocs              3925442
;  :num-checks              261
;  :propagations            314
;  :quant-instantiations    153
;  :rlimit-count            170819)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1727
;  :arith-add-rows          4
;  :arith-assert-diseq      89
;  :arith-assert-lower      302
;  :arith-assert-upper      267
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         36
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1661
;  :mk-clause               670
;  :num-allocs              3925442
;  :num-checks              262
;  :propagations            314
;  :quant-instantiations    153
;  :rlimit-count            170834)
(declare-const __flatten_44__37@145@03 Seq<Int>)
(assert (Seq_equal
  __flatten_44__37@145@03
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))
    0
    5000)))
; [exec]
; __flatten_43__36.Main_event_state := __flatten_44__37
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) __flatten_43__36@143@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1737
;  :arith-add-rows          7
;  :arith-assert-diseq      90
;  :arith-assert-lower      306
;  :arith-assert-upper      269
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1684
;  :mk-clause               689
;  :num-allocs              3925442
;  :num-checks              263
;  :propagations            323
;  :quant-instantiations    158
;  :rlimit-count            171332)
(assert (not (= __flatten_43__36@143@03 $Ref.null)))
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@146@03 $Snap)
(assert (= $t@146@03 ($Snap.combine ($Snap.first $t@146@03) ($Snap.second $t@146@03))))
(declare-const $k@147@03 $Perm)
(assert ($Perm.isReadVar $k@147@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@147@03 $Perm.No) (< $Perm.No $k@147@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1742
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      308
;  :arith-assert-upper      270
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1689
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              264
;  :propagations            324
;  :quant-instantiations    158
;  :rlimit-count            171643)
(assert (<= $Perm.No $k@147@03))
(assert (<= $k@147@03 $Perm.Write))
(assert (implies (< $Perm.No $k@147@03) (not (= diz@84@03 $Ref.null))))
(assert (=
  ($Snap.second $t@146@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@146@03))
    ($Snap.second ($Snap.second $t@146@03)))))
(assert (= ($Snap.first ($Snap.second $t@146@03)) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1748
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      308
;  :arith-assert-upper      271
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1692
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              265
;  :propagations            324
;  :quant-instantiations    158
;  :rlimit-count            171886
;  :time                    0.01)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@146@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@146@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1754
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      308
;  :arith-assert-upper      271
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1695
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              266
;  :propagations            324
;  :quant-instantiations    159
;  :rlimit-count            172158
;  :time                    0.02)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@146@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1759
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      308
;  :arith-assert-upper      271
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1696
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              267
;  :propagations            324
;  :quant-instantiations    159
;  :rlimit-count            172335
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
  $Snap.unit))
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1765
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      308
;  :arith-assert-upper      271
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1698
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              268
;  :propagations            324
;  :quant-instantiations    159
;  :rlimit-count            172554
;  :time                    0.04)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1772
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      310
;  :arith-assert-upper      272
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1704
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              269
;  :propagations            324
;  :quant-instantiations    161
;  :rlimit-count            172884)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
  $Snap.unit))
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1778
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      310
;  :arith-assert-upper      272
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1706
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              270
;  :propagations            324
;  :quant-instantiations    161
;  :rlimit-count            173123
;  :time                    0.01)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
  $Snap.unit))
; [eval] (forall i__40: Int :: { diz.Write_a_m.Main_process_state[i__40] } 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|)
(declare-const i__40@148@03 Int)
(push) ; 7
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__40
(push) ; 8
; [then-branch: 33 | 0 <= i__40@148@03 | live]
; [else-branch: 33 | !(0 <= i__40@148@03) | live]
(push) ; 9
; [then-branch: 33 | 0 <= i__40@148@03]
(assert (<= 0 i__40@148@03))
; [eval] i__40 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1786
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1714
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              271
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            173562
;  :time                    0.01)
(pop) ; 9
(push) ; 9
; [else-branch: 33 | !(0 <= i__40@148@03)]
(assert (not (<= 0 i__40@148@03)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 34 | i__40@148@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i__40@148@03 | live]
; [else-branch: 34 | !(i__40@148@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i__40@148@03) | live]
(push) ; 9
; [then-branch: 34 | i__40@148@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i__40@148@03]
(assert (and
  (<
    i__40@148@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
  (<= 0 i__40@148@03)))
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1
; [eval] diz.Write_a_m.Main_process_state[i__40]
(push) ; 10
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1786
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      314
;  :arith-assert-upper      274
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1716
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              272
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            173719
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__40@148@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1786
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      314
;  :arith-assert-upper      274
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1716
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              273
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            173728)
; [eval] -1
(push) ; 10
; [then-branch: 35 | First:(Second:(Second:(Second:($t@146@03))))[i__40@148@03] == -1 | live]
; [else-branch: 35 | First:(Second:(Second:(Second:($t@146@03))))[i__40@148@03] != -1 | live]
(push) ; 11
; [then-branch: 35 | First:(Second:(Second:(Second:($t@146@03))))[i__40@148@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i__40@148@03)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 35 | First:(Second:(Second:(Second:($t@146@03))))[i__40@148@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      i__40@148@03)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40]
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1786
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      314
;  :arith-assert-upper      274
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1717
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              274
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            173942
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__40@148@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1786
;  :arith-add-rows          7
;  :arith-assert-diseq      91
;  :arith-assert-lower      314
;  :arith-assert-upper      274
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1717
;  :mk-clause               691
;  :num-allocs              3925442
;  :num-checks              275
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            173951)
(push) ; 12
; [then-branch: 36 | 0 <= First:(Second:(Second:(Second:($t@146@03))))[i__40@148@03] | live]
; [else-branch: 36 | !(0 <= First:(Second:(Second:(Second:($t@146@03))))[i__40@148@03]) | live]
(push) ; 13
; [then-branch: 36 | 0 <= First:(Second:(Second:(Second:($t@146@03))))[i__40@148@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i__40@148@03)))
; [eval] diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1786
;  :arith-add-rows          7
;  :arith-assert-diseq      92
;  :arith-assert-lower      317
;  :arith-assert-upper      274
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1720
;  :mk-clause               692
;  :num-allocs              3925442
;  :num-checks              276
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            174113
;  :time                    0.02)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__40@148@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1786
;  :arith-add-rows          7
;  :arith-assert-diseq      92
;  :arith-assert-lower      317
;  :arith-assert-upper      274
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1720
;  :mk-clause               692
;  :num-allocs              3925442
;  :num-checks              277
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            174122)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1786
;  :arith-add-rows          7
;  :arith-assert-diseq      92
;  :arith-assert-lower      317
;  :arith-assert-upper      274
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              630
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1720
;  :mk-clause               692
;  :num-allocs              3925442
;  :num-checks              278
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            174170
;  :time                    0.03)
(pop) ; 13
(push) ; 13
; [else-branch: 36 | !(0 <= First:(Second:(Second:(Second:($t@146@03))))[i__40@148@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      i__40@148@03))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 34 | !(i__40@148@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i__40@148@03)]
(assert (not
  (and
    (<
      i__40@148@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
    (<= 0 i__40@148@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__40@148@03 Int)) (!
  (implies
    (and
      (<
        i__40@148@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
      (<= 0 i__40@148@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          i__40@148@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i__40@148@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i__40@148@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i__40@148@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1791
;  :arith-add-rows          7
;  :arith-assert-diseq      92
;  :arith-assert-lower      317
;  :arith-assert-upper      274
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1722
;  :mk-clause               692
;  :num-allocs              3925442
;  :num-checks              279
;  :propagations            324
;  :quant-instantiations    163
;  :rlimit-count            174795
;  :time                    0.00)
(declare-const $k@149@03 $Perm)
(assert ($Perm.isReadVar $k@149@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@149@03 $Perm.No) (< $Perm.No $k@149@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1791
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      275
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             1726
;  :mk-clause               694
;  :num-allocs              3925442
;  :num-checks              280
;  :propagations            325
;  :quant-instantiations    163
;  :rlimit-count            174994)
(assert (<= $Perm.No $k@149@03))
(assert (<= $k@149@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@149@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1797
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1729
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              281
;  :propagations            325
;  :quant-instantiations    163
;  :rlimit-count            175317
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1797
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1729
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              282
;  :propagations            325
;  :quant-instantiations    163
;  :rlimit-count            175365
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1803
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1732
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              283
;  :propagations            325
;  :quant-instantiations    164
;  :rlimit-count            175721
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1803
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1732
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              284
;  :propagations            325
;  :quant-instantiations    164
;  :rlimit-count            175769
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1808
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1733
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              285
;  :propagations            325
;  :quant-instantiations    164
;  :rlimit-count            176026
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1808
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1733
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              286
;  :propagations            325
;  :quant-instantiations    164
;  :rlimit-count            176074
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1813
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1734
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              287
;  :propagations            325
;  :quant-instantiations    164
;  :rlimit-count            176341
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1813
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1734
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              288
;  :propagations            325
;  :quant-instantiations    164
;  :rlimit-count            176389
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1818
;  :arith-add-rows          7
;  :arith-assert-diseq      93
;  :arith-assert-lower      319
;  :arith-assert-upper      276
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1735
;  :mk-clause               694
;  :num-allocs              4097356
;  :num-checks              289
;  :propagations            325
;  :quant-instantiations    164
;  :rlimit-count            176666)
(declare-const $k@150@03 $Perm)
(assert ($Perm.isReadVar $k@150@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@150@03 $Perm.No) (< $Perm.No $k@150@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1818
;  :arith-add-rows          7
;  :arith-assert-diseq      94
;  :arith-assert-lower      321
;  :arith-assert-upper      277
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1739
;  :mk-clause               696
;  :num-allocs              4097356
;  :num-checks              290
;  :propagations            326
;  :quant-instantiations    164
;  :rlimit-count            176864)
(assert (<= $Perm.No $k@150@03))
(assert (<= $k@150@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@150@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1824
;  :arith-add-rows          7
;  :arith-assert-diseq      94
;  :arith-assert-lower      321
;  :arith-assert-upper      278
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1742
;  :mk-clause               696
;  :num-allocs              4097356
;  :num-checks              291
;  :propagations            326
;  :quant-instantiations    164
;  :rlimit-count            177237)
(push) ; 7
(assert (not (< $Perm.No $k@150@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1824
;  :arith-add-rows          7
;  :arith-assert-diseq      94
;  :arith-assert-lower      321
;  :arith-assert-upper      278
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1742
;  :mk-clause               696
;  :num-allocs              4097356
;  :num-checks              292
;  :propagations            326
;  :quant-instantiations    164
;  :rlimit-count            177285)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1830
;  :arith-add-rows          7
;  :arith-assert-diseq      94
;  :arith-assert-lower      321
;  :arith-assert-upper      278
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1745
;  :mk-clause               696
;  :num-allocs              4097356
;  :num-checks              293
;  :propagations            326
;  :quant-instantiations    165
;  :rlimit-count            177695)
(push) ; 7
(assert (not (< $Perm.No $k@150@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1830
;  :arith-add-rows          7
;  :arith-assert-diseq      94
;  :arith-assert-lower      321
;  :arith-assert-upper      278
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1745
;  :mk-clause               696
;  :num-allocs              4097356
;  :num-checks              294
;  :propagations            326
;  :quant-instantiations    165
;  :rlimit-count            177743
;  :time                    0.02)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1835
;  :arith-add-rows          7
;  :arith-assert-diseq      94
;  :arith-assert-lower      321
;  :arith-assert-upper      278
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1746
;  :mk-clause               696
;  :num-allocs              4097356
;  :num-checks              295
;  :propagations            326
;  :quant-instantiations    165
;  :rlimit-count            178050
;  :time                    0.01)
(declare-const $k@151@03 $Perm)
(assert ($Perm.isReadVar $k@151@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@151@03 $Perm.No) (< $Perm.No $k@151@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1835
;  :arith-add-rows          7
;  :arith-assert-diseq      95
;  :arith-assert-lower      323
;  :arith-assert-upper      279
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1750
;  :mk-clause               698
;  :num-allocs              4097356
;  :num-checks              296
;  :propagations            327
;  :quant-instantiations    165
;  :rlimit-count            178249)
(assert (<= $Perm.No $k@151@03))
(assert (<= $k@151@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@151@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          7
;  :arith-assert-diseq      95
;  :arith-assert-lower      323
;  :arith-assert-upper      280
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1753
;  :mk-clause               698
;  :num-allocs              4097356
;  :num-checks              297
;  :propagations            327
;  :quant-instantiations    165
;  :rlimit-count            178652
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@151@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1841
;  :arith-add-rows          7
;  :arith-assert-diseq      95
;  :arith-assert-lower      323
;  :arith-assert-upper      280
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1753
;  :mk-clause               698
;  :num-allocs              4097356
;  :num-checks              298
;  :propagations            327
;  :quant-instantiations    165
;  :rlimit-count            178700
;  :time                    0.03)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1847
;  :arith-add-rows          7
;  :arith-assert-diseq      95
;  :arith-assert-lower      323
;  :arith-assert-upper      280
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1756
;  :mk-clause               698
;  :num-allocs              4097356
;  :num-checks              299
;  :propagations            327
;  :quant-instantiations    166
;  :rlimit-count            179136
;  :time                    0.02)
(push) ; 7
(assert (not (< $Perm.No $k@151@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1847
;  :arith-add-rows          7
;  :arith-assert-diseq      95
;  :arith-assert-lower      323
;  :arith-assert-upper      280
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1756
;  :mk-clause               698
;  :num-allocs              4097356
;  :num-checks              300
;  :propagations            327
;  :quant-instantiations    166
;  :rlimit-count            179184
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1852
;  :arith-add-rows          7
;  :arith-assert-diseq      95
;  :arith-assert-lower      323
;  :arith-assert-upper      280
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1757
;  :mk-clause               698
;  :num-allocs              4097356
;  :num-checks              301
;  :propagations            327
;  :quant-instantiations    166
;  :rlimit-count            179521
;  :time                    0.01)
(declare-const $k@152@03 $Perm)
(assert ($Perm.isReadVar $k@152@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@152@03 $Perm.No) (< $Perm.No $k@152@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1852
;  :arith-add-rows          7
;  :arith-assert-diseq      96
;  :arith-assert-lower      325
;  :arith-assert-upper      281
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1761
;  :mk-clause               700
;  :num-allocs              4097356
;  :num-checks              302
;  :propagations            328
;  :quant-instantiations    166
;  :rlimit-count            179720)
(assert (<= $Perm.No $k@152@03))
(assert (<= $k@152@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@152@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1858
;  :arith-add-rows          7
;  :arith-assert-diseq      96
;  :arith-assert-lower      325
;  :arith-assert-upper      282
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1764
;  :mk-clause               700
;  :num-allocs              4097356
;  :num-checks              303
;  :propagations            328
;  :quant-instantiations    166
;  :rlimit-count            180153)
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1858
;  :arith-add-rows          7
;  :arith-assert-diseq      96
;  :arith-assert-lower      325
;  :arith-assert-upper      282
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1764
;  :mk-clause               700
;  :num-allocs              4097356
;  :num-checks              304
;  :propagations            328
;  :quant-instantiations    166
;  :rlimit-count            180201
;  :time                    0.02)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1864
;  :arith-add-rows          7
;  :arith-assert-diseq      96
;  :arith-assert-lower      325
;  :arith-assert-upper      282
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1767
;  :mk-clause               700
;  :num-allocs              4097356
;  :num-checks              305
;  :propagations            328
;  :quant-instantiations    167
;  :rlimit-count            180667
;  :time                    0.02)
(push) ; 7
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1864
;  :arith-add-rows          7
;  :arith-assert-diseq      96
;  :arith-assert-lower      325
;  :arith-assert-upper      282
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1767
;  :mk-clause               700
;  :num-allocs              4097356
;  :num-checks              306
;  :propagations            328
;  :quant-instantiations    167
;  :rlimit-count            180715)
(declare-const $k@153@03 $Perm)
(assert ($Perm.isReadVar $k@153@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@153@03 $Perm.No) (< $Perm.No $k@153@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1864
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      283
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1771
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              307
;  :propagations            329
;  :quant-instantiations    167
;  :rlimit-count            180913)
(assert (<= $Perm.No $k@153@03))
(assert (<= $k@153@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@153@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1870
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1774
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              308
;  :propagations            329
;  :quant-instantiations    167
;  :rlimit-count            181366
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1870
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1774
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              309
;  :propagations            329
;  :quant-instantiations    167
;  :rlimit-count            181414
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@153@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1870
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1774
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              310
;  :propagations            329
;  :quant-instantiations    167
;  :rlimit-count            181462
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1870
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1774
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              311
;  :propagations            329
;  :quant-instantiations    167
;  :rlimit-count            181510
;  :time                    0.02)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 7
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1875
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1777
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              312
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            181942
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@150@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1875
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1777
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              313
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            181990
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
  diz@84@03))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_process_state[0] != -1
; [eval] diz.Write_a_m.Main_process_state[0]
(push) ; 8
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1878
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1778
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              314
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            182236
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1878
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1778
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              315
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            182251)
; [eval] -1
(push) ; 8
; [then-branch: 37 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1 | live]
; [else-branch: 37 | First:(Second:(Second:(Second:($t@146@03))))[0] == -1 | live]
(push) ; 9
; [then-branch: 37 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 37 | First:(Second:(Second:(Second:($t@146@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    0)
  (- 0 1)))
; [eval] diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1879
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1779
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              316
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            182446
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1879
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1779
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              317
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            182461)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !(diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2)
; [eval] diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_process_state[0] != -1
; [eval] diz.Write_a_m.Main_process_state[0]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1879
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1779
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              318
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            182514
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1879
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1779
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              319
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            182529)
; [eval] -1
(push) ; 8
; [then-branch: 38 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1 | live]
; [else-branch: 38 | First:(Second:(Second:(Second:($t@146@03))))[0] == -1 | live]
(push) ; 9
; [then-branch: 38 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 38 | First:(Second:(Second:(Second:($t@146@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    0)
  (- 0 1)))
; [eval] diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1780
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              320
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            182720)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      97
;  :arith-assert-lower      327
;  :arith-assert-upper      284
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              631
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1780
;  :mk-clause               702
;  :num-allocs              4097356
;  :num-checks              321
;  :propagations            329
;  :quant-instantiations    168
;  :rlimit-count            182735)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(declare-const $k@154@03 $Perm)
(assert ($Perm.isReadVar $k@154@03 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@154@03 $Perm.No) (< $Perm.No $k@154@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      329
;  :arith-assert-upper      285
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1784
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              322
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            182939)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@122@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      329
;  :arith-assert-upper      285
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         38
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1784
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              323
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            182950)
(assert (< $k@154@03 $k@122@03))
(assert (<= $Perm.No (- $k@122@03 $k@154@03)))
(assert (<= (- $k@122@03 $k@154@03) $Perm.Write))
(assert (implies (< $Perm.No (- $k@122@03 $k@154@03)) (not (= diz@84@03 $Ref.null))))
; [eval] diz.Write_a_m != null
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      331
;  :arith-assert-upper      286
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1787
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              324
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183164
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      331
;  :arith-assert-upper      286
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1787
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              325
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183212)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      331
;  :arith-assert-upper      286
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1787
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              326
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183260)
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      331
;  :arith-assert-upper      286
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1787
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              327
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183308
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 7
(assert (not (= (Seq_length __flatten_41__34@142@03) 3)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1880
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      331
;  :arith-assert-upper      286
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1790
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              328
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183382)
(assert (= (Seq_length __flatten_41__34@142@03) 3))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1881
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      332
;  :arith-assert-upper      287
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1793
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              329
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183481
;  :time                    0.00)
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1881
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      332
;  :arith-assert-upper      287
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1793
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              330
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183529
;  :time                    0.02)
(set-option :timeout 0)
(push) ; 7
(assert (not (= (Seq_length __flatten_44__37@145@03) 3)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1881
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      332
;  :arith-assert-upper      287
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1796
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              331
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183603)
(assert (= (Seq_length __flatten_44__37@145@03) 3))
; [eval] (forall i__40: Int :: { diz.Write_a_m.Main_process_state[i__40] } 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|)
(declare-const i__40@155@03 Int)
(push) ; 7
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__40
(push) ; 8
; [then-branch: 39 | 0 <= i__40@155@03 | live]
; [else-branch: 39 | !(0 <= i__40@155@03) | live]
(push) ; 9
; [then-branch: 39 | 0 <= i__40@155@03]
(assert (<= 0 i__40@155@03))
; [eval] i__40 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1882
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      334
;  :arith-assert-upper      288
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1800
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              332
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183754
;  :time                    0.02)
(pop) ; 9
(push) ; 9
; [else-branch: 39 | !(0 <= i__40@155@03)]
(assert (not (<= 0 i__40@155@03)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 40 | i__40@155@03 < |__flatten_41__34@142@03| && 0 <= i__40@155@03 | live]
; [else-branch: 40 | !(i__40@155@03 < |__flatten_41__34@142@03| && 0 <= i__40@155@03) | live]
(push) ; 9
; [then-branch: 40 | i__40@155@03 < |__flatten_41__34@142@03| && 0 <= i__40@155@03]
(assert (and (< i__40@155@03 (Seq_length __flatten_41__34@142@03)) (<= 0 i__40@155@03)))
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1
; [eval] diz.Write_a_m.Main_process_state[i__40]
(push) ; 10
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1882
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      335
;  :arith-assert-upper      289
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1802
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              333
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183911
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__40@155@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1882
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      335
;  :arith-assert-upper      289
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1802
;  :mk-clause               704
;  :num-allocs              4097356
;  :num-checks              334
;  :propagations            330
;  :quant-instantiations    168
;  :rlimit-count            183920)
; [eval] -1
(push) ; 10
; [then-branch: 41 | __flatten_41__34@142@03[i__40@155@03] == -1 | live]
; [else-branch: 41 | __flatten_41__34@142@03[i__40@155@03] != -1 | live]
(push) ; 11
; [then-branch: 41 | __flatten_41__34@142@03[i__40@155@03] == -1]
(assert (= (Seq_index __flatten_41__34@142@03 i__40@155@03) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 41 | __flatten_41__34@142@03[i__40@155@03] != -1]
(assert (not (= (Seq_index __flatten_41__34@142@03 i__40@155@03) (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40]
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1883
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      335
;  :arith-assert-upper      289
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1809
;  :mk-clause               712
;  :num-allocs              4097356
;  :num-checks              335
;  :propagations            330
;  :quant-instantiations    169
;  :rlimit-count            184122)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__40@155@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1883
;  :arith-add-rows          7
;  :arith-assert-diseq      98
;  :arith-assert-lower      335
;  :arith-assert-upper      289
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1809
;  :mk-clause               712
;  :num-allocs              4097356
;  :num-checks              336
;  :propagations            330
;  :quant-instantiations    169
;  :rlimit-count            184131)
(push) ; 12
; [then-branch: 42 | 0 <= __flatten_41__34@142@03[i__40@155@03] | live]
; [else-branch: 42 | !(0 <= __flatten_41__34@142@03[i__40@155@03]) | live]
(push) ; 13
; [then-branch: 42 | 0 <= __flatten_41__34@142@03[i__40@155@03]]
(assert (<= 0 (Seq_index __flatten_41__34@142@03 i__40@155@03)))
; [eval] diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1883
;  :arith-add-rows          7
;  :arith-assert-diseq      99
;  :arith-assert-lower      338
;  :arith-assert-upper      289
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1812
;  :mk-clause               713
;  :num-allocs              4097356
;  :num-checks              337
;  :propagations            330
;  :quant-instantiations    169
;  :rlimit-count            184243
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__40@155@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1883
;  :arith-add-rows          7
;  :arith-assert-diseq      99
;  :arith-assert-lower      338
;  :arith-assert-upper      289
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1812
;  :mk-clause               713
;  :num-allocs              4097356
;  :num-checks              338
;  :propagations            330
;  :quant-instantiations    169
;  :rlimit-count            184252)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1883
;  :arith-add-rows          7
;  :arith-assert-diseq      99
;  :arith-assert-lower      338
;  :arith-assert-upper      289
;  :arith-bound-prop        12
;  :arith-conflicts         12
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         38
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               258
;  :del-clause              643
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1812
;  :mk-clause               713
;  :num-allocs              4097356
;  :num-checks              339
;  :propagations            330
;  :quant-instantiations    169
;  :rlimit-count            184300)
(pop) ; 13
(push) ; 13
; [else-branch: 42 | !(0 <= __flatten_41__34@142@03[i__40@155@03])]
(assert (not (<= 0 (Seq_index __flatten_41__34@142@03 i__40@155@03))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 40 | !(i__40@155@03 < |__flatten_41__34@142@03| && 0 <= i__40@155@03)]
(assert (not
  (and (< i__40@155@03 (Seq_length __flatten_41__34@142@03)) (<= 0 i__40@155@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__40@155@03 Int)) (!
  (implies
    (and
      (< i__40@155@03 (Seq_length __flatten_41__34@142@03))
      (<= 0 i__40@155@03))
    (or
      (= (Seq_index __flatten_41__34@142@03 i__40@155@03) (- 0 1))
      (and
        (<
          (Seq_index __flatten_41__34@142@03 i__40@155@03)
          (Seq_length __flatten_44__37@145@03))
        (<= 0 (Seq_index __flatten_41__34@142@03 i__40@155@03)))))
  :pattern ((Seq_index __flatten_41__34@142@03 i__40@155@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      106
;  :arith-assert-lower      354
;  :arith-assert-upper      300
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         40
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1855
;  :mk-clause               778
;  :num-allocs              4097356
;  :num-checks              340
;  :propagations            363
;  :quant-instantiations    173
;  :rlimit-count            184997
;  :time                    0.00)
(assert (forall ((i__40@155@03 Int)) (!
  (implies
    (and
      (< i__40@155@03 (Seq_length __flatten_41__34@142@03))
      (<= 0 i__40@155@03))
    (or
      (= (Seq_index __flatten_41__34@142@03 i__40@155@03) (- 0 1))
      (and
        (<
          (Seq_index __flatten_41__34@142@03 i__40@155@03)
          (Seq_length __flatten_44__37@145@03))
        (<= 0 (Seq_index __flatten_41__34@142@03 i__40@155@03)))))
  :pattern ((Seq_index __flatten_41__34@142@03 i__40@155@03))
  :qid |prog.l<no position>|)))
(declare-const $k@156@03 $Perm)
(assert ($Perm.isReadVar $k@156@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      356
;  :arith-assert-upper      301
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1860
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              341
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185465
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@156@03 $Perm.No) (< $Perm.No $k@156@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      356
;  :arith-assert-upper      301
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1860
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              342
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185515)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@124@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      356
;  :arith-assert-upper      301
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1860
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              343
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185526
;  :time                    0.01)
(assert (< $k@156@03 $k@124@03))
(assert (<= $Perm.No (- $k@124@03 $k@156@03)))
(assert (<= (- $k@124@03 $k@156@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@124@03 $k@156@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand != null
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.06s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      358
;  :arith-assert-upper      302
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1863
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              344
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185746
;  :time                    0.04)
(push) ; 7
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      358
;  :arith-assert-upper      302
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1863
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              345
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185794
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      358
;  :arith-assert-upper      302
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1863
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              346
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185842
;  :time                    0.02)
(push) ; 7
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      358
;  :arith-assert-upper      302
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1863
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              347
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185890)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.06s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      358
;  :arith-assert-upper      302
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1863
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              348
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185938
;  :time                    0.06)
(push) ; 7
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.17s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      358
;  :arith-assert-upper      302
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1863
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              349
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            185986
;  :time                    0.04)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      358
;  :arith-assert-upper      302
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1863
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              350
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            186034)
(push) ; 7
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      107
;  :arith-assert-lower      358
;  :arith-assert-upper      302
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1863
;  :mk-clause               780
;  :num-allocs              4097356
;  :num-checks              351
;  :propagations            364
;  :quant-instantiations    173
;  :rlimit-count            186082
;  :time                    0.00)
(declare-const $k@157@03 $Perm)
(assert ($Perm.isReadVar $k@157@03 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      108
;  :arith-assert-lower      360
;  :arith-assert-upper      303
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1867
;  :mk-clause               782
;  :num-allocs              4097356
;  :num-checks              352
;  :propagations            365
;  :quant-instantiations    173
;  :rlimit-count            186279)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@157@03 $Perm.No) (< $Perm.No $k@157@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      108
;  :arith-assert-lower      360
;  :arith-assert-upper      303
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1867
;  :mk-clause               782
;  :num-allocs              4097356
;  :num-checks              353
;  :propagations            365
;  :quant-instantiations    173
;  :rlimit-count            186329)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@125@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      108
;  :arith-assert-lower      360
;  :arith-assert-upper      303
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1867
;  :mk-clause               782
;  :num-allocs              4097356
;  :num-checks              354
;  :propagations            365
;  :quant-instantiations    173
;  :rlimit-count            186340
;  :time                    0.02)
(assert (< $k@157@03 $k@125@03))
(assert (<= $Perm.No (- $k@125@03 $k@157@03)))
(assert (<= (- $k@125@03 $k@157@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@125@03 $k@157@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      108
;  :arith-assert-lower      362
;  :arith-assert-upper      304
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1870
;  :mk-clause               782
;  :num-allocs              4097356
;  :num-checks              355
;  :propagations            365
;  :quant-instantiations    173
;  :rlimit-count            186548)
(push) ; 7
(assert (not (< $Perm.No $k@125@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      108
;  :arith-assert-lower      362
;  :arith-assert-upper      304
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1870
;  :mk-clause               782
;  :num-allocs              4097356
;  :num-checks              356
;  :propagations            365
;  :quant-instantiations    173
;  :rlimit-count            186596
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      108
;  :arith-assert-lower      362
;  :arith-assert-upper      304
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1870
;  :mk-clause               782
;  :num-allocs              4097356
;  :num-checks              357
;  :propagations            365
;  :quant-instantiations    173
;  :rlimit-count            186644)
(push) ; 7
(assert (not (< $Perm.No $k@125@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      108
;  :arith-assert-lower      362
;  :arith-assert-upper      304
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1870
;  :mk-clause               782
;  :num-allocs              4097356
;  :num-checks              358
;  :propagations            365
;  :quant-instantiations    173
;  :rlimit-count            186692
;  :time                    0.00)
(push) ; 7
(assert (not (=
  diz@84@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      108
;  :arith-assert-lower      362
;  :arith-assert-upper      304
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1870
;  :mk-clause               782
;  :num-allocs              4097356
;  :num-checks              359
;  :propagations            365
;  :quant-instantiations    173
;  :rlimit-count            186703
;  :time                    0.02)
(declare-const $k@158@03 $Perm)
(assert ($Perm.isReadVar $k@158@03 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      109
;  :arith-assert-lower      364
;  :arith-assert-upper      305
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1874
;  :mk-clause               784
;  :num-allocs              4097356
;  :num-checks              360
;  :propagations            366
;  :quant-instantiations    173
;  :rlimit-count            186900
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@158@03 $Perm.No) (< $Perm.No $k@158@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      109
;  :arith-assert-lower      364
;  :arith-assert-upper      305
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1874
;  :mk-clause               784
;  :num-allocs              4097356
;  :num-checks              361
;  :propagations            366
;  :quant-instantiations    173
;  :rlimit-count            186950)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@126@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      109
;  :arith-assert-lower      364
;  :arith-assert-upper      305
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1874
;  :mk-clause               784
;  :num-allocs              4097356
;  :num-checks              362
;  :propagations            366
;  :quant-instantiations    173
;  :rlimit-count            186961
;  :time                    0.01)
(assert (< $k@158@03 $k@126@03))
(assert (<= $Perm.No (- $k@126@03 $k@158@03)))
(assert (<= (- $k@126@03 $k@158@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@126@03 $k@158@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      109
;  :arith-assert-lower      366
;  :arith-assert-upper      306
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1877
;  :mk-clause               784
;  :num-allocs              4097356
;  :num-checks              363
;  :propagations            366
;  :quant-instantiations    173
;  :rlimit-count            187169)
(push) ; 7
(assert (not (< $Perm.No $k@126@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      109
;  :arith-assert-lower      366
;  :arith-assert-upper      306
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1877
;  :mk-clause               784
;  :num-allocs              4097356
;  :num-checks              364
;  :propagations            366
;  :quant-instantiations    173
;  :rlimit-count            187217
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      109
;  :arith-assert-lower      366
;  :arith-assert-upper      306
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1877
;  :mk-clause               784
;  :num-allocs              4097356
;  :num-checks              365
;  :propagations            366
;  :quant-instantiations    173
;  :rlimit-count            187265
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@126@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      109
;  :arith-assert-lower      366
;  :arith-assert-upper      306
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1877
;  :mk-clause               784
;  :num-allocs              4097356
;  :num-checks              366
;  :propagations            366
;  :quant-instantiations    173
;  :rlimit-count            187313
;  :time                    0.00)
(declare-const $k@159@03 $Perm)
(assert ($Perm.isReadVar $k@159@03 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      110
;  :arith-assert-lower      368
;  :arith-assert-upper      307
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1881
;  :mk-clause               786
;  :num-allocs              4097356
;  :num-checks              367
;  :propagations            367
;  :quant-instantiations    173
;  :rlimit-count            187510
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@159@03 $Perm.No) (< $Perm.No $k@159@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      110
;  :arith-assert-lower      368
;  :arith-assert-upper      307
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1881
;  :mk-clause               786
;  :num-allocs              4097356
;  :num-checks              368
;  :propagations            367
;  :quant-instantiations    173
;  :rlimit-count            187560)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@127@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      110
;  :arith-assert-lower      368
;  :arith-assert-upper      307
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         40
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1881
;  :mk-clause               786
;  :num-allocs              4097356
;  :num-checks              369
;  :propagations            367
;  :quant-instantiations    173
;  :rlimit-count            187571)
(assert (< $k@159@03 $k@127@03))
(assert (<= $Perm.No (- $k@127@03 $k@159@03)))
(assert (<= (- $k@127@03 $k@159@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@127@03 $k@159@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_read != null
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      110
;  :arith-assert-lower      370
;  :arith-assert-upper      308
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         40
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1884
;  :mk-clause               786
;  :num-allocs              4097356
;  :num-checks              370
;  :propagations            367
;  :quant-instantiations    173
;  :rlimit-count            187785
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@127@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      110
;  :arith-assert-lower      370
;  :arith-assert-upper      308
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         40
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1884
;  :mk-clause               786
;  :num-allocs              4097356
;  :num-checks              371
;  :propagations            367
;  :quant-instantiations    173
;  :rlimit-count            187833
;  :time                    0.00)
(declare-const $k@160@03 $Perm)
(assert ($Perm.isReadVar $k@160@03 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      372
;  :arith-assert-upper      309
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1888
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              372
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188029
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      372
;  :arith-assert-upper      309
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1888
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              373
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188077
;  :time                    0.02)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@160@03 $Perm.No) (< $Perm.No $k@160@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      372
;  :arith-assert-upper      309
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1888
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              374
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188127)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@128@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      372
;  :arith-assert-upper      309
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1888
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              375
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188138
;  :time                    0.02)
(assert (< $k@160@03 $k@128@03))
(assert (<= $Perm.No (- $k@128@03 $k@160@03)))
(assert (<= (- $k@128@03 $k@160@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@128@03 $k@160@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      374
;  :arith-assert-upper      310
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1891
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              376
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188358)
(push) ; 7
(assert (not (< $Perm.No $k@124@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      374
;  :arith-assert-upper      310
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1891
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              377
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188406
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@128@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      374
;  :arith-assert-upper      310
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1891
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              378
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188454
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      374
;  :arith-assert-upper      310
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1891
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              379
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188502)
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 7
(assert (not (< $Perm.No $k@122@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      374
;  :arith-assert-upper      310
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1891
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              380
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188550
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@125@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          7
;  :arith-assert-diseq      111
;  :arith-assert-lower      374
;  :arith-assert-upper      310
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 201
;  :datatype-occurs-check   137
;  :datatype-splits         139
;  :decisions               264
;  :del-clause              717
;  :final-checks            81
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             1891
;  :mk-clause               788
;  :num-allocs              4097356
;  :num-checks              381
;  :propagations            368
;  :quant-instantiations    173
;  :rlimit-count            188598
;  :time                    0.00)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@147@03 $Perm.Write))
(assert ($Perm.isReadVar $k@149@03 $Perm.Write))
(assert ($Perm.isReadVar $k@150@03 $Perm.Write))
(assert ($Perm.isReadVar $k@151@03 $Perm.Write))
(assert ($Perm.isReadVar $k@152@03 $Perm.Write))
(assert ($Perm.isReadVar $k@153@03 $Perm.Write))
(assert (= $t@146@03 ($Snap.combine ($Snap.first $t@146@03) ($Snap.second $t@146@03))))
(assert (<= $Perm.No $k@147@03))
(assert (<= $k@147@03 $Perm.Write))
(assert (implies (< $Perm.No $k@147@03) (not (= diz@84@03 $Ref.null))))
(assert (=
  ($Snap.second $t@146@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@146@03))
    ($Snap.second ($Snap.second $t@146@03)))))
(assert (= ($Snap.first ($Snap.second $t@146@03)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@146@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@146@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@146@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
  $Snap.unit))
(assert (forall ((i__40@148@03 Int)) (!
  (implies
    (and
      (<
        i__40@148@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
      (<= 0 i__40@148@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          i__40@148@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i__40@148@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i__40@148@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i__40@148@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))
(assert (<= $Perm.No $k@149@03))
(assert (<= $k@149@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@149@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
(assert (<= $Perm.No $k@150@03))
(assert (<= $k@150@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@150@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
(assert (<= $Perm.No $k@151@03))
(assert (<= $k@151@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@151@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
(assert (<= $Perm.No $k@152@03))
(assert (<= $k@152@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@152@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))))
(assert (<= $Perm.No $k@153@03))
(assert (<= $k@153@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@153@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
  diz@84@03))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_process_state[0] != -1
; [eval] diz.Write_a_m.Main_process_state[0]
(push) ; 8
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2345
;  :arith-add-rows          7
;  :arith-assert-diseq      117
;  :arith-assert-lower      390
;  :arith-assert-upper      324
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 273
;  :datatype-occurs-check   155
;  :datatype-splits         207
;  :decisions               338
;  :del-clause              731
;  :final-checks            85
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2045
;  :mk-clause               802
;  :num-allocs              4469989
;  :num-checks              384
;  :propagations            380
;  :quant-instantiations    183
;  :rlimit-count            195324
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2345
;  :arith-add-rows          7
;  :arith-assert-diseq      117
;  :arith-assert-lower      390
;  :arith-assert-upper      324
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 273
;  :datatype-occurs-check   155
;  :datatype-splits         207
;  :decisions               338
;  :del-clause              731
;  :final-checks            85
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2045
;  :mk-clause               802
;  :num-allocs              4469989
;  :num-checks              385
;  :propagations            380
;  :quant-instantiations    183
;  :rlimit-count            195339)
; [eval] -1
(push) ; 8
; [then-branch: 43 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1 | live]
; [else-branch: 43 | First:(Second:(Second:(Second:($t@146@03))))[0] == -1 | live]
(push) ; 9
; [then-branch: 43 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 43 | First:(Second:(Second:(Second:($t@146@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    0)
  (- 0 1)))
; [eval] diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2346
;  :arith-add-rows          7
;  :arith-assert-diseq      117
;  :arith-assert-lower      390
;  :arith-assert-upper      324
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 273
;  :datatype-occurs-check   155
;  :datatype-splits         207
;  :decisions               338
;  :del-clause              731
;  :final-checks            85
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2046
;  :mk-clause               802
;  :num-allocs              4469989
;  :num-checks              386
;  :propagations            380
;  :quant-instantiations    183
;  :rlimit-count            195530
;  :time                    0.05)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2346
;  :arith-add-rows          7
;  :arith-assert-diseq      117
;  :arith-assert-lower      390
;  :arith-assert-upper      324
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         40
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 273
;  :datatype-occurs-check   155
;  :datatype-splits         207
;  :decisions               338
;  :del-clause              731
;  :final-checks            85
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2046
;  :mk-clause               802
;  :num-allocs              4469989
;  :num-checks              387
;  :propagations            380
;  :quant-instantiations    183
;  :rlimit-count            195545)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2506
;  :arith-add-rows          8
;  :arith-assert-diseq      120
;  :arith-assert-lower      401
;  :arith-assert-upper      329
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   164
;  :datatype-splits         241
;  :decisions               376
;  :del-clause              756
;  :final-checks            87
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2105
;  :mk-clause               827
;  :num-allocs              4469989
;  :num-checks              388
;  :propagations            393
;  :quant-instantiations    187
;  :rlimit-count            197119
;  :time                    0.01)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      120
;  :arith-assert-lower      401
;  :arith-assert-upper      329
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              757
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2147
;  :mk-clause               828
;  :num-allocs              4469989
;  :num-checks              389
;  :propagations            396
;  :quant-instantiations    187
;  :rlimit-count            198464
;  :time                    0.01)
; [then-branch: 44 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@146@03))))))[0] != -2 | live]
; [else-branch: 44 | !(First:(Second:(Second:(Second:($t@146@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@146@03))))))[0] != -2) | live]
(push) ; 8
; [then-branch: 44 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@146@03))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
        0)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      120
;  :arith-assert-lower      401
;  :arith-assert-upper      329
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              757
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2149
;  :mk-clause               829
;  :num-allocs              4469989
;  :num-checks              390
;  :propagations            396
;  :quant-instantiations    187
;  :rlimit-count            198742
;  :time                    0.01)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      120
;  :arith-assert-lower      401
;  :arith-assert-upper      329
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              757
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2149
;  :mk-clause               829
;  :num-allocs              4469989
;  :num-checks              391
;  :propagations            396
;  :quant-instantiations    187
;  :rlimit-count            198790)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@161@03 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 45 | 0 <= i@161@03 | live]
; [else-branch: 45 | !(0 <= i@161@03) | live]
(push) ; 11
; [then-branch: 45 | 0 <= i@161@03]
(assert (<= 0 i@161@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 45 | !(0 <= i@161@03)]
(assert (not (<= 0 i@161@03)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 46 | i@161@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i@161@03 | live]
; [else-branch: 46 | !(i@161@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i@161@03) | live]
(push) ; 11
; [then-branch: 46 | i@161@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i@161@03]
(assert (and
  (<
    i@161@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
  (<= 0 i@161@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@161@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      120
;  :arith-assert-lower      402
;  :arith-assert-upper      330
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              757
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2151
;  :mk-clause               829
;  :num-allocs              4469989
;  :num-checks              392
;  :propagations            396
;  :quant-instantiations    187
;  :rlimit-count            198926)
; [eval] -1
(push) ; 12
; [then-branch: 47 | First:(Second:(Second:(Second:($t@146@03))))[i@161@03] == -1 | live]
; [else-branch: 47 | First:(Second:(Second:(Second:($t@146@03))))[i@161@03] != -1 | live]
(push) ; 13
; [then-branch: 47 | First:(Second:(Second:(Second:($t@146@03))))[i@161@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i@161@03)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 47 | First:(Second:(Second:(Second:($t@146@03))))[i@161@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      i@161@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@161@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      121
;  :arith-assert-lower      405
;  :arith-assert-upper      331
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              757
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2157
;  :mk-clause               833
;  :num-allocs              4469989
;  :num-checks              393
;  :propagations            398
;  :quant-instantiations    188
;  :rlimit-count            199158)
(push) ; 14
; [then-branch: 48 | 0 <= First:(Second:(Second:(Second:($t@146@03))))[i@161@03] | live]
; [else-branch: 48 | !(0 <= First:(Second:(Second:(Second:($t@146@03))))[i@161@03]) | live]
(push) ; 15
; [then-branch: 48 | 0 <= First:(Second:(Second:(Second:($t@146@03))))[i@161@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i@161@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@161@03 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      121
;  :arith-assert-lower      405
;  :arith-assert-upper      331
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              757
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2157
;  :mk-clause               833
;  :num-allocs              4469989
;  :num-checks              394
;  :propagations            398
;  :quant-instantiations    188
;  :rlimit-count            199272)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 48 | !(0 <= First:(Second:(Second:(Second:($t@146@03))))[i@161@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      i@161@03))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 46 | !(i@161@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i@161@03)]
(assert (not
  (and
    (<
      i@161@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
    (<= 0 i@161@03))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i@161@03 Int)) (!
  (implies
    (and
      (<
        i@161@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
      (<= 0 i@161@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          i@161@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i@161@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i@161@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i@161@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      123
;  :arith-assert-lower      406
;  :arith-assert-upper      332
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2165
;  :mk-clause               847
;  :num-allocs              4469989
;  :num-checks              395
;  :propagations            400
;  :quant-instantiations    189
;  :rlimit-count            199718)
(assert (forall ((i@161@03 Int)) (!
  (implies
    (and
      (<
        i@161@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
      (<= 0 i@161@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          i@161@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i@161@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i@161@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i@161@03))
  :qid |prog.l<no position>|)))
(declare-const $k@162@03 $Perm)
(assert ($Perm.isReadVar $k@162@03 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@162@03 $Perm.No) (< $Perm.No $k@162@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      124
;  :arith-assert-lower      408
;  :arith-assert-upper      333
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2170
;  :mk-clause               849
;  :num-allocs              4469989
;  :num-checks              396
;  :propagations            401
;  :quant-instantiations    189
;  :rlimit-count            200279)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@149@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      124
;  :arith-assert-lower      408
;  :arith-assert-upper      333
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2170
;  :mk-clause               849
;  :num-allocs              4469989
;  :num-checks              397
;  :propagations            401
;  :quant-instantiations    189
;  :rlimit-count            200290
;  :time                    0.00)
(assert (< $k@162@03 $k@149@03))
(assert (<= $Perm.No (- $k@149@03 $k@162@03)))
(assert (<= (- $k@149@03 $k@162@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@149@03 $k@162@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      124
;  :arith-assert-lower      410
;  :arith-assert-upper      334
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2173
;  :mk-clause               849
;  :num-allocs              4469989
;  :num-checks              398
;  :propagations            401
;  :quant-instantiations    189
;  :rlimit-count            200498
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      124
;  :arith-assert-lower      410
;  :arith-assert-upper      334
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2173
;  :mk-clause               849
;  :num-allocs              4469989
;  :num-checks              399
;  :propagations            401
;  :quant-instantiations    189
;  :rlimit-count            200546
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      124
;  :arith-assert-lower      410
;  :arith-assert-upper      334
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2173
;  :mk-clause               849
;  :num-allocs              4469989
;  :num-checks              400
;  :propagations            401
;  :quant-instantiations    189
;  :rlimit-count            200594
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      124
;  :arith-assert-lower      410
;  :arith-assert-upper      334
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2173
;  :mk-clause               849
;  :num-allocs              4469989
;  :num-checks              401
;  :propagations            401
;  :quant-instantiations    189
;  :rlimit-count            200642)
(declare-const $k@163@03 $Perm)
(assert ($Perm.isReadVar $k@163@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@163@03 $Perm.No) (< $Perm.No $k@163@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      125
;  :arith-assert-lower      412
;  :arith-assert-upper      335
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2177
;  :mk-clause               851
;  :num-allocs              4469989
;  :num-checks              402
;  :propagations            402
;  :quant-instantiations    189
;  :rlimit-count            200841)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@150@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      125
;  :arith-assert-lower      412
;  :arith-assert-upper      335
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2177
;  :mk-clause               851
;  :num-allocs              4469989
;  :num-checks              403
;  :propagations            402
;  :quant-instantiations    189
;  :rlimit-count            200852)
(assert (< $k@163@03 $k@150@03))
(assert (<= $Perm.No (- $k@150@03 $k@163@03)))
(assert (<= (- $k@150@03 $k@163@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@150@03 $k@163@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@150@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      125
;  :arith-assert-lower      413
;  :arith-assert-upper      337
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2180
;  :mk-clause               851
;  :num-allocs              4469989
;  :num-checks              404
;  :propagations            402
;  :quant-instantiations    189
;  :rlimit-count            201060
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@150@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      125
;  :arith-assert-lower      413
;  :arith-assert-upper      337
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2180
;  :mk-clause               851
;  :num-allocs              4469989
;  :num-checks              405
;  :propagations            402
;  :quant-instantiations    189
;  :rlimit-count            201108
;  :time                    0.02)
(declare-const $k@164@03 $Perm)
(assert ($Perm.isReadVar $k@164@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@164@03 $Perm.No) (< $Perm.No $k@164@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      126
;  :arith-assert-lower      415
;  :arith-assert-upper      338
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2184
;  :mk-clause               853
;  :num-allocs              4469989
;  :num-checks              406
;  :propagations            403
;  :quant-instantiations    189
;  :rlimit-count            201307)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@151@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      126
;  :arith-assert-lower      415
;  :arith-assert-upper      338
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2184
;  :mk-clause               853
;  :num-allocs              4469989
;  :num-checks              407
;  :propagations            403
;  :quant-instantiations    189
;  :rlimit-count            201318
;  :time                    0.01)
(assert (< $k@164@03 $k@151@03))
(assert (<= $Perm.No (- $k@151@03 $k@164@03)))
(assert (<= (- $k@151@03 $k@164@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@151@03 $k@164@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@151@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      126
;  :arith-assert-lower      417
;  :arith-assert-upper      339
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2187
;  :mk-clause               853
;  :num-allocs              4469989
;  :num-checks              408
;  :propagations            403
;  :quant-instantiations    189
;  :rlimit-count            201526
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@151@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      126
;  :arith-assert-lower      417
;  :arith-assert-upper      339
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2187
;  :mk-clause               853
;  :num-allocs              4469989
;  :num-checks              409
;  :propagations            403
;  :quant-instantiations    189
;  :rlimit-count            201574
;  :time                    0.01)
(declare-const $k@165@03 $Perm)
(assert ($Perm.isReadVar $k@165@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@165@03 $Perm.No) (< $Perm.No $k@165@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      127
;  :arith-assert-lower      419
;  :arith-assert-upper      340
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2191
;  :mk-clause               855
;  :num-allocs              4469989
;  :num-checks              410
;  :propagations            404
;  :quant-instantiations    189
;  :rlimit-count            201773)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@152@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      127
;  :arith-assert-lower      419
;  :arith-assert-upper      340
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         42
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2191
;  :mk-clause               855
;  :num-allocs              4469989
;  :num-checks              411
;  :propagations            404
;  :quant-instantiations    189
;  :rlimit-count            201784
;  :time                    0.03)
(assert (< $k@165@03 $k@152@03))
(assert (<= $Perm.No (- $k@152@03 $k@165@03)))
(assert (<= (- $k@152@03 $k@165@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@152@03 $k@165@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      127
;  :arith-assert-lower      421
;  :arith-assert-upper      341
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         42
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2194
;  :mk-clause               855
;  :num-allocs              4469989
;  :num-checks              412
;  :propagations            404
;  :quant-instantiations    189
;  :rlimit-count            201998
;  :time                    0.00)
(declare-const $k@166@03 $Perm)
(assert ($Perm.isReadVar $k@166@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      128
;  :arith-assert-lower      423
;  :arith-assert-upper      342
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         42
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2198
;  :mk-clause               857
;  :num-allocs              4469989
;  :num-checks              413
;  :propagations            405
;  :quant-instantiations    189
;  :rlimit-count            202195
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@166@03 $Perm.No) (< $Perm.No $k@166@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      128
;  :arith-assert-lower      423
;  :arith-assert-upper      342
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         42
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2198
;  :mk-clause               857
;  :num-allocs              4469989
;  :num-checks              414
;  :propagations            405
;  :quant-instantiations    189
;  :rlimit-count            202245)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@153@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      128
;  :arith-assert-lower      423
;  :arith-assert-upper      342
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         42
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2198
;  :mk-clause               857
;  :num-allocs              4469989
;  :num-checks              415
;  :propagations            405
;  :quant-instantiations    189
;  :rlimit-count            202256
;  :time                    0.00)
(assert (< $k@166@03 $k@153@03))
(assert (<= $Perm.No (- $k@153@03 $k@166@03)))
(assert (<= (- $k@153@03 $k@166@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@153@03 $k@166@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
      $Ref.null))))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No $k@149@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      128
;  :arith-assert-lower      425
;  :arith-assert-upper      343
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         42
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2201
;  :mk-clause               857
;  :num-allocs              4469989
;  :num-checks              416
;  :propagations            405
;  :quant-instantiations    189
;  :rlimit-count            202470
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@153@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2664
;  :arith-add-rows          8
;  :arith-assert-diseq      128
;  :arith-assert-lower      425
;  :arith-assert-upper      343
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         42
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2201
;  :mk-clause               857
;  :num-allocs              4469989
;  :num-checks              417
;  :propagations            405
;  :quant-instantiations    189
;  :rlimit-count            202518)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))))
                                            $Snap.unit)))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) globals@85@03))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2708
;  :arith-add-rows          8
;  :arith-assert-diseq      128
;  :arith-assert-lower      425
;  :arith-assert-upper      343
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         42
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2202
;  :mk-clause               857
;  :num-allocs              4469989
;  :num-checks              418
;  :propagations            405
;  :quant-instantiations    189
;  :rlimit-count            203413
;  :time                    0.01)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2708
;  :arith-add-rows          8
;  :arith-assert-diseq      128
;  :arith-assert-lower      425
;  :arith-assert-upper      343
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         42
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 348
;  :datatype-occurs-check   178
;  :datatype-splits         277
;  :decisions               415
;  :del-clause              775
;  :final-checks            90
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2202
;  :mk-clause               857
;  :num-allocs              4469989
;  :num-checks              419
;  :propagations            405
;  :quant-instantiations    189
;  :rlimit-count            203461
;  :time                    0.02)
(declare-const $t@167@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2891
;  :arith-add-rows          9
;  :arith-assert-diseq      131
;  :arith-assert-lower      436
;  :arith-assert-upper      348
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         44
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              809
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2259
;  :mk-clause               881
;  :num-allocs              4666628
;  :num-checks              421
;  :propagations            418
;  :quant-instantiations    194
;  :rlimit-count            204894
;  :time                    0.01)
(assert (= $t@167@03 ($Snap.combine ($Snap.first $t@167@03) ($Snap.second $t@167@03))))
(assert (= ($Snap.first $t@167@03) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@167@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@167@03))
    ($Snap.second ($Snap.second $t@167@03)))))
(assert (= ($Snap.first ($Snap.second $t@167@03)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@167@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@167@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@167@03))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@167@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@168@03 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 49 | 0 <= i@168@03 | live]
; [else-branch: 49 | !(0 <= i@168@03) | live]
(push) ; 11
; [then-branch: 49 | 0 <= i@168@03]
(assert (<= 0 i@168@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 49 | !(0 <= i@168@03)]
(assert (not (<= 0 i@168@03)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 50 | i@168@03 < |First:(Second:(Second:(Second:($t@167@03))))| && 0 <= i@168@03 | live]
; [else-branch: 50 | !(i@168@03 < |First:(Second:(Second:(Second:($t@167@03))))| && 0 <= i@168@03) | live]
(push) ; 11
; [then-branch: 50 | i@168@03 < |First:(Second:(Second:(Second:($t@167@03))))| && 0 <= i@168@03]
(assert (and
  (<
    i@168@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
  (<= 0 i@168@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@168@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2941
;  :arith-add-rows          9
;  :arith-assert-diseq      131
;  :arith-assert-lower      441
;  :arith-assert-upper      351
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         44
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              809
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2285
;  :mk-clause               881
;  :num-allocs              4666628
;  :num-checks              422
;  :propagations            418
;  :quant-instantiations    198
;  :rlimit-count            206198)
; [eval] -1
(push) ; 12
; [then-branch: 51 | First:(Second:(Second:(Second:($t@167@03))))[i@168@03] == -1 | live]
; [else-branch: 51 | First:(Second:(Second:(Second:($t@167@03))))[i@168@03] != -1 | live]
(push) ; 13
; [then-branch: 51 | First:(Second:(Second:(Second:($t@167@03))))[i@168@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
    i@168@03)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 51 | First:(Second:(Second:(Second:($t@167@03))))[i@168@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
      i@168@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@168@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2941
;  :arith-add-rows          9
;  :arith-assert-diseq      131
;  :arith-assert-lower      441
;  :arith-assert-upper      351
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         44
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              809
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2286
;  :mk-clause               881
;  :num-allocs              4666628
;  :num-checks              423
;  :propagations            418
;  :quant-instantiations    198
;  :rlimit-count            206373)
(push) ; 14
; [then-branch: 52 | 0 <= First:(Second:(Second:(Second:($t@167@03))))[i@168@03] | live]
; [else-branch: 52 | !(0 <= First:(Second:(Second:(Second:($t@167@03))))[i@168@03]) | live]
(push) ; 15
; [then-branch: 52 | 0 <= First:(Second:(Second:(Second:($t@167@03))))[i@168@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
    i@168@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@168@03 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2941
;  :arith-add-rows          9
;  :arith-assert-diseq      132
;  :arith-assert-lower      444
;  :arith-assert-upper      351
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         44
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              809
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2289
;  :mk-clause               882
;  :num-allocs              4666628
;  :num-checks              424
;  :propagations            418
;  :quant-instantiations    198
;  :rlimit-count            206496)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 52 | !(0 <= First:(Second:(Second:(Second:($t@167@03))))[i@168@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
      i@168@03))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 50 | !(i@168@03 < |First:(Second:(Second:(Second:($t@167@03))))| && 0 <= i@168@03)]
(assert (not
  (and
    (<
      i@168@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
    (<= 0 i@168@03))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@168@03 Int)) (!
  (implies
    (and
      (<
        i@168@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
      (<= 0 i@168@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
          i@168@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
            i@168@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
            i@168@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
    i@168@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))
(declare-const $k@169@03 $Perm)
(assert ($Perm.isReadVar $k@169@03 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@169@03 $Perm.No) (< $Perm.No $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2946
;  :arith-add-rows          9
;  :arith-assert-diseq      133
;  :arith-assert-lower      446
;  :arith-assert-upper      352
;  :arith-bound-prop        12
;  :arith-conflicts         15
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         44
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2295
;  :mk-clause               884
;  :num-allocs              4666628
;  :num-checks              425
;  :propagations            419
;  :quant-instantiations    198
;  :rlimit-count            207265)
(declare-const $t@170@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@149@03 $k@162@03))
    (=
      $t@170@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))
  (implies
    (< $Perm.No $k@169@03)
    (=
      $t@170@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))
(assert (<= $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03)))
(assert (<= (+ (- $k@149@03 $k@162@03) $k@169@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2956
;  :arith-add-rows          10
;  :arith-assert-diseq      133
;  :arith-assert-lower      447
;  :arith-assert-upper      354
;  :arith-bound-prop        12
;  :arith-conflicts         16
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         45
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2303
;  :mk-clause               884
;  :num-allocs              4666628
;  :num-checks              426
;  :propagations            419
;  :quant-instantiations    199
;  :rlimit-count            207973
;  :time                    0.00)
(assert (not (= $t@170@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2962
;  :arith-add-rows          10
;  :arith-assert-diseq      133
;  :arith-assert-lower      447
;  :arith-assert-upper      355
;  :arith-bound-prop        12
;  :arith-conflicts         17
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         46
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2306
;  :mk-clause               884
;  :num-allocs              4666628
;  :num-checks              427
;  :propagations            419
;  :quant-instantiations    199
;  :rlimit-count            208305
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2967
;  :arith-add-rows          10
;  :arith-assert-diseq      133
;  :arith-assert-lower      447
;  :arith-assert-upper      356
;  :arith-bound-prop        12
;  :arith-conflicts         18
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         47
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2308
;  :mk-clause               884
;  :num-allocs              4666628
;  :num-checks              428
;  :propagations            419
;  :quant-instantiations    199
;  :rlimit-count            208602)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2972
;  :arith-add-rows          10
;  :arith-assert-diseq      133
;  :arith-assert-lower      447
;  :arith-assert-upper      357
;  :arith-bound-prop        12
;  :arith-conflicts         19
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         48
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2310
;  :mk-clause               884
;  :num-allocs              4666628
;  :num-checks              429
;  :propagations            419
;  :quant-instantiations    199
;  :rlimit-count            208909)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))
(declare-const $k@171@03 $Perm)
(assert ($Perm.isReadVar $k@171@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@171@03 $Perm.No) (< $Perm.No $k@171@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2977
;  :arith-add-rows          10
;  :arith-assert-diseq      134
;  :arith-assert-lower      449
;  :arith-assert-upper      358
;  :arith-bound-prop        12
;  :arith-conflicts         19
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         48
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2315
;  :mk-clause               886
;  :num-allocs              4666628
;  :num-checks              430
;  :propagations            420
;  :quant-instantiations    199
;  :rlimit-count            209330)
(declare-const $t@172@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@150@03 $k@163@03))
    (=
      $t@172@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
  (implies
    (< $Perm.No $k@171@03)
    (=
      $t@172@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@150@03 $k@163@03) $k@171@03)))
(assert (<= (+ (- $k@150@03 $k@163@03) $k@171@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@150@03 $k@163@03) $k@171@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@150@03 $k@163@03) $k@171@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2987
;  :arith-add-rows          11
;  :arith-assert-diseq      134
;  :arith-assert-lower      451
;  :arith-assert-upper      359
;  :arith-bound-prop        12
;  :arith-conflicts         20
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         49
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2323
;  :mk-clause               886
;  :num-allocs              4666628
;  :num-checks              431
;  :propagations            420
;  :quant-instantiations    200
;  :rlimit-count            210024
;  :time                    0.00)
(assert (not (= $t@172@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@150@03 $k@163@03) $k@171@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2992
;  :arith-add-rows          11
;  :arith-assert-diseq      134
;  :arith-assert-lower      452
;  :arith-assert-upper      359
;  :arith-bound-prop        12
;  :arith-conflicts         21
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         50
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2325
;  :mk-clause               886
;  :num-allocs              4666628
;  :num-checks              432
;  :propagations            420
;  :quant-instantiations    200
;  :rlimit-count            210387)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))))
(declare-const $k@173@03 $Perm)
(assert ($Perm.isReadVar $k@173@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@173@03 $Perm.No) (< $Perm.No $k@173@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2997
;  :arith-add-rows          11
;  :arith-assert-diseq      135
;  :arith-assert-lower      454
;  :arith-assert-upper      360
;  :arith-bound-prop        12
;  :arith-conflicts         21
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         50
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2330
;  :mk-clause               888
;  :num-allocs              4666628
;  :num-checks              433
;  :propagations            421
;  :quant-instantiations    200
;  :rlimit-count            210838)
(declare-const $t@174@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@151@03 $k@164@03))
    (=
      $t@174@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
  (implies
    (< $Perm.No $k@173@03)
    (=
      $t@174@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@151@03 $k@164@03) $k@173@03)))
(assert (<= (+ (- $k@151@03 $k@164@03) $k@173@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@151@03 $k@164@03) $k@173@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@151@03 $k@164@03) $k@173@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3007
;  :arith-add-rows          12
;  :arith-assert-diseq      135
;  :arith-assert-lower      455
;  :arith-assert-upper      362
;  :arith-bound-prop        12
;  :arith-conflicts         22
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         51
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2338
;  :mk-clause               888
;  :num-allocs              4666628
;  :num-checks              434
;  :propagations            421
;  :quant-instantiations    201
;  :rlimit-count            211706)
(assert (not (= $t@174@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@151@03 $k@164@03) $k@173@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3013
;  :arith-add-rows          12
;  :arith-assert-diseq      135
;  :arith-assert-lower      455
;  :arith-assert-upper      363
;  :arith-bound-prop        12
;  :arith-conflicts         23
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         52
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2341
;  :mk-clause               888
;  :num-allocs              4666628
;  :num-checks              435
;  :propagations            421
;  :quant-instantiations    201
;  :rlimit-count            212118
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))))))
(declare-const $k@175@03 $Perm)
(assert ($Perm.isReadVar $k@175@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@175@03 $Perm.No) (< $Perm.No $k@175@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3018
;  :arith-add-rows          12
;  :arith-assert-diseq      136
;  :arith-assert-lower      457
;  :arith-assert-upper      364
;  :arith-bound-prop        12
;  :arith-conflicts         23
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         52
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2346
;  :mk-clause               890
;  :num-allocs              4666628
;  :num-checks              436
;  :propagations            422
;  :quant-instantiations    201
;  :rlimit-count            212598)
(declare-const $t@176@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@152@03 $k@165@03))
    (=
      $t@176@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@175@03)
    (=
      $t@176@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@152@03 $k@165@03) $k@175@03)))
(assert (<= (+ (- $k@152@03 $k@165@03) $k@175@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@152@03 $k@165@03) $k@175@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@152@03 $k@165@03) $k@175@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3028
;  :arith-add-rows          13
;  :arith-assert-diseq      136
;  :arith-assert-lower      458
;  :arith-assert-upper      366
;  :arith-bound-prop        12
;  :arith-conflicts         24
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         53
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2354
;  :mk-clause               890
;  :num-allocs              4666628
;  :num-checks              437
;  :propagations            422
;  :quant-instantiations    202
;  :rlimit-count            213504)
(assert (not (= $t@176@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3034
;  :arith-add-rows          13
;  :arith-assert-diseq      136
;  :arith-assert-lower      458
;  :arith-assert-upper      367
;  :arith-bound-prop        12
;  :arith-conflicts         25
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         54
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2357
;  :mk-clause               890
;  :num-allocs              4666628
;  :num-checks              438
;  :propagations            422
;  :quant-instantiations    202
;  :rlimit-count            213946
;  :time                    0.00)
(declare-const $k@177@03 $Perm)
(assert ($Perm.isReadVar $k@177@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@177@03 $Perm.No) (< $Perm.No $k@177@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3034
;  :arith-add-rows          13
;  :arith-assert-diseq      137
;  :arith-assert-lower      460
;  :arith-assert-upper      368
;  :arith-bound-prop        12
;  :arith-conflicts         25
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         54
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2361
;  :mk-clause               892
;  :num-allocs              4666628
;  :num-checks              439
;  :propagations            423
;  :quant-instantiations    202
;  :rlimit-count            214145)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  $t@170@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3034
;  :arith-add-rows          13
;  :arith-assert-diseq      137
;  :arith-assert-lower      460
;  :arith-assert-upper      368
;  :arith-bound-prop        12
;  :arith-conflicts         25
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         54
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2361
;  :mk-clause               892
;  :num-allocs              4666628
;  :num-checks              440
;  :propagations            423
;  :quant-instantiations    202
;  :rlimit-count            214156)
(declare-const $t@178@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@153@03 $k@166@03))
    (=
      $t@178@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@177@03)
    (=
      $t@178@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@153@03 $k@166@03) $k@177@03)))
(assert (<= (+ (- $k@153@03 $k@166@03) $k@177@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@153@03 $k@166@03) $k@177@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3042
;  :arith-add-rows          14
;  :arith-assert-diseq      137
;  :arith-assert-lower      461
;  :arith-assert-upper      370
;  :arith-bound-prop        12
;  :arith-conflicts         26
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         55
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2368
;  :mk-clause               892
;  :num-allocs              4666628
;  :num-checks              441
;  :propagations            423
;  :quant-instantiations    203
;  :rlimit-count            214791
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  $t@170@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3042
;  :arith-add-rows          14
;  :arith-assert-diseq      137
;  :arith-assert-lower      461
;  :arith-assert-upper      370
;  :arith-bound-prop        12
;  :arith-conflicts         26
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         55
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2368
;  :mk-clause               892
;  :num-allocs              4666628
;  :num-checks              442
;  :propagations            423
;  :quant-instantiations    203
;  :rlimit-count            214802
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@153@03 $k@166@03) $k@177@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3042
;  :arith-add-rows          14
;  :arith-assert-diseq      137
;  :arith-assert-lower      461
;  :arith-assert-upper      371
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         56
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 384
;  :datatype-occurs-check   209
;  :datatype-splits         311
;  :decisions               453
;  :del-clause              810
;  :final-checks            92
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.67
;  :memory                  4.67
;  :mk-bool-var             2369
;  :mk-clause               892
;  :num-allocs              4666628
;  :num-checks              443
;  :propagations            423
;  :quant-instantiations    203
;  :rlimit-count            214880)
(assert (= $t@178@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@167@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) globals@85@03))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3264
;  :arith-add-rows          14
;  :arith-assert-diseq      141
;  :arith-assert-lower      476
;  :arith-assert-upper      378
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         59
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 427
;  :datatype-occurs-check   238
;  :datatype-splits         352
;  :decisions               498
;  :del-clause              850
;  :final-checks            94
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.88
;  :memory                  4.88
;  :mk-bool-var             2443
;  :mk-clause               922
;  :num-allocs              5072620
;  :num-checks              445
;  :propagations            439
;  :quant-instantiations    209
;  :rlimit-count            216607
;  :time                    0.00)
(declare-const $t@179@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@180@03 $Perm)
(assert ($Perm.isReadVar $k@180@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@180@03 $Perm.No) (< $Perm.No $k@180@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      493
;  :arith-assert-upper      386
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2520
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              447
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218435)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@147@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      493
;  :arith-assert-upper      386
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2520
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              448
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218446)
(assert (< $k@180@03 $k@147@03))
(assert (<= $Perm.No (- $k@147@03 $k@180@03)))
(assert (<= (- $k@147@03 $k@180@03) $Perm.Write))
(assert (implies (< $Perm.No (- $k@147@03 $k@180@03)) (not (= diz@84@03 $Ref.null))))
; [eval] diz.Write_a_m != null
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      495
;  :arith-assert-upper      387
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2523
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              449
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218654
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      495
;  :arith-assert-upper      387
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2523
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              450
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218702)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      495
;  :arith-assert-upper      387
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2523
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              451
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218750)
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      495
;  :arith-assert-upper      387
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2523
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              452
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218798
;  :time                    0.02)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      495
;  :arith-assert-upper      387
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2523
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              453
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218846)
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      495
;  :arith-assert-upper      387
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2523
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              454
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218894)
; [eval] (forall i__40: Int :: { diz.Write_a_m.Main_process_state[i__40] } 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|)
(declare-const i__40@181@03 Int)
(push) ; 9
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__40
(push) ; 10
; [then-branch: 53 | 0 <= i__40@181@03 | live]
; [else-branch: 53 | !(0 <= i__40@181@03) | live]
(push) ; 11
; [then-branch: 53 | 0 <= i__40@181@03]
(assert (<= 0 i__40@181@03))
; [eval] i__40 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      496
;  :arith-assert-upper      387
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2524
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              455
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            218995
;  :time                    0.02)
(pop) ; 11
(push) ; 11
; [else-branch: 53 | !(0 <= i__40@181@03)]
(assert (not (<= 0 i__40@181@03)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 54 | i__40@181@03 < |First:(Second:(Second:(Second:($t@167@03))))| && 0 <= i__40@181@03 | live]
; [else-branch: 54 | !(i__40@181@03 < |First:(Second:(Second:(Second:($t@167@03))))| && 0 <= i__40@181@03) | live]
(push) ; 11
; [then-branch: 54 | i__40@181@03 < |First:(Second:(Second:(Second:($t@167@03))))| && 0 <= i__40@181@03]
(assert (and
  (<
    i__40@181@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
  (<= 0 i__40@181@03)))
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1
; [eval] diz.Write_a_m.Main_process_state[i__40]
(push) ; 12
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      497
;  :arith-assert-upper      388
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2526
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              456
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            219152)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__40@181@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      146
;  :arith-assert-lower      497
;  :arith-assert-upper      388
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2526
;  :mk-clause               954
;  :num-allocs              5481794
;  :num-checks              457
;  :propagations            456
;  :quant-instantiations    215
;  :rlimit-count            219161)
; [eval] -1
(push) ; 12
; [then-branch: 55 | First:(Second:(Second:(Second:($t@167@03))))[i__40@181@03] == -1 | live]
; [else-branch: 55 | First:(Second:(Second:(Second:($t@167@03))))[i__40@181@03] != -1 | live]
(push) ; 13
; [then-branch: 55 | First:(Second:(Second:(Second:($t@167@03))))[i__40@181@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
    i__40@181@03)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 55 | First:(Second:(Second:(Second:($t@167@03))))[i__40@181@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
      i__40@181@03)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40]
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      147
;  :arith-assert-lower      500
;  :arith-assert-upper      389
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2532
;  :mk-clause               958
;  :num-allocs              5481794
;  :num-checks              458
;  :propagations            458
;  :quant-instantiations    216
;  :rlimit-count            219432)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__40@181@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      147
;  :arith-assert-lower      500
;  :arith-assert-upper      389
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2532
;  :mk-clause               958
;  :num-allocs              5481794
;  :num-checks              459
;  :propagations            458
;  :quant-instantiations    216
;  :rlimit-count            219441)
(push) ; 14
; [then-branch: 56 | 0 <= First:(Second:(Second:(Second:($t@167@03))))[i__40@181@03] | live]
; [else-branch: 56 | !(0 <= First:(Second:(Second:(Second:($t@167@03))))[i__40@181@03]) | live]
(push) ; 15
; [then-branch: 56 | 0 <= First:(Second:(Second:(Second:($t@167@03))))[i__40@181@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
    i__40@181@03)))
; [eval] diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      147
;  :arith-assert-lower      500
;  :arith-assert-upper      389
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2532
;  :mk-clause               958
;  :num-allocs              5481794
;  :num-checks              460
;  :propagations            458
;  :quant-instantiations    216
;  :rlimit-count            219594
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__40@181@03 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      147
;  :arith-assert-lower      500
;  :arith-assert-upper      389
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2532
;  :mk-clause               958
;  :num-allocs              5481794
;  :num-checks              461
;  :propagations            458
;  :quant-instantiations    216
;  :rlimit-count            219603)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      147
;  :arith-assert-lower      500
;  :arith-assert-upper      389
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              880
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2532
;  :mk-clause               958
;  :num-allocs              5481794
;  :num-checks              462
;  :propagations            458
;  :quant-instantiations    216
;  :rlimit-count            219651
;  :time                    0.01)
(pop) ; 15
(push) ; 15
; [else-branch: 56 | !(0 <= First:(Second:(Second:(Second:($t@167@03))))[i__40@181@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
      i__40@181@03))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 54 | !(i__40@181@03 < |First:(Second:(Second:(Second:($t@167@03))))| && 0 <= i__40@181@03)]
(assert (not
  (and
    (<
      i__40@181@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
    (<= 0 i__40@181@03))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__40@181@03 Int)) (!
  (implies
    (and
      (<
        i__40@181@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
      (<= 0 i__40@181@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
          i__40@181@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
            i__40@181@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
            i__40@181@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
    i__40@181@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      149
;  :arith-assert-lower      501
;  :arith-assert-upper      390
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              898
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2540
;  :mk-clause               972
;  :num-allocs              5481794
;  :num-checks              463
;  :propagations            460
;  :quant-instantiations    217
;  :rlimit-count            220097)
(assert (forall ((i__40@181@03 Int)) (!
  (implies
    (and
      (<
        i__40@181@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))
      (<= 0 i__40@181@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
          i__40@181@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
            i__40@181@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
            i__40@181@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@03)))))
    i__40@181@03))
  :qid |prog.l<no position>|)))
(declare-const $k@182@03 $Perm)
(assert ($Perm.isReadVar $k@182@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      150
;  :arith-assert-lower      503
;  :arith-assert-upper      391
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              898
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2545
;  :mk-clause               974
;  :num-allocs              5481794
;  :num-checks              464
;  :propagations            461
;  :quant-instantiations    217
;  :rlimit-count            220656)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@182@03 $Perm.No) (< $Perm.No $k@182@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          14
;  :arith-assert-diseq      150
;  :arith-assert-lower      503
;  :arith-assert-upper      391
;  :arith-bound-prop        12
;  :arith-conflicts         27
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         62
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              898
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2545
;  :mk-clause               974
;  :num-allocs              5481794
;  :num-checks              465
;  :propagations            461
;  :quant-instantiations    217
;  :rlimit-count            220706)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@149@03 $k@162@03) $k@169@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          14
;  :arith-assert-diseq      150
;  :arith-assert-lower      503
;  :arith-assert-upper      392
;  :arith-bound-prop        12
;  :arith-conflicts         28
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         62
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2547
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              466
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            220794)
(assert (< $k@182@03 (+ (- $k@149@03 $k@162@03) $k@169@03)))
(assert (<= $Perm.No (- (+ (- $k@149@03 $k@162@03) $k@169@03) $k@182@03)))
(assert (<= (- (+ (- $k@149@03 $k@162@03) $k@169@03) $k@182@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@149@03 $k@162@03) $k@169@03) $k@182@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      150
;  :arith-assert-lower      505
;  :arith-assert-upper      393
;  :arith-bound-prop        12
;  :arith-conflicts         28
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         62
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2550
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              467
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            221029)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      150
;  :arith-assert-lower      505
;  :arith-assert-upper      394
;  :arith-bound-prop        12
;  :arith-conflicts         29
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         63
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2551
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              468
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            221118)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      150
;  :arith-assert-lower      505
;  :arith-assert-upper      394
;  :arith-bound-prop        12
;  :arith-conflicts         29
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         63
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2551
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              469
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            221166
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      150
;  :arith-assert-lower      505
;  :arith-assert-upper      395
;  :arith-bound-prop        12
;  :arith-conflicts         30
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         64
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2552
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              470
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            221255)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      150
;  :arith-assert-lower      505
;  :arith-assert-upper      395
;  :arith-bound-prop        12
;  :arith-conflicts         30
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         64
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2552
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              471
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            221303)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      150
;  :arith-assert-lower      505
;  :arith-assert-upper      396
;  :arith-bound-prop        12
;  :arith-conflicts         31
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         65
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2553
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              472
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            221392
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      150
;  :arith-assert-lower      505
;  :arith-assert-upper      396
;  :arith-bound-prop        12
;  :arith-conflicts         31
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         65
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2553
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              473
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            221440)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      150
;  :arith-assert-lower      505
;  :arith-assert-upper      397
;  :arith-bound-prop        12
;  :arith-conflicts         32
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         66
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2554
;  :mk-clause               976
;  :num-allocs              5481794
;  :num-checks              474
;  :propagations            462
;  :quant-instantiations    217
;  :rlimit-count            221529)
(declare-const $k@183@03 $Perm)
(assert ($Perm.isReadVar $k@183@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      151
;  :arith-assert-lower      507
;  :arith-assert-upper      398
;  :arith-bound-prop        12
;  :arith-conflicts         32
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         66
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2558
;  :mk-clause               978
;  :num-allocs              5481794
;  :num-checks              475
;  :propagations            463
;  :quant-instantiations    217
;  :rlimit-count            221725)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@183@03 $Perm.No) (< $Perm.No $k@183@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3488
;  :arith-add-rows          15
;  :arith-assert-diseq      151
;  :arith-assert-lower      507
;  :arith-assert-upper      398
;  :arith-bound-prop        12
;  :arith-conflicts         32
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         66
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              900
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2558
;  :mk-clause               978
;  :num-allocs              5481794
;  :num-checks              476
;  :propagations            463
;  :quant-instantiations    217
;  :rlimit-count            221775)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@150@03 $k@163@03) $k@171@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3489
;  :arith-add-rows          15
;  :arith-assert-diseq      151
;  :arith-assert-lower      508
;  :arith-assert-upper      398
;  :arith-bound-prop        12
;  :arith-conflicts         33
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         66
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              902
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2560
;  :mk-clause               980
;  :num-allocs              5481794
;  :num-checks              477
;  :propagations            464
;  :quant-instantiations    217
;  :rlimit-count            221871)
(assert (< $k@183@03 (+ (- $k@150@03 $k@163@03) $k@171@03)))
(assert (<= $Perm.No (- (+ (- $k@150@03 $k@163@03) $k@171@03) $k@183@03)))
(assert (<= (- (+ (- $k@150@03 $k@163@03) $k@171@03) $k@183@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@150@03 $k@163@03) $k@171@03) $k@183@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3489
;  :arith-add-rows          16
;  :arith-assert-diseq      151
;  :arith-assert-lower      509
;  :arith-assert-upper      400
;  :arith-bound-prop        12
;  :arith-conflicts         33
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         66
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              902
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2563
;  :mk-clause               980
;  :num-allocs              5481794
;  :num-checks              478
;  :propagations            464
;  :quant-instantiations    217
;  :rlimit-count            222110
;  :time                    0.02)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@150@03 $k@163@03) $k@171@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3489
;  :arith-add-rows          16
;  :arith-assert-diseq      151
;  :arith-assert-lower      510
;  :arith-assert-upper      400
;  :arith-bound-prop        12
;  :arith-conflicts         34
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         67
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              902
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2564
;  :mk-clause               980
;  :num-allocs              5481794
;  :num-checks              479
;  :propagations            464
;  :quant-instantiations    217
;  :rlimit-count            222207)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3489
;  :arith-add-rows          16
;  :arith-assert-diseq      151
;  :arith-assert-lower      510
;  :arith-assert-upper      400
;  :arith-bound-prop        12
;  :arith-conflicts         34
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         67
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              902
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2564
;  :mk-clause               980
;  :num-allocs              5481794
;  :num-checks              480
;  :propagations            464
;  :quant-instantiations    217
;  :rlimit-count            222255
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@150@03 $k@163@03) $k@171@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3489
;  :arith-add-rows          16
;  :arith-assert-diseq      151
;  :arith-assert-lower      511
;  :arith-assert-upper      400
;  :arith-bound-prop        12
;  :arith-conflicts         35
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         68
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              902
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2565
;  :mk-clause               980
;  :num-allocs              5481794
;  :num-checks              481
;  :propagations            464
;  :quant-instantiations    217
;  :rlimit-count            222352)
(declare-const $k@184@03 $Perm)
(assert ($Perm.isReadVar $k@184@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3489
;  :arith-add-rows          16
;  :arith-assert-diseq      152
;  :arith-assert-lower      513
;  :arith-assert-upper      401
;  :arith-bound-prop        12
;  :arith-conflicts         35
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         68
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              902
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2569
;  :mk-clause               982
;  :num-allocs              5481794
;  :num-checks              482
;  :propagations            465
;  :quant-instantiations    217
;  :rlimit-count            222548
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@184@03 $Perm.No) (< $Perm.No $k@184@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3489
;  :arith-add-rows          16
;  :arith-assert-diseq      152
;  :arith-assert-lower      513
;  :arith-assert-upper      401
;  :arith-bound-prop        12
;  :arith-conflicts         35
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         68
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              902
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2569
;  :mk-clause               982
;  :num-allocs              5481794
;  :num-checks              483
;  :propagations            465
;  :quant-instantiations    217
;  :rlimit-count            222598)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@151@03 $k@164@03) $k@173@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3490
;  :arith-add-rows          16
;  :arith-assert-diseq      152
;  :arith-assert-lower      513
;  :arith-assert-upper      402
;  :arith-bound-prop        12
;  :arith-conflicts         36
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         68
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              904
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2571
;  :mk-clause               984
;  :num-allocs              5481794
;  :num-checks              484
;  :propagations            466
;  :quant-instantiations    217
;  :rlimit-count            222686
;  :time                    0.00)
(assert (< $k@184@03 (+ (- $k@151@03 $k@164@03) $k@173@03)))
(assert (<= $Perm.No (- (+ (- $k@151@03 $k@164@03) $k@173@03) $k@184@03)))
(assert (<= (- (+ (- $k@151@03 $k@164@03) $k@173@03) $k@184@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@151@03 $k@164@03) $k@173@03) $k@184@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3490
;  :arith-add-rows          17
;  :arith-assert-diseq      152
;  :arith-assert-lower      515
;  :arith-assert-upper      403
;  :arith-bound-prop        12
;  :arith-conflicts         36
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         68
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              904
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2574
;  :mk-clause               984
;  :num-allocs              5481794
;  :num-checks              485
;  :propagations            466
;  :quant-instantiations    217
;  :rlimit-count            222927)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@151@03 $k@164@03) $k@173@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3490
;  :arith-add-rows          17
;  :arith-assert-diseq      152
;  :arith-assert-lower      515
;  :arith-assert-upper      404
;  :arith-bound-prop        12
;  :arith-conflicts         37
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         69
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              904
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2575
;  :mk-clause               984
;  :num-allocs              5481794
;  :num-checks              486
;  :propagations            466
;  :quant-instantiations    217
;  :rlimit-count            223016)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3490
;  :arith-add-rows          17
;  :arith-assert-diseq      152
;  :arith-assert-lower      515
;  :arith-assert-upper      404
;  :arith-bound-prop        12
;  :arith-conflicts         37
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         69
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              904
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2575
;  :mk-clause               984
;  :num-allocs              5481794
;  :num-checks              487
;  :propagations            466
;  :quant-instantiations    217
;  :rlimit-count            223064)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@151@03 $k@164@03) $k@173@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3490
;  :arith-add-rows          17
;  :arith-assert-diseq      152
;  :arith-assert-lower      515
;  :arith-assert-upper      405
;  :arith-bound-prop        12
;  :arith-conflicts         38
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         70
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              904
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2576
;  :mk-clause               984
;  :num-allocs              5481794
;  :num-checks              488
;  :propagations            466
;  :quant-instantiations    217
;  :rlimit-count            223153
;  :time                    0.00)
(declare-const $k@185@03 $Perm)
(assert ($Perm.isReadVar $k@185@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3490
;  :arith-add-rows          17
;  :arith-assert-diseq      153
;  :arith-assert-lower      517
;  :arith-assert-upper      406
;  :arith-bound-prop        12
;  :arith-conflicts         38
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         70
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              904
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2580
;  :mk-clause               986
;  :num-allocs              5481794
;  :num-checks              489
;  :propagations            467
;  :quant-instantiations    217
;  :rlimit-count            223349)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@185@03 $Perm.No) (< $Perm.No $k@185@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3490
;  :arith-add-rows          17
;  :arith-assert-diseq      153
;  :arith-assert-lower      517
;  :arith-assert-upper      406
;  :arith-bound-prop        12
;  :arith-conflicts         38
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         70
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              904
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2580
;  :mk-clause               986
;  :num-allocs              5481794
;  :num-checks              490
;  :propagations            467
;  :quant-instantiations    217
;  :rlimit-count            223399)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@152@03 $k@165@03) $k@175@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3491
;  :arith-add-rows          17
;  :arith-assert-diseq      153
;  :arith-assert-lower      517
;  :arith-assert-upper      407
;  :arith-bound-prop        12
;  :arith-conflicts         39
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         70
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              906
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2582
;  :mk-clause               988
;  :num-allocs              5481794
;  :num-checks              491
;  :propagations            468
;  :quant-instantiations    217
;  :rlimit-count            223479
;  :time                    0.00)
(assert (< $k@185@03 (+ (- $k@152@03 $k@165@03) $k@175@03)))
(assert (<= $Perm.No (- (+ (- $k@152@03 $k@165@03) $k@175@03) $k@185@03)))
(assert (<= (- (+ (- $k@152@03 $k@165@03) $k@175@03) $k@185@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@152@03 $k@165@03) $k@175@03) $k@185@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3491
;  :arith-add-rows          19
;  :arith-assert-diseq      153
;  :arith-assert-lower      519
;  :arith-assert-upper      408
;  :arith-bound-prop        12
;  :arith-conflicts         39
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         70
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              906
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2585
;  :mk-clause               988
;  :num-allocs              5481794
;  :num-checks              492
;  :propagations            468
;  :quant-instantiations    217
;  :rlimit-count            223715
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@152@03 $k@165@03) $k@175@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3491
;  :arith-add-rows          19
;  :arith-assert-diseq      153
;  :arith-assert-lower      519
;  :arith-assert-upper      409
;  :arith-bound-prop        12
;  :arith-conflicts         40
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         71
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              906
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2586
;  :mk-clause               988
;  :num-allocs              5481794
;  :num-checks              493
;  :propagations            468
;  :quant-instantiations    217
;  :rlimit-count            223796
;  :time                    0.00)
(declare-const $k@186@03 $Perm)
(assert ($Perm.isReadVar $k@186@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3491
;  :arith-add-rows          19
;  :arith-assert-diseq      154
;  :arith-assert-lower      521
;  :arith-assert-upper      410
;  :arith-bound-prop        12
;  :arith-conflicts         40
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         71
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              906
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2590
;  :mk-clause               990
;  :num-allocs              5481794
;  :num-checks              494
;  :propagations            469
;  :quant-instantiations    217
;  :rlimit-count            223993
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3491
;  :arith-add-rows          19
;  :arith-assert-diseq      154
;  :arith-assert-lower      521
;  :arith-assert-upper      411
;  :arith-bound-prop        12
;  :arith-conflicts         41
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         72
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              906
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2591
;  :mk-clause               990
;  :num-allocs              5481794
;  :num-checks              495
;  :propagations            469
;  :quant-instantiations    217
;  :rlimit-count            224082
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@186@03 $Perm.No) (< $Perm.No $k@186@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3491
;  :arith-add-rows          19
;  :arith-assert-diseq      154
;  :arith-assert-lower      521
;  :arith-assert-upper      411
;  :arith-bound-prop        12
;  :arith-conflicts         41
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         72
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              906
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2591
;  :mk-clause               990
;  :num-allocs              5481794
;  :num-checks              496
;  :propagations            469
;  :quant-instantiations    217
;  :rlimit-count            224132)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  $t@170@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3491
;  :arith-add-rows          19
;  :arith-assert-diseq      154
;  :arith-assert-lower      521
;  :arith-assert-upper      411
;  :arith-bound-prop        12
;  :arith-conflicts         41
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         72
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              906
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2591
;  :mk-clause               990
;  :num-allocs              5481794
;  :num-checks              497
;  :propagations            469
;  :quant-instantiations    217
;  :rlimit-count            224143
;  :time                    0.00)
(push) ; 9
(assert (not (not (= (+ (- $k@153@03 $k@166@03) $k@177@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          19
;  :arith-assert-diseq      154
;  :arith-assert-lower      521
;  :arith-assert-upper      412
;  :arith-bound-prop        12
;  :arith-conflicts         42
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2593
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              498
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224221
;  :time                    0.00)
(assert (< $k@186@03 (+ (- $k@153@03 $k@166@03) $k@177@03)))
(assert (<= $Perm.No (- (+ (- $k@153@03 $k@166@03) $k@177@03) $k@186@03)))
(assert (<= (- (+ (- $k@153@03 $k@166@03) $k@177@03) $k@186@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@153@03 $k@166@03) $k@177@03) $k@186@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          20
;  :arith-assert-diseq      154
;  :arith-assert-lower      523
;  :arith-assert-upper      413
;  :arith-bound-prop        12
;  :arith-conflicts         42
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2596
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              499
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224456
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@149@03 $k@162@03) $k@169@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          20
;  :arith-assert-diseq      154
;  :arith-assert-lower      523
;  :arith-assert-upper      414
;  :arith-bound-prop        12
;  :arith-conflicts         43
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         73
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2597
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              500
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224545
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  $t@170@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          20
;  :arith-assert-diseq      154
;  :arith-assert-lower      523
;  :arith-assert-upper      414
;  :arith-bound-prop        12
;  :arith-conflicts         43
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         73
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2597
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              501
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224556
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@153@03 $k@166@03) $k@177@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          20
;  :arith-assert-diseq      154
;  :arith-assert-lower      523
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         44
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         74
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2598
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              502
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224634
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          20
;  :arith-assert-diseq      154
;  :arith-assert-lower      523
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         44
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         74
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2598
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              503
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224682)
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 9
(assert (not (< $Perm.No $k@147@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          20
;  :arith-assert-diseq      154
;  :arith-assert-lower      523
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         44
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         74
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2598
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              504
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224730
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@150@03 $k@163@03) $k@171@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          20
;  :arith-assert-diseq      154
;  :arith-assert-lower      524
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         45
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         75
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2599
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              505
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224827
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (= $t@172@03 diz@84@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3492
;  :arith-add-rows          20
;  :arith-assert-diseq      154
;  :arith-assert-lower      524
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         45
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         75
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   267
;  :datatype-splits         393
;  :decisions               543
;  :del-clause              908
;  :final-checks            96
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.89
;  :mk-bool-var             2599
;  :mk-clause               992
;  :num-allocs              5481794
;  :num-checks              506
;  :propagations            470
;  :quant-instantiations    217
;  :rlimit-count            224838)
(assert (= $t@172@03 diz@84@03))
(pop) ; 8
(push) ; 8
; [else-branch: 44 | !(First:(Second:(Second:(Second:($t@146@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@146@03))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
          0)
        (- 0 2))))))
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3694
;  :arith-add-rows          23
;  :arith-assert-diseq      154
;  :arith-assert-lower      524
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         45
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         75
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 520
;  :datatype-occurs-check   281
;  :datatype-splits         429
;  :decisions               593
;  :del-clause              922
;  :final-checks            99
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2639
;  :mk-clause               993
;  :num-allocs              5694400
;  :num-checks              507
;  :propagations            473
;  :quant-instantiations    217
;  :rlimit-count            226410
;  :time                    0.01)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3862
;  :arith-add-rows          23
;  :arith-assert-diseq      154
;  :arith-assert-lower      524
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         45
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         75
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   295
;  :datatype-splits         465
;  :decisions               643
;  :del-clause              923
;  :final-checks            102
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2679
;  :mk-clause               994
;  :num-allocs              5694400
;  :num-checks              508
;  :propagations            476
;  :quant-instantiations    217
;  :rlimit-count            227744
;  :time                    0.01)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)))))
(check-sat)
; unknown
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4030
;  :arith-add-rows          23
;  :arith-assert-diseq      154
;  :arith-assert-lower      524
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         45
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         75
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 620
;  :datatype-occurs-check   309
;  :datatype-splits         501
;  :decisions               693
;  :del-clause              924
;  :final-checks            105
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2719
;  :mk-clause               995
;  :num-allocs              5694400
;  :num-checks              509
;  :propagations            479
;  :quant-instantiations    217
;  :rlimit-count            228564
;  :time                    0.04)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4198
;  :arith-add-rows          23
;  :arith-assert-diseq      154
;  :arith-assert-lower      524
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         45
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         75
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 670
;  :datatype-occurs-check   323
;  :datatype-splits         537
;  :decisions               743
;  :del-clause              925
;  :final-checks            108
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2759
;  :mk-clause               996
;  :num-allocs              5694400
;  :num-checks              510
;  :propagations            482
;  :quant-instantiations    217
;  :rlimit-count            229898
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4366
;  :arith-add-rows          23
;  :arith-assert-diseq      154
;  :arith-assert-lower      524
;  :arith-assert-upper      415
;  :arith-bound-prop        12
;  :arith-conflicts         45
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         75
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 720
;  :datatype-occurs-check   337
;  :datatype-splits         573
;  :decisions               793
;  :del-clause              926
;  :final-checks            111
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2799
;  :mk-clause               997
;  :num-allocs              5694400
;  :num-checks              511
;  :propagations            485
;  :quant-instantiations    217
;  :rlimit-count            231232
;  :time                    0.01)
(declare-const $t@187@03 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@147@03)
    (= $t@187@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))))
  (implies
    (< $Perm.No (- $k@122@03 $k@154@03))
    (= $t@187@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))))
(assert (<= $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03))))
(assert (<= (+ $k@147@03 (- $k@122@03 $k@154@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))
  (not (= diz@84@03 $Ref.null))))
; [eval] !(diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2)
; [eval] diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_process_state[0] != -1
; [eval] diz.Write_a_m.Main_process_state[0]
(push) ; 8
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4372
;  :arith-add-rows          24
;  :arith-assert-diseq      154
;  :arith-assert-lower      525
;  :arith-assert-upper      417
;  :arith-bound-prop        12
;  :arith-conflicts         46
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         76
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 720
;  :datatype-occurs-check   337
;  :datatype-splits         573
;  :decisions               793
;  :del-clause              926
;  :final-checks            111
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2804
;  :mk-clause               997
;  :num-allocs              5694400
;  :num-checks              512
;  :propagations            485
;  :quant-instantiations    217
;  :rlimit-count            231574)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4372
;  :arith-add-rows          24
;  :arith-assert-diseq      154
;  :arith-assert-lower      525
;  :arith-assert-upper      417
;  :arith-bound-prop        12
;  :arith-conflicts         46
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         76
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 720
;  :datatype-occurs-check   337
;  :datatype-splits         573
;  :decisions               793
;  :del-clause              926
;  :final-checks            111
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2805
;  :mk-clause               997
;  :num-allocs              5694400
;  :num-checks              513
;  :propagations            485
;  :quant-instantiations    217
;  :rlimit-count            231654)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4372
;  :arith-add-rows          24
;  :arith-assert-diseq      154
;  :arith-assert-lower      525
;  :arith-assert-upper      417
;  :arith-bound-prop        12
;  :arith-conflicts         46
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         76
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 720
;  :datatype-occurs-check   337
;  :datatype-splits         573
;  :decisions               793
;  :del-clause              926
;  :final-checks            111
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2805
;  :mk-clause               997
;  :num-allocs              5694400
;  :num-checks              514
;  :propagations            485
;  :quant-instantiations    217
;  :rlimit-count            231669)
; [eval] -1
(push) ; 8
; [then-branch: 57 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1 | live]
; [else-branch: 57 | First:(Second:(Second:(Second:($t@146@03))))[0] == -1 | live]
(push) ; 9
; [then-branch: 57 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 57 | First:(Second:(Second:(Second:($t@146@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    0)
  (- 0 1)))
; [eval] diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4373
;  :arith-add-rows          24
;  :arith-assert-diseq      154
;  :arith-assert-lower      525
;  :arith-assert-upper      418
;  :arith-bound-prop        12
;  :arith-conflicts         47
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         77
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 720
;  :datatype-occurs-check   337
;  :datatype-splits         573
;  :decisions               793
;  :del-clause              926
;  :final-checks            111
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2807
;  :mk-clause               997
;  :num-allocs              5694400
;  :num-checks              515
;  :propagations            485
;  :quant-instantiations    217
;  :rlimit-count            231892)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4373
;  :arith-add-rows          24
;  :arith-assert-diseq      154
;  :arith-assert-lower      525
;  :arith-assert-upper      418
;  :arith-bound-prop        12
;  :arith-conflicts         47
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         77
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 720
;  :datatype-occurs-check   337
;  :datatype-splits         573
;  :decisions               793
;  :del-clause              926
;  :final-checks            111
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2808
;  :mk-clause               997
;  :num-allocs              5694400
;  :num-checks              516
;  :propagations            485
;  :quant-instantiations    217
;  :rlimit-count            231972
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4373
;  :arith-add-rows          24
;  :arith-assert-diseq      154
;  :arith-assert-lower      525
;  :arith-assert-upper      418
;  :arith-bound-prop        12
;  :arith-conflicts         47
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         77
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 720
;  :datatype-occurs-check   337
;  :datatype-splits         573
;  :decisions               793
;  :del-clause              926
;  :final-checks            111
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2808
;  :mk-clause               997
;  :num-allocs              5694400
;  :num-checks              517
;  :propagations            485
;  :quant-instantiations    217
;  :rlimit-count            231987)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4525
;  :arith-add-rows          24
;  :arith-assert-diseq      154
;  :arith-assert-lower      525
;  :arith-assert-upper      418
;  :arith-bound-prop        12
;  :arith-conflicts         47
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         77
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 758
;  :datatype-occurs-check   349
;  :datatype-splits         608
;  :decisions               831
;  :del-clause              927
;  :final-checks            114
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2849
;  :mk-clause               998
;  :num-allocs              5694400
;  :num-checks              518
;  :propagations            488
;  :quant-instantiations    217
;  :rlimit-count            233320
;  :time                    0.00)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4679
;  :arith-add-rows          25
;  :arith-assert-diseq      157
;  :arith-assert-lower      536
;  :arith-assert-upper      423
;  :arith-bound-prop        12
;  :arith-conflicts         47
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              952
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2907
;  :mk-clause               1023
;  :num-allocs              5694400
;  :num-checks              519
;  :propagations            501
;  :quant-instantiations    221
;  :rlimit-count            234843
;  :time                    0.00)
; [then-branch: 58 | !(First:(Second:(Second:(Second:($t@146@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@146@03))))))[0] != -2) | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@146@03))))))[0] != -2 | live]
(push) ; 8
; [then-branch: 58 | !(First:(Second:(Second:(Second:($t@146@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@146@03))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
          0)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(declare-const $k@188@03 $Perm)
(assert ($Perm.isReadVar $k@188@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@188@03 $Perm.No) (< $Perm.No $k@188@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4681
;  :arith-add-rows          25
;  :arith-assert-diseq      158
;  :arith-assert-lower      538
;  :arith-assert-upper      424
;  :arith-bound-prop        12
;  :arith-conflicts         47
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         79
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              952
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2913
;  :mk-clause               1025
;  :num-allocs              5694400
;  :num-checks              520
;  :propagations            502
;  :quant-instantiations    221
;  :rlimit-count            235239)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ $k@147@03 (- $k@122@03 $k@154@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          25
;  :arith-assert-diseq      158
;  :arith-assert-lower      538
;  :arith-assert-upper      425
;  :arith-bound-prop        12
;  :arith-conflicts         48
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         79
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2915
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              521
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            235319)
(assert (< $k@188@03 (+ $k@147@03 (- $k@122@03 $k@154@03))))
(assert (<= $Perm.No (- (+ $k@147@03 (- $k@122@03 $k@154@03)) $k@188@03)))
(assert (<= (- (+ $k@147@03 (- $k@122@03 $k@154@03)) $k@188@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@147@03 (- $k@122@03 $k@154@03)) $k@188@03))
  (not (= diz@84@03 $Ref.null))))
; [eval] diz.Write_a_m != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      427
;  :arith-bound-prop        12
;  :arith-conflicts         49
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         80
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2919
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              522
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            235588)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= $t@187@03 $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      427
;  :arith-bound-prop        12
;  :arith-conflicts         49
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         80
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2919
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              523
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            235606)
(assert (not (= $t@187@03 $Ref.null)))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      428
;  :arith-bound-prop        12
;  :arith-conflicts         50
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         81
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2920
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              524
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            235707
;  :time                    0.03)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      428
;  :arith-bound-prop        12
;  :arith-conflicts         50
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         81
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2921
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              525
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            235787
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      429
;  :arith-bound-prop        12
;  :arith-conflicts         51
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         82
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2922
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              526
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            235868)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      429
;  :arith-bound-prop        12
;  :arith-conflicts         51
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         82
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2923
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              527
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            235948
;  :time                    0.00)
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      430
;  :arith-bound-prop        12
;  :arith-conflicts         52
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         83
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2924
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              528
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236029
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      430
;  :arith-bound-prop        12
;  :arith-conflicts         52
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         83
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2925
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              529
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236109
;  :time                    0.03)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      431
;  :arith-bound-prop        12
;  :arith-conflicts         53
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         84
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2926
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              530
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236190
;  :time                    0.05)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      431
;  :arith-bound-prop        12
;  :arith-conflicts         53
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         84
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2927
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              531
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236270)
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      432
;  :arith-bound-prop        12
;  :arith-conflicts         54
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         85
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2928
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              532
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236351)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      540
;  :arith-assert-upper      432
;  :arith-bound-prop        12
;  :arith-conflicts         54
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         85
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2929
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              533
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236431
;  :time                    0.01)
; [eval] (forall i__39: Int :: { diz.Write_a_m.Main_process_state[i__39] } 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|)
(declare-const i__39@189@03 Int)
(push) ; 9
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__39
(push) ; 10
; [then-branch: 59 | 0 <= i__39@189@03 | live]
; [else-branch: 59 | !(0 <= i__39@189@03) | live]
(push) ; 11
; [then-branch: 59 | 0 <= i__39@189@03]
(assert (<= 0 i__39@189@03))
; [eval] i__39 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      541
;  :arith-assert-upper      433
;  :arith-bound-prop        12
;  :arith-conflicts         55
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         86
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2931
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              534
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236565
;  :time                    0.01)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      541
;  :arith-assert-upper      433
;  :arith-bound-prop        12
;  :arith-conflicts         55
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         86
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2932
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              535
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236645
;  :time                    0.02)
(pop) ; 11
(push) ; 11
; [else-branch: 59 | !(0 <= i__39@189@03)]
(assert (not (<= 0 i__39@189@03)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 60 | i__39@189@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i__39@189@03 | live]
; [else-branch: 60 | !(i__39@189@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i__39@189@03) | live]
(push) ; 11
; [then-branch: 60 | i__39@189@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i__39@189@03]
(assert (and
  (<
    i__39@189@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
  (<= 0 i__39@189@03)))
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1
; [eval] diz.Write_a_m.Main_process_state[i__39]
(push) ; 12
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      542
;  :arith-assert-upper      435
;  :arith-bound-prop        12
;  :arith-conflicts         56
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         87
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2935
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              536
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236835
;  :time                    0.01)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      542
;  :arith-assert-upper      435
;  :arith-bound-prop        12
;  :arith-conflicts         56
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         87
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2936
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              537
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236915
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__39@189@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      158
;  :arith-assert-lower      542
;  :arith-assert-upper      435
;  :arith-bound-prop        12
;  :arith-conflicts         56
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         87
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2936
;  :mk-clause               1027
;  :num-allocs              5694400
;  :num-checks              538
;  :propagations            503
;  :quant-instantiations    221
;  :rlimit-count            236924)
; [eval] -1
(push) ; 12
; [then-branch: 61 | First:(Second:(Second:(Second:($t@146@03))))[i__39@189@03] == -1 | live]
; [else-branch: 61 | First:(Second:(Second:(Second:($t@146@03))))[i__39@189@03] != -1 | live]
(push) ; 13
; [then-branch: 61 | First:(Second:(Second:(Second:($t@146@03))))[i__39@189@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i__39@189@03)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 61 | First:(Second:(Second:(Second:($t@146@03))))[i__39@189@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      i__39@189@03)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39]
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      159
;  :arith-assert-lower      545
;  :arith-assert-upper      437
;  :arith-bound-prop        12
;  :arith-conflicts         57
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         88
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2943
;  :mk-clause               1031
;  :num-allocs              5694400
;  :num-checks              539
;  :propagations            505
;  :quant-instantiations    222
;  :rlimit-count            237228
;  :time                    0.01)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      159
;  :arith-assert-lower      545
;  :arith-assert-upper      437
;  :arith-bound-prop        12
;  :arith-conflicts         57
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         88
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2944
;  :mk-clause               1031
;  :num-allocs              5694400
;  :num-checks              540
;  :propagations            505
;  :quant-instantiations    222
;  :rlimit-count            237308
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__39@189@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      159
;  :arith-assert-lower      545
;  :arith-assert-upper      437
;  :arith-bound-prop        12
;  :arith-conflicts         57
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         88
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2944
;  :mk-clause               1031
;  :num-allocs              5694400
;  :num-checks              541
;  :propagations            505
;  :quant-instantiations    222
;  :rlimit-count            237317)
(push) ; 14
; [then-branch: 62 | 0 <= First:(Second:(Second:(Second:($t@146@03))))[i__39@189@03] | live]
; [else-branch: 62 | !(0 <= First:(Second:(Second:(Second:($t@146@03))))[i__39@189@03]) | live]
(push) ; 15
; [then-branch: 62 | 0 <= First:(Second:(Second:(Second:($t@146@03))))[i__39@189@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i__39@189@03)))
; [eval] diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      159
;  :arith-assert-lower      545
;  :arith-assert-upper      438
;  :arith-bound-prop        12
;  :arith-conflicts         58
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         89
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2945
;  :mk-clause               1031
;  :num-allocs              5694400
;  :num-checks              542
;  :propagations            505
;  :quant-instantiations    222
;  :rlimit-count            237503
;  :time                    0.01)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      159
;  :arith-assert-lower      545
;  :arith-assert-upper      438
;  :arith-bound-prop        12
;  :arith-conflicts         58
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         89
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2946
;  :mk-clause               1031
;  :num-allocs              5694400
;  :num-checks              543
;  :propagations            505
;  :quant-instantiations    222
;  :rlimit-count            237583
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__39@189@03 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      159
;  :arith-assert-lower      545
;  :arith-assert-upper      438
;  :arith-bound-prop        12
;  :arith-conflicts         58
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         89
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2946
;  :mk-clause               1031
;  :num-allocs              5694400
;  :num-checks              544
;  :propagations            505
;  :quant-instantiations    222
;  :rlimit-count            237592)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 16
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      159
;  :arith-assert-lower      545
;  :arith-assert-upper      439
;  :arith-bound-prop        12
;  :arith-conflicts         59
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         90
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2947
;  :mk-clause               1031
;  :num-allocs              5694400
;  :num-checks              545
;  :propagations            505
;  :quant-instantiations    222
;  :rlimit-count            237673
;  :time                    0.04)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      159
;  :arith-assert-lower      545
;  :arith-assert-upper      439
;  :arith-bound-prop        12
;  :arith-conflicts         59
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         90
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              954
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2948
;  :mk-clause               1031
;  :num-allocs              5694400
;  :num-checks              546
;  :propagations            505
;  :quant-instantiations    222
;  :rlimit-count            237753
;  :time                    0.01)
(pop) ; 15
(push) ; 15
; [else-branch: 62 | !(0 <= First:(Second:(Second:(Second:($t@146@03))))[i__39@189@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
      i__39@189@03))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 60 | !(i__39@189@03 < |First:(Second:(Second:(Second:($t@146@03))))| && 0 <= i__39@189@03)]
(assert (not
  (and
    (<
      i__39@189@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
    (<= 0 i__39@189@03))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__39@189@03 Int)) (!
  (implies
    (and
      (<
        i__39@189@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
      (<= 0 i__39@189@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          i__39@189@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i__39@189@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i__39@189@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i__39@189@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      160
;  :arith-assert-lower      546
;  :arith-assert-upper      440
;  :arith-bound-prop        12
;  :arith-conflicts         59
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         90
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2956
;  :mk-clause               1043
;  :num-allocs              5694400
;  :num-checks              547
;  :propagations            507
;  :quant-instantiations    223
;  :rlimit-count            238199)
(assert (forall ((i__39@189@03 Int)) (!
  (implies
    (and
      (<
        i__39@189@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
      (<= 0 i__39@189@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
          i__39@189@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i__39@189@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
            i__39@189@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
    i__39@189@03))
  :qid |prog.l<no position>|)))
(declare-const $k@190@03 $Perm)
(assert ($Perm.isReadVar $k@190@03 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      161
;  :arith-assert-lower      548
;  :arith-assert-upper      442
;  :arith-bound-prop        12
;  :arith-conflicts         60
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         91
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2962
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              548
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            238791)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@190@03 $Perm.No) (< $Perm.No $k@190@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      161
;  :arith-assert-lower      548
;  :arith-assert-upper      442
;  :arith-bound-prop        12
;  :arith-conflicts         60
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         91
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2962
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              549
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            238841)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      161
;  :arith-assert-lower      548
;  :arith-assert-upper      442
;  :arith-bound-prop        12
;  :arith-conflicts         60
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         91
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2962
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              550
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            238852
;  :time                    0.01)
(push) ; 9
(assert (not (not (= (- $k@124@03 $k@156@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          27
;  :arith-assert-diseq      161
;  :arith-assert-lower      548
;  :arith-assert-upper      442
;  :arith-bound-prop        12
;  :arith-conflicts         60
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         91
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2963
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              551
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            238920
;  :time                    0.00)
(assert (< $k@190@03 (- $k@124@03 $k@156@03)))
(assert (<= $Perm.No (- (- $k@124@03 $k@156@03) $k@190@03)))
(assert (<= (- (- $k@124@03 $k@156@03) $k@190@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@124@03 $k@156@03) $k@190@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      444
;  :arith-bound-prop        12
;  :arith-conflicts         61
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         92
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2967
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              552
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            239213
;  :time                    0.03)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      444
;  :arith-bound-prop        12
;  :arith-conflicts         61
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         92
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2967
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              553
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            239224)
(push) ; 9
(assert (not (< $Perm.No (- $k@124@03 $k@156@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      444
;  :arith-bound-prop        12
;  :arith-conflicts         61
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         92
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2967
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              554
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            239243)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2968
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              555
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            239324)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2968
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              556
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            239335)
(push) ; 9
(assert (not (< $Perm.No (- $k@124@03 $k@156@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4682
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 793
;  :datatype-occurs-check   356
;  :datatype-splits         641
;  :decisions               868
;  :del-clause              970
;  :final-checks            116
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             2968
;  :mk-clause               1045
;  :num-allocs              5694400
;  :num-checks              557
;  :propagations            508
;  :quant-instantiations    223
;  :rlimit-count            239354)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4866
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 844
;  :datatype-occurs-check   368
;  :datatype-splits         678
;  :decisions               917
;  :del-clause              972
;  :final-checks            119
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3014
;  :mk-clause               1047
;  :num-allocs              5694400
;  :num-checks              558
;  :propagations            512
;  :quant-instantiations    223
;  :rlimit-count            240826
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5162
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 919
;  :datatype-occurs-check   392
;  :datatype-splits         748
;  :decisions               992
;  :del-clause              976
;  :final-checks            125
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3086
;  :mk-clause               1048
;  :num-allocs              5694400
;  :num-checks              561
;  :propagations            519
;  :quant-instantiations    223
;  :rlimit-count            242630)
(declare-const $t@191@03 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5334
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3125
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              562
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            244046
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5334
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3126
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              563
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            244126
;  :time                    0.00)
(declare-const $t@192@03 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5334
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3127
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              564
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            244206
;  :time                    0.00)
(declare-const $t@193@03 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5334
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3128
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              565
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            244286)
(declare-const $t@194@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@124@03 $k@156@03) $k@190@03))
    (=
      $t@191@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))
  (implies
    (< $Perm.No $k@149@03)
    (=
      $t@191@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@152@03)
    (=
      $t@192@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@127@03 $k@159@03))
    (=
      $t@192@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@151@03)
    (=
      $t@193@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@126@03 $k@158@03))
    (=
      $t@193@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@150@03)
    (=
      $t@194@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))
  (implies
    (< $Perm.No (- $k@125@03 $k@157@03))
    (=
      $t@194@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5348
;  :arith-add-rows          29
;  :arith-assert-diseq      161
;  :arith-assert-lower      550
;  :arith-assert-upper      445
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3135
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              566
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            245355)
(declare-const $t@195@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@128@03 $k@160@03))
    (=
      $t@195@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@153@03)
    (=
      $t@195@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@150@03 (- $k@125@03 $k@157@03))))
(assert (<= (+ $k@150@03 (- $k@125@03 $k@157@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@150@03 (- $k@125@03 $k@157@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (<= $Perm.No (+ $k@151@03 (- $k@126@03 $k@158@03))))
(assert (<= (+ $k@151@03 (- $k@126@03 $k@158@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@151@03 (- $k@126@03 $k@158@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (<= $Perm.No (+ $k@152@03 (- $k@127@03 $k@159@03))))
(assert (<= (+ $k@152@03 (- $k@127@03 $k@159@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@152@03 (- $k@127@03 $k@159@03)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@124@03 $k@156@03) $k@190@03) $k@149@03)))
(assert (<= (+ (- (- $k@124@03 $k@156@03) $k@190@03) $k@149@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@124@03 $k@156@03) $k@190@03) $k@149@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@128@03 $k@160@03) $k@153@03)))
(assert (<= (+ (- $k@128@03 $k@160@03) $k@153@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@128@03 $k@160@03) $k@153@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
      $Ref.null))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      450
;  :arith-bound-prop        12
;  :arith-conflicts         62
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         93
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3147
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              567
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246241)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      451
;  :arith-bound-prop        12
;  :arith-conflicts         63
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         94
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3148
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              568
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246322)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      451
;  :arith-bound-prop        12
;  :arith-conflicts         63
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         94
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3148
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              569
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246333)
(push) ; 9
(assert (not (< $Perm.No (- $k@124@03 $k@156@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      451
;  :arith-bound-prop        12
;  :arith-conflicts         63
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         94
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3148
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              570
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246352)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      451
;  :arith-bound-prop        12
;  :arith-conflicts         63
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         94
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3149
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              571
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246512)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      452
;  :arith-bound-prop        12
;  :arith-conflicts         64
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         95
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3150
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              572
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246593
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      452
;  :arith-bound-prop        12
;  :arith-conflicts         64
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         95
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3150
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              573
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246604
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (- $k@124@03 $k@156@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      452
;  :arith-bound-prop        12
;  :arith-conflicts         64
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         95
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3150
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              574
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246623
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      161
;  :arith-assert-lower      555
;  :arith-assert-upper      452
;  :arith-bound-prop        12
;  :arith-conflicts         64
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         95
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3151
;  :mk-clause               1049
;  :num-allocs              5694400
;  :num-checks              575
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            246783)
(declare-const $k@196@03 $Perm)
(assert ($Perm.isReadVar $k@196@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      162
;  :arith-assert-lower      557
;  :arith-assert-upper      454
;  :arith-bound-prop        12
;  :arith-conflicts         65
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         96
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3156
;  :mk-clause               1051
;  :num-allocs              5694400
;  :num-checks              576
;  :propagations            524
;  :quant-instantiations    223
;  :rlimit-count            247013)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@196@03 $Perm.No) (< $Perm.No $k@196@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      162
;  :arith-assert-lower      557
;  :arith-assert-upper      454
;  :arith-bound-prop        12
;  :arith-conflicts         65
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         96
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3156
;  :mk-clause               1051
;  :num-allocs              5694400
;  :num-checks              577
;  :propagations            524
;  :quant-instantiations    223
;  :rlimit-count            247063)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5349
;  :arith-add-rows          32
;  :arith-assert-diseq      162
;  :arith-assert-lower      557
;  :arith-assert-upper      454
;  :arith-bound-prop        12
;  :arith-conflicts         65
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         96
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              977
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3157
;  :mk-clause               1051
;  :num-allocs              5694400
;  :num-checks              578
;  :propagations            524
;  :quant-instantiations    223
;  :rlimit-count            247143)
(push) ; 9
(assert (not (not (= (+ $k@150@03 (- $k@125@03 $k@157@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          33
;  :arith-assert-diseq      162
;  :arith-assert-lower      557
;  :arith-assert-upper      455
;  :arith-bound-prop        12
;  :arith-conflicts         66
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         96
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3159
;  :mk-clause               1053
;  :num-allocs              5694400
;  :num-checks              579
;  :propagations            525
;  :quant-instantiations    223
;  :rlimit-count            247252
;  :time                    0.00)
(assert (< $k@196@03 (+ $k@150@03 (- $k@125@03 $k@157@03))))
(assert (<= $Perm.No (- (+ $k@150@03 (- $k@125@03 $k@157@03)) $k@196@03)))
(assert (<= (- (+ $k@150@03 (- $k@125@03 $k@157@03)) $k@196@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@150@03 (- $k@125@03 $k@157@03)) $k@196@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      162
;  :arith-assert-lower      559
;  :arith-assert-upper      457
;  :arith-bound-prop        12
;  :arith-conflicts         67
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         97
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3163
;  :mk-clause               1053
;  :num-allocs              5694400
;  :num-checks              580
;  :propagations            525
;  :quant-instantiations    223
;  :rlimit-count            247520)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      162
;  :arith-assert-lower      559
;  :arith-assert-upper      457
;  :arith-bound-prop        12
;  :arith-conflicts         67
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         97
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3163
;  :mk-clause               1053
;  :num-allocs              5694400
;  :num-checks              581
;  :propagations            525
;  :quant-instantiations    223
;  :rlimit-count            247531)
(push) ; 9
(assert (not (< $Perm.No (- $k@125@03 $k@157@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      162
;  :arith-assert-lower      559
;  :arith-assert-upper      457
;  :arith-bound-prop        12
;  :arith-conflicts         67
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         97
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3163
;  :mk-clause               1053
;  :num-allocs              5694400
;  :num-checks              582
;  :propagations            525
;  :quant-instantiations    223
;  :rlimit-count            247550
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      162
;  :arith-assert-lower      559
;  :arith-assert-upper      458
;  :arith-bound-prop        12
;  :arith-conflicts         68
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         98
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3164
;  :mk-clause               1053
;  :num-allocs              5694400
;  :num-checks              583
;  :propagations            525
;  :quant-instantiations    223
;  :rlimit-count            247631
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      162
;  :arith-assert-lower      559
;  :arith-assert-upper      458
;  :arith-bound-prop        12
;  :arith-conflicts         68
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         98
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3164
;  :mk-clause               1053
;  :num-allocs              5694400
;  :num-checks              584
;  :propagations            525
;  :quant-instantiations    223
;  :rlimit-count            247642)
(push) ; 9
(assert (not (< $Perm.No (- $k@125@03 $k@157@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      162
;  :arith-assert-lower      559
;  :arith-assert-upper      458
;  :arith-bound-prop        12
;  :arith-conflicts         68
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         98
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3164
;  :mk-clause               1053
;  :num-allocs              5694400
;  :num-checks              585
;  :propagations            525
;  :quant-instantiations    223
;  :rlimit-count            247661)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      162
;  :arith-assert-lower      559
;  :arith-assert-upper      458
;  :arith-bound-prop        12
;  :arith-conflicts         68
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         98
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3164
;  :mk-clause               1053
;  :num-allocs              5694400
;  :num-checks              586
;  :propagations            525
;  :quant-instantiations    223
;  :rlimit-count            247672)
(declare-const $k@197@03 $Perm)
(assert ($Perm.isReadVar $k@197@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      163
;  :arith-assert-lower      561
;  :arith-assert-upper      460
;  :arith-bound-prop        12
;  :arith-conflicts         69
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         99
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3169
;  :mk-clause               1055
;  :num-allocs              5694400
;  :num-checks              587
;  :propagations            526
;  :quant-instantiations    223
;  :rlimit-count            247901)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@197@03 $Perm.No) (< $Perm.No $k@197@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      163
;  :arith-assert-lower      561
;  :arith-assert-upper      460
;  :arith-bound-prop        12
;  :arith-conflicts         69
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         99
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3169
;  :mk-clause               1055
;  :num-allocs              5694400
;  :num-checks              588
;  :propagations            526
;  :quant-instantiations    223
;  :rlimit-count            247951)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5350
;  :arith-add-rows          34
;  :arith-assert-diseq      163
;  :arith-assert-lower      561
;  :arith-assert-upper      460
;  :arith-bound-prop        12
;  :arith-conflicts         69
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         99
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              979
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3170
;  :mk-clause               1055
;  :num-allocs              5694400
;  :num-checks              589
;  :propagations            526
;  :quant-instantiations    223
;  :rlimit-count            248031)
(push) ; 9
(assert (not (not (= (+ $k@151@03 (- $k@126@03 $k@158@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          35
;  :arith-assert-diseq      163
;  :arith-assert-lower      561
;  :arith-assert-upper      461
;  :arith-bound-prop        12
;  :arith-conflicts         70
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         99
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3172
;  :mk-clause               1057
;  :num-allocs              5694400
;  :num-checks              590
;  :propagations            527
;  :quant-instantiations    223
;  :rlimit-count            248140)
(assert (< $k@197@03 (+ $k@151@03 (- $k@126@03 $k@158@03))))
(assert (<= $Perm.No (- (+ $k@151@03 (- $k@126@03 $k@158@03)) $k@197@03)))
(assert (<= (- (+ $k@151@03 (- $k@126@03 $k@158@03)) $k@197@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@151@03 (- $k@126@03 $k@158@03)) $k@197@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      163
;  :arith-assert-lower      563
;  :arith-assert-upper      463
;  :arith-bound-prop        12
;  :arith-conflicts         71
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         100
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3176
;  :mk-clause               1057
;  :num-allocs              5694400
;  :num-checks              591
;  :propagations            527
;  :quant-instantiations    223
;  :rlimit-count            248408)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      163
;  :arith-assert-lower      563
;  :arith-assert-upper      463
;  :arith-bound-prop        12
;  :arith-conflicts         71
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         100
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3176
;  :mk-clause               1057
;  :num-allocs              5694400
;  :num-checks              592
;  :propagations            527
;  :quant-instantiations    223
;  :rlimit-count            248419)
(push) ; 9
(assert (not (< $Perm.No (- $k@126@03 $k@158@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      163
;  :arith-assert-lower      563
;  :arith-assert-upper      463
;  :arith-bound-prop        12
;  :arith-conflicts         71
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         100
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3176
;  :mk-clause               1057
;  :num-allocs              5694400
;  :num-checks              593
;  :propagations            527
;  :quant-instantiations    223
;  :rlimit-count            248438
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      163
;  :arith-assert-lower      563
;  :arith-assert-upper      464
;  :arith-bound-prop        12
;  :arith-conflicts         72
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         101
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3177
;  :mk-clause               1057
;  :num-allocs              5694400
;  :num-checks              594
;  :propagations            527
;  :quant-instantiations    223
;  :rlimit-count            248519)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      163
;  :arith-assert-lower      563
;  :arith-assert-upper      464
;  :arith-bound-prop        12
;  :arith-conflicts         72
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         101
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3177
;  :mk-clause               1057
;  :num-allocs              5694400
;  :num-checks              595
;  :propagations            527
;  :quant-instantiations    223
;  :rlimit-count            248530)
(push) ; 9
(assert (not (< $Perm.No (- $k@126@03 $k@158@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      163
;  :arith-assert-lower      563
;  :arith-assert-upper      464
;  :arith-bound-prop        12
;  :arith-conflicts         72
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         101
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3177
;  :mk-clause               1057
;  :num-allocs              5694400
;  :num-checks              596
;  :propagations            527
;  :quant-instantiations    223
;  :rlimit-count            248549)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      163
;  :arith-assert-lower      563
;  :arith-assert-upper      464
;  :arith-bound-prop        12
;  :arith-conflicts         72
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         101
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3178
;  :mk-clause               1057
;  :num-allocs              5694400
;  :num-checks              597
;  :propagations            527
;  :quant-instantiations    223
;  :rlimit-count            248789)
(declare-const $k@198@03 $Perm)
(assert ($Perm.isReadVar $k@198@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      164
;  :arith-assert-lower      565
;  :arith-assert-upper      466
;  :arith-bound-prop        12
;  :arith-conflicts         73
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         102
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3183
;  :mk-clause               1059
;  :num-allocs              5694400
;  :num-checks              598
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            249019)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@198@03 $Perm.No) (< $Perm.No $k@198@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      164
;  :arith-assert-lower      565
;  :arith-assert-upper      466
;  :arith-bound-prop        12
;  :arith-conflicts         73
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         102
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3183
;  :mk-clause               1059
;  :num-allocs              5694400
;  :num-checks              599
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            249069)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5351
;  :arith-add-rows          36
;  :arith-assert-diseq      164
;  :arith-assert-lower      565
;  :arith-assert-upper      466
;  :arith-bound-prop        12
;  :arith-conflicts         73
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         102
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              981
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3184
;  :mk-clause               1059
;  :num-allocs              5694400
;  :num-checks              600
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            249149)
(push) ; 9
(assert (not (not (= (+ $k@152@03 (- $k@127@03 $k@159@03)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5352
;  :arith-add-rows          36
;  :arith-assert-diseq      164
;  :arith-assert-lower      565
;  :arith-assert-upper      467
;  :arith-bound-prop        12
;  :arith-conflicts         74
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         102
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              983
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3186
;  :mk-clause               1061
;  :num-allocs              5694400
;  :num-checks              601
;  :propagations            529
;  :quant-instantiations    223
;  :rlimit-count            249233)
(assert (< $k@198@03 (+ $k@152@03 (- $k@127@03 $k@159@03))))
(assert (<= $Perm.No (- (+ $k@152@03 (- $k@127@03 $k@159@03)) $k@198@03)))
(assert (<= (- (+ $k@152@03 (- $k@127@03 $k@159@03)) $k@198@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@152@03 (- $k@127@03 $k@159@03)) $k@198@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@03)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5352
;  :arith-add-rows          38
;  :arith-assert-diseq      164
;  :arith-assert-lower      567
;  :arith-assert-upper      469
;  :arith-bound-prop        12
;  :arith-conflicts         75
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         103
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              983
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3190
;  :mk-clause               1061
;  :num-allocs              5694400
;  :num-checks              602
;  :propagations            529
;  :quant-instantiations    223
;  :rlimit-count            249502)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5352
;  :arith-add-rows          38
;  :arith-assert-diseq      164
;  :arith-assert-lower      567
;  :arith-assert-upper      469
;  :arith-bound-prop        12
;  :arith-conflicts         75
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         103
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              983
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3190
;  :mk-clause               1061
;  :num-allocs              5694400
;  :num-checks              603
;  :propagations            529
;  :quant-instantiations    223
;  :rlimit-count            249513)
(push) ; 9
(assert (not (< $Perm.No (- $k@127@03 $k@159@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5352
;  :arith-add-rows          38
;  :arith-assert-diseq      164
;  :arith-assert-lower      567
;  :arith-assert-upper      469
;  :arith-bound-prop        12
;  :arith-conflicts         75
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         103
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              983
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3190
;  :mk-clause               1061
;  :num-allocs              5694400
;  :num-checks              604
;  :propagations            529
;  :quant-instantiations    223
;  :rlimit-count            249532)
(declare-const $k@199@03 $Perm)
(assert ($Perm.isReadVar $k@199@03 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5352
;  :arith-add-rows          38
;  :arith-assert-diseq      165
;  :arith-assert-lower      569
;  :arith-assert-upper      471
;  :arith-bound-prop        12
;  :arith-conflicts         76
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         104
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              983
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3195
;  :mk-clause               1063
;  :num-allocs              5694400
;  :num-checks              605
;  :propagations            530
;  :quant-instantiations    223
;  :rlimit-count            249762)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5352
;  :arith-add-rows          38
;  :arith-assert-diseq      165
;  :arith-assert-lower      569
;  :arith-assert-upper      471
;  :arith-bound-prop        12
;  :arith-conflicts         76
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         104
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              983
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3195
;  :mk-clause               1063
;  :num-allocs              5694400
;  :num-checks              606
;  :propagations            530
;  :quant-instantiations    223
;  :rlimit-count            249773)
(push) ; 9
(assert (not (< $Perm.No (- $k@124@03 $k@156@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5352
;  :arith-add-rows          38
;  :arith-assert-diseq      165
;  :arith-assert-lower      569
;  :arith-assert-upper      471
;  :arith-bound-prop        12
;  :arith-conflicts         76
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         104
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              983
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3195
;  :mk-clause               1063
;  :num-allocs              5694400
;  :num-checks              607
;  :propagations            530
;  :quant-instantiations    223
;  :rlimit-count            249792
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@199@03 $Perm.No) (< $Perm.No $k@199@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5352
;  :arith-add-rows          38
;  :arith-assert-diseq      165
;  :arith-assert-lower      569
;  :arith-assert-upper      471
;  :arith-bound-prop        12
;  :arith-conflicts         76
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         104
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              983
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3195
;  :mk-clause               1063
;  :num-allocs              5694400
;  :num-checks              608
;  :propagations            530
;  :quant-instantiations    223
;  :rlimit-count            249842)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@128@03 $k@160@03) $k@153@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          38
;  :arith-assert-diseq      165
;  :arith-assert-lower      569
;  :arith-assert-upper      472
;  :arith-bound-prop        12
;  :arith-conflicts         77
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         104
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3197
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              609
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            249926)
(assert (< $k@199@03 (+ (- $k@128@03 $k@160@03) $k@153@03)))
(assert (<= $Perm.No (- (+ (- $k@128@03 $k@160@03) $k@153@03) $k@199@03)))
(assert (<= (- (+ (- $k@128@03 $k@160@03) $k@153@03) $k@199@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@128@03 $k@160@03) $k@153@03) $k@199@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      474
;  :arith-bound-prop        12
;  :arith-conflicts         78
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         105
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3201
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              610
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250195
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      474
;  :arith-bound-prop        12
;  :arith-conflicts         78
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         105
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3201
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              611
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250206
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (- $k@124@03 $k@156@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      474
;  :arith-bound-prop        12
;  :arith-conflicts         78
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         105
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3201
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              612
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250225)
(push) ; 9
(assert (not (< $Perm.No (- $k@128@03 $k@160@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      474
;  :arith-bound-prop        12
;  :arith-conflicts         78
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         105
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3201
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              613
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250244)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      475
;  :arith-bound-prop        12
;  :arith-conflicts         79
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         106
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3202
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              614
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250325)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
  $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      475
;  :arith-bound-prop        12
;  :arith-conflicts         79
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         106
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3202
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              615
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250344)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03)))))))))))))))))))))))
  $t@187@03))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@147@03 (- $k@122@03 $k@154@03)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      476
;  :arith-bound-prop        12
;  :arith-conflicts         80
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         107
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3203
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              616
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250443)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03)) $t@187@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      476
;  :arith-bound-prop        12
;  :arith-conflicts         80
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         107
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3203
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              617
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250454)
(push) ; 9
(assert (not (< $Perm.No (- $k@125@03 $k@157@03))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          40
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      476
;  :arith-bound-prop        12
;  :arith-conflicts         80
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         107
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 967
;  :datatype-occurs-check   404
;  :datatype-splits         785
;  :decisions               1039
;  :del-clause              985
;  :final-checks            128
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3203
;  :mk-clause               1065
;  :num-allocs              5694400
;  :num-checks              618
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            250473
;  :time                    0.00)
(pop) ; 8
(push) ; 8
; [else-branch: 58 | First:(Second:(Second:(Second:($t@146@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@146@03))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@03)))))))
        0)
      (- 0 2)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@102@03)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5476
;  :arith-add-rows          45
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      476
;  :arith-bound-prop        12
;  :arith-conflicts         80
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         107
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 1004
;  :datatype-occurs-check   415
;  :datatype-splits         809
;  :decisions               1075
;  :del-clause              1053
;  :final-checks            131
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3231
;  :mk-clause               1066
;  :num-allocs              5694400
;  :num-checks              619
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            251844
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5624
;  :arith-add-rows          45
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      476
;  :arith-bound-prop        12
;  :arith-conflicts         80
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         107
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    228
;  :datatype-constructor-ax 1053
;  :datatype-occurs-check   425
;  :datatype-splits         854
;  :decisions               1123
;  :del-clause              1054
;  :final-checks            134
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3280
;  :mk-clause               1067
;  :num-allocs              5694400
;  :num-checks              620
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            253044
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5772
;  :arith-add-rows          45
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      476
;  :arith-bound-prop        12
;  :arith-conflicts         80
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         107
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1102
;  :datatype-occurs-check   435
;  :datatype-splits         899
;  :decisions               1171
;  :del-clause              1055
;  :final-checks            137
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3329
;  :mk-clause               1068
;  :num-allocs              5694400
;  :num-checks              621
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            254244
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5920
;  :arith-add-rows          45
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      476
;  :arith-bound-prop        12
;  :arith-conflicts         80
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         107
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1151
;  :datatype-occurs-check   445
;  :datatype-splits         944
;  :decisions               1219
;  :del-clause              1056
;  :final-checks            140
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3378
;  :mk-clause               1069
;  :num-allocs              5694400
;  :num-checks              622
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            255444
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6068
;  :arith-add-rows          45
;  :arith-assert-diseq      165
;  :arith-assert-lower      571
;  :arith-assert-upper      476
;  :arith-bound-prop        12
;  :arith-conflicts         80
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         107
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    231
;  :datatype-constructor-ax 1200
;  :datatype-occurs-check   455
;  :datatype-splits         989
;  :decisions               1267
;  :del-clause              1057
;  :final-checks            143
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.89
;  :memory                  4.79
;  :mk-bool-var             3427
;  :mk-clause               1070
;  :num-allocs              5694400
;  :num-checks              623
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            256644
;  :time                    0.00)
(declare-const $t@200@03 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@122@03)
    (= $t@200@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@03))))
  (implies
    (< $Perm.No (- $k@87@03 $k@129@03))
    (=
      $t@200@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@86@03)))))))
(assert (<= $Perm.No (+ $k@122@03 (- $k@87@03 $k@129@03))))
(assert (<= (+ $k@122@03 (- $k@87@03 $k@129@03)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@122@03 (- $k@87@03 $k@129@03)))
  (not (= diz@84@03 $Ref.null))))
; [eval] !true
; [then-branch: 63 | False | dead]
; [else-branch: 63 | True | live]
(push) ; 5
; [else-branch: 63 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
